#include "PLKJ_Defines.var"
//------------------------------------------------------------------------------------------------------------------
//	Return the "body" zde position, the weak point
//------------------------------------------------------------------------------------------------------------------
procedure_ultra object PLKJ_GetZde()
{
	return B_ZdeBody
}

//------------------------------------------------------------------------------------------------------------------
//	Add an enemy, only the closest one is stored
//------------------------------------------------------------------------------------------------------------------
procedure_ultra void PLKJ_AddEnemy(object o)
{
	float f
	if(o)
	{
		// if I have a plane, use different criteria to select best enemy
		if(PLKJ_IsPlaneGrabed())
		{
			// get the angle
//			f=MATH_AbsFloat(MATH_VecAngle(-OBJ_HorizonGet(),@o OBJ_PosGet()-OBJ_PosGet(),cvector(0,0,1)))
//			// this angle is ok even if it's behind me (X axis)
//			if(f>Cf_PiBy2)
//			{
//				f=Cf_Pi-f
//			}
			f=MATH_AbsFloat(MATH_VecAngle(-OBJ_SightGet(),@o OBJ_PosGet()-OBJ_PosGet(),cvector(0,0,1)))
			// if it's better than the current angle or it's the same enemy refreshing its value
			if(o==ClosestEnemy || f<ClosestDistance)
			{
				ClosestEnemy=o
				ClosestDistance=f
			}
		}
		else
		{
			// get distance
			f=OBJ_SqrDist(o)
			// if its the same enemy (to refresh its distance) or if the distance is shorter
			if(o==ClosestEnemy || f<ClosestDistance)
			{
				ClosestEnemy=o
				ClosestDistance=f
			}
		}
	}
}

//------------------------------------------------------------------------------------------------------------------
//	Forget an enemy, if he isn't the closest nothing is done
//------------------------------------------------------------------------------------------------------------------
procedure_ultra void PLKJ_ForgetEnemy(object o)
{
	if(o==ClosestEnemy)
	{
		ClosestEnemy=nobody
		ClosestDistance=9999999
	}
}