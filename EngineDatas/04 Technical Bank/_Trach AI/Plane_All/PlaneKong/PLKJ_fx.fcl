#include "PLKJ_Defines.var"
Include_UltraProcedure_Header
//------------------------------------------------------------------------------------------------------------------
//	Start a fade in/ou
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_StartFade(float delay,float duration)
{
	LIBGFX_Fade(31,0x00000000,0xff000000,delay,0.0,0.0,duration,0.0,10)
}

//------------------------------------------------------------------------------------------------------------------
//	Drop all sounds when Kong is injured
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_InjureFxSet()
{
	int ti
	
	mi_InjureFxDone = 1
	
	for(ti=SND_Cte_GrpSpecialFX; ti<SND_Cte_MasterGrp; ti++)
	{
		if( ti == SND_Cte_GrpA) continue
		if( ti == SND_Cte_GrpMusic) continue
		SND_M_FadeGroup(ti, Cte_InjureFadeVol, Cte_InjureFadeTime)
	}
	
	// force the Fx
	SND_FxSeti(SND_Cte_Fx_iCoreId, SND_Cte_FxCoreA)
	SND_FxSeti(SND_Cte_Fx_iContext, SND_Cte_FxContextGlobal)
	SND_FxSeti(SND_Cte_Fx_iMode, Cte_InjureFx_iMode)
	SND_FxSeti(SND_Cte_Fx_iDelay, Cte_InjureFx_iDelay)
	SND_FxSeti(SND_Cte_Fx_iFeedback, Cte_InjureFx_iFeedback)
	SND_FxSetf(SND_Cte_Fx_fWetVol, Cte_InjureFx_fWetVol)
	SND_FxSeti(SND_Cte_Fx_iWetPan, Cte_InjureFx_iWetPan)
	SND_FxSeti(SND_Cte_Fx_iEnable, SND_Cte_FxState_Active)
	SND_FxSeti(SND_Cte_Fx_iEnable, SND_Cte_FxState_Lock) // lock
	SND_FxSeti(SND_Cte_Fx_iCoreId, SND_Cte_FxCoreB)
	SND_FxSeti(SND_Cte_Fx_iContext, SND_Cte_FxContextGlobal)
	SND_FxSeti(SND_Cte_Fx_iMode, Cte_InjureFx_iMode)
	SND_FxSeti(SND_Cte_Fx_iDelay, Cte_InjureFx_iDelay)
	SND_FxSeti(SND_Cte_Fx_iFeedback, Cte_InjureFx_iFeedback)
	SND_FxSetf(SND_Cte_Fx_fWetVol, Cte_InjureFx_fWetVol)
	SND_FxSeti(SND_Cte_Fx_iWetPan, Cte_InjureFx_iWetPan)
	SND_FxSeti(SND_Cte_Fx_iEnable, SND_Cte_FxState_Active)
	SND_FxSeti(SND_Cte_Fx_iEnable, SND_Cte_FxState_Lock) // lock
}

//------------------------------------------------------------------------------------------------------------------
//	Restore all sounds when Kong isn't injured anymore
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_InjureFxReset()
{
	int ti
	
	if(!mi_InjureFxDone) return
	
	mi_InjureFxDone = 0
	// restore the fx
	SND_FxSeti(SND_Cte_Fx_iCoreId, SND_Cte_FxCoreA)
	SND_FxSeti(SND_Cte_Fx_iContext, SND_Cte_FxContextGlobal)
	SND_FxSeti(SND_Cte_Fx_iEnable, SND_Cte_FxState_Unlock) //unlock
	
	SND_FxSeti(SND_Cte_Fx_iCoreId, SND_Cte_FxCoreB)
	SND_FxSeti(SND_Cte_Fx_iContext, SND_Cte_FxContextGlobal)
	SND_FxSeti(SND_Cte_Fx_iEnable, SND_Cte_FxState_Unlock) //unlock
	@ "univ" SND_gi_GlobalCommand |= SND_Cte_exec_Fx

	// unmute all but group A
	for(ti=SND_Cte_GrpSpecialFX; ti<SND_Cte_MasterGrp; ti++)
	{
		if( ti == SND_Cte_GrpA) continue
		if( ti == SND_Cte_GrpMusic) continue
		SND_M_FadeGroup(ti, 1.0, Cte_InjureFadeTime)
	}
}

//------------------------------------------------------------------------------------------------------------------
//	Particles when Kong is hit
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_Paf_Particules(vector tv_pos, vector tv_wind, int ti_nbr)
{
	int			pi_GFX_Blood
	object	to_light_n_smoke
	int			materiau_color
	to_light_n_smoke = @get_global o_global_light_and_smoke_kanada
	if( ! to_light_n_smoke )
		return
#define		Cf_Paf_FX_width			0.5
	tv_wind *= -1.0		
	materiau_color = 0x00000000
	pi_GFX_Blood = GFX_Add(13)																// Create the boum	
	GFX_MaterialSet(pi_GFX_Blood, to_light_n_smoke, -1)
	GFX_FlagSet(pi_GFX_Blood, 0 , 1)
	GFX_FlagSet(pi_GFX_Blood, 2 , 1)
	GFX_Seti(pi_GFX_Blood, 13101, 23)														// Materiau N°
	GFX_Seti(pi_GFX_Blood, 13110, 22)														// Materiau N°
	GFX_Seti(pi_GFX_Blood, 13100, ti_nbr)													// *Buffer number of sprite
	GFX_Seti(pi_GFX_Blood, 13106, ti_nbr)													// *number of sprite to generate
	GFX_Setf(pi_GFX_Blood, 13003, 0.5)														// Time fase 1
	GFX_Setf(pi_GFX_Blood, 13004, 0.8)														// Time fase 2
	GFX_Seti(pi_GFX_Blood, 13107, 0)															// Sprites non triés
	GFX_Setf(pi_GFX_Blood, 13012, 0.75)														// Time random
	GFX_Setf(pi_GFX_Blood, 13000, 0.0)														// Growing speed min
	GFX_Setf(pi_GFX_Blood, 13001, 0.0)														// Growing speed max
	GFX_Setf(pi_GFX_Blood, 13002, 1.0)													// Friction Grow
	GFX_Setf(pi_GFX_Blood, 13005, 0.25)														// Creation size min
	GFX_Setf(pi_GFX_Blood, 13006, 0.5)														// Creation size max
	GFX_Setv(pi_GFX_Blood, 13203, cvector(0.02, 0.02, 0.0))							// friction speed
	GFX_Seti(pi_GFX_Blood, 13103, 0xFF000000 + materiau_color)					// Color fase 0
	GFX_Seti(pi_GFX_Blood, 13104, 0xFF000000 + materiau_color)					// Color fase 1
	GFX_Seti(pi_GFX_Blood, 13105, 0x00000000 + materiau_color)					// Color fase 2
	GFX_Setf(pi_GFX_Blood, 13009, 1.0)															// Norm speed min
	GFX_Setf(pi_GFX_Blood, 13010, 5.0)															// Norm speed max
	GFX_Setf(pi_GFX_Blood, 13007, -5.0)															// Gravity
	GFX_Setf(pi_GFX_Blood, 13008, 0.001)														// generation rate
	GFX_Setv(pi_GFX_Blood, 13204, Cv_NullVector)												// wind
	GFX_Setv(pi_GFX_Blood, 13205, Cv_NullVector)										// Mainposspeed
	GFX_Setv(pi_GFX_Blood, 13206, Cv_NullVector)										// Mainpossfriction
	GFX_Setv(pi_GFX_Blood, 13200, tv_pos) 												// Creation Pos
	GFX_Setv(pi_GFX_Blood, 13207, Cf_Paf_FX_width * OBJ_HorizonGet())		// Volume edge 1
	GFX_Setv(pi_GFX_Blood, 13208, Cf_Paf_FX_width * OBJ_SightGet())			// Volume edge 2
	GFX_Setv(pi_GFX_Blood, 13209, Cf_Paf_FX_width * OBJ_BankingGet())		// Volume edge 3
	DBG_RenderVector(tv_pos, OBJ_BankingGet() * 2,color_bleu)
	DBG_RenderVector(tv_pos, OBJ_HorizonGet() * 2,color_rouge)
	DBG_RenderVector(tv_pos, OBJ_SightGet() * 2,color_vert)
	GFX_Setv(pi_GFX_Blood, 13201, tv_wind + cvector(-1.0, -1.0, -0.4))										// Speed min
	GFX_Setv(pi_GFX_Blood, 13202, tv_wind + cvector(1.0, 1.0, 1.0))										// Speed max
	// Rotation Aléatoire -----------------------------------------------------------------------------------------------------------------------------------------
	GFX_Seti(pi_GFX_Blood, 13114, 1)															// Rotation ON / OFF
	GFX_Setf(pi_GFX_Blood, 13013,-1.000000) 												// Rotation Aléatoire a la naissance Min
	GFX_Setf(pi_GFX_Blood, 13014,1.000000) 												// Rotation Aléatoire a la naissance Max
	GFX_Setf(pi_GFX_Blood, 13015,-0.350000) 												// Speed rotation Min
	GFX_Setf(pi_GFX_Blood, 13016,0.350000) 												// Speed rotation Maw
}

//------------------------------------------------------------------------------------------------------------------
//	"Gladiator" fx when Kong is about to die
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_Gladiator()
{
	// GLADIATOR VERSION 3 LA DERNIERE==============================================================================
	if(HP && OBJ_CapaTest(C_PLKJ_Capa_Injured) && OBJ_CapaTest(C_PLKJ_Capa_AlternativeEnd))
	{
		f_gladiator_pulse_border+=dt
		if(f_gladiator_pulse_border<0.5)
			f_gladiator_AFE_Border=MATH_FloatBlend(f_gladiator_AFE_Border,0.1,f_gladiator_pulse_border*2)
		else
			f_gladiator_pulse_border=0

		if(TIME_Elapsed(f_gladiator_paf_agonisant,0.5) && !i_gladiator_pifpaf)
		{
			i_gladiator_pifpaf=vrai
			IO_PafSet(100,1)
		}
		if(TIME_Elapsed(f_gladiator_paf_agonisant,1.0))
		{
			IO_PafSet(100,1)
			i_gladiator_pifpaf=faux
			f_gladiator_paf_agonisant=TIME_Get()
			f_gladiator_AFX_coef=1.0
		}
		else
			f_gladiator_AFX_coef=MATH_FloatBlend(f_gladiator_AFX_coef,0.0,1.5*dt)

		SpeedFactor=0.75

		@get_global Proc_AE_ColorBalanceSet(MATH_FloatBlend(@get_global Proc_AE_ColorBalance1Get(),f_gladiator_colorbalance1*f_gladiator_AFX_coef,5.0*dt),f_gladiator_colorbalance2)
		@get_global Proc_AE_RemanenceSet(MATH_FloatBlend(@get_global Proc_AE_RemanenceGet(),f_gladiator_remanance*f_gladiator_AFX_coef,5.0*dt))
		@get_global Proc_AE_BlackAndWhiteSet(MATH_FloatBlend(@get_global Proc_AE_BlackAndWhiteGet(),f_gladiator_blacknwhite*f_gladiator_AFX_coef,5.0*dt))
	}
	else
	{
		f_gladiator_AFX_coef=0.0
		f_gladiator_AFE_Border=MATH_FloatBlend(f_gladiator_AFE_Border,0.0,dt)
		c_gladiator_AFE_BorderColor=COLOR_Blend(c_gladiator_AFE_BorderColor,0,dt)

		SpeedFactor=1

		@get_global Proc_AE_ColorBalanceSet(MATH_FloatBlend(@get_global Proc_AE_ColorBalance1Get(),@get_global Proc_AE_ColorBalance1DefaultGet(),5.0*dt),f_gladiator_colorbalance2)
		@get_global Proc_AE_RemanenceSet(MATH_FloatBlend(@get_global Proc_AE_RemanenceGet(),@get_global Proc_AE_RemanenceDefaultGet(),5.0*dt))
		@get_global Proc_AE_BlackAndWhiteSet(MATH_FloatBlend(@get_global Proc_AE_BlackAndWhiteGet(),@get_global Proc_AE_BlackAndWhiteDefaultGet(),5.0*dt))
	}
	AE_BorderBrightness(f_gladiator_AFE_Border)
	AE_BorderColor(c_gladiator_AFE_BorderColor)
}