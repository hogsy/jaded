#include "PLKJ_Defines.var"
//------------------------------------------------------------------------------------------------------------------
//	Setup the kamera for a specific mode
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_ChangeKamMode(int s)
{
	vector v
	// reset kam movement and speed
	switch(s)
	{
		case C_PLKJ_KamMode_Intro :
			KamMvt=0
			KamSpd=0
			SpeedFactor=1
			break
		case C_PLKJ_KamMode_Default :
			// after the special cut, teleport the camera
			KamUserX=0
			KamUserZ=0
			KamMvt=0
			KamSpd=0
			HitSlowDown=1
			SpeedFactor=1
			SpecialCutPlane=nobody
			break
		case C_PLKJ_KamMode_SpecialCut :
			if(SpecialCutPlane)
			{
				// set the delay before the next possible special cut
				SpecialCutDelay=clock+(C_PLKJ_Kam_SpecialCutFreq*MATH_RandFloat(0.6,1.4))

				// SND explode.
				@SpecialCutPlane SND_RequestPlay(6)

				// initial value for time factor
				KamMvt=0.1	// dot not use zero!!
				// initial value for the rotation
				KamSpd=0
				// teleport the plane to the best position for the cut
				v=@B_ZdeFight OBJ_PosGet()
				v.z+=-3
				v+=-3*OBJ_SightGet()
				@SpecialCutPlane OBJ_PosSet(MATH_VecBlend(@SpecialCutPlane OBJ_PosGet(),v,0.8))
				v=@B_RightHand OBJ_PosGet()
				v.x+=MATH_RandFloat(-1,1)
				v.y+=MATH_RandFloat(-1,1)
				v.z+=MATH_RandFloat(-1,1)

				// explose the plane
				@SpecialCutPlane PFK_ExplosedByKong(0.7,v,OBJ_HorizonGet()*-C_PLKJ_Kam_SpecialCutDamage)
			}
			break
		case C_PLKJ_KamMode_SpecialCutPaf :
			// Son grognement douleur
			SND_RequestPlay(61)
			// set the delay before the next possible special cut
			SpecialCutDelay=clock+(C_PLKJ_Kam_SpecialCutFreq*MATH_RandFloat(0.6,1.4))
			// initial value for time factor
			KamMvt=0.1	// dot not use zero!!
			// initial value for the rotation
			KamSpd=0
			break
	}
	// set new status
	KamMode=s
}

//------------------------------------------------------------------------------------------------------------------
//	Kamera for the introduction
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_IntroKam()
{
	float f
	// calculate blend
	f=KamMvt*KamMvt
	f=1.1-f
	KamMvt=MATH_FloatMin(1,KamMvt+(f*dt*C_PLKJ_Kam_IntroSpeed))
	// blend positions
	PLKJ_RejoinAndOrientBlend(Kamera,KamIntro,KamDefaultR,KamMvt,vrai)
	// focal
	VIEW_FocaleSet(0,C_PLKJ_Focal_Default)
	// end of intro
	if(KamMvt>=1)
	{
		PLKJ_ChangeKamMode(C_PLKJ_KamMode_Default)
	}
	OBJ_CapaSet(C_PLKJ_Capa_NoDamage,0)
}

//------------------------------------------------------------------------------------------------------------------
//	Default kamera
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_DefaultKam()
{
	float f
	vector v
	// set default position
	@Kamera OBJ_PosSet(@KamDefaultR OBJ_PosGet())
	@Kamera OBJ_BankingSet(cvector(0,0,1))
	@Kamera OBJ_SightSet(@KamDefaultR OBJ_SightGet())
	// get player's view
	KamUserX=MATH_FloatBlend(KamUserX,Joy2Direction.y*-Cf_1Degre*20,dt*3)
	KamUserZ=MATH_FloatBlend(KamUserZ,-Joy2Direction.x,dt*8)
	// calculate speed and movement
	if(MATH_AbsFloat(KamUserZ)>0.25)
	{
		f=KamUserZ
	}
	else
	{
		f=MATH_FloatSign(CurrentDirection.x)
//		f=CurrentDirection.x
	}
	KamSpd=MATH_FloatBlend(KamSpd,(f-KamMvt)*0.7,dt*4)
	KamMvt=MATH_FloatLimit(KamMvt+(KamSpd*dt),-1,1)
	// calculate position
	v=@Kamera OBJ_PosGet()
	v+=-10*KamMvt*@Kamera OBJ_HorizonGet()
	v.z+=5*KamMvt
	// set position and orientation
	@Kamera OBJ_PosSet(v)
	@Kamera OBJ_RotateGlobalZ(KamMvt*Cf_1Degre*10)
	@Kamera OBJ_RotateLocalX(KamUserX+(KamMvt*Cf_1Degre*10))
	// set focal
	if(!HP && PLKJ_IsTimerUsed())
	{
		VIEW_FocaleSet(0,0.5)
		SpeedFactor=0.3
		@Kamera OBJ_RotateLocalX(Cf_1Degre*-5)
	}
	else
	{
		// slow down effect
		if(HitSlowDown<1)
		{
			// calculate speed factor
			SpeedFactor=HitSlowDown*HitSlowDown
			SpeedFactor=MATH_FloatBlend(0,1,SpeedFactor)
			// calculate the slow down blend
			HitSlowDown=MATH_FloatMin(1,HitSlowDown+(dt*6/@get_global f_old_old_game_speed))
		}
		else
		{
			SpeedFactor=1
		}
		// the more Kong is wounded, the smaller the focal is
		KamHPFocal=MATH_FloatBlend(KamHPFocal,MATH_FloatMax(0,HP_Max-HP)*0.6/15,dt)
		VIEW_FocaleSet(0,C_PLKJ_Focal_Default-KamHPFocal)
	}
	OBJ_CapaSet(0,C_PLKJ_Capa_NoDamage)
}

//------------------------------------------------------------------------------------------------------------------
//	Kamera during a special cut
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_SpecialCutKam()
{
	vector v
	// calculate kam movement (blend)
	KamMvt=MATH_FloatMin(1,KamMvt+(dt*0.3/@get_global f_old_old_game_speed))
	// calculate speed factor
	SpeedFactor=KamMvt*KamMvt
	SpeedFactor=MATH_FloatBlend(0,1,SpeedFactor)
	// calculate rotation
	KamSpd+=Cf_1Degre*-3*dt/0.3/@get_global f_old_old_game_speed
	// kamera position
	v=-15*OBJ_SightGet()
	v.z+=-1
	v+=-20*OBJ_HorizonGet()
	v=MATH_VecRotate(v,cvector(0,0,1),KamSpd)
	v+=@B_ZdeBody OBJ_PosGet()
	@Kamera OBJ_PosSet(v)
	// kamera orientation
	v=@B_ZdeBody OBJ_PosGet()-v
	v-=2*OBJ_SightGet()
	@Kamera OBJ_SightGeneralSet(v,cvector(0,0,1))
	// focal
	VIEW_FocaleSet(0,C_PLKJ_Focal_SpecialCut)
	// if the cut is over, go back to default mode
	if(KamMvt==1)
	{
		PLKJ_ChangeKamMode(C_PLKJ_KamMode_Default)
	}
	OBJ_CapaSet(C_PLKJ_Capa_NoDamage,0)
}

//------------------------------------------------------------------------------------------------------------------
//	Kamera during a special cut during a paf
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_SpecialCutPafKam()
{
	vector v
	// calculate kam movement (blend)
	KamMvt=MATH_FloatMin(1,KamMvt+(dt*0.3/@get_global f_old_old_game_speed))
	// calculate speed factor
	SpeedFactor=KamMvt*KamMvt
	SpeedFactor=MATH_FloatBlend(0,1,SpeedFactor)
	// calculate rotation
	KamSpd+=Cf_1Degre*-6*dt/0.3/@get_global f_old_old_game_speed
	// kamera position
	v=-15*OBJ_SightGet()
	v.z+=-1
	v+=-20*OBJ_HorizonGet()
	v=MATH_VecRotate(v,cvector(0,0,1),KamSpd)
	v+=@B_ZdeBody OBJ_PosGet()
	@Kamera OBJ_PosSet(v)
	// kamera orientation
	v=@B_ZdeBody OBJ_PosGet()-v
	v-=2*OBJ_SightGet()
	@Kamera OBJ_SightGeneralSet(v,cvector(0,0,1))
	// focal
	VIEW_FocaleSet(0,C_PLKJ_Focal_SpecialCut)
	// if the cut is over, go back to default mode
	if(KamMvt==1)
	{
		PLKJ_ChangeKamMode(C_PLKJ_KamMode_Default)
	}
	OBJ_CapaSet(C_PLKJ_Capa_NoDamage,0)
}

//------------------------------------------------------------------------------------------------------------------
//	Gives parameters for the special cut and starts a small delay
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_PrepareSpecialCut(object o)
{
	// save the object to teleport during the special cut
	SpecialCutPlane=o
	// set the timer with delay, event type and value
	PLKJ_SetTimer(C_PLKJ_Kam_SpecialCutDelay,C_PLKJ_TimerEvent_KamMode,C_PLKJ_KamMode_SpecialCut)
}

//------------------------------------------------------------------------------------------------------------------
//	Return true if I'm preparing a special cut
//------------------------------------------------------------------------------------------------------------------
procedure_local int PLKJ_GoingOnSpecialCut()
{
	if(PLKJ_IsTimerUsed() && TimerEvent==C_PLKJ_TimerEvent_KamMode && TimerValue==C_PLKJ_KamMode_SpecialCut)
	{
		return vrai
	}
	return faux
}

//------------------------------------------------------------------------------------------------------------------
//	Move the kamera
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_Kamera()
{
	// switch to a mode according to status
	switch(KamMode)
	{
		case C_PLKJ_KamMode_Intro :
			PLKJ_IntroKam()
			break
		case C_PLKJ_KamMode_Default :
			PLKJ_DefaultKam()
			break
		case C_PLKJ_KamMode_SpecialCut :
			PLKJ_SpecialCutKam()
			break
		case C_PLKJ_KamMode_SpecialCutPaf :
			PLKJ_SpecialCutPafKam()
			break
	}
	@Kamera SND_MicroPosSet()
}

//------------------------------------------------------------------------------------------------------------------
//	Test if I can do a special cut
//------------------------------------------------------------------------------------------------------------------
procedure_local int PLKJ_IsSpecialCutReady()
{
	if(OBJ_CapaTest(C_PLKJ_Capa_AlternativeEnd))
	{
		return faux
	}
	if(!PLKJ_GetFlag(C_PLKJ_Flag_SpecialCutDone) || (SpecialCutDelay<clock && !PLKJ_IsTimerUsed()&& MATH_RandFloat(0,1)<0.75))
	{
		PLKJ_SetFlag(C_PLKJ_Flag_SpecialCutDone,vrai)
		return vrai
	}
	return faux
}

//------------------------------------------------------------------------------------------------------------------
//	Start a "hit plane" effect
//------------------------------------------------------------------------------------------------------------------
procedure_local void PLKJ_StartHitEffect()
{
//	HitSlowDown=0.1	// do not use zero!
}