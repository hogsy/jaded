float		tf_coef

vector	tv_sight_A
vector	tv_sight_B
vector	tv_point_A
vector	tv_point_B
vector	tv_point_C
vector	tv_point_D
object	to_next_next_wp

#define Cf_pourcentage			0.33

if (f_speed_blend_speed == -1.0)
	f_link_speed = f_speed
else
	f_link_speed = MATH_FloatBlend(f_link_speed, f_speed, f_speed_blend_speed * TIME_GetDt())

f_link_coef += f_link_speed * TIME_GetDt()

compute:

tf_coef = f_link_coef / f_link_length

if (tf_coef >= 1.0)
{
	if (@o_last_wp OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Generated))
		@o_last_wp OBJ_Destroy()

	if (@o_next_wp OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_DesignStruct))
		f_speed = o_next_wp.des_float1
	o_last_wp = o_next_wp
	o_next_wp = WAY_NetNextWP(n_net, o_last_wp, 0, 0)
	to_next_next_wp = WAY_NetNextWP(n_net, o_next_wp, 0, 0)
	if	( ! to_next_next_wp)
		f_speed = 0

	f_link_coef -= f_link_length

	if ( ! o_next_wp)
	{
		switch(play_mode)
		{
			case 0 :
				// One shot
				OBJ_Destroy()
				break
			
			case 1 :
				// Loop
				o_last_wp = o_1st_wp
				o_next_wp = WAY_NetNextWP(n_net, o_last_wp, 0, 0)
				
				f_link_coef = 0.0
				break
		}
	}

	f_link_length = MATH_VecNorm(@o_next_wp OBJ_PosGet() - @o_last_wp OBJ_PosGet())

	goto compute
}

switch(move_mode)
{
	case 0 :
		// Smooth trajectory
		tv_point_A = @o_last_wp OBJ_PosGet()
		
		tv_point_B = tv_point_A
		tv_sight_A = @o_last_wp OBJ_SightGet() * (f_link_length * Cf_pourcentage)
		tv_point_B += tv_sight_A
		tv_sight_A = @o_last_wp OBJ_BankingGet()
		tv_point_D = @o_next_wp OBJ_PosGet()
			
		tv_point_C = tv_point_D
		tv_sight_B = @o_next_wp OBJ_SightGet() * (f_link_length * Cf_pourcentage)
		tv_point_C -= tv_sight_B
		tv_sight_B = @o_next_wp OBJ_BankingGet()
		
		//DBG_RenderVector(tv_point_A, tv_point_B - tv_point_A, color_rouge)
		//DBG_RenderVector(tv_point_B, tv_point_C - tv_point_B, color_rouge)
		//DBG_RenderVector(tv_point_C, tv_point_D - tv_point_C, color_rouge)
		
		tv_point_A += (tv_point_B - tv_point_A) * tf_coef
		tv_point_B += (tv_point_C - tv_point_B) * tf_coef
		tv_point_C += (tv_point_D - tv_point_C) * tf_coef
		
		//DBG_RenderVector(tv_point_A, tv_point_B - tv_point_A, color_vert)
		//DBG_RenderVector(tv_point_B, tv_point_C - tv_point_B, color_vert)
		
		tv_point_A += (tv_point_B - tv_point_A) * tf_coef
		tv_point_B += (tv_point_C - tv_point_B) * tf_coef
		
		//DBG_RenderVector(tv_point_A, tv_point_B - tv_point_A, color_bleu)
		switch (des_i_orientation)
//		if	(des_i_orientation)
		{
			case 00:
			{
				if (f_rot_blend_speed == -1.0)
					OBJ_SightGeneralSet(tv_point_B - tv_point_A, Cv_VerticalVector)
				else
					OBJ_SightGeneralSet(MATH_VecBlend(OBJ_SightGet(), tv_point_B - tv_point_A, f_rot_blend_speed * TIME_GetDt()), Cv_VerticalVector)
			}
			case 01:
				OBJ_SightGeneralSet(tv_point_B - tv_point_A, MATH_VecBlend(tv_sight_A, tv_sight_B, tf_coef))
			case 02:
				if	(des_o_cible)
					OBJ_OrientTo(des_o_cible)
		}
		tv_point_A += (tv_point_B - tv_point_A) * tf_coef
		
		OBJ_PosSet(tv_point_A)

		break
		
	case 1 :
		// Straight trajectory
		if (f_rot_blend_speed == -1.0)
			OBJ_SightGeneralSet(@o_last_wp OBJ_SightGet(), Cv_VerticalVector)
		else
			OBJ_SightGeneralSet(MATH_VecBlend(OBJ_SightGet(), @o_last_wp OBJ_SightGet(), f_rot_blend_speed * TIME_GetDt()), Cv_VerticalVector)
	
		tv_point_A = @o_last_wp OBJ_PosGet()
		tv_point_A += @o_last_wp OBJ_SightGet() * f_link_coef
		
		OBJ_PosSet(tv_point_A)
	
		break
}	
