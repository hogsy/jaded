// Define at least one function in a track
// function track0 = "name"
// function track1 = "name"
function track2 = "btode_state_init"
// function track3 = "name"
// function track4 = "name"

// BASED 100% off the MTP model; ode_structure

#include "btode_defs.var"

separator "Elements de la structure ODE"
object 		ao_ode_elements[32]

private float			af_ode_vitesseL_frame[32]
private float			af_ode_deriveeL_frame[32]
private float			af_ode_vitesseA_frame[32]
private float			af_ode_deriveeA_frame[32]

private float			af_ode_vitesseL_old_frame[32]
private float			af_ode_deriveeL_old_frame[32]
private float			af_ode_vitesseA_old_frame[32]
private float			af_ode_deriveeA_old_frame[32]

int				ai_ode_elements_etat[32] = enum("Inactive" 1 "Pause" 2 "Active" 3 "Vase" 4 "Détruit" 5)
private int	i_num_ode_elements

int				i_mode_init = enum("ODE Inactif" 1 "ODE Actif / Immovable" 2 "ODE Actif / Pause" 3 )

separator "Joints de la structure ODE"
object		ao_ode_joints[8]



separator "Détection écroulement pour synchro avec d'autres IA"
int					i_flag_ecroulement_detecte	= vrai_faux	// ecroulement en cours (pour donner info à d'autres IA)
object			o_element_test_ecroulement
float				f_deplacement_max_autorise
private vector	v_pos_init_element_test_ecroulement

separator "Trigger - Declenchement"
trigger				trig_general
private int			i_trig_general_active = vrai_faux
trigger				trig_paf 
private int			i_trig_paf_active = vrai_faux
trigger				trig_projectile
private int			i_trig_projectile_active = vrai_faux



separator "Gestion PAF"
int						i_genere_impulsion_si_paf = vrai_faux
float					f_force_valeur_impulsion
private object		o_element_paf
private vector		v_dir_paf
private vector		v_pos_paf
private int		    i_power_paf

separator "Time To Live"
float					f_time_to_live_after_activation
private float			f_time_at_activation


separator "Vase"
object				o_vase
float					f_force_molesse_vase
float					f_force_vitesse_enfoncement_vase

separator "Désactivation - Test en Z des éléments par rapport à o_z_desactivation"
object				o_z_desactivation
float					f_offset_z_desactivation

separator "Action sur un élément pour forcer l'instabilité de la structure"
int						i_force_action_instabilite = enum( "Pas d'instabilité forcée" 0 "Collision Element_test/Vase" 1 "Flag écroulement positionné" 2)
object				o_element_test
int						i_type_action = enum("Rotate Local X" 0 "Rotate Local Y" 1 "Rotate Local Z" 2 "Rotate Global X" 3 "Rotate Global Y" 4 "Rotate Global Z" 5)
object				o_element_action
float					f_valeur_action
private int			i_action_instabilite_en_cours = vrai_faux


separator "Projectile - cinématique"
object				o_projectile_cine
float					f_vitesse_init_projectile
object				o_projectile_gao_stop
float					f_projectile_distance_max
private vector		v_pos_init_projectile	

separator "Son"
//--AUTORISATION
int						i_son_activation_autorise = vrai_faux
int						i_rumble_autorise = vrai_faux
int						i_choc_autorise = vrai_faux
int						i_whoosh_autorise = vrai_faux

//--RUMBLE
private int			i_instance_snd_rumble
private float			f_percent_rumble
//--SEUILS DE DETECTION DES CHOCS LOCAUX
float					f_linear_threshold
float					f_angular_threshold
//--WHOOSH
object				ao_element_whooshable[8]
private int			ai_instance_snd_whoosh[8]
float					f_linear_whoosh

separator "PAG stuff"
	private int			mi_IsTreeHitPAGSTriggered							= faux
	object				mao_TreeHitParticleSystem[C_MaxHitPAGS]				// put which PAGS should go off when the tree is first hit here
	private int			mai_IsPAGActiveForLocation[C_MaxHitPAGS]
	float					maf_PAGFrequency[C_MaxHitPAGS]							// set the freq of the PAG
	private float			maf_PAGStartTime[C_MaxHitPAGS]
	float					maf_PAGDuration[C_MaxHitPAGS]							// set the duration of each PAG here (the PAG system will always play each PAG anim once at least)
	
	private int			mi_IsTreeFallPAGSTriggered 						= faux
	float					mf_TreeFallPAGDelayAfterActive					= 0.5		// time after the tree is active that the tree fallen pag should be activated
	object				mao_TreeFallParticleSystem[C_MaxFallPAGS]			// PAGS to play after fall delay
	private int			mai_IsFallPAGActiveForLocation[C_MaxFallPAGS]
	float					maf_FallPAGFrequency[C_MaxFallPAGS]					// set the freq of the fall PAGs
	private float			maf_FallPAGStartTime[C_MaxFallPAGS]
	float					maf_FallPAGDuration[C_MaxFallPAGS]						// set the duration of the

	
separator "DEBUG"
	vector 				mv_DEBUG
	vector				mv_DEBUG2
	vector				mv_DEBUG3
	vector				mv_InitPosOfBreakingPart
	float					mf_time