#include "KID_Defines.var"

// Define at least one function in a track
// function track0 = "name"
// function track1 = "name"
function track2 = "KID_init"
// function track3 = "name"
// function track4 = "name"

separator "ODE Floor"
	object 			mo_Floor																								// put the ODE floor here to activate it when ODE stuff 
	private int		mi_IsFloorActive = faux

separator			"Extra Force parameters (for pafs)"
int						i_extra_force[C_MaxBriques]																		//activate extra force for each brick
float					f_amount_force						=	15.0														//set force amount

separator			"Resistance parameters"
float					f_pushTime			=1.5																				//how long actor has to push against structure for it to fall
float					f_speedThreshold	=6.0																				//what speed actor has to be pushing for structure to fall
private float			f_speed_actor		=0.0
private int			mi_IsKnocking		=faux
private float			f_resistanceTimer	=0.0 
private float			f_globalTime		=0.0
private int			i_NumCols			=0.0

separator			"reglages"
object				ao_objets_non_paffables[NUM_NON_PAF]													// objects that should not be collidable with the structure
int						i_type_decor		= enum("Muret" 1 "Pieu" 0 "Palmier" 2 "Pilier" 3 "Porte" 4 )		// Type de decor
float					f_epaisseur 		= 3.0																				// epaisseur du mur : distance jusqu'ou le TREX est repoussé
float					f_longueur			= 5.0																				// Longueur du mur : defini la zone ou le TREX peux etre appé.
int						i_desactive_colmap_apres_paf	= faux_vrai													// La colmap est désactivée apres un PAF
int						i_detruit_apres_paf					= faux_vrai													// L'IA s arrete apres un PAF
private	int			i_projection_passe_mur_du1er_coup = vrai_faux											// Par defaut il faut 1 KC le mur 2 lancer le TREX par dessus
private	int			i_Kong_puissance_pour_KC = enum ( "Moyen" 6 "Fort" 4 "Repousse" 1 )								// Puissance du coup minimale pour KC le mur

separator			"ODE"
object				ao_ODE_briques[C_MaxBriques]																// Briques ODE a Activer quand le mur casse
private object		o_ODE_projectile																	

private	int			i_ODE_nb_briques

private	object	o_uncol
private	float		f_uncol_sign
private	float		f_uncol_dist
private	int			i_ODE_break																							// Zone ODE KC
private	float		f_ODE_broken_duration
private	int			i_ODE_broken_disabled
private	vector	v_ODE_Punch_init_pos
private 	float		f_break_time
private	float		f_snap_blend
private 	vector	v_sens_KM
private	float		f_time_end

private	int			GFX_Explose = -1
private	float		f_time_start

separator "Proximity ODE Activation"
			private object	tao_zdecol_objects[C_Max_Collisions]
			private int		i_ActionID
			
separator "Particle Emitters"
	private float				mf_time = 0.0
	object					mao_ParticleSystem[C_MaxBriques][C_MaxHitPags]							// for each brique, there can be these PAGs
	private int				mai_IsPAGActiveForLocation[C_MaxBriques][C_MaxHitPags]	
	private float				maf_FallPAGFrequency[C_MaxBriques][C_MaxHitPags]						// particle system frequency (must be specified for each particle system)
	private float				maf_PAGStartTime[C_MaxBriques][C_MaxHitPags]
	private float				maf_PAGDuration[C_MaxBriques][C_MaxHitPags]								// THIS IS MEANINGLESS RIGHT NOW
	float						maf_PAGDelay[C_MaxBriques][C_MaxHitPags]									// number of seconds to wait to start PAG (0.0 means immediate)
	private int				mai_IsPAGCreatedForLocation[C_MaxBriques][C_MaxHitPags]
	object					mao_PAGLocationWP[C_MaxBriques][C_MaxHitPags]							// object location for pag.  if none, uses brique as base location
	
separator "Multi-Hit"
	int							mi_IsMultiHit			= vrai_faux															// use the multi-hit interface or not
	private int				mi_NumberOfPafs 	= 0																	// record the number of hits
	int							mai_PafNumberToBreakOn[C_MaxBriques]											// the number of pafs it takes to destroy a given brique (so if you put 2, ODE will be active on that brique on the 2nd hit)
	private int				mi_LastHit				= 0
	
separator "Post ODE Activation Destruction"
	private int				mai_IsBriqueOdeActive[C_MaxBriques]
	int							mai_DontDestroyBriqueAfterODE[C_MaxBriques]									// for each brique, 0 means it WILL be destroyed after its ODE is activated, 1 means it will stay on the map
	private int				mi_IsProjDestructionDone 									= faux
	float						mf_VertDistFrmAIWPToDestBrick[C_MaxBriques]									// height in meters away from the AI waypoint at which each brique is destroyed (where less than zero is below the WP)
	
	private float				mf_MinSpeedOfObjectsToBeActive 						= 0.1						// min speed in meters per second that any one brique must be going to keep the system (and thus sounds) active
	
separator "Destroy GFX"
	private int				mai_IsDestroyGFXStarting[C_MaxBriques]
	private int				mai_IsGFXActive[C_MaxBriques]
	private float				maf_GFXTimeStart[C_MaxBriques]
	private int				mai_GFX_Explose[C_MaxBriques]
	float						mf_DestructionGFXDuration[C_MaxBriques]											// bad name now, kept for backwards compatiblity, should be set to the same value as the longest lifespan for a destruction GFX.  Game Object is destroyed after this.
	object					mao_DestructionGFXTemplate[C_MaxBriques][C_MaxDestructionGFX]	// the GFX template to use for the block destruction
	
separator "Son"
	int							i_son_activation_autorise 										= vrai_faux				// as soon as the structure is activated, should we make a sound
	int							i_rumble_autorise 												= vrai_faux				// should we rumble?
	int							i_choc_autorise 													= vrai_faux				// shock sounds?
	int							i_whoosh_autorise 												= vrai_faux				// whoosh sounds?
	
	private int				i_instance_snd_rumble
	private float				f_percent_rumble
	
	int							mi_BreakSound 													= vrai_faux				// turn on for sound type 30 when col is disactivated.
	
separator "Speed Info"
	private float				af_ode_vitesseL_frame[C_MaxBriques]
	private float				af_ode_deriveeL_frame[C_MaxBriques]
	private float				af_ode_vitesseA_frame[C_MaxBriques]
	private float				af_ode_deriveeA_frame[C_MaxBriques]
	
	private float				af_ode_vitesseL_old_frame[C_MaxBriques]
	private float				af_ode_deriveeL_old_frame[C_MaxBriques]
	private float				af_ode_vitesseA_old_frame[C_MaxBriques]
	private float				af_ode_deriveeA_old_frame[C_MaxBriques]
	
//--SEUILS DE DETECTION DES CHOCS LOCAUX
separator "Son --- Seuils de détection de chocs"
	float						f_linear_threshold
	float						f_angular_threshold
	int							i_max_num_instances_per_second = 5
	private int				i_cur_num_instances_per_second
	float						f_time_sound

	
	
//--WHOOSH
separator "Son --- Whoosh"
	object					ao_element_whooshable[C_MAX_Wooshable]
	private int				ai_instance_snd_whoosh[C_MAX_Wooshable]
	float						f_linear_whoosh

separator "Trigger - Activation"
	trigger					mt_TriggerTest										// triggers to allox the door to break if kong hit
	
separator "Trigger - Declenchement"
	trigger					mt_TriggerExec[C_MAX_Triggers]										// triggers to be tripped when the object is completely destroyed
	private int				mi_TriggerExec_Flag[C_MAX_Triggers]
	
separator "Targetting"
	int							mi_IsThrownObjectTargettable 							= faux_vrai	// is this ODE system a targetting priority for Kong's thrown objects
	int							mi_TargetType												=  enum ( "3 Pillars" 0 "1 Pillar" 1 "Big Wall" 2 "Small Wall" 3 "Tree" 4 "Bush" 5 "Irregular 1" 6 "Irregular 2" 7 )	// set this variable to setup the targetting positon for Kong's thrown objects
	vector 					mv_TargetOffset												= cvector( 0.0, 0.0, 1.0 )												// thrown object targeting offset from the AI WP
	
separator "Lifetime"
	int 						mai_DestroyAfterTime[C_MaxBriques]								// 1 = destroy after lifetime supplied below.  0 = ignore this feature.
	float						maf_MaxTimeToLiveAfterActive[C_MaxBriques]						// time in seconds that thie brique will be arou
	
separator "Special Conditions"
	int							mi_IgnoreJumpPafs											= vrai_faux	// specifies weather Kong Jump/Fall pafs should register as hits against the structure.
	int							mi_IsFirstPafValid 											= vrai_faux	// ignore paf from Kong if it is not his first ODE hit for this swing
	
separator "Supported Natives"
	object				mao_NativeGroupsSupporting[C_MAX_NativeGroupsSupported]	// natives that will have their gravity turned off until this structure is destroyed
	
separator "Linked KIDS"
	object				mao_LinkedKIDs[C_MAX_LinkedKIDs]									// KIDs that will fall at the same time as this one
	
separator "DEBUG"
	vector				debugv_ExtraForceDirection 								= Cv_NullVector
	
separator "SPECIAL FLAGS"
	int						i_MemoBrokenStatus										= vrai_faux
private int				i_SF_AlreadyPlayed


private float				f_time_break = 0.0