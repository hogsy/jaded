#include "PNJ_EatMe_defines.var"

int				ti_i
int				ti_flag_dodge_fire
int				ti_flag_orient
int				ti_flag_in_water

float			tf_coef
float			tf_dist
float			tf_speed
float			tf_target_speed
float			tf_norm
float			tf_rayon
float			tf_Z_max
float			tf_LOD

object		to_collide_object
object		to_bone
object		to_main_actor

vector		tv_new_sight
vector		tv_speed 
vector		tv_traction
vector		tv_pos
vector		tv_hor_sight
vector		tv_ray_start_pos
vector		tv_collide_pos
vector		tv_ray_col_normal


// MAIN ACTOR
if( @get_global i_Player_is_Kong )
	to_main_actor = o_main_actor_Kong
else
	to_main_actor = o_main_actor_Jack


if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux

	if (i_flag_hide)
	{
		i_flag_hide = faux
	
		to_bone = ANI_CanalObjectGet(0)
		@to_bone OBJ_FlagInvisibleSet(faux)
		to_bone = ANI_CanalObjectGet(1)
		@to_bone OBJ_FlagInvisibleSet(faux)
	
		to_bone = ANI_CanalObjectGet(20)
		@to_bone OBJ_FlagInvisibleSet(faux)
		to_bone = ANI_CanalObjectGet(30)
		@to_bone OBJ_FlagInvisibleSet(faux)
	}

	return
}

if (i_etat_courant != ETAT_Fly)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Fly
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()
	
	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather | DYN_C_SlipOnGroundEdge, DYN_C_NeverDynamicHierarchy)
	DYN_FrictionVectorSet(Cv_NullVector)
	DYN_GravitySet(Cv_NullVector)
	COL_ColSetActivationSet(none, C_bit_zdm_pied)

	OBJ_FlagsControlSet(none, OBJ_C_ControlFlag_RayInsensitive)
	OBJ_CapaSet(none, CAPA_Bidoche_Snapped_SeDetacher)

	v_rand_dest_pos = @BV_ZoneTerritoire BV_RandomPosGet(0)

	f_angle_oscillation = 0.0
	f_on_ground_dist = 0.0
	
	f_rand_time_1 = MATH_RandFloat(0.0, 10.0)
	f_rand_time_2 = MATH_RandFloat(0.0, 10.0)


	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
AI_Execute("PNJ_EatMe_exec_check_paf")
if (i_flag_snap)
	macro_change_etat("PNJ_EatMe_ETAT_Snap")

//if (test && IO_KeyJustPressed(VK_SPACE)	)
//{
//	TIME_Wait(0.1)
//	i_modules_pafed_index = 3
//	i_perfored_module_index = i_modules_pafed_index
//	f_snap_paf_side = 1.0
//	@get_global o_bidoche_gao = OBJ_Me()
//	@get_global o_bidoche_plug_jack = ao_modules[i_modules_pafed_index]
//	macro_change_etat("PNJ_EatMe_ETAT_Snap")
//}

if (i_flag_paf || i_flag_smell_food)
	macro_change_etat("PNJ_EatMe_ETAT_Fall")

// COMPORTEMENT =========================================================
tf_LOD = OBJ_LodVisGet()

if (tf_LOD < Cf_LOD_Visibilite)
{
	if ( ! i_flag_hide )
	{
		i_flag_hide = vrai

		to_bone = ANI_CanalObjectGet(0)
		@to_bone OBJ_FlagInvisibleSet(vrai)
		to_bone = ANI_CanalObjectGet(1)
		@to_bone OBJ_FlagInvisibleSet(vrai)

		to_bone = ANI_CanalObjectGet(20)
		@to_bone OBJ_FlagInvisibleSet(vrai)
		to_bone = ANI_CanalObjectGet(30)
		@to_bone OBJ_FlagInvisibleSet(vrai)
	}
}
else if (i_flag_hide)
{
	i_flag_hide = faux

	to_bone = ANI_CanalObjectGet(0)
	@to_bone OBJ_FlagInvisibleSet(faux)
	to_bone = ANI_CanalObjectGet(1)
	@to_bone OBJ_FlagInvisibleSet(faux)

	to_bone = ANI_CanalObjectGet(20)
	@to_bone OBJ_FlagInvisibleSet(faux)
	to_bone = ANI_CanalObjectGet(30)
	@to_bone OBJ_FlagInvisibleSet(faux)
}

if (tf_LOD < Cf_LOD_Activation)
{
	if ( ! i_flag_secto )
	{
		i_flag_secto = vrai

		v_secto_speed = DYN_SpeedGetVector()
		v_secto_grav = DYN_GravityVectorGet()
		v_secto_friction = DYN_FrictionVectorGet()
	
		DYN_Off()
	
		OBJ_FlagsControlSet(OBJ_C_ControlFlag_RayInsensitive, none)
	}

	returntrack
}
else if (i_flag_secto)
{
	i_flag_secto = faux

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather | DYN_C_SlipOnGroundEdge, DYN_C_NeverDynamicHierarchy)
	DYN_FrictionVectorSet(v_secto_friction)
	DYN_GravitySet(v_secto_grav)
	DYN_SpeedSetVector(v_secto_speed)

	OBJ_FlagsControlSet(none, OBJ_C_ControlFlag_RayInsensitive)
}

f_delay_until_last_ground_col = 0.0
f_delay_until_last_wall_col = 0.0

tv_pos = OBJ_PosGet()
tv_pos -= @to_main_actor OBJ_PosGet()
tv_pos.z += 1.0

tf_norm = MATH_VecDotProduct(tv_pos, tv_pos)

if (tf_norm > 0.001 && tf_norm < 16.0) //  && MATH_VecDotProduct(v_rand_dest_pos - OBJ_PosGet(), -tv_pos) > 0.0)
{
	f_before_jump_duration	= 0.0

	tf_norm = MATH_FloatSqrt(tf_norm)
	tv_pos /= tf_norm
	tv_pos *= MATH_FloatMax(tf_norm, 3.0)
	tv_pos += OBJ_SightGet()
	tv_pos += @to_main_actor OBJ_PosGet()

	DBG_RenderVector(OBJ_PosGet(), tv_pos - OBJ_PosGet(), color_rouge)

	tv_pos.x = MATH_FloatLimit(tv_pos.x, @BV_ZoneTerritoire OBJ_PosGet().x + @BV_ZoneTerritoire BV_MinGet().x, @BV_ZoneTerritoire OBJ_PosGet().x + @BV_ZoneTerritoire BV_MaxGet().x)
	tv_pos.y = MATH_FloatLimit(tv_pos.y, @BV_ZoneTerritoire OBJ_PosGet().y + @BV_ZoneTerritoire BV_MinGet().y, @BV_ZoneTerritoire OBJ_PosGet().y + @BV_ZoneTerritoire BV_MaxGet().y)
	tv_pos.z =  MATH_FloatLimit(tv_pos.z, @BV_ZoneTerritoire OBJ_PosGet().z + @BV_ZoneTerritoire BV_MinGet().z, @BV_ZoneTerritoire OBJ_PosGet().z + @BV_ZoneTerritoire BV_MaxGet().z)

	DBG_RenderVector(OBJ_PosGet(), tv_pos - OBJ_PosGet(), color_vert)

	tv_new_sight = tv_pos

	tf_target_speed = move_speed * 2.0
	f_move_speed = MATH_FloatBlend(f_move_speed, tf_target_speed, 8.0 * TIME_GetDt())	
	tv_speed = OBJ_SightGet() * f_move_speed
}
else
{
	f_rand_pos_duration -= MATH_FloatMin(f_rand_pos_duration, TIME_GetDt())

	tv_new_sight = v_rand_dest_pos
	tv_new_sight -= OBJ_PosGet()
	tv_new_sight.z = 0.0

	if ( ! f_rand_pos_duration || MATH_VecDotProduct(tv_new_sight, tv_new_sight) < 0.25)
	{
		f_rand_pos_duration	= MATH_RandFloat(4.0, 8.0)
		v_rand_dest_pos = @BV_ZoneTerritoire BV_RandomPosGet(0)	
	}

	tv_new_sight = v_rand_dest_pos

	f_before_jump_duration -= TIME_GetDt()
	if (f_before_jump_duration < 0.0)
	{
		if (f_before_jump_duration < -1.0)
			f_before_jump_duration = MATH_RandFloat(1.0, 3.0)
	
		tf_target_speed = 0.0
	
		f_move_speed = MATH_FloatBlend(f_move_speed, tf_target_speed, 6.0 * TIME_GetDt())	
		tv_speed = OBJ_SightGet() * f_move_speed
	}
	else
	{
		tf_target_speed = move_speed
		tf_target_speed *= 1.0 + (MATH_Sin(TIME_Get() * 4.0) * 0.25)
	
		f_move_speed = MATH_FloatBlend(f_move_speed, tf_target_speed, 2.0 * TIME_GetDt())	
		tv_speed = OBJ_SightGet() * f_move_speed
	}

	f_rand_time_1 += MATH_RandFloat(8.0, 12.0) * TIME_GetDt()
	f_rand_time_2 += MATH_RandFloat(6.0, 8.0) * TIME_GetDt()

	tv_speed += MATH_VecRotate(OBJ_BankingGet(), OBJ_SightGet(), f_rand_time_1) * MATH_RandFloat(0.1, 0.3)
	tv_speed += MATH_VecRotate(OBJ_SightGet(), OBJ_BankingGet(), f_rand_time_2) * MATH_RandFloat(0.1, 0.3)
}

tv_new_sight -= OBJ_PosGet()

tf_norm = MATH_VecNorm(tv_new_sight)
if (tf_norm > 0.001)
{
	tv_new_sight /= tf_norm
	
	if (MATH_VecDotProduct(OBJ_SightGet(), tv_new_sight) > 0.0)
		tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 6.0 * TIME_GetDt())
	else
		tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), MATH_FloatSign(MATH_VecDotProduct(tv_new_sight, OBJ_HorizonGet())) * OBJ_HorizonGet(), 6.0 * TIME_GetDt())
}
else
{
	tv_new_sight = OBJ_SightGet()
}

OBJ_SightGeneralSet(tv_new_sight, Cv_VerticalVector)
DYN_SpeedSetVector(tv_speed)

//PNJ_EatMe_Modules_Update(0, nobody)
PNJ_EatMe_Snake(1, 6.0, Cv_NullVector, 6.0, 0.0)

v_head_last_pos = OBJ_PosGet()

tf_coef = MATH_Sin(TIME_Get() * 100.0)
tf_coef *= 0.3

to_bone = ANI_CanalObjectGet(30)
@to_bone OBJ_RestoreInitMatrix()
@to_bone OBJ_RotateLocalX(tf_coef)

to_bone = ANI_CanalObjectGet(20)
@to_bone OBJ_RestoreInitMatrix()
@to_bone OBJ_RotateLocalX(tf_coef)

