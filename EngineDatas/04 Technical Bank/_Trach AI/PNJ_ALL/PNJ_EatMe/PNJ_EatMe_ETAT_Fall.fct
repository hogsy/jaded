#include "PNJ_EatMe_defines.var"

int				ti_i
int				ti_flag_locked
int				ti_col_report

float			tf_Z_offset
float			tf_dot_product
float			tf_speed
float			tf_archimede
float			tf_time

vector		tv_pos
vector		tv_temp
vector		tv_new_sight
vector		tv_new_banking
vector		tv_collide_pos
vector		tv_traction
vector		tv_ray_start

object		to_duplicated
object		to_collide_object

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux

	COL_ColSetActivationSet(C_bit_zdm_pied | C_bit_zde_corps, none)

	return
}

if (i_etat_courant != ETAT_Fall)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Fall
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}

	OBJ_FlagsControlSet(none, OBJ_C_ControlFlag_RayInsensitive)

	if (respawn)
	{
		respawn = faux

		to_duplicated = OBJ_Duplicate(OBJ_PosInitGet())
		@to_duplicated OBJ_ZoomSet(1.0)
		@to_duplicated OBJ_FlagInvisibleSet(vrai)
	}

	SND_RequestPlay(SND_DIE)

	if (PNJ_EatMe_IsWater(OBJ_PosGet()) && f_water_Z < -1000.0)
	{
		tv_ray_start = OBJ_PosGet()	
		if (BV_ZoneTerritoire)
			tv_ray_start.z = @BV_ZoneTerritoire OBJ_PosGet().z + @BV_ZoneTerritoire BV_MaxGet().z
		tv_ray_start.z += 1.0
	
		to_collide_object = COL_RayObject_Dist(tv_ray_start, -Cv_VerticalVector, 2.0, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_Crossable)
		if (to_collide_object && COL_GMAT_FlagsGet(COL_C_Ray) & Gmat_KK_Face_eau)
			f_water_Z = COL_RayObject_PosGet().z
	}

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather | DYN_C_SlipOnGroundEdge | DYN_C_HorizontalGrounds, DYN_C_NeverDynamicHierarchy)
	DYN_GravitySet(v_Scolo_Gravity)

	COL_ColSetActivationSet(C_bit_zdm_pied, none)
	COL_StartMatrixSet(OBJ_PosGet())
	
	DYN_SpeedSetVector(v_module_paf_dir)
	
	OBJ_HierarchyReset()	

	OBJ_CapaSet(CAPA_Bidoche_Oublie_Moi, CAPA_Bidoche_Snapped_SeDetacher)

	fct_last_etat = AI_TrackCurGet()

	f_time_start_etat = 0.0
	f_delay_until_last_ground_col = 1000.0

	i_flag_smell_food = vrai
	f_death_duration = 0.0

	if (@get_global o_bidoche_gao == OBJ_Me())
	{
		@get_global o_bidoche_gao = nobody
		@get_global o_bidoche_plug_jack = nobody
	}
}
else
{
	f_time_start_etat += TIME_GetDt()
	
	OBJ_CapaSet(none, CAPA_Bidoche_Oublie_Moi)
}
	
// ANALYSE ===============================================================
AI_Execute("PNJ_EatMe_exec_check_paf")
if (i_flag_snap)
	macro_change_etat("PNJ_EatMe_ETAT_Snap")
if (i_flag_paf)
	DYN_SpeedSetVector(v_module_paf_dir)
	
// COMPORTEMENT =========================================================
tv_pos = @ao_modules[0] OBJ_PosGet()

if (COL_CollideType(COL_C_Ground))
{
	to_collide_object	= COL_ObjectGet(COL_C_Ground)
	if (to_collide_object && @to_collide_object AI_IsModel("SFX/SFX_Touchy"))
	{
//		tv_temp = MATH_VecRotate(cvector(1.0, 0.0, 0.0), Cv_VerticalVector, MATH_RandFloat(0.0, Cf_2Pi))
//		tv_temp *= MATH_RandFloat(1.0, 2.0)
//		tv_temp.z += MATH_RandFloat(0.5, 1.0)
//		DYN_SpeedSetVector(tv_temp)

		tv_temp = OBJ_PosGet()
		tv_temp += cvector(0.0, 1.0, 0.0)

		tf_time = 0.0

//		DYN_LIB_ImpulsionGet_Friction(vector tv_start_pos, vector tv_dest_pos, vector tv_gravity, float tf_friction, byref float tf_time, int ti_flag_Z_friction, float tf_hauteur_saut)
		tv_temp = DYN_LIB_ImpulsionGet_Friction(OBJ_PosGet(), tv_temp, DYN_GravityVectorGet(), DYN_FrictionVectorGet().x, tf_time, faux, 0.5)
		DYN_SpeedSetVector(tv_temp)
	}

	f_delay_until_last_ground_col = 0.0

	v_ray_pos = COL_CollidedPointGet(COL_C_Ground)
	v_ray_normal = COL_NormalGet(COL_C_Ground)

	v_ground_pos = v_ray_pos
	v_last_collided_pos = v_ground_pos

	v_ground_normal	= COL_ZonePosGet(C_zdm_pied)
	v_ground_normal -= v_ground_pos
	MATH_VecSetNormalize(v_ground_normal)
	
	switch(i_bidoche_type)
	{
		case Ci_Bidoche_Scorpion :
		case Ci_Bidoche_Larve :
		case Ci_Bidoche_Scolo :
		case Ci_Bidoche_Crochax :
		case Ci_Bidoche_Swamp :
			v_ground_normal *= -1.0
			break
	}

	if (f_time_meat_bite)
		DYN_SpeedSetVector(cvector(MATH_RandFloat(-0.1, 0.1), MATH_RandFloat(-0.1, 0.1), MATH_RandFloat(1.5, 2.0)))
}
else
{
	v_ray_pos = cvector(0.0, 0.0, -Cf_Infinit)
	v_ray_normal = Cv_VerticalVector
	
	f_delay_until_last_ground_col += TIME_GetDt()
	if (f_delay_until_last_ground_col > 0.1)
		v_ground_normal = MATH_VecBlendRotate(v_ground_normal, -Cv_VerticalVector, 4.0 * TIME_GetDt())

	if (f_time_start_etat > 5.0 && f_delay_until_last_ground_col > 5.0)
		OBJ_Destroy()
}

tv_traction = Cv_NullVector
DYN_FrictionVectorSet(cvector(6.0, 6.0, 0.0))

if (PNJ_EatMe_IsWater(OBJ_PosGet()))
{
	// eau !!!!
//	OBJ_CapaSet(none, CAPA_Bidoche_Poisonned)
//	PNJ_EatMe_PoisonnedTypeSet(0)

	ti_col_report =COL_GMatReportGet(Gmat_KK_Face_eau)
	if (ti_col_report != -1)
	{
		to_collide_object = COL_ObjectGet(COL_C_ReportIndex + ti_col_report)
		tv_collide_pos = COL_CollidedPointGet(COL_C_ReportIndex + ti_col_report) 
		
		f_water_Z = tv_collide_pos.z
	}

	tf_Z_offset = 0.25 // COL_ZoneSizeGet(C_zdm_pied)
	
	tf_archimede = f_water_Z - OBJ_PosGet().z + tf_Z_offset
	tf_archimede /= tf_Z_offset
	tf_archimede = MATH_FloatLimit(tf_archimede, 0.0, 2.0)
	if (tf_archimede)
	{
		tv_traction.z -= tf_archimede * DYN_GravityVectorGet().z * 0.85
		DYN_FrictionVectorSet(cvector(6.0, 6.0, 4.0))
	
		if (f_time_meat_bite)
			DYN_SpeedSetVector(cvector(MATH_RandFloat(-0.1, 0.1), MATH_RandFloat(-0.1, 0.1), MATH_RandFloat(1.5, 2.0)))
	}
}
else
{
	tf_archimede = 0.0
	f_water_Z = -Cf_Infinit
}

DYN_TractionSet(tv_traction)

tf_speed = DYN_SpeedGet()
if (tf_speed > 0.25)
{
	tv_new_sight = DYN_SpeedGetVector()
	tv_new_sight /= tf_speed
	tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 4.0 * TIME_GetDt())
}
else
{
	tv_new_sight = OBJ_SightGet()
}

if (f_delay_until_last_ground_col < 0.1)
{
	tv_new_sight -= MATH_VecDotProduct(tv_new_sight, v_ground_normal) * v_ground_normal

	if (i_bidoche_type == Ci_Bidoche_Gali)
	{
		v_ground_normal = MATH_VecCrossProduct(tv_new_sight, v_ground_normal)
		MATH_VecSetNormalize(v_ground_normal)
		v_ground_normal *= MATH_FloatSign(MATH_VecDotProduct(v_ground_normal, OBJ_BankingGet()))
	}
}

DBG_RenderVector(OBJ_PosGet(), v_ground_normal, color_bleu)
tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), v_ground_normal, 6.0 * TIME_GetDt())
OBJ_BankingGeneralSet(tv_new_sight, tv_new_banking)

PNJ_EatMe_Snake(1, 6.0, Cv_NullVector, 12.0, -10.0)



