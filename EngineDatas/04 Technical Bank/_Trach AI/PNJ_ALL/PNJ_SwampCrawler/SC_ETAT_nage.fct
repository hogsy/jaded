#include "PNJ_SwampCrawler_defs.var"

vector	move_dir, move_dest, move_normal
vector	sight
float		dot, factor, fz
int			berge

//--------( Sortie Etat )--------
if (etat_i_quitte)
{
	etat_i_quitte = faux
	return
}

//--------( Entrée Etat )--------
if ( etat_i_courant != SCETAT_nage )
{
	etat_i_ancien = etat_i_courant
	etat_i_courant = SCETAT_nage
	etat_f_timer = MATH_RandFloat(SCTIMER_nage_min,SCTIMER_nage_max)
	move_f_speed = SCSPEED_Water
	move_zoff = SCONDULE_Amplitude
	move_zoffspeed = SCONDULE_Speed	
	move_zoffvalue = 0
	move_f_dist2dest = Cf_Infinit
	
	//----( quitte état précédent )----
	if ( etat_fct )
	{
		etat_i_quitte = vrai
		AI_Execute( etat_fct )
	}
	etat_fct = AI_TrackCurGet()
	ACT_ActionSet( SCACT_water_swin )
	OBJ_BankingSet( Cv_VerticalVector )
}

DBG_RenderSphere( move_v_dest, 1, 0xFF40FF40 )

//--------( fin de la nage par timer )--------
etat_f_timer -= TIME_GetDt()
if (etat_f_timer < 0)
	macro_change_etat( "SC_ETAT_waitinwater" )
	
//--------( passage en chasse )--------
if (stimul_o_target && (move_f_withouthunt <= 0) )
{
	if (Organizer)
	{
		if ( Org_i_Answer == 1)
		{
			Org_o_StateAttack  = stimul_o_target
			macro_change_etat( "SC_ETAT_hunt" )
		}
		else
		{
			Org_i_Request = 1
			Org_o_ReqObj = stimul_o_target
			M_Org SC_TreatRequest = 1
		}
	}
	else
		macro_change_etat( "SC_ETAT_hunt" )
}
	
//--------( se prend un paf )--------
if ( stimul_i_paf )
	macro_takeapaf( SCETATPARAM_PafOne )
	
//--------( plonge si proche de la cible )--------
move_f_destz = home_f_zmax
if (move_f_dist2dest <= 3 )
{
	move_f_destz = SCONDULE_ZStatic 
	if (move_f_dist2dest <= 1 )
		macro_change_etat( "SC_ETAT_waitinwater" )
}
	
//--------( déplacement )--------
move_i_brakewhennear = 1
move_i_groundrec = 0
AI_Execute( "SC_exec_move" )

//if (move_f_dist2dest <= 1 )
//	macro_change_etat( "SC_ETAT_waitinwater" )
	
// --------( changement de direction si une berge est détectée )--------	
berge = !SCfct_FrontIsWater()
	
if ( berge || ( (berge_i_hitcounter >= 1) && ((berge_i_hitcounter < 8) || move_i_ground)) )
{
	SCfct_BergeState( compute_v_posgrid )
	move_v_dest = OBJ_PosGet() + (5 * berge_v_axe) + (berge_i_hitcounter * berge_v_norm)
	berge_i_hitcounter++
}
else
{
	berge_i_hitcounter = 0
}

// --------( reste dans la BV )--------	
if (!move_i_isinbv )
{
	move_v_dest = @home_zone_waterZ BV_RandomPosGet(1)
	move_v_dest.z = home_f_zmax
}

DBG_RenderSphere( move_v_dest, 1, 0xFF40FF40 )


