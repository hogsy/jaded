
#include "KBC_defines.var"

//=============================================================================
// LA BAT RAMPE AU SOL
//=============================================================================


#define		Cf_dist_attaque_sol			25.0	// distance ^2 pour porter une attaque au sol

// Orientation
vector 			tv_orient			// vecteur d'orientation pour le dépl (test collisions murs)

// Event visibilité
messageid		tmid_tmp 		// event de visibilité
int					ti_perso_ID		// ID du perso vu par le bat
object			to_pere			// père de l'event de visibilité
int					ti_i


// SORTIE ETAT
if (i_sort_etat)
{
	f_speed = 0.0		// bat à l'arrêt
	
	i_sort_etat = faux
	return
}

// ENTREE ETAT
if (i_etat_courant != ETAT_Rampe)
{
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Rampe
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	
	ACT_ActionSet(ACTION_Rampe)

	if( i_etat_ancien != ETAT_Attaque_Sol )
	{
		f_time_action = TIME_Get()		// RAZ compteur temps pour ramper (sauf si le bat était déjà au sol)
		
		// Dyna
		AI_Execute("KBC_exec_dyn_on")
	}
	
	macro_change_tag_size(Cv_Tag_Min, Cv_Tag_Max)		// TAG
	
//	COL_ColSetActivationSet(C_bit_zdm_pied, none)			// active zdm pied
}


//================== ANALYSE ===================

// la bat charognard ne rampe pas et n'attaque pas => elle agonise
if( ! i_mode_agressif_ON )
	macro_change_etat("KBC_ETAT_Agonie")


// La bat tombe dans le vide (détection du sol foireuse)
if( ! i_est_au_sol )
	macro_change_etat("KBC_ETAT_Paf_Air")


//=============== COMPORTEMENT ================

// le bat regarde devant lui
v_look_pos = OBJ_PosGet() + MATH_VecLocalToGlobal( cvector(0, -5, 0.5) )


if( i_mode_agressif_ON )
{
	//================== BAT AGRESSIVE ====================
	
	if( TIME_Elapsed( f_time_action, Cf_duree_rampe ) )
	{
		if( i_flag_can_fly ) 	// && ( ! i_flag_agonie) )
		{
			i_envol_palier = 0
			macro_change_etat("KBC_ETAT_Decolle")
		}
		else
			f_time_action = TIME_Get()			// boucle dans le mode Rampe
	}
	else
	{
		if( TIME_Elapsed(f_time_last_attaque, Cf_delai_attaque_sol) )
		{
			// le délai de paf est passé : le bat peut peut-être paffer un humain
			
			//========== VISION (humains) ===========
			
			AI_Execute("KBC_exec_check_vision")
			if( i_seen_actor_nb )
			{
				// le bat a vu des persos autour de lui
				for( ti_i = 0; ti_i < i_seen_actor_nb; ti_i++)
				{
					// test de tous les acteurs
					tmid_tmp = amid_seen_actor[ti_i]
					ti_perso_ID = EVENT_VisionIDGet(tmid_tmp)
					
					if( IsThis_ID_Humain( ti_perso_ID ) )
					{
						// c'est n'est pas un monstre
						to_pere = EVENT_PereGet(tmid_tmp)
						if( OBJ_SqrDist(to_pere) <= Cf_dist_attaque_sol )
						{
							// il est assez proche pour être attaqué
							o_cible_attaque = to_pere
							f_time_last_attaque = TIME_Get()
							macro_change_etat("KBC_ETAT_Attaque_Sol")
						}
					}
				}
			}
		}
	}
	
	//============ DEPLACEMENT ============
	
	// test de collisions avec les murs
	tv_orient = OBJ_SightGet()
	tv_orient = KBC_contourne_obstacle( tv_orient, i_flag_contourne_droite )
	tv_orient = MATH_VecBlendRotate(OBJ_SightGet(), tv_orient, 5 * TIME_GetDt() )
	
	//DBG_RenderVector(OBJ_PosGet() + cvector(0,0,1), tv_orient * 2, color_rouge)

}
//else
//{
//	//================= BAT CHAROGNARDE ==================
//	
//	if( TIME_Elapsed( f_time_action, Cf_duree_rampe ) )
//	{
//		if( i_flag_can_fly )
//		{
//			i_envol_palier = 0
//			macro_change_etat("KBC_ETAT_Decolle")
//		}
//		else
//			macro_change_etat("KBC_ETAT_Agonie")			// la bat ne peut plus voler et elle n'est pas agressive -> elle passe en mode agonie
//	}
//	
//	tv_orient = OBJ_SightGet()
//}


// Pafs supplémentaires
if( i_sum_pafs_force )
	DYN_SpeedSetVector(DYN_SpeedGetVector() + v_sum_pafs_dir )		// le bat reçoit un nouveau paf

// orientation et banking à la verticale
OBJ_BankingGeneralSet( tv_orient, MATH_VecBlendRotate(OBJ_BankingGet(),Cv_VerticalVector,10.0 * TIME_GetDt()) )

