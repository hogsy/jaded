#include "KBC_defines.var"

//===========================================================================================
// FOR KAPACITIES PLEASE CHECK       Y:\King Kong\DOC textes\Doc InfoD\KBats Kapas - en.doc
//===========================================================================================

function track0 = "KBC_init"
// function track1 = "name"
// function track2 = "name"
// function track3 = "name"
// function track4 = "name"

// CONFIGURATION GENERALE
separator "CONFIGURATION"
int							i_Bat_Model = enum("0 - Standard Bat (Grise)" 0 "1 - Big Bat (Noire)" 1 "2 - Little Bat (Rouge)" 2 )
private	float			f_zoom											// taille de la bat (coef de zoom)
int							i_etat_init = enum( "0 - En Vol" 0 "1 - Perchee" 1 "2 - Attack from Kamera" 2 "3 - Cachee" 3 "4 - Follower" 4 "5 - DEBUG - ETAT TEST" 5 "6 - DEBUG - Waiting for finish" 6 "8 - Spawn Finish LD" 8)
int							i_retourne_se_percher = vrai_faux
network					net_idle
network					net_move
trigger					aTrigExecMort[Ci_trigexec_max_nb]
private	int				i_TrigExecMort_done

separator "Jour-Nuit"
float						f_Heure_Debut
float						f_Heure_Fin
float						f_Heure_delta = 0.5		// valeur absolue d'un random additionné aux heures min et max pour désynhchoniser les bats spawnées
private	object		o_jour_nuit_wp


separator "Territoire"
object					o_zone_activite										// Territoire de la bat (none => pas de limite)
object					o_zone_activite2										// Territoire de la bat (none => pas de limite)
object					o_zone_change_target = nobody					// Zone dans laquelle la bat agressive peut choisir une nouvelle cible si sa cible principale disparait (none => zone de territoire)
object					ao_blind_zone[Ci_blind_zone_max_nb]

separator "HP& Foodchain (-1.0 = valeurs par defaut)"
float						f_HP_max = -1.0
float						f_point_de_viande = -1.0								// Points de viande (food-chain)
private	int				i_foodchain_eat_slots_nb = 1
private	int				i_foodchain_eat_slots_free
private	float			f_time_meat_bite
int							i_ignore_cadavres = vrai_faux
private	messageid ID_LIFE
// WP DE CHUTE
private	object		o_chute_bats_wp = nobody
private	int				i_chute_wp_deja_dedans
int							i_points_de_chute = vrai_faux

separator "Attaque"
int							i_LD_attack_config = enum("0 - grab" 0 "1 - paf" 1 "2 - 1 bat sur 2" 2 )
float						f_LD_attack_paf_delay = 4.0
object					ao_ignore_target[Ci_ignore_target_max_nb]
trigger					trig_attaque												// trigger pour que la bat apparaisse et attaque immédiatement
trigger					trig_attaque_restriction								// if not empty, this trigger needs also to be true to validte the attack trigger
int							i_trig_attaque_type = enum("0-GAO5" 0 "1-GAO spécifique" 1 "2-Le joueur actif (Kong ou Jack)" 2 )
object					o_attaque_gao_specifique = nobody			// gao spécfiique à attaquer
trigger					trig_do_not_attack

separator "BIG BAT only"
private	int				i_big_bat = faux
private	int				i_little_bat = faux
//int 						i_start_with_ann = vrai_faux
object					o_zone_detect_mashing = nobody			// MUST BE OUTSIDE O_ZONE_ACTIVITE !!!!
object					o_zone_detect_climbing = nobody
float						f_big_bat_speed_multiplier = 1.0
private	int				i_big_bat_finished_blood_02		// 196
object					o_centre_arene = nobody
int							i_KK_Is_Reward = vrai_faux
int							i_DBG_display_big_bat_kapa = vrai_faux
vector					v_DBG_display_big_bat_kapa = cvector(0.5,0,0)
int							i_DBG_display_nest_wait_timer = vrai_faux
private	int				i_bigbat_killed_Ann
private	object		o_bigbat_manager = nobody
private	int				i_bigbat_manager_index = -1
private	int				i_bigbat_AttackSequenceReady = faux
private	int				i_bigbat_manager_count_done = faux
float						f_bigbat_idle_speed = 2.5

separator "Big Bat's FOLLOWERS only"
private	int				i_follower = faux			// activate the follower mode
private	int				i_follower_init
object					o_follow_gao = nobody		// big bat 
vector					v_follow_offset					// ai random offset if not set in LD
float						f_follow_sin_desynchro		// ai random offset if not set in LD
private	int				i_follow_already_seen
private	float			f_follow_not_visible_duration
private	float			f_follow_blend_coef

separator "Kong Ride Walling DCA"
int							i_KONG_ride_walling_bat = vrai_faux
float						f_KONG_ride_walling_bat_speed = 12.0
vector 					v_KONG_ride_walling_offset = Cv_NullVector		// offset to bat position with reference to the movement network (y-axis is along the network)

separator "Waits For Kong (if capa 8 on)"
float						f_waits_for_KONG_dist_stop = 70.0
float						f_waits_for_KONG_dist_go = 30.0
private	float			f_waits_for_KONG_dist_coef

separator "Miscellaneous"
int							i_KK_do_not_Target_Me = vrai_faux			// empeche le joueur (Kong) de targetter la bat pour lui lancer un truc
int							i_SF_NePasSeRejouerSiMort		= vrai_faux		// Flag qui indique si l'acteur gere ou pas un SF de mort
private int				i_SF_AlreadyDead						= -1				// N° du SF (Alloué Dynamiquement)
int							i_threatens_KONG_in_walling = vrai_faux		// if true, the bat will become very aggressive when KONG is in walling (movement speed, frequency of attacks)
private	int				i_KONG_is_in_walling
int							i_threatens_KONG_in_mashing = vrai_faux		// if true, the bat will become very aggressive when KONG is in mashing (movement speed, frequency of attacks)
private	int				i_KONG_is_in_mashing
int							i_attaque_a_partir_de_la_ronde = vrai_faux 	// si vrai, la bat reste sur le réseau de ronde jusqu'à ce qu'elle obtienne la priorité pour attaquer
int							i_attaque_a_partir_des_wp = faux_vrai			// si vrai, la bat attend d'être positionnée sur un wp d'attaque pour attaquer

// position d'attente
private	float			af_attaque_pos_horiz_wait[3][2]
private	float			af_attaque_pos_vert_wait[3][2]
// position pour lancer l'attaque
private	float			af_attaque_pos_horiz[3][2]
private	float			af_attaque_pos_vert[3][2]
// position pendant l'anim d'attaque
private	float			af_attaque_pos_horiz_anim[3][2]
private	float			af_attaque_pos_vert_anim[3][2]

private	float			f_attaque_delai								// délai entre 2 attaques
private	int				i_take_paf = faux_vrai								// si faux, la bat est insensible aux pafs (defaut : vrai)
private	int				i_paf_cut_cine = faux_vrai							// si vrai, les pafs sortent la bat du mode ciné
private 	int				i_nb_attaques_simultanees					// nombre d'attaques simultanées
private	float			f_attaque_delai_change_wp					// délai pour changer de wp d'attaque

// PAUSE
separator "Vol Pause"
private 	int				i_pause_mode
private 	object		o_wp_pause											// wp de pause courant
private 	object		ao_tab_wp_pause[Ci_wp_pause_nb]								// Tableau des wp de pause (réseau de ronde, atterrissage forcé)
private	int				i_tab_wp_pause_count								// Nb de wp de pause

// CHAROGNE
separator "Charogne"
private object			o_cible = nobody			 							// cible du déplacement (wp, charogne)
private int				i_charogne_ID	= -1									// ID de la charogne
private float				f_cible_poids = 0.0									// poide de la cible
private messageid	mid_grab_charogne									// message id pour la synchro avec la charogne transportée
private vector			v_grab_object_pos									// position de grab
private messageid 	mid_interet_charogne								// id du message d'intérêt concernant la charogne (pour que d'autres bats ne viennent pas)
private int				i_mange_mode = -1									// manger pour gouter / emporter (bat charognard) ou bien pour tuer (bat agressive dans son nid)

// ATTAQUE
separator "Attaques"
private object			o_cible_attaque = nobody							// cible de l'attaque (agresseur)
private object			o_cible_attaque_contact = nobody				// cible de l'attaque (agresseur) RENSEIGNE UNIQUEMENT LORSQUE LA BAT EST ARRIVEE AU CONTACT (pour savoir s'il faut reparcourir le réseau ou pas)
private int				i_agresseur_ID = -1									// ID de l'agresseur
private messageid 	mid_interet_attaque									// id du message d'intérêt concernant l'acteur à attaquer
private int				i_flag_obstacle = faux								// flag qui indique que le bat a rencontré un obstacle sur le chemin de son attaque
private	float			f_obstacle_duration = 0.0							// durée pendant laquelle la bat reste en face d'un obstacle
private int				i_flag_net_1st_move = faux						// flag pour le 1er positionnement de la bat sur le réseau		// vagues successives ( si on lui a retiré dessus pendant qu'il attaquait)
private int				i_attack_mode	 = Ci_attack_mode_aucun		// mode d'attaque : attaque en piqué ou tentative de grab
private float				f_time_last_attaque = TIME_Get()							// délai entre 2 lancements d'attaques
private float				f_time_debut_wait_hors_champ = 0.0			// heure à laquelle la bat a commencé à attendre hors champ
private int				i_flag_exit_mode = faux							// flag indiquant qu'il faut arrêter la poursuite de la cible
private float				f_rotation_angle_courant						// angle max de rotation en attaque falaise
private float				f_check_obstacle_dist = Cf_dist_obstacle_vol		// distance de check obstacle
private vector			v_falaise_init_cible_pos								// position initiale de la proie lors du passage en mode attaque falaise
private int				i_flag_reserve_interet = faux						// flag mis à vrai dans le cas d'une bat qui attaque depuis le réseau de ronde et pas uniquement depuis un wp d'attaque
//private int				i_paf_sent = faux
private int				i_paf_send = faux
private	vector		v_paf_sent_position
private	float			f_paf_sent_pursuit_time
private int				i_paf_to_send_type = 0								// type de paf à envoyer
private	float			f_delay_humain_last_paf_time = 0.0
private	int				i_attaque_positionnement = 0
private	int				i_fight_wait_begin_mode = 0
private 	float			f_attaque_pos_delta
private	float			f_time_attaque_fin_desynchro = 0.0
private	int				i_attaque_fin_desynchro_flag = faux		// désynchronisation des bats pour la fin de l'attaque
private 	object		o_attaque_fin_desynchro_gao = nobody
private	float			f_time_attaque_fin_desynchro_min
private	float			f_time_attaque_fin_desynchro_max
private	float			f_time_attaque_fin_desynchro_delai_min
private	int				i_fight_exit_flag = faux
private	vector		v_fight_wait_pos = Cv_NullVector
private	float			f_time_since_last_obstacle = 0.0		// temps écoulé depuis le dernier obstacle détecté
private 	float			f_plongeon_abort_dist = 0.0
private	float			f_plongeon_cos_min = 0.0
private	float			f_plongeon_desynchro_time = 0.0
private	vector		v_paf_sent_offset
private	float			f_paf_dead_rotate_coef

// PAFS & PV
separator "Pafs"
private object			o_best_paf_pere = nobody							// père du plus gros paf reçu
private object			o_best_paf_pere_enabled = nobody							// père du plus gros paf reçu
private vector			v_last_paf_sight = Cv_NullVector				// opposé du sight du dernier paf reçu (pour s'orienter vers la source)
private int				i_paf_type												// types des pafs reçus
private	float			f_paf_pause_time = 0.0
private	float			f_paf_moyen_pause_time = 0.0
private	float			f_paf_offset_coef = 0.0
private	vector		v_paf_offset = Cv_NullVector
private	float			f_paf_delai_aucune_attaque = 0.0			// délai pour ne pas réattaquer aprs un moyen ou gros paf (pour la bat noire)
private	object		o_aide_tir_actor									// acteur vers lequel la bat est projetée
private	vector		v_paf_dir												// sens du paf
private 	int				i_paf_mur										// vrai si la bat viens de se paffer contre un mur


// DEPLACEMENT
separator "Déplacement"
private vector			v_cible_pos = Cv_NullVector						// position de la cible (trace de sang ou agresseur)
private vector			v_dest_pos = Cv_NullVector						// position de la cible (trace de sang ou agresseur)
private vector			v_dest_sight = Cv_NullVector						// sight du wp de destination
private vector			v_decalage = Cv_NullVector						// altitude à laquelle reste le bat au-dessus de la cible
private int				i_flag_depl_horiz = faux								// flag qui indique que le bat vole à l'horizontale
private int				i_flag_depl_fini = faux								// flag qui indique que le lien a été parcouru en entier
private float				f_rot_blend_coef = 0.0								// coef de blend pour se tourner
private object			o_cible_depl = nobody								// objet cible du déplacement sur le réseau
private int				i_mode_depl = 0										// mode de déplacement sur le réseau
private int				i_flag_depl_wp_apres_reseau = faux			// flag qui indique que le bat effectue son dernier depl après le réseau (suivi charogne)
private int				i_flag_reach_attack_wp = faux					// flag qui indique que le bat effectue un déplacement pour se positionner sur un point d'attaque
private object			o_backup_nearest_cible_wp = nobody			// backup du wp de déplacement de la cible au moment du calcul du wp d'attaque
																						// (pour savoir si la cible a bougé et qu'il faut recalculer un nouveau point d'attaque ou non)
private object			o_backup_wp_depl_utilise = nobody			// backup du wp de depl auquel la bat s'est positionnée pour ensuite attaquer
private	int				i_attak_wp_reserve = faux
private	int				i_speed_beziers_flag = faux						// si vrai indique que la vitesse à calculer va servir pour une béziers				
private	int				i_speed_vertical_flag = faux						// si vrai indique que la vitesse à calculer va servir pour une béziers				

// RESEAU DE DEPLACEMENT
separator "Réseau"
private network		n_reseau												// réseau du dépacement courant
private object			ao_reseau_wp[Ci_max_reseau_wp]				// tableau des wp pour le réseau à suivre
private int				i_reseau_wp_count = 0								// nb de wp à franchir pour parcourir le réseau
private int				i_flag_net_1st_calcul = faux						// flag 1er calcul du réseau (à utiliser qd le bat rentre dans un réseau alors qu'il n'était pas dans un réseau avant)
private int				i_flag_reseau_array = faux							// flag qui indique que le bat suit le réseau calculé dans ao_reseau_wp
private int				i_net_move_wp_nb									// nb de wp du réseau
private object			ao_net_move_wp[Ci_max_reseau_wp]			// tab des wp du réseau

// BALANCIER
separator "Balancier"
private vector			v_balancier_pos = Cv_NullVector				// position du balancier
private vector			v_balancier_speed = Cv_NullVector				// vitesse du balancier

// DUREES
separator "Durees"
private float				f_time_action = 0.0						// timers spécifiques aux actions
private float				f_time_mort = 0.0
private float				f_time_air = 0.0							// temps écoulé depuis que le bat a décollé
// CAMERA
private int				i_flag_attente_hors_champ
private float				f_duree_dans_champ_camera = 0.0			// durée depuis laquelle la bat n'est plus hors-champ
private float				f_duree_wait_hors_champ = Cf_duree_wait_hors_champ
private float				f_duree_min_dans_champ = Cf_duree_min_dans_champ
private	float			f_on_screen_pourcent = 0.0
// SUIVI DU REGARD
separator "Vision - suivi du regard"
private 	vector		v_look_pos												// position de l'objet à regarder (destination)
private 	vector		v_cur_look_pos										// point de regard actuel
private 	int				i_flag_neck = faux									// flag pour activer le suivi du regard
// CONE DE VISION
separator "Cone de vision"
private object			ao_head_bones[Ci_head_bones_count]		// tableau des os de la tête
private vector			v_look_head_pos										// position de la tête du bat
private vector			v_look_axis												// axe de vision du bat (en fait c'est le banking de l'os de la tête)
private int				i_seen_actor_nb = 0								// nb d'acteurs vus
private messageid	amid_seen_actor[50]								// tableau des acteurs vus
// ETATS
separator "Etat"
private int				i_etat_courant = -1									// état courant
private int				i_etat_ancien = -1									// dernier état
private int				i_etat_ancien_ancien = -1							// avant-dernier état
private int				i_sort_etat = faux										// test sortie d'état
private function 		fct_last_etat											// fonction du dernier état
private float				f_time_start_etat = 0.0
// MAIN ACTORS
separator "Main Actors"
private 	object			o_Jack													// Ann
private 	object			o_Kong													// le gros singe
private	int				i_envol_palier											// N° de palier pour l'envol
private 	float			f_envol_wait											// durée à attendre avant de s'envoler
// ZDM
private	vector		v_zdm_cur_size
private	vector		v_zdm_cur_offset
// ATTERRISSAGE
private 	int				i_atterrissage_mode
// SOUNDS
private	float			f_time_cri_paf = 0.0						// délai entre 2 cris dus à de spafs
private	float			f_time_cri_presence = 0.0				// délai entre 2 cris annonce de présence
private 	int				i_sound_mange
private 	int				i_sound_fly_request
private	int				i_sound_fly_playing = faux
// VISION ET COPAINS
private	int				i_flag_check_vision_done
private	int				i_budy_nb
private	object		ao_budy[Ci_budy_nb_max]
// Fréquence de vitesse / actions
private	float			f_freq_action_coef = 1.0
// CINE
private int				i_cine_close
private message		am_CineStack[30]
private int				i_CineStack
private int				i_CineStackChanged
private message		m_CineWaitDefault
private int				i_CineWaitDefault
private int				i_flag_cine = faux
private object			o_cine_vala_gao = nobody
// DESYNCHRONISATION DES BATS
private	float			f_time_wait_desyncho = 0.0
// SOUND
private	int				i_flag_check_sound_valide = faux
// VARIANTE ANIM
private	int				i_ACTION_Vol_Standard
// COURBE DE BEZIERS
separator "Courbe de Béziers"
private object			o_next_wp = nobody								// prochain WP
private object			o_last_wp  = nobody								// ancien WP
private object			o_ronde_next_wp = nobody						// backup du prochain WP en vol ronde (le wp temp est positionné à l'intersection de la bv de ce wp)
private object			o_last_wp_backup = nobody
private float				f_link_length = 0.0									// longueur d'un lien du réseau
private float				f_link_coef = 0.0										// longueur parcourrue pour le lien courant
private int				i_flag_reseau_oneway = faux						// flag qui indique si le bat est en train de suivre un réseau
private object			o_tmp_obj_last = nobody							// wp temporaire
private object			o_tmp_obj_next = nobody							// wp temporaire
private int				i_force_test_inclinaison = faux					// pour palier au pb de l'inclinaison dans les courbes de béziers
private float				f_angle_rotation_max = Cf_angle_rotation_max_default					// angle max de rotation de la bat en vol
private	vector		v_beziers_sight = Cv_NullVector
private	vector		v_beziers_banking = Cv_NullVector
private	int				i_beziers_flag_last_trame = faux
private	int				i_beziers_flag_cette_trame = faux
private	float			f_beziers_speed = 0.0		// vitesse de progression sur la beziers cette trame
private	float			f_beziers_pourcent
// DEBUG
separator "DEBUG ONLY - VALUES ARE RESETED OUTSIDE EDITOR MODE !!!!"
int							i_DBG_trace_etat = vrai_faux
int							i_DBG_trace_beziers_ON = vrai_faux			// si vrai, les courbes de vol sont dessinées en mode "Display AI Vector"
int							i_DBG_render_fight_position = vrai_faux
int							i_DBG_send_paf_OFF = vrai_faux				// si vrai, la bat ne peut plus envoyer de pafs
float						f_DBG_freq_speed_coef = 1.0
int							i_DBG_look_pos = vrai_faux
int							i_DBG_look_all = vrai_faux
int							i_trace_paf = vrai_faux
object					o_track_test_wp
private	float			f_KK_Ride_duration = Cf_ride_duration
float						f_DBG_KK_Ride_duration = Cf_ride_duration
int							i_nobody_but_me = vrai_faux
int							i_DBG_Finish_on_Kong_Forbidden = vrai_faux
int							i_DBG_display_interaction = vrai_faux
int							i_DBG_grabbed_liberation_disabled = vrai_faux
trigger					trig_test
// SOFT COLL
private	vector		v_softcol_decal_perfect = Cv_NullVector
private	vector		v_softcol_decal_current = Cv_NullVector
private	float			f_softcol_rayon_perfect = 0.0
private	float			f_softcol_rayon_current = Cf_softcol_rayon_en_vol		// val init car la bat noire ne change jamais cette valeur (pas de soft col) et la val est important pour le dépl béziers
private	vector		v_softcol_pos_backup = Cv_NullVector
private	int				i_softcol_flag = faux
private	float			f_softcol_link_length = Cf_Infinit
private	float			f_softcol_link_speed = 0.0
private	float			f_softcol_no_down_delai = 0.0				// force les décalages softcol à l'horizontale

// ATTENTE PERCHEE
private	int				i_perchee_delai_envol = faux
private	vector		v_pendu_init_pos = Cv_NullVector 
private	vector		v_pendu_init_sight = Cv_NullVector
private	vector		v_pendu_init_banking = Cv_NullVector
//private	int				i_flag_retourne_etat_init = faux
private	float			f_perchee_move_time
private	int				i_perchee_next_action
private	float			f_perchee_delai_envol = 0.0
// VITESSE
separator "Vitesse"
private 	int				i_flag_frein = faux										// flag qui indique si la bat doit être à l'arrêt lorsqu'il termine son mouvement
private 	float			f_speed = 0.0											// vitesse courante
private 	float			f_ref_speed	= 0.0										// vitesse de référence (variable selon l'état)
private 	float			f_speed_blend_coef = Cf_coef_blend_speed_def		// coef de blend de la vitesse courante vers la vitesse de référence
private 	float			f_vitesse_fight_network = Cf_speed_fight_network
private 	float			f_vitesse_fight_approche = Cf_speed_fight_approche
private 	float			f_vitesse_fight_remonte
private 	float			f_vitesse_fight_contact = Cf_speed_fight_contact
private 	float			f_vitesse_fight_contact_recule = Cf_speed_fight_contact
private 	float			f_vitesse_fight_contact_horschamp = Cf_speed_fight_contact
private 	float			f_vitesse_move_ronde = Cf_speed_move_ronde
private 	float			f_vitesse_move_network = Cf_speed_move_network
private 	float			f_vitesse_move_grab = Cf_speed_grab
private 	float			f_freq_speed_coef = 1.0
// VITESSE AU CONTACT
private	vector		v_contact_vitesse_max = Cv_NullVector
private	vector		v_contact_vitesse_cur = Cv_NullVector
// VITESSE COURANTE
private	vector		v_vitesse_last_pos = Cv_NullVector
private	vector		v_vitesse_last_move = Cv_NullVector
// DERAPAGE (ARRIVEE WP ATTAQUE)
private	vector		v_vitesse_derapage = Cv_NullVector
private	int				i_vitesse_derapage_init = faux
// GRABBED BY KONG
separator "GRABBED BY KONG"
private	messageid				mid_grabbed_by_Kong					// liaison grabbed
private	object					o_grabbed_actor							// acteur qui me grabbe
private	object					o_last_grabbed_actor					// acteur qui m'a grabbe
private	vector					v_grabbed_pos_init_blend				// position init du positionnement afterblend en mode grabbé
private	vector					v_grabbed_pos
private	vector					v_projection_dir							// Sens du lancer du Raptor
private	int							i_projectile_mode = 0					// sous-mode de projectile
private	object					o_projectile_target = nobody
private 	float						f_pos_blend_coef							// coef de blend de positionnement en état grabbed
private	vector					v_throw_pos								// position where kong is throwing the bat
private 	float 						f_throw_dist								// throwing distance
private	int							i_grabbed_snd_done
///////////////////// RIDE SUR KONG
separator "RIDE SUR KONG"
private	int							i_ride_try_flag							// indique que le raptor peut demander une liaison ride
private	object					o_bone_ride_KK						// bone de ride
private	object					o_bone_ride_KK_uncol				// bone uncollide
private	messageid				mid_bone_ride_KK_LNK_ID		// liaison de ride
private	int							i_ride_attak								// flag qui indique que le raptor attaque Ann ou Kong pendant le ride sur Kong
private	int							i_ride_mode							// sous-mode de ride
private	float						f_time_last_ride						// durée entre 2 attaques Ride
private 	float						f_pos_blend_coef_ride				// coef de blend de positionnement en ride
private 	int 						i_bone_id								// id du bone de ride
private 	float						f_max_ride_delay						// temps max pour effectuer une tentative de ride
private 	float						f_ride_paf_delay						
private	int							i_KONG_is_on_ground
// GENERAL
private 	object 					o_projectile = nobody				// le projectile qui s'en vient vers moi
private 	float						f_temps_projectile					// temps pendant lequel un projectile peut nous paffer apres avoir ete lance
///////////// ATTACK INTERACTION
private	messageid				mid_attack_interaction_LKN_ID
private	object					o_attack_interaction
private	float						f_attack_interaction_delai
private	int							i_interaction_Ann_fake_paf
private	int							i_interaction_sol_ann_link_done
private	float 						f_speed_fall_blend_coef
private	vector 		v_old_pos
private	int				i_mort_au_sol_sur_le_dos
// BIG BAT ATTACK
private	int				i_big_bat_attack_init
private	int				i_big_bat_attack
private	object		o_big_bat_target
private	object		o_big_bat_attack_wp
private	object		o_big_bat_retreat_wp
private	int				i_big_bat_attack_decolle
private	object		o_big_bat_uncol
private	int				i_big_bat_uncol_end_flag
private	int				i_big_bat_attack_scream
// BACKUP NEXT REACHABLE WP POUR CAPA FORCE VITESSE NULLE
private	object		o_next_reacheable_wp_backup = nobody		// wp du réseau pour checker sa capa 5
// TEMPS TOTAL
private	float			f_total_time
// FINISH SUR KONG
private	messageid			mid_I_finish_LNK_ID
private	object				o_I_finish_actor
private	object				o_I_finish_actor_ref		// backup de l'acteur à l'init du mode
private	vector				v_I_finish_pos_init
private	int						i_I_finish_leader
private	float					f_I_finish_pos_coef
// FINISHED
private	object				o_finished_actor
private	object				o_finished_actor_ref		// backup de l'acteur à l'init du mode
private	vector				v_finished_pos_init
private	int						i_finished_end
private	float					f_finished_frame
private	float					f_finished_force_kong
private	float					f_finished_force_nmi
private	float					f_anim_frequency_ref
private	float					f_anim_frequency_cur
private	int						i_check_sang_already_done
private	object				o_paf_backup_actor
private	object			ao_spawned_bats[Ci_spawned_max_nb]
private	int					i_spawned_bats
private	int					i_frame_nb
private	float				f_nid_kill_ann_delay			// délai avant de déclencher le timer de ANN
private	float				f_interaction_timer
private	float				f_mashing_detect_timer
private	float				f_bigbat_delai_no_attack
private	float				f_bigbat_delai_no_kamera
private	float				f_poursuit_backup_Z
private	float				f_big_bat_no_paf
// SET POS REGLAGE
separator "VINCE -REGLAGE SET POS"
float							f_X_pos = -0.7
float							f_Y_pos = 0.1
float							f_Z_pos = 0.5
float							f_X_rot = -0.5
float							f_Y_rot = 0.0
float							f_Z_rot = -0.2
private	float				f_finished_blend_coef
private	float				f_finished_pos_coef
private	int					i_paf_repousse_flag
private	float				f_contact_sin_desynchro
private	float			f_wait_begin_remaining_time
private	int				i_bigbat_attack_imparable
private	float			f_change_anim_delay
// SPEECH
private	int				i_request_txt = -1
private	int				i_last_request_txt = -1
private	int				i_request_txt_forced = -1
private	float			f_time_texte
// SND RIDE
private	int				i_snd_ride_modulo
private	float			f_snd_ride_delay
// STATS
private	int				i_stats_nmi_killed_done

// DESL VINC J INTEGRE CA A L ARACH
private	int				i_charge_KK_dodge

private	int				i_flag_do_not_reset_attaque_values

// GAME SPEED
private	int				i_bigbat_gamespeed_flag
private	int				i_bigbat_gamespeed_end_flag
private	float			f_bigbat_gamespeed_coef = 1.0

private	object		o_fury_check_actor

// ACTION ETAT APPROCHE
private	float			f_approche_plane_countdown
private	float			f_approche_falaise_countdown

private	int				i_global_bat_number
private	int				i_calc_net_apres_mashing

private	int				i_ronde_slow_down


// SOFT COL OPTIM
private int					i_my_index = -1

private	float			f_release_grab_actor_keep_kamera

//private	object		o_sol_interact_ann_wp


// QUATERNION (PAF)
private int				i_quat_index
private float				f_quat_last_time
private float				af_quat_time[10] = (-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0)
private float				af_quat_coef[10] 
private vector			av_quat_start[10]
private vector			av_quat_end[10]
private object			o_bassin
private object			o_torse



private	int				i_paf_rotate_flag


// CADAVRE
private	int				i_cadavre_nb = 0
private	object		ao_cadavre[Ci_cadavre_max_nb]
private	int				ai_cadavre_nouveau[Ci_cadavre_max_nb]
private	int				i_cadavre_mode
private	object		o_cadavre
private	int				i_trex_pos_index = -1
private	int				i_cadavre_joueur_proche_flag
private	float			f_cadavre_joueur_proche_duree
private	float			f_cadavre_atterissage_delay
private	float			f_cadavre_occupation_delay
private	int				i_cadavre_atterrissage_1st_test_done
private	float			f_paf_mange_countdown
private	float			f_paf_mange_delai
private	int				i_flag_check_cadavres_done

// FIRE
private 	int				i_fire_gao_nb
private 	object		ao_fire_gao[50]

// WAIT SINUS
private	int				i_wait_sinus_flag
private	vector		v_wait_sinus
private	float			f_wait_sinus_frequence
private	float			f_wait_sinus_duration

// PAF CUMUL
private	float			af_paf_cumul_time[Ci_paf_cumul_max]		// pour cumuler les pafs qui font [Cf_tommy_gun_paf] dégats
private	float			af_paf_cumul_dmg[Ci_paf_cumul_max]		// pour cumuler les pafs qui font [Cf_tommy_gun_paf] dégats
private	int				i_paf_cumul_nb = 0
private	float			f_paf_cumul_dmg
private	int				i_paf_change_etat_flag
private	int				i_flag_check_paf_done

// OBBOX
private	int				i_obbox_on = vrai
private	float			f_obbox_size_coef = 1.2

// WATER
private	int				i_splash_flag = faux
private	float			f_water_Z = -Cf_Infinit
private	vector		v_water_GFX_pos
private	float			f_water_GFX_time = 1.0

// GROUND
private	vector		v_ground_normale = Cv_NullVector
private	int				i_ground_lray_test_done = faux
private	object		i_killed_by_kong

// ATTAQUE REGLE FPS
private	float			f_fps_contourne_duration			// Durée depuis laquelle la bat contourne Jack pour se positionner

// GRABBED PREDATEUR
private	messageid	mid_predateur
private	object		o_predateur
private	object		o_predateur_new



// UNCOLLIDE LIST
private 	int				i_uncollide_gao_nb
private 	float			af_uncollide_duration[100]
private 	object		ao_uncollide_gao[100]


private	float			f_dont_check_cadavre
