#include "KBC_defines.var"

vector			tv_sight1
vector			tv_sight2

float				tf_dot
float				tf_time

messageid		tmid_vision

object			to_head


// SORTIE ETAT
if (i_sort_etat)
{
	if( i_etat_courant != ETAT_Fight_Approche)
		KBC_WP_Reservation_Del(o_backup_wp_depl_utilise)
	
//	OBJ_CapaSet(none, CAPA_BigBat_Kamera)
	i_sort_etat = faux
	return
}

// ENTREE ETAT
if (i_etat_courant != ETAT_Fight_Wait_Begin)
{
	i_etat_ancien_ancien = i_etat_ancien
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Fight_Wait_Begin
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	KBC_DBG_Trace(i_DBG_trace_etat, "etat fight wait begin")
	
	ACT_ActionSet(i_ACTION_Vol_Standard)		// vol attente
	KBC_action_frequency_set(Cf_freq_sur_place)
	KBC_ref_speed_set(0.0)

//	f_rotation_angle_courant = 0.0
	f_time_wait_desyncho = 0.0
//	i_fight_wait_begin_mode = Ci_fight_wait_begin_camera
	i_fight_wait_begin_mode = Ci_fight_wait_begin_orientation_and_time_plongeon
	
	v_fight_wait_pos = OBJ_PosGet()
	f_wait_begin_remaining_time = 0.0
	if( i_big_bat )
	{
		if( i_bigbat_attack_imparable )
			f_wait_begin_remaining_time = 0.0
		else
			f_wait_begin_remaining_time = 1.5		// 1.0 kam derrière la big bat + 0.5 kam derrière kong
//		if( @o_big_bat_attack_wp OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_DesignStruct) )
//		{
//			tf_time = o_big_bat_attack_wp.des_float1
//			if( tf_time < 0.0 )
//				f_wait_begin_remaining_time = 0.0
//			else if( tf_time == 0.0 )
//				f_wait_begin_remaining_time = 2.0
//			else
//				f_wait_begin_remaining_time = tf_time
//		}
//		else
//			f_wait_begin_remaining_time = 2.5
	}
	KBC_DBG_Trace_Float(i_DBG_trace_etat, "waits : ", f_wait_begin_remaining_time)
	
	if( i_big_bat )
		SND_RequestPlay(Ci_SND_Cri_Attack_Loin)			// je crie pour annoncer que je vais attaquer
}
else
{
	f_time_start_etat += TIME_GetDt()
	f_wait_begin_remaining_time -= MATH_FloatMin(f_wait_begin_remaining_time, TIME_GetDt())
}


// ANALYSE ==========================================================================================================
MACRO_CHECK_PAFS

// FIN D'ATTAQUE ? ========================================================
if( 0 )
{
	ANNULE_ATTAQUE:
	KBC_BigBat_Abort()
	AI_Execute("KBC_exec_init_attente")
}

AI_Execute("KBC_exec_check_fight_exit")
if( i_fight_exit_flag )
{
	goto ANNULE_ATTAQUE
}

// DETECT FURY ==============================
if( i_big_bat )
{
	AI_Execute("KBC_exec_check_fury")
	if( o_fury_check_actor )
	{
		KBC_DBG_Trace(i_DBG_trace_etat, "detecte passage en fury -> je cancelle mon attaque")
//		KBC_BigBat_AttackIncCpt()
//		AI_Execute("KBC_exec_init_attente")
		goto ANNULE_ATTAQUE
	}
}


// COMPORTEMENT ==============================================================================================

// REGARD 
to_head = @o_cible_attaque ANI_CanalObjectGet(Anim_Canal_Tete)
if( ! to_head )
	to_head = o_cible_attaque

i_flag_neck = vrai
v_look_pos = @to_head OBJ_PosGet()


// INTERET 
KBC_Interet_Update(mid_interet_attaque, C_EVENT_InteretStatusLock, o_cible_attaque, tmid_vision)

// MODE -----------------------------------------------------------------------------------------------
if( i_fight_wait_begin_mode == Ci_fight_wait_begin_camera )
{
	if( TIME_Elapsed(f_time_debut_wait_hors_champ, f_duree_wait_hors_champ) || f_duree_dans_champ_camera > f_duree_min_dans_champ )
	{
		// attente hors champ terminée
		i_fight_wait_begin_mode = Ci_fight_wait_begin_desynchro
//		f_time_wait_desyncho = MATH_RandFloat(0.0,1.5)
		f_time_wait_desyncho = 0.0
	}
}

if( i_fight_wait_begin_mode == Ci_fight_wait_begin_desynchro )
{
	f_time_wait_desyncho -= MATH_FloatMin(f_time_wait_desyncho, TIME_GetDt())
	if( ! f_time_wait_desyncho )
	{
		// désynchronisation terminée
		i_fight_wait_begin_mode = Ci_fight_wait_begin_orientation_and_time_plongeon
	}
}

if( i_fight_wait_begin_mode == Ci_fight_wait_begin_orientation_and_time_plongeon )
{
	tv_sight1 = OBJ_SightGet()
	tv_sight1.z = 0.0
	if( ! MATH_VecNullEpsilon(tv_sight1) )
		MATH_VecSetNormalize(tv_sight1)
	tv_sight2 = @o_cible_attaque OBJ_PosGet() - OBJ_PosGet()
	tv_sight2.z = 0.0
	if( ! MATH_VecNullEpsilon(tv_sight2) )
		MATH_VecSetNormalize(tv_sight2)
	tf_dot = MATH_VecDotProduct(tv_sight1, tv_sight2) 
//		switch( i_modele )
//		{
//			case Ci_MODELE_Bat_Noire :
//				if( tf_dot > f_plongeon_cos_min )
//					macro_change_etat("KBC_ETAT_Fight_Approche")	
//				break
//			
//			case Ci_MODELE_Bat_Rouge :
//				macro_change_etat("KBC_ETAT_Fight_Approche")	
//				break
//				
//			case Ci_MODELE_Bat_Grise :
//				if( @get_global f_time_bats_last_plongeon == 0.0 || TIME_Elapsed(@get_global f_time_bats_last_plongeon, f_plongeon_desynchro_time) )
//					macro_change_etat("KBC_ETAT_Fight_Approche")	
//				break
//		}
//	if ( f_wait_begin_remaining_time  < 0.5)
//		OBJ_CapaSet(none, CAPA_BigBat_Kamera)	// Preparer le joueur au cut cam.
	if( ! i_big_bat || ! f_wait_begin_remaining_time )
	{
		if( tf_dot > f_plongeon_cos_min ) // && ( i_big_bat || @get_global f_time_bats_last_plongeon == 0.0 || TIME_Elapsed(@get_global f_time_bats_last_plongeon, f_plongeon_desynchro_time) ) )
		{
			if( i_big_bat_attack )
			{
				KBC_BigBatAttack_GetNextPos()
				SND_RequestPlay(Ci_SND_Cri_BigBat_Plongeon)
				macro_change_etat("KBC_ETAT_BigBat_Fight_Plonge")
			}
			else
				macro_change_etat("KBC_ETAT_Fight_Approche")			// orientation ok & délai entre 2 plongeons ok
		}
	}
}


// ORIENTATION 
AI_Execute("KBC_exec_MOVE_fight_wait")

