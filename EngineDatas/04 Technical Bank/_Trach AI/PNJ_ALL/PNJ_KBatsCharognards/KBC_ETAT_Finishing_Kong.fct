#include "KBC_defines.var"

vector			tv_pos

messageid		tmid_vision
messageid		tmid_LNK

object			to_bone

int					ti_action_seplace
int					ti_action_challenge
int					ti_action_kong_perd
int 				ti_finish_action_get
int					ti_KONG_orient
int					ti_synchronized_nmi
int					ti_start_frame
int					ti_test_liaison_coupee
int					ti_frame_kong
int					ti_maintient_lnk

float				tf_percent


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux
//	i_uncol = vrai		// Dans ce cas la on ne peux pas réactiver la collision sinon on risque de pas reusssir a éjecter : recalage...
	KBC_Finish_Reset(i_I_finish_leader)
	KBC_RIDE_Reset()
	return
}


// BONE ET ACTION ==============================================================
ti_synchronized_nmi = vrai
ti_start_frame = 0
if( MSG_GlobalIsValid(mid_bone_ride_KK_LNK_ID) && o_I_finish_actor )
{
	// liaison de ride et pas de finish pour le bone, car 4 bats sur 5 sont en ride et pas en finish !!!
	to_bone = LNK_GrabBoneGet(mid_bone_ride_KK_LNK_ID)
	if( to_bone == @o_I_finish_actor ANI_CanalObjectGet(Anim_Canal_EpauleDroite) )
	{
		ti_synchronized_nmi = faux
		ti_start_frame = 30		// désynchroniser les 2 bats frénétiques
	}
	else if( to_bone == @o_I_finish_actor ANI_CanalObjectGet(Anim_Canal_EpauleGauche) )
	{
		ti_synchronized_nmi = faux
	}
	else if( to_bone == @o_I_finish_actor ANI_CanalObjectGet(Anim_Canal_AvantBrasGauche) )
	{
		ti_action_seplace = ACTION_I_Finish_AvantBrasG_Deb
		ti_action_challenge = ACTION_I_Finish_AvantBrasG_Challenge
		ti_action_kong_perd = ACTION_I_Finish_AvantBrasG_KK_Loses
	}
	else if( to_bone == @o_I_finish_actor ANI_CanalObjectGet(Anim_Canal_MainGauche) )
	{
		ti_action_seplace = ACTION_I_Finish_MainG_Deb
		ti_action_challenge = ACTION_I_Finish_MainG_Challenge
		ti_action_kong_perd = ACTION_I_Finish_MainG_KK_Loses
	}
	else if( to_bone == @o_I_finish_actor ANI_CanalObjectGet(Anim_Canal_CuisseDroite) )
	{
		ti_action_seplace = ACTION_I_Finish_CuisseD_Deb
		ti_action_challenge = ACTION_I_Finish_CuisseD_Challenge
		ti_action_kong_perd = ACTION_I_Finish_CuisseD_KK_Loses
	}
	else
	{
		DBG_TraceString("KBAT FINISH SUR KONG: bone non reconnu = ")
		DBG_TraceObject(to_bone)
		DBG_TraceEOL()
		DBG_Error("KBAT FINISH SUR KONG: bone non reconnu (cf. log)")
	}
}


// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_KK_Finish )
{
	i_etat_ancien_ancien = i_etat_ancien
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_KK_Finish
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
//	i_DBG_trace_etat = 1		// DEBUG !!!!
	KBC_DBG_Trace(i_DBG_trace_etat, "etat kk finish")
	KBC_DBG_Trace_Gao(i_DBG_trace_etat, "passe en finish / bone = ", LNK_GrabBoneGet(mid_bone_ride_KK_LNK_ID))
	
	if( ti_synchronized_nmi )
		ACT_ActionSet(ti_action_seplace)
	else
		ACT_ActionSet(ACTION_Ride_Frenetic)
	
	ANI_CurrentFrameSet(0, ti_start_frame)		// désynchro des bats frénétiques
	
	o_I_finish_actor_ref = o_I_finish_actor
	v_I_finish_pos_init = OBJ_PosGet()

	KBC_SND_Ride_Init()
	
	f_I_finish_pos_coef = 1.0		// cut cam donc snap parfait dès le début
}
else
{
	KBC_SND_Ride_Check()
	f_time_start_etat += TIME_GetDt()
//	f_I_finish_pos_coef += MATH_FloatMin(1.0 - f_I_finish_pos_coef, 5 * TIME_GetDt())
}

ti_KONG_orient = vrai

// ANALYSE ==============================================================
MACRO_CHECK_PAFS

if( i_I_finish_leader )
{
	// c'est moi qui suit en challenge avec KONG
	ti_maintient_lnk = vrai
	if( @get_global i_KNMI_finish_repousse )
		ti_maintient_lnk = faux
	o_I_finish_actor = LNK_ThisClientGet(o_I_finish_actor,Ci_LNK_KKFINISH_ON_KONG, mid_I_finish_LNK_ID, ti_maintient_lnk, nofunc, nofunc, nofunc)
	// test sortie
	if( @get_global i_KNMI_finish_repousse )
	{
		KBC_DBG_Trace(i_DBG_trace_etat, "le finish a été repoussé -> exit")
		EVENT_LIFE_CurLifeSet(ID_LIFE, 0.0)
		KBC_STATS_NMI_Killed(o_Kong)
		o_last_grabbed_actor = o_I_finish_actor_ref
		i_projectile_mode = Ci_projectile_lance_finish_echec
		macro_change_etat("KBC_ETAT_Projectile")
	}
	else if( ! MSG_GlobalIsValid(mid_I_finish_LNK_ID) )
	{
		KBC_DBG_Trace(i_DBG_trace_etat, "Je suis le leader / le finish a été coupé...")
		AI_Execute("KBC_exec_init_attente")
	}
	else
		ti_finish_action_get = LNK_Finish_ActionGet(mid_I_finish_LNK_ID)
}
else
{
	// je suis en support :)
	ti_test_liaison_coupee = vrai
	if( @get_global o_KNMI_finish_leader )
	{
		tmid_LNK = EVENT_FindEventPereTarget(Ci_LNK_EVENT_OFFSET + Ci_LNK_KKFINISH_ON_KONG, o_I_finish_actor, @get_global o_KNMI_finish_leader)
		if( MSG_GlobalIsValid(tmid_LNK) )
		{
			ti_test_liaison_coupee = faux
			ti_finish_action_get = LNK_Finish_ActionGet(tmid_LNK)
			tf_percent = @o_I_finish_actor Proc_KK_Mashing_Pct()
		}
	}
	if( ti_test_liaison_coupee )
	{
		if( @get_global i_KNMI_finish_kong_a_gagne 
			|| @get_global i_KNMI_finish_repousse )
		{
			KBC_DBG_Trace(i_DBG_trace_etat, "KONG a gagné ou le finish a été repoussé -> exit")
			EVENT_LIFE_CurLifeSet(ID_LIFE, 0.0)
			KBC_STATS_NMI_Killed(o_Kong)
			o_last_grabbed_actor = o_I_finish_actor_ref
			i_projectile_mode = Ci_projectile_lance_finish_echec
			macro_change_etat("KBC_ETAT_Projectile")
		}
		else
		{
			KBC_DBG_Trace(i_DBG_trace_etat, "le finish a été coupé...")
			AI_Execute("KBC_exec_init_attente")
		}
	}
}


// COMPORTEMENT ==============================================================

if( ! ti_synchronized_nmi )
{
	// NMI pas synchronisé -------------------------------------------
	returntrack
}


KBC_Interet_Update(mid_interet_attaque, C_EVENT_InteretStatusGrab, o_I_finish_actor, tmid_vision)

i_flag_neck = faux

switch( ti_finish_action_get )
{
	case Ci_GrabKong_FinishSePlace :
//		OBJ_PosSet(MATH_VecBlend( v_I_finish_pos_init, @o_I_finish_actor OBJ_PosGet(), f_time_start_etat / 0.333))
//		OBJ_BankingGeneralSet(
//			MATH_VecBlend( OBJ_SightGet(), -@o_I_finish_actor OBJ_SightGet(), 10.0 * TIME_GetDt()), 
//			MATH_VecBlend( OBJ_BankingGet(), @o_I_finish_actor OBJ_BankingGet(), 10.0 * TIME_GetDt()))
		ti_frame_kong = @o_Kong ANI_CurrentFrameGet(0)
		if( ANI_CurrentFrameGet(0) != ti_frame_kong )
			ANI_CurrentFrameSet(0, ti_frame_kong)		// me caler sur kong (décalage du au spawn...)
		break
		
	case Ci_GrabKong_FinishDeb :
		if( ACT_ActionGet() != ti_action_challenge )
			ACT_ActionSet(ti_action_challenge)
		if( ! i_I_finish_leader )
//			ANI_RatioSet(0, tf_percent)		// je ne suis pas le leader : je dois m'adapter au pourcentage...
			ANI_RatioSet(0, @o_Kong ANI_RatioGet(0)) 	// me caler sur la frame de kong (je peux passer avant le leader dans la liste des IA)
		tv_pos = @o_I_finish_actor OBJ_PosGet()
		tv_pos.z = OBJ_PosGet().z
//		OBJ_PosSet(MATH_VecBlend( v_I_finish_pos_init, tv_pos, f_time_start_etat / 0.333))
//		OBJ_BankingGeneralSet(
//			MATH_VecBlend( OBJ_SightGet(), -@o_I_finish_actor OBJ_SightGet(), 10.0 * TIME_GetDt()), 
//			MATH_VecBlend( OBJ_BankingGet(), @o_I_finish_actor OBJ_BankingGet(), 10.0 * TIME_GetDt()))
		break
		
	case Ci_GrabKong_FinishPerdu :		// KONG a perdu
		if(ACT_ActionGet() != ti_action_kong_perd )
		{
			ACT_ActionSet(ti_action_kong_perd)
			SIG_Send(SIG_C_TYPE_MORT, OBJ_Me())
		}
		break
		
	case Ci_GrabKong_FinishGagne :		// KONG a gagné
		ti_KONG_orient = faux
		if( ACT_ActionGet() != ACTION_Ride_Frenetic )
		{
			to_bone = ANI_CanalObjectGet(BAT_Canal_Torse)
			if ( to_bone)
			{
				tv_pos = @to_bone OBJ_PosGet()
				OBJ_PosSet(tv_pos)
			}
			ACT_ActionSet(ACTION_Ride_Frenetic)
		}
		
		to_bone = LNK_GrabBoneGet(mid_bone_ride_KK_LNK_ID)
		if ( to_bone)
		{
			tv_pos = @to_bone OBJ_PosGet()
			OBJ_PosSet(tv_pos)
		}
		
		OBJ_BankingGeneralSet(@o_I_finish_actor OBJ_PosGet() - OBJ_PosGet(), Cv_VerticalVector)
		if( @o_I_finish_actor ANI_CurrentFrameGet(0) > 20 )
		{
			DBG_TraceObject(OBJ_Me())
			if( i_I_finish_leader )
				DBG_TraceString(" (leader) = KONG m'éjecte !")
			else
				DBG_TraceString(" = KONG éjecte le leader !")
			DBG_TraceEOL()
			
			EVENT_LIFE_CurLifeSet(ID_LIFE, 0.0)
			KBC_STATS_NMI_Killed(o_Kong)
			o_last_grabbed_actor = o_I_finish_actor_ref
			i_projectile_mode = Ci_projectile_lance_finish_echec
			macro_change_etat("KBC_ETAT_Projectile")
		}
		break

	case	Ci_GrabKong_FinishFin :
//		AI_Execute("KBC_exec_init_attente")
//		if( i_I_finish_leader )
//			o_I_finish_actor = LNK_ThisClientGet(o_I_finish_actor,Ci_LNK_KKFINISH_ON_KONG, mid_I_finish_LNK_ID, faux, nofunc, nofunc, nofunc)
//		else
//			o_I_finish_actor = nobody
		break
}

if( o_I_finish_actor && ti_KONG_orient )
{
	OBJ_PosSet(MATH_VecBlend(v_I_finish_pos_init, @o_I_finish_actor OBJ_PosGet(), f_I_finish_pos_coef))
	OBJ_BankingGeneralSet(
		MATH_VecBlendRotate(OBJ_SightGet(), @o_I_finish_actor OBJ_SightGet(), f_I_finish_pos_coef), 
		MATH_VecBlendRotate(OBJ_BankingGet(), @o_I_finish_actor OBJ_BankingGet(), f_I_finish_pos_coef))
}

