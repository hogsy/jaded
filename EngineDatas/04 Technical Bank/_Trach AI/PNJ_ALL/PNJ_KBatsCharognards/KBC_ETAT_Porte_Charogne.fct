
#include "KBC_defines.var"

object		to_next_next_wp
object		to_grab


// SORTIE ETAT
if (i_sort_etat)
{
	i_sort_etat = faux
	return
}

// ENTREE ETAT
if (i_etat_courant != ETAT_Porte_Charogne)
{
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Porte_Charogne
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	
	//================================
	// TODO : destination ???
	//================================
	
	// next WP : WP du réseau le + proche
	o_next_wp = WAY_WPNearestOfPos( OBJ_PosGet(), n_net , all, none, Ci_Filter_CBitsFlag)
	
	// last WP : ma position, en direction opposée au next WP
	AI_Execute("KBC_exec_init_network")											// init des sights des WP du réseau 
	@o_tmp_obj_last OBJ_PosSet(OBJ_PosGet())								// positionnement du last_wp
	@o_tmp_obj_last OBJ_SightSet(- @o_next_wp OBJ_SightGet())		// sight du last_wp = opposé du next_wp (pour tracer une courbe)
	o_last_wp = o_tmp_obj_last
	
	// lien à parcourir
	f_link_coef = 0.0
	f_link_length = MATH_VecNorm(@o_next_wp OBJ_PosGet() - OBJ_PosGet())
	
	// action
	ACT_ActionSet(ACTION_Vol_Proie)
	
	// dyna
	DYN_GravitySet(Cv_NullVector)
	DYN_FrictionVectorSet(Cv_NullVector)
	
	// le bat regarde le 2nd prochain WP
	to_next_next_wp = WAY_NetNextWP(n_net, o_next_wp, 0, 0)
	v_look_pos = @to_next_next_wp OBJ_PosGet()
	
	//====================================
	// Grabbe la charogne
	//====================================
	
	to_grab = LNK_ClientGet( Ci_LNK_GRAB_TRANSPORTE, mid_grab_charogne, vrai, nofunc, "KBC_GT_selection", nofunc)
	if( ! to_grab )
		//DBG_Error("Le bat n'a pas réussi à grabber la charogne")
		macro_change_etat("KBC_exec_attente_choix")
}



// ========= DEPLACEMENT ==========

AI_Execute("KBC_exec_vol_courbe")
if( i_flag_lien_fini )
	AI_Execute("KBC_exec_attente_choix")

AI_Execute("KBC_exec_balancier")

