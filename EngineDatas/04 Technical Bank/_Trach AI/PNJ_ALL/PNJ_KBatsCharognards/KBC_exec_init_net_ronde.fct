
#include "KBC_defines.var"

//=============================================================================
// INITIALISATION DES SIGHTS DES WP DU RESEAU D'ATTENTE
//=============================================================================

float		tf_Z_min

object	to_wp_1
object	to_wp_2
object	to_wp_3

vector	tv_vec1
vector	tv_vec2

vector	tv_normale
vector	tv_biscectrice

if ( ! n_net )
	return

to_wp_1 = WAY_WPNearestOfOBJ(n_net, all, none, Ci_Filter_CapaFlag)
to_wp_2 = WAY_NetNextWP(n_net, to_wp_1, 0, 0)
to_wp_3 = WAY_NetNextWP(n_net, to_wp_2, 0, 0)

while (to_wp_3 && ! @to_wp_2 OBJ_CapaTest(CAPA_WP_net_ronde_init_sight))
{
	tv_vec1 = @to_wp_1 OBJ_PosGet() - @to_wp_2 OBJ_PosGet()
	tv_vec2 = @to_wp_3 OBJ_PosGet() - @to_wp_2 OBJ_PosGet()
	
	tv_normale = MATH_VecCrossProduct(tv_vec1, tv_vec2)
	
//	DBG_RenderVector(@to_wp_2 OBJ_PosGet(), tv_vec1, color_jaune)
//	DBG_RenderVector(@to_wp_2 OBJ_PosGet(), tv_vec2, color_bleu)
//	DBG_RenderVector(@to_wp_2 OBJ_PosGet(), tv_normale, color_vert)
	
	MATH_VecSetNormalize(tv_normale)
	
	tv_biscectrice = MATH_VecBlendRotate(tv_vec1, tv_vec2, 0.5)
	
	@to_wp_2 OBJ_SightGeneralSet(MATH_VecCrossProduct(tv_normale, tv_biscectrice), Cv_VerticalVector)		// la tangente de l'angle (1,2)(2,3) devient le sight du WP 2
	@to_wp_2 OBJ_CapaSet(CAPA_WP_net_ronde_init_sight, none)	

	to_wp_1 = to_wp_2
	to_wp_2 = to_wp_3
	to_wp_3 = WAY_NetNextWP(n_net, to_wp_3, 0, 0)
}

