#include "KBC_defines.var"

object	to_grab

vector	tv_sens_paf
vector	tv_inclinaison

messageid		tmid_vision

int		ti_charogne_dead
int		ti_test_delai_paf_mange
int		ti_envol


// SORTIE ETAT ===========================================================================
if (i_sort_etat)
{
	f_cible_poids = 0.0
	f_speed = 0.0		// bat à l'arrêt
	i_mange_mode = 0
	i_flag_neck = vrai
	SND_Stop(i_sound_mange)
	// FOODCHAIN
	if( o_cadavre && @o_cadavre AI_IsModel(get_KCadavre_path) )
		@o_cadavre KCadavre_EmplacementLibere(i_trex_pos_index)
	i_trex_pos_index = -1	// réinit pos miam miam :)
	// FOODCHAIN
	i_sort_etat = faux
	return
}


// ENTREE ETAT ===========================================================================
if (i_etat_courant != ETAT_Mange)
{
	i_etat_ancien_ancien = i_etat_ancien
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Mange
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
//	i_DBG_trace_etat = 1
	KBC_DBG_Trace(i_DBG_trace_etat, "etat sol mange")
	
	f_time_action = TIME_Get()			// init durée manger (pour goûter avant de décider s'il s'envole avec ou pas)

	// SND
	i_sound_mange = SND_Request( 13, C_SND_Request_3DSound | C_SND_Request_DestroyWhenFinished )
	SND_PlayLooped( i_sound_mange, -1)
	
	f_paf_mange_countdown = f_paf_mange_delai
	DYN_Off()		// pour ne pas glisser
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ========================================================================================
MACRO_CHECK_PAFS
if( o_best_paf_pere_enabled )
{
	o_cible_attaque = o_best_paf_pere_enabled
	i_cadavre_joueur_proche_flag = vrai
	AI_Execute("KBC_exec_init_attaque")
}

i_flag_neck = faux

// BIDOCHE RAMASSEE
if( o_cible && @o_cible AI_IsModel(get_PNJ_Bidoche_path) && @o_cible OBJ_CapaTest(CAPA_Bidoche_Snapped_Jack) )
{
	KBC_DBG_Trace_Gao(i_DBG_trace_etat, "ma proie était une bidoche qui vient d'être ramassée", o_cible)
	AI_Execute("KBC_exec_init_attente")
}


if( o_cible && ! KBC_EstToujoursUnCadavre(o_cible) )
{
	KBC_DBG_Trace_Gao(i_DBG_trace_etat, "ma cible n'est plus un cadavre, je repars...", o_cible)
	KBC_Cadavre_Del(o_cible)
	AI_Execute("KBC_exec_init_attente")
}

// EMERGENCY ABORT =============================
if( o_cible && ! KBC_TargetStillActive(o_cible) )		// après test décolle sans proie)
{
	KBC_Cadavre_Del(o_cible)
	o_cible = nobody
	// pas de KBC_exec_init_attente car il va y avoir le KBC_exec_decolle_sans_proie
}

// TEST DES POINTS DE VIANDE DU CADAVRE
ti_charogne_dead = faux
if( ! o_cible )
	ti_charogne_dead = vrai		// charogne supprimée


// Test distance à JACK
if( ! o_cible || ! KBC_est_dans_nid(o_cible) )
{
	AI_Execute("KBC_exec_cadavre_joueur_proche")
}

if( f_cadavre_joueur_proche_duree > 0.0 )
{
	ACT_ActionSet(ACTION_Mange_Attente)
	ti_test_delai_paf_mange = faux
}
else
{
	ACT_ActionSet(ACTION_Mange)
	ti_test_delai_paf_mange = vrai
	f_paf_mange_countdown -= MATH_FloatMin(f_paf_mange_countdown, TIME_GetDt())
}


// TEST ENVOL DE LA BAT -------------------
ti_envol = faux
if( ti_charogne_dead )
	ti_envol = vrai
if( KBC_ModeCharognardKongTropProche() )
{
	KBC_DBG_Trace(i_DBG_trace_etat, "KONG est trop proche !!!")
	ti_envol = vrai
}
if( ti_envol )
{
	KBC_Cadavre_Del(o_cible)
	AI_Execute("KBC_exec_decolle_sans_proie")
}


// COMPORTEMENT ========================================================
if( o_cible )
	KBC_Interet_Update(mid_interet_charogne, C_EVENT_InteretStatusFoodchainLocked, o_cible, tmid_vision)


// Décolle grace à la capa ----------------------------------------------
if( OBJ_CapaTest(CAPA_Decolle) )
{
	OBJ_CapaSet(0, CAPA_Decolle)
	if( MSG_GlobalIsValid(mid_grab_charogne) )
		LNK_GrabStatusSet(mid_grab_charogne, Ci_GrabTransporte_Type_Vole)		// la proie change d'anim
	i_envol_palier = 2
	macro_change_etat("KBC_ETAT_Move_Decolle")
}


//if( i_mange_mode == Ci_mange_interaction_Ann )
//{
//	if( o_Jack && @o_Jack KAnn_Death_Attack_Enabled() )
//	{
////		tv_sens_paf = @o_cible OBJ_PosGet() - OBJ_PosGet()
//		tv_sens_paf = - OBJ_SightGet()		// pour l'orientation de ANN
//		EVENT_AddEventPaf( C_EVENT_FILTER_Enemy, C_PAF_KK_KiTue, OBJ_Me(), Cf_EVENT_Duree_1Trame, o_Jack, 99, tv_sens_paf )
//	}
//}
//else 
if( i_mange_mode == Ci_mange_gouter_charogne )
{	
	if( TIME_Elapsed(f_time_action, 4.0) )
	{
		// ça fait 4 sec que le bat mange la charogne
		to_grab = LNK_ThisClientGet(o_cible, Ci_LNK_GRAB_TRANSPORTE, mid_grab_charogne, vrai, "KBC_exec_grab_param", nofunc, "KBC_exec_grab_param")
		if( ! to_grab )
			f_time_action = TIME_Get()			// grab raté => le bat continue de la manger et recommencera plus tard
		else
		{
			LNK_GrabStatusSet(mid_grab_charogne, Ci_GrabTransporte_Type_Vole)
			i_envol_palier = 1
			f_envol_wait = Cf_envol_wait_length
			macro_change_etat("KBC_ETAT_Move_Decolle")				// charogne grabbée => envol
		}
	}
}

// PAF MANGE =====================================================================
if( ti_test_delai_paf_mange && ! f_paf_mange_countdown )
{
	tv_sens_paf = @o_cible OBJ_PosGet() - OBJ_PosGet()
	if( MATH_VecNullToler(tv_sens_paf, 0.1) )
		tv_sens_paf = OBJ_SightGet()
	EVENT_AddEventPaf(C_EVENT_FILTER_All, C_PAF_KK_FoodChain, OBJ_Me(), Cf_EVENT_Duree_1Trame, o_cible, 1.0, tv_sens_paf)
	f_paf_mange_countdown = f_paf_mange_delai
}


if( i_splash_flag )
	tv_inclinaison = Cv_VerticalVector
else if( ! MATH_VecNullEpsilon(v_ground_normale) )
	tv_inclinaison = v_ground_normale
else
	tv_inclinaison = Cv_VerticalVector
OBJ_BankingSet(MATH_VecBlendRotate(OBJ_BankingGet(), tv_inclinaison, 10.0 * TIME_GetDt()))


