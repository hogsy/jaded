#include "KBC_defines.var"

int					ti_cpt

float 				tf_amplitude
float 				tf_time

vector			tv_sens
vector			tv_pos_mur
vector			tv_temp
vector			tv_speed
vector			tv_pos

object			to_target			// acteur vers lequel le raptor a été lancé ou vers lequel il a sauté (aide au tir)
object			to_target_tete		// tête de l'acteur
object			to_bone
object			to_gao

messageid		tmid_vision


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_projectile_mode = 0
	o_aide_tir_actor = nobody
 	f_speed = 0.0
	f_speed_blend_coef  = 0.0	
	i_sort_etat = faux
	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_KK_Projectile)
{
	i_etat_ancien_ancien = i_etat_ancien
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_KK_Projectile
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	KBC_DBG_Trace(i_DBG_trace_etat, "etat kk projectile")
	
	tv_sens = Cv_NullVector
	v_throw_pos = Cv_NullVector
	to_target = nobody
	
	AI_Execute("KBC_exec_dyn_on")
	
	if (i_projectile_mode != Ci_projectile_lache)
		ACT_ActionSet(ACTION_Grabbed_Projectile)

	EVENT_LIFE_CurLifeSet(ID_LIFE, 0.0)		// morte si projetée
	KBC_STATS_NMI_Killed(o_Kong)

	i_paf_send = faux
	to_bone = OBJ_Me()

	// GESTION DES DIFFERENTS MODES DE PROJECTILE
	if( i_projectile_mode == Ci_projectile_lance_unknown )
	{
		to_target = LNK_GrabKong_LanceObjectGet(mid_grabbed_by_Kong)
		if( to_target )
			i_projectile_mode = Ci_projectile_lance_target
		else
			i_projectile_mode = Ci_projectile_lance_aveugle
		o_projectile_target = to_target
	}
	
	// GESTION DES DIFFERENTS MODES DE PROJECTILE
	switch(i_projectile_mode)
	{
		case Ci_projectile_lance_finish_echec :
			// sens de projection
			tv_sens = @o_last_grabbed_actor OBJ_SightGet()
			ti_cpt = @get_global i_Bat_finish_expulsion_cpt 
			DBG_RenderVector(OBJ_PosGet(), tv_sens * 5, color_blanc)
			tv_sens = MATH_VecRotate(tv_sens, Cv_VerticalVector, ( (ti_cpt * Cf_2Pi) / 5.0)  + Cf_PiBy4)
			MATH_VecSetHorzNormalize(tv_sens)
			DBG_RenderVector(OBJ_PosGet(), tv_sens * 5, color_jaune)
			OBJ_BankingGeneralSet(- tv_sens, Cv_VerticalVector)
			@get_global i_Bat_finish_expulsion_cpt++
			
			// point de projection
 			v_throw_pos = OBJ_PosGet() + (tv_sens * 12.0)
			DBG_RenderVector(OBJ_PosGet(), v_throw_pos - OBJ_PosGet(), color_rouge)
			
			// speed (cas non générique)
			tf_time = 0.0
			tf_amplitude = 2.0
			tv_speed = DYN_LIB_ImpulsionGet_Friction(OBJ_PosGet(), v_throw_pos, Cv_Bat_throw_gravity, Cf_Bat_throw_friction, tf_time, faux, tf_amplitude)
			
			KBC_RIDE_Reset()
			break
			
		case Ci_projectile_lance_target :
			// Raptor lancé par l'acteur qui le grabbait sur une cible
			to_target_tete = @to_target ANI_CanalObjectGet(Anim_Canal_Tete)
			if( to_target_tete )
				v_throw_pos = @to_target_tete OBJ_PosGet()
			else
				v_throw_pos = @to_target OBJ_PosGet()
			tv_sens = MATH_VecNormalize(v_throw_pos - OBJ_PosGet())
			
			tf_time = 0.0
			tf_amplitude = 2.0
			tv_speed = DYN_LIB_ImpulsionGet_Friction(OBJ_PosGet(), v_throw_pos, Cv_Bat_throw_gravity, Cf_Bat_throw_friction, tf_time, faux, tf_amplitude)
			break
			
		case Ci_projectile_lache :
			// Raptor laché car l'acteur qui le grabbait a été paffé
			tv_sens = OBJ_PosGet() - @o_last_grabbed_actor OBJ_PosGet()
			tv_sens.z = 0.0
			if( ! MATH_VecNullEpsilon(tv_sens) )
				MATH_VecSetNormalize(tv_sens)		// ne part pas en hauteur
			else
			{
				to_bone = ANI_CanalObjectGet(BAT_Canal_Torse)
				tv_sens = @to_bone OBJ_PosGet() - @o_last_grabbed_actor OBJ_PosGet()
				tv_sens.z = 0.0
				MATH_VecSetNormalize(tv_sens)
			}
			v_throw_pos = OBJ_PosGet() 
			v_throw_pos.z = @o_last_grabbed_actor OBJ_PosGet().z		// tombe au niveau du sol
			break
			
		case Ci_projectile_lance_aveugle :
			// Raptor lancé par l'acteur qui le grabbait (pas de cible)
			if( i_etat_ancien == ETAT_KK_Grabbed_by_Kong )
				tv_sens = MATH_VecNormalize(LNK_GrabKong_LanceVectorGet(mid_grabbed_by_Kong))
			else
				tv_sens = - OBJ_SightGet()
			v_throw_pos = OBJ_PosGet() + (tv_sens * 30.0)
			break
			
		default:
			DBG_Error("i_projectile_mode inconnu")
			break
	}
	
	KBC_send_msg( to_target, msg_id_KK_send_projectile)
	o_grabbed_actor = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong, faux, nofunc, nofunc)
	v_projection_dir = tv_sens
	DBG_RenderVector(@to_bone OBJ_PosGet(), v_throw_pos - @to_bone OBJ_PosGet(), color_blanc)

	// speed cas générique
	DYN_FrictionVectorSet(Cv_Bat_throw_friction)
	switch( i_projectile_mode )
	{
		case Ci_projectile_lance_finish_echec :
		case Ci_projectile_lance_target :
			DYN_SpeedSetVector(tv_speed)		// dyn impulsion
			DYN_GravitySet(cvector(0,0,-10))
			break
			
		default:
			tf_time = 0.0
			tv_speed = MATH_LIB_PHY_Impulsion_Get(@to_bone OBJ_PosGet(), v_throw_pos, Cv_Bat_throw_gravity, 50.0, tf_time)
			DYN_SpeedSetVector(tv_speed)
			DYN_GravitySet(Cv_Bat_throw_gravity)
			break
	}
	
	f_speed_fall_blend_coef = 1.0
	if( EVENT_LIFE_CurLifeGet(ID_LIFE) > 0.0 )
		SND_RequestPlay(Ci_SND_Paf_Gros)
	KBC_Paf_BankingReset()
	i_paf_mur = faux
}
else
{
	f_time_start_etat += TIME_GetDt()
}


// ANALYSE =======================================================================================================


// COMPORTEMENT =======================================================================================================

switch( i_projectile_mode )
{
	case Ci_projectile_lance_target :
		tv_temp = OBJ_PosGet()
		if( tv_temp.z <= (v_throw_pos.z - 1.0) )
			COL_ColSetActivationSet(C_bit_zdm_pied, none)		// j'ai raté ma target
		else
			COL_ColSetActivationSet(none, C_bit_zdm_pied)
		break
	
	default:
		COL_ColSetActivationSet(C_bit_zdm_pied, none)
		break
}

// SE RENVOLLER =================================================
if( EVENT_LIFE_CurLifeGet(ID_LIFE) > 0.0 )
{
	KBC_Interet_Update(mid_interet_attaque, C_EVENT_InteretStatusGrabbed, o_last_grabbed_actor, tmid_vision)
	if( i_projectile_mode == Ci_projectile_lache )
	{
		o_cible_attaque = o_last_grabbed_actor
		AI_Execute("KBC_exec_init_attaque")			// lachée vivante => se renvole
	}
}

// COLLISIONS ====================================================
if( f_time_start_etat > 0.25 )
{
	// check mur
	if( COL_CollideType(COL_C_Wall) )
	{
		to_gao = COL_ObjectGet(COL_C_Wall)
		tv_pos_mur = COL_CollidedPointGet(COL_C_Wall)
		DBG_RenderVector(tv_pos_mur, Cv_VerticalVector, color_jaune)
		v_paf_dir = COL_RayObject_NormalGet()
		if( v_paf_dir.z >= 0.0 )
			v_paf_dir.z = 0.0
		DYN_SpeedSetVector(Cv_NullVector)
		DBG_RenderVector(OBJ_PosGet(),v_paf_dir,color_bleu)
		EVENT_LIFE_CurLifeSet(ID_LIFE, 0.0)
		i_paf_mur = vrai
		macro_change_etat("KBC_ETAT_Paf")
	}

	// check sol
	if( COL_CollideType(COL_C_Ground))
	{
		if( i_projectile_mode == Ci_projectile_lance_finish_echec )
		{
			to_bone = ANI_CanalObjectGet(Anim_Canal_Bassin)
			tv_pos = @to_bone OBJ_PosGet()
			KBC_SFX_Ring(tv_pos, Cv_VerticalVector)
		}
		to_gao = COL_ObjectGet(COL_C_Ground)
		v_paf_dir = v_projection_dir
		if( v_paf_dir.z >= 0.0 )
			v_paf_dir.z = 0.0
		DYN_SpeedSetVector(Cv_NullVector)
		i_mort_au_sol_sur_le_dos = vrai
		macro_change_etat("KBC_ETAT_Sol_Ecrasement")
	}
}

// INTERET, TEST REPART EN ATTAQUE ? ================================
if( EVENT_LIFE_CurLifeGet(ID_LIFE) > 0.0 )
{
	KBC_Interet_Update(mid_interet_attaque, C_EVENT_InteretStatusGrabbed, o_last_grabbed_actor, tmid_vision)
	switch( i_projectile_mode )
	{
		case Ci_projectile_lache :
			o_cible_attaque = o_last_grabbed_actor
			AI_Execute("KBC_exec_init_attaque")			// lachée vivante => se renvole
			break
		
		case Ci_projectile_lance_unknown :
		case Ci_projectile_lance_aveugle :
			tv_speed = DYN_SpeedGetVector()
			if( tv_speed.z < -10.0 )
			{
				o_cible_attaque = o_last_grabbed_actor
				AI_Execute("KBC_exec_init_attaque")
			}
			break
	}
}

tv_temp = -v_projection_dir
DBG_RenderVector(OBJ_PosGet(), tv_temp * 10, color_jaune)
OBJ_BankingGeneralSet(MATH_VecBlendRotate(OBJ_SightGet(), tv_temp, 5 * TIME_GetDt()), KBC_Paf_BankingGet())

