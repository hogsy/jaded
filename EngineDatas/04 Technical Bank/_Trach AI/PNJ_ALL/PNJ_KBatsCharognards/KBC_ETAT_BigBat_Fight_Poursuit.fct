#include "KBC_defines.var"

messageid		tmid_vision

object			to_head

vector			tv_pos


// SORTIE ETAT =========================================================================
if (i_sort_etat)
{
	f_bigbat_delai_no_attack = Cf_bigbat_delai_no_attack
	if( i_etat_courant != ETAT_BigBat_Fight_Repart )
		KBC_BigBat_UncolDel()

	i_sort_etat = faux
	return
}

// ENTREE ETAT =========================================================================
if( i_etat_courant != ETAT_BigBat_Fight_Poursuit )
{
	i_etat_ancien_ancien = i_etat_ancien
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_BigBat_Fight_Poursuit
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	KBC_DBG_Trace(i_DBG_trace_etat, "etat fight poursuit")

	// INIT DEPLACEMENT --------------------------------------------------------
	v_cible_pos = @o_big_bat_retreat_wp OBJ_PosGet()
	
	KBC_ref_speed_set(f_vitesse_fight_remonte)
//	ACT_ActionSet(i_ACTION_Vol_Standard)
	ACT_ActionSet(ACTION_Falaise_Vol)
	KBC_action_frequency_set(8.0)
	
	i_flag_depl_horiz = faux
	
	f_angle_rotation_max = Cf_angle_rotation_max_contact			// les bats rouges ne sont pas limitées dans la rotation
}
else
{
	f_time_start_etat += TIME_GetDt()
	f_paf_sent_pursuit_time += TIME_GetDt()
}

// ANALYSE =================================================================

MACRO_CHECK_PAFS

// COMPORTEMENT ===========================================================

if( f_paf_sent_pursuit_time > 0.55 )
{
	macro_change_etat("KBC_ETAT_BigBat_Fight_Repart")
}

KBC_Interet_Update(mid_interet_attaque, C_EVENT_InteretStatusAttack, o_cible_attaque, tmid_vision)		// j'ai fini d'attendre

i_flag_frein = faux
i_flag_neck = vrai
to_head = @o_cible_attaque ANI_CanalObjectGet(Anim_Canal_Tete)
if( ! to_head )
	to_head = o_cible_attaque
v_look_pos = @to_head OBJ_PosGet()

v_paf_sent_offset *= Amorti_Coef_Dt(0.9)

DBG_RenderVector(@to_head OBJ_PosGet(), - v_paf_sent_offset, color_vert)

tv_pos = @to_head OBJ_PosGet()
tv_pos -= v_paf_sent_offset
tv_pos += cvector(0,0,4)
tv_pos.z = MATH_FloatMin(tv_pos.z, f_poursuit_backup_Z)

DBG_RenderVector(OBJ_PosGet(), tv_pos - OBJ_PosGet(), color_jaune)
OBJ_PosSet(MATH_VecBlend(OBJ_PosGet(), tv_pos, 10 * TIME_GetDt()))
