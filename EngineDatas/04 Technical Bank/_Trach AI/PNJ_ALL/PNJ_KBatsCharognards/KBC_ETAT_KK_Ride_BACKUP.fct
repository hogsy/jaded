//#include "KBC_defines.var"
//
//int					ti_jump_exit
//int					ti_ann_kkgrab
//vector			tv_temp
//vector			tv_temp2
//vector			tv_lance_pos
//messageid		tmid_grabAnn
//messageid		tmid_vision
//float				tf_cote
//int 				ti_i
//int 				ti_nb_bat_ride
//
//
//// SORTIE ETAT ===================================================================
//if (i_sort_etat)
//{
//	if( i_etat_courant != ETAT_KK_Finish )
//		KBC_RIDE_Reset()
//	
//	i_sort_etat = faux
//	return
//}
//
//
//ti_jump_exit = faux		// avant l'init car l'init le modifie
//ti_ann_kkgrab = faux	// avant l'init car l'init le modifie
//
//
//// INITIALISATION ETAT ==============================================================
//if (i_etat_courant != ETAT_KK_Ride)
//{
//	i_etat_ancien  = i_etat_courant
//	i_etat_courant = ETAT_KK_Ride
//
//	if (fct_last_etat)
//	{
//		i_sort_etat = vrai
//		AI_Execute(fct_last_etat)
//	}
//	fct_last_etat = AI_TrackCurGet()
//	f_time_start_etat = 0.0
//	
//	DYN_GravitySet(Cv_NullVector)
//	COL_ColSetActivationSet(none, C_bit_zdm_pied)
//	o_bone_ride_KK_uncol = o_bone_ride_KK
//	i_uncol_ride_actor = 1
//
//	AI_CBAdd(o_bone_ride_KK_uncol, CallBack_After_Blend, "KBC_cb_set_pos")
//	f_ride_paf_delay = 0.0
//	f_pos_blend_coef_ride = 0.0
//	i_paf_sent = faux
//	i_ride_mode = Ci_ride_paf_kong
//	
//	if( f_DBG_KK_Ride_duration > 0.0 )
//		f_KK_Ride_duration = f_DBG_KK_Ride_duration
//	else
//		f_KK_Ride_duration = Cf_ride_duration
//	
//	if( i_DBG_trace_etat )
//	{
//		DBG_TraceObject(OBJ_Me())
//		DBG_TraceString(" : etat kk ride")
//		DBG_TraceEOL()
//	}
//	
//	DBG_TraceObject(OBJ_Me())
//	DBG_TraceString(" ride kong sur ")
//	DBG_TraceObject(LNK_GrabBoneGet(mid_bone_ride_KK_LNK_ID))
//	DBG_TraceEOL()
//	
//	// TEST PASSAGE EN FINISH ==========================================
//	o_I_finish_actor = LNK_ClientGet(Ci_LNK_KKFINISH_ON_KONG, mid_I_finish_LNK_ID, vrai, nofunc, nofunc, nofunc)
//	if( o_I_finish_actor )
//		macro_change_etat("KBC_ETAT_KK_Finish")
//		
////	ACT_ActionSet(ACTION_Ride_Kong_Move)		// après test finish, pour ne pas avoir 2 actionset successifs
//	ACT_ActionSet(ACTION_Ride_Frenetic)
//}
//else
//{
//	f_time_start_etat += TIME_GetDt()
//	
//	if( i_KONG_is_on_ground )
//		f_ride_paf_delay += TIME_GetDt()
//}
//
//
//// ANALYSE =======================================================================================================
//
//// GRAB ===========================================================
////o_grabbed_actor = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong, vrai, nofunc, nofunc)
////if (o_grabbed_actor)
////	macro_change_etat("KBC_ETAT_KK_Grabbed")
//
//
//// SORTIE DE RIDE ===================================================
//o_bone_ride_KK = LNK_ClientGet(Ci_LNK_RIDE_DINO, mid_bone_ride_KK_LNK_ID, vrai, nofunc, nofunc, nofunc)
//if ( ! o_bone_ride_KK)
//	AI_Execute("KBC_exec_init_attente")				// Kong Coupe la LIAISON
//
//
//// PASSAGE EN FINISH FAKE =========================================
//switch( ACT_ActionGet() )
//{
////	case ACTION_Ride_Kong_Move :
//	case ACTION_Ride_Attack :
//	case ACTION_Ride_Frenetic :
//		if( @get_global i_KNMI_finish_leader_set )
//		{
//			// il y a un finish : passage en anim finish fake
//			if( i_DBG_trace_finish )
//			{
//				DBG_TraceObject(OBJ_Me())
//				DBG_TraceString(" détecte qu'une bat est passé en finish : je vais passer en ride mode finish fake ")
//				DBG_TraceEOL()
//			}
//			i_ride_mode = Ci_ride_finish_fake
//			if( MATH_Modulo(@get_global i_KNMI_finish_fake_actor_count, 2) == 0 )
//				ACT_ActionSet(ACTION_I_Finish_Fake1)
//			else
//				ACT_ActionSet(ACTION_I_Finish_Fake2)
//		}
//		break
//}
//
//
//// ATTAQUE KONG APRES DELAI
//if( i_ride_mode == Ci_ride_paf_kong && f_ride_paf_delay >= f_KK_Ride_duration )
//{
//	ACT_ActionSet(ACTION_Ride_Attack)
//	f_ride_paf_delay = 0.0
//}
//
//
//// PAFFE KONG
//if (	ACT_ActionGet() ==ACTION_Ride_Attack)
//{
//	if( ! i_paf_sent )
//	{
//		if( ANI_CurrentFrameGet(0) > 46 )
//		{
//			i_paf_sent = vrai
//			EVENT_AddEventPaf(C_EVENT_FILTER_Enemy, C_PAF_KK_Moyen, OBJ_Me(), Cf_EVENT_Duree_1Trame, o_cible_attaque, Ci_dmg_attaque_ride, OBJ_SightGet())
//			SND_RequestPlay(Ci_SND_Envoie_Paf)
//		}
//	}
//	else
//	{
//		if( ANI_CurrentFrameGet(0) > 80 )
//			AI_Execute("KBC_exec_init_attente")		// fin du ride
//	}
//}
//
//
//// SUIVI DE REGARD ================================================
//i_flag_neck = faux
//
//// INTERET ========================================================
//KBC_Interet_Update(mid_interet_attaque, C_EVENT_InteretStatusRide, o_cible_attaque, tmid_vision)
//
//