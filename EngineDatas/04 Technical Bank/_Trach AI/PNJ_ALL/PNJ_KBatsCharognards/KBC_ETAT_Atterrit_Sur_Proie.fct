
#include "KBC_defines.var"

//=============================================================================
// LA BAT ATTERRIT POUR MANGER OU SE SAISIR DE LA CHAROGNE
//=============================================================================


// Constantes pour positionner le bat pour l'anim "atterrissage tr att proie"
#define		Cf_atterrissage_distance		1.813
#define		Cf_atterrissage_hauteur		1.886

#define		Ci_coef_blend_correction		50

// Positionnement pour le grab
vector		tv_sight				// sight de la charogne
vector		tv_pos_grab		// position de grab de la charogne
vector		tv_decal_grab 		// décalage pour la position de grab
vector		tv_decal_anim		// décalage pour positionner le bat pour l'anim d'atterrissage

// décalage pour l'anim d'atterrissage
vector		tv_offset_decal		// offset de décalage entre la pos du wp et la pos du bat avant de lancer l'anim d'atterrissage_fin
float			tf_duree				// durée de l'anim


// SORTIE ETAT
if (i_sort_etat)
{
	i_flag_depl_horiz = faux
	
	i_sort_etat = faux
	return
}

tv_decal_grab = @o_cible MATH_VecLocalToGlobal(@"univ" Enemy_av_GrabTransporte_Offset[i_charogne_ID])

// ENTREE ETAT
if (i_etat_courant != ETAT_Atterrit_Sur_Proie )
{
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Atterrit_Sur_Proie
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	
	f_ref_speed = Cf_speed_atterrit
	
	// destination et suivi du regard
	v_cible_pos = @o_cible OBJ_PosGet()
	v_look_pos = v_cible_pos
	
	tv_pos_grab = v_cible_pos			// TODO : Choisir un os de la charogne pour positionner le wp d'atterrissage (et pas son pivot)
	
	// décalage 1 : position pour grabber
	DBG_RenderVector(v_cible_pos, tv_decal_grab, color_bleu)
	
	// décalage 2 : colinéaire au sight du cadavre, à une distance distance et une hauteur spécifiques, pour lancer l'anim
	tv_sight = @o_cible OBJ_SightGet()
	if( MATH_VecDotProduct(OBJ_SightGet(), tv_sight) < 0 )
		tv_sight = - tv_sight				// chois du sens pour atterrir : vers la tête ou vers les pieds
	v_dest_sight = tv_sight
	tv_decal_anim = KBC_decalage( - v_dest_sight, Cf_atterrissage_distance, Cf_atterrissage_hauteur )	// position pour anim
	
	DBG_RenderVector(v_cible_pos, tv_decal_anim, color_jaune)
	
	v_decalage = tv_decal_grab + tv_decal_anim
	v_dest_pos = tv_pos_grab + v_decalage		// position de destination
	
	DBG_RenderVector(v_cible_pos, v_decalage, color_vert)
	
	// wp d'arrivée
	@o_tmp_obj_next OBJ_PosSet(v_dest_pos)
	@o_tmp_obj_next OBJ_BankingGeneralSet( v_dest_sight, Cv_VerticalVector)
	o_next_wp = o_tmp_obj_next
	
	// lien à parcourir
	f_link_coef = 0.0
	f_link_length = MATH_VecNorm(@o_next_wp OBJ_PosGet() - @o_last_wp OBJ_PosGet())
	
	i_flag_depl_horiz = vrai
	f_time_action = TIME_Get()
	
	if( ! f_duree_dans_champ_camera )
	{
		i_flag_attente_hors_champ = vrai		// Hors champ : attente avant d'atterrir à côté de la charogne
		ACT_ActionSet(ACTION_Vol_Standard)
	}
	else
	{
		// wp de départ
		@o_tmp_obj_last OBJ_PosSet(OBJ_PosGet())
		@o_tmp_obj_last OBJ_BankingGeneralSet(OBJ_SightGet(), OBJ_BankingGet())
		o_last_wp = o_tmp_obj_last
		
		ACT_ActionSet(ACTION_Vol_Atterrissage_deb)
	}
}


// Cri annonce grab
if( ! TIME_Elapsed(f_time_action, 1.0) )
{
	//Str_DisplayTextOnce("Skriiiii !!! - Oh la belle charogne !!!", cvector(0, 0.5, 0))
}

// Attente Hors Champ
if( i_flag_attente_hors_champ )
{
	if( ( TIME_Elapsed(f_time_action, 3.0) ) || ( f_duree_dans_champ_camera >= 0.5 ) )
	{
		f_speed = 0.0
		f_time_action = TIME_Get()		// pour relancer un cri
		ACT_ActionSet(ACTION_Vol_Atterrissage_deb)
		i_flag_attente_hors_champ = faux
		
		// wp de départ
		@o_tmp_obj_last OBJ_PosSet(OBJ_PosGet())
		@o_tmp_obj_last OBJ_BankingGeneralSet(OBJ_SightGet(), OBJ_BankingGet())
		o_last_wp = o_tmp_obj_last
	}
	else
	{
		// Orientation vers la charogne
		OBJ_BankingGeneralSet(
			MATH_VecBlendRotate(OBJ_SightGet(), @o_cible OBJ_PosGet() - OBJ_PosGet(), 5 * TIME_GetDt()),
			MATH_VecBlendRotate(OBJ_BankingGet(), Cv_VerticalVector, 5 * TIME_GetDt()) )
		
//		DBG_TraceString("attente hors champ (atterrit sur un cadavre)")
//		DBG_TraceEOL()
	}
	
	return	
}



if(ACT_ActionGet() == ACTION_Vol_Atterrissage_deb)
{
	// le bat n'a pas encore atteint le wp de lancement de l'anim atterrissage_fin
	
	// ========== DEPLACEMENT ============
	
	AI_Execute("KBC_exec_vol_courbe")
	if( i_flag_depl_fini )
	{
		// wp atteint (ou presque)
//		if(
//			( ! MATH_VecNullToler(OBJ_PosGet() - @o_next_wp OBJ_PosGet(), 0.1) )
//			||
//			( ! MATH_VecNullToler(OBJ_SightGet() - @o_next_wp OBJ_SightGet(), 0.1) )
//			||
//			( ! MATH_VecNullToler(OBJ_BankingGet() - @o_next_wp OBJ_BankingGet(), 0.1) )
//		)
//		{
//			// bat pas complètement arrivée -> position et orientation progressive 
//			OBJ_PosSet( MATH_VecBlendRotate( OBJ_PosGet(), @o_next_wp OBJ_PosGet(), Ci_coef_blend_correction * TIME_GetDt()) )
//			OBJ_BankingGeneralSet( MATH_VecBlendRotate( OBJ_SightGet(), @o_next_wp OBJ_SightGet(), Ci_coef_blend_correction * TIME_GetDt()), MATH_VecBlendRotate( OBJ_BankingGet(), @o_next_wp OBJ_BankingGet(), Ci_coef_blend_correction * TIME_GetDt()) )
//
			OBJ_PosSet( @o_next_wp OBJ_PosGet() )
			OBJ_BankingGeneralSet( @o_next_wp OBJ_SightGet(), @o_next_wp OBJ_BankingGet())
//		}
//		else
		{
			// bat arrivé -> anim d'atterrissage sur le cadavre
			ACT_ActionSet( ACTION_Vol_Atterrissage_fin )			// wp anim atterrissage_fin atteint -> passage en anim atterrissage_fin
			@o_tmp_obj_last OBJ_PosSet( v_cible_pos + tv_decal_grab )								// TODO : supprimer cette ligne de debug !!!
			@o_tmp_obj_last OBJ_BankingGeneralSet( v_dest_sight, Cv_VerticalVector)	// TODO : supprimer cette ligne de debug !!!
			i_flag_balancier = faux				// balancier désactivé
		}
	}
}
else if( ACT_ActionGet() == ACTION_Vol_Atterrissage_fin) 
{
	f_speed = 0.0			// vitesse nulle pour redécoller si paf
	if( ACT_ActionFinished() )
	{
		ACT_ActionSet(ACTION_Mange_Attente)					// le bat a atterrit -> il attend avant de manger
		v_look_pos = OBJ_PosGet() + MATH_VecLocalToGlobal( cvector(0, -5, 1) )
	}
}
else if( (ACT_ActionGet() == ACTION_Mange_Attente) && ACT_ActionFinished() )
{
	i_mange_mode = Ci_mange_gouter_charogne
	macro_change_etat("KBC_ETAT_Mange")		// le bat a attendu -> il va manger la charogne
}

