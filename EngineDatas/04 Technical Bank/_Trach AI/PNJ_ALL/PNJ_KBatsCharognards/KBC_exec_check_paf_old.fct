//
#include 		"KBC_defines.var"
//
////=============================================================================
//// DETECTION DES PAFS
////=============================================================================
//
//
//// Events Pafs
//int					ti_paf_rank				// Rang du paf dans la liste
//messageid		tmid_paf_ID				// ID du paf
//message		tmsg_paf_filter			// Message filtre pour la lecture de la liste
//
//// Pafs reçus
//int					ti_cur_paf_canal		// localisation du paf
//float				tf_cur_paf_force		// dégats du paf courant
//vector			tv_cur_paf_dir			// recul du paf
//object			to_cur_paf_pere		// père du paf
//float				tf_best_paf_force		// dégats du + gros paf
//
//// Event visilibity du père du paf
//int					ti_vis_rank				// Rang du paf dans la liste
//messageid		tmid_vis_ID				// ID du paf
//message		tmsg_vis_filter			// Message filtre pour la lecture de la liste
//
//
////===========================================================
//// Détection des pafs qui ont touché le bat
////===========================================================
//
//i_paf_type = 0			// init des filtres de tous les pafs de la trame
//
//o_best_paf_pere = nobody
//tf_best_paf_force = 0.0
////i_flag_bout_portant = faux
//
//tf_cur_paf_force = 0.0
//to_cur_paf_pere = nobody
//tv_cur_paf_dir = Cv_NullVector
//ti_cur_paf_canal = 0
//
//MSG_SetNull( tmsg_paf_filter)
//tmsg_paf_filter.msg_gao1 = OBJ_Me()
//
//ti_paf_rank = -1
//for (	tmid_paf_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Paf, &ti_paf_rank, tmsg_paf_filter);
//		MSG_GlobalIsValid(tmid_paf_ID);
//		tmid_paf_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Paf, &ti_paf_rank, tmsg_paf_filter) )
//{
//	tv_cur_paf_dir =  EVENT_PafDirGet(tmid_paf_ID)
//	tf_cur_paf_force = EVENT_PafPuisGet(tmid_paf_ID)
//	to_cur_paf_pere = EVENT_PereGet(tmid_paf_ID)
//	ti_cur_paf_canal = EVENT_PafCanalGet(tmid_paf_ID)
//	i_paf_type |= EVENT_PafTypeGet(tmid_paf_ID)				// cumul des filtres de tous les pafs de la trame
//	
//	i_CineStack = 0		// quitte la ciné
//	OBJ_CapaSet(CAPA_CINE_Terminee, none)
//	
//	if( i_paf_type & C_EVENT_PAF_Viande )
//	{
//		// Paf viande : la bat perd des "points de viande" si elle est morte, sinon elle pert des HP
//		if( f_HP )
//			KBC_Degats( tf_cur_paf_force, Cf_Life_Full_Life )
//		else
//			f_point_de_viande -= MATH_FloatMin(f_point_de_viande, tf_cur_paf_force)
//		
//		// pas de recul visuel, elle meurt sur place
//		continue
//	}
//	
//	if( to_cur_paf_pere == o_jack )
//	{
//		// seul Jack a le droit de faire des coups critiques
////		if( ! MSG_GlobalIsValid(mid_grab_charogne) )
////		{
////			if (ti_cur_paf_canal == Anim_Canal_Tete)
//////				i_flag_head_shot = vrai		// head sh
////				ti_cur_paf_force *= 2
////			else if( ( ti_cur_paf_canal == Ci_bat_canal_aileD || ti_cur_paf_canal == Ci_bat_canal_aileG ) && (ti_cur_paf_force >= Ci_big_paf) )
////				i_flag_can_fly = faux			// gros shoot dans les ailes => le bat ne pourra plus voler
////			else
//			if( ti_cur_paf_canal == Anim_Canal_Tete )
//				tf_cur_paf_force *= f_paf_head_multiplicateur
//			else if( ti_cur_paf_canal == Ci_bat_canal_aileD || ti_cur_paf_canal == Ci_bat_canal_aileG )
//				tf_cur_paf_force *= f_paf_wing_multiplicateur
////		}
//		
////		if( MATH_VecNorm(@to_cur_paf_pere OBJ_PosGet() - OBJ_PosGet()) <= f_bout_portant_distance )
////		{
////			i_flag_bout_portant = vrai
////			ti_cur_paf_force *= f_bout_portant_dmg_mult
////		}
//	}
//	
//	if( i_paf_type & C_EVENT_PAF_Perforant )
//	{
//		// javelot : force la bat à tomber et à passer en agonie
//		i_paf_type |= C_EVENT_PAF_Agonisant
//	}
//	
//	if( ! i_flag_head_shot )
//	{
//		// le bat n'est pas mort
//		if( tf_best_paf_force < tf_cur_paf_force )
//		{
//			// c'est le meilleur paf pour cette trame
//			tf_best_paf_force = tf_cur_paf_force
//			
//			if( KBC_pos_in_BV(@to_cur_paf_pere OBJ_PosGet(), o_zone_activite) )
//			{
//				// le père du paf est dans ma zone d'activité
//				
//				// backup object père
//				o_best_paf_pere = to_cur_paf_pere	
//				
//				// backup ID père
//				ti_vis_rank = -1
//				MSG_SetNull( tmsg_vis_filter)
//				tmsg_vis_filter.msg_sender = to_cur_paf_pere
//				tmid_vis_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Visibility, &ti_vis_rank, tmsg_vis_filter)
//				i_agresseur_ID = EVENT_VisionIDGet(tmid_vis_ID)
//			}
//		}
//		
//		f_sum_pafs_force += tf_cur_paf_force		// cumul des pafs
//	}
//	else
//		f_sum_pafs_force = f_HP			// cumul des pafs
//	
//	v_sum_pafs_dir += MATH_VecNormalize(tv_cur_paf_dir) * tf_cur_paf_force
////	DBG_RenderVector(OBJ_PosGet(), MATH_VecNormalize(tv_cur_paf_dir) * ti_cur_paf_force, color_rouge)
//}
//
//
//// Une bat pendue paffée réveille les autres bats pendue si elle ne meurt pas sur le coup
//if( f_sum_pafs_force && i_etat_courant == ETAT_Attente_Pendu )
//{
//	if( f_sum_pafs_force < f_HP )
//	{
//		EVENT_AddEventSound(C_EVENT_FILTER_BatCharognard, OBJ_Me(), Cf_EVENT_Duree_1Trame, OBJ_PosGet(), 30.0)
//		i_flag_hurle = vrai
//	}
//	else
//		i_flag_silent_kill = vrai
//}
//
//