
#include "KBC_defines.var"

//=============================================================================================
// RE-ACTUALISATION DE L'INTERET POUR LA CIBLE A ATTAQUER LORSQUE LA BAT LA VOIT (MEMOIRE DE LA BAT)
//=============================================================================================

// Event vision
int						ti_i
messageid			tmid_vision_ID

// Event vision courant
object				to_pere
int						ti_perso_ID
float					tf_interet
int						ti_flag_best
float					tf_life_coef
float					tf_cible_poids
int						ti_is_blesse
int						ti_top_priorite

// Best cible
object				to_best_cible
float					tf_best_interet
int						ti_best_is_humain
int						ti_best_is_blesse
int						ti_best_is_top_prio_under_attack

// Test event interet
int						ti_interet_rank
messageid			tmid_interet_ID
message			tmsg_interet_filter
object				to_interet_pere
messageid			tmid_interet_vision_ID

int						ti_deja_under_attack
int						ti_bat_grabbing


i_attack_mode = Ci_attack_mode_aucun
f_time_last_check_attaque = TIME_Get()

to_best_cible = nobody
tf_best_interet = 0.0
ti_best_is_humain = faux
ti_best_is_blesse = faux
ti_best_is_top_prio_under_attack = faux
ti_top_priorite = faux

if( i_DBG_trace_choix_proie_ON )
{
	DBG_TraceEOL()
	DBG_TraceString("= = = ")
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" : Recherche une cible à attaquer = = = ")
	DBG_TraceEOL()
}

AI_Execute("KBC_exec_check_vision")	
if( i_seen_actor_nb )
{
	if( i_DBG_trace_choix_proie_ON )
	{
		DBG_TraceObject(OBJ_Me())
		DBG_TraceString(" / ")
		DBG_TraceInt(i_seen_actor_nb)
		DBG_TraceString(" acteur(s) vu(s)")
		DBG_TraceEOL()
	}

	// le bat voit des acteurs
	for( ti_i = 0; ti_i < i_seen_actor_nb; ti_i++)
	{
		// test de tous les acteurs vus
		tmid_vision_ID = amid_seen_actor[ti_i]
		to_pere = EVENT_PereGet(tmid_vision_ID)
		tf_interet = EVENT_VisionInteretGet(tmid_vision_ID)			// Intérêts des acteurs au 25/08/2004 : Jack raptor et bat : 100 / Marin : 110 / Ann : 120
		ti_perso_ID = EVENT_VisionIDGet(tmid_vision_ID)
		tf_life_coef = EVENT_VisionLifeStateGet(tmid_vision_ID)

		ti_flag_best = faux
		ti_top_priorite = faux
		
		if( tf_life_coef <= Cf_Life_Blesse )
			ti_is_blesse = vrai
		else
			ti_is_blesse = faux
		
		if( i_DBG_trace_choix_proie_ON )
		{
			DBG_TraceObject(OBJ_Me())
			DBG_TraceString(" / ")
			DBG_TraceInt(ti_i +1)
			DBG_TraceString("/")
			DBG_TraceInt(i_seen_actor_nb)
			DBG_TraceString(" ")
			DBG_TraceObject(to_pere)
//			DBG_TraceString(" / Intérêt : ")
//			DBG_TraceFloat(tf_interet)
			DBG_TraceEOL()
		}
		
		if( tf_life_coef == Cf_Life_Dead )
		{
			if( i_DBG_trace_choix_proie_ON )
			{
				DBG_TraceObject(OBJ_Me())
				DBG_TraceString(" / ... perso mort => pas intéressant...")
				DBG_TraceEOL()
			}
			continue				// la bat agressive ne s'intéresse pas aux cadavres
		}
		
		if( i_DBG_attack_human_only_ON && ( ! IsThis_ID_Humain(ti_perso_ID) ) )
		{
			if( i_DBG_trace_choix_proie_ON )
			{
				DBG_TraceObject(OBJ_Me())
				DBG_TraceString(" / ... DEBUG : ce n'est pas un humain => pas intéressant...")
				DBG_TraceEOL()
			}
			continue				// DEBUG : uniquement les humains
		}
		
		if( ( to_pere == o_ann ) || ( to_pere == o_gamin ) )
		{
			ti_flag_best = vrai
			ti_top_priorite = vrai
			
			if( i_DBG_trace_choix_proie_ON )
			{
				DBG_TraceObject(OBJ_Me())
				DBG_TraceString(" / ... ")
				DBG_TraceObject(to_pere)
				DBG_TraceString(" est un acteur Top Prioritaire => pas de test")
				DBG_TraceEOL()
			}
		}
		
		if( ! ti_flag_best )
		{
			// ce n'est pas un acteur Top prioritaire
			// Jack, marins ou monstres : on analyse ses informations
			
			if( IsThis_ID_Humain(ti_perso_ID) )
			{
				//========= l'acteur est un humain ==========
				
				if( ti_best_is_humain )
				{
					// acteur Humain (Jack ou marin), best Humain (Jack ou marin)
					if( ti_best_is_blesse != ti_is_blesse )
					{
						// niveaux de santé différents entre les 2 humains
						if( ti_is_blesse )
							ti_flag_best = vrai			// un humain blessé est + intéressant qu'un humain non blessé
					}
					else
					{
						// 2 humains à niveau de santé égal
						if( ( to_pere == o_jack ) && ( ! i_last_cible_jack ) )
							ti_flag_best = vrai			// on alterne les attaques Jack / marins
						
						if( ti_best_is_top_prio_under_attack )
						{
							// la meilleure cible est déjà attaquée, on change de cible
							ti_flag_best = vrai
							ti_best_is_top_prio_under_attack = faux
						}
					}
				}
				else
				{
					// acteur Humain (Jack ou marin), best Animal
					
					if( ti_best_is_blesse != ti_is_blesse )
					{
						// niveaux de santé différents entre le best animal et l'humain courant
						if( ti_is_blesse )
							ti_flag_best = vrai				// un humain blessé est + intéressant qu'un animal non blessé
					}
					else
						ti_flag_best = vrai					// à niveau de santé égal, l'humain devient le best par rapport à l'animal
				}
			}
			else
			{
				//======= l'acteur n'est pas un humain ========
				
				if( ( ti_perso_ID == C_ID_BatCharognard ) && ( ! i_DBG_attack_bats_ON ) )
				{
					// pas le droit d'attaquer une autre bat
					if( i_DBG_trace_choix_proie_ON )
					{
						DBG_TraceObject(OBJ_Me())
						DBG_TraceString(" / ... je n'ai pas le droit d'attaquer une autre bat => suivant...")
						DBG_TraceEOL()
					}
					
					continue
				}
				
				if( ti_best_is_humain )
				{
					// acteur Animal, best Humain (Jack ou marin)
					if( ti_best_is_blesse != ti_is_blesse )
					{
						// niveaux de santé différents entre l'humain best et l'animal courant
						if( ti_is_blesse )
							ti_flag_best = vrai			// un animal blessé est + intéressant qu'un humain non blessé
					}
					// else : à niveau de santé égal, l'humain est plus intéressant que l'animal
				}
				else
				{
					// acteur Animal, best Animal
					if( ti_best_is_blesse != ti_is_blesse )
					{
						// niveaux de santé différents entre les 2 animaux
						if( ti_is_blesse )
							ti_flag_best = vrai			// un animal blessé est + intéressant qu'un animal non blessé
					}
					else
					{
						// 2 animaux à niveau de santé égal, on teste l'intérêt
						if( tf_interet >= tf_best_interet )
							ti_flag_best = vrai
					}
				}
			}
		}
		
		if( ti_flag_best )
		{
			//======== cet acteur peut potentiellement devenir la meilleure cible ==========
			
			// On teste si l'acteur est déjà la cible d'une autre bat
			ti_deja_under_attack = faux
			ti_bat_grabbing = faux
			
//			ti_deja_under_attack = KBC_Check_Interet_Status_Model(vrai, to_pere, C_EVENT_InteretStatusAttack, vrai)
			
//			MSG_SetNull( tmsg_interet_filter )
//			tmsg_interet_filter.msg_gao1 = to_pere
//			
//			ti_interet_rank = -1
//			for (	tmid_interet_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_interet_rank, tmsg_interet_filter);
//					MSG_GlobalIsValid(tmid_interet_ID);
//					tmid_interet_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_interet_rank, tmsg_interet_filter) )
//			{
//				to_interet_pere = EVENT_PereGet(tmid_interet_ID)
//				if( to_interet_pere != OBJ_Me() )
//				{
//					// l'acteur est déjà attaqué par quelqu'un
//					tmid_interet_vision_ID = EVENT_FindEventPereTarget( C_EVENT_TYPE_Visibility, to_interet_pere, nobody)
//					if( MSG_GlobalIsValid(tmid_interet_vision_ID) )
//					{
//						if( EVENT_VisionIDGet(tmid_interet_vision_ID) == C_ID_BatCharognard )
//						{
//							ti_deja_under_attack = vrai				// déjà attaqué par une bat
//							break
//						}
//					}
//				}
//			}
			
			//======== Test : Ai-je le droit d'attaquer une bat qui est en train de transporter une proie ? =======
			
			if( i_DBG_attack_bats_ON && ( ! i_DBG_attack_bat_grabbing_ON ) )
			{
				// Je n'ai pas le droit d'attaquer une bat qui est en train de transporter une proie
				if( ! IsThis_ID_Humain(ti_perso_ID) )
				{
					// cet acteur n'est pas humain
//					tmid_interet_vision_ID = EVENT_FindEventPereTarget( C_EVENT_TYPE_Visibility, to_pere, nobody)
//					if( MSG_GlobalIsValid(tmid_interet_vision_ID) )
//					{
//						// lecture de l'événement de visibilité
//						if( EVENT_VisionIDGet(tmid_interet_vision_ID) == C_ID_BatCharognard )

						if( KBC_Get_Interet_Status_Model_Nb(faux, to_pere, C_EVENT_InteretStatusGrab, vrai) )
							ti_bat_grabbing = vrai
						
//						if( ti_perso_ID == C_ID_BatCharognard )
//						{
//							// c'est une autre bat
//							MSG_SetNull( tmsg_interet_filter )
//							tmsg_interet_filter.msg_sender = to_pere
//							
//							ti_interet_rank = -1
//							for (	tmid_interet_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_interet_rank, tmsg_interet_filter);
//									MSG_GlobalIsValid(tmid_interet_ID);
//									tmid_interet_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_interet_rank, tmsg_interet_filter) )
//							{
//								if( EVENT_InteretGet(tmid_interet_ID) == Cf_interet_proie_grab )
//								{
//									ti_bat_grabbing = vrai			// bat qui grabbe (ou veut grabber) un perso
//									break
//								}
//							}
//						}
//					}
				}
			}
			
			//======== Résolution : ai-je le droit d'attaquer cet acteur ? ========
			
			if( ( ! ti_deja_under_attack ) && ( ! ti_bat_grabbing ) )
			{
				// acteur pas encore attaqué par une bat
				if( i_DBG_trace_choix_proie_ON )
				{
					DBG_TraceObject(OBJ_Me())
					DBG_TraceString(" / ... pas encore attaqué => devient ma meilleure proie...")
					DBG_TraceEOL()	
				}
				
				to_best_cible = to_pere	
				tf_best_interet = tf_interet
				
				// backup statut best
				if( IsThis_ID_Humain(ti_perso_ID) )
					ti_best_is_humain = vrai
				else
					ti_best_is_humain = faux
				
				// backup état de santé best
				if( tf_life_coef <= Cf_Life_Blesse )
					ti_best_is_blesse = vrai
				else
					ti_best_is_blesse = faux
				
				
				if( ti_top_priorite )
				{
					// Acteur TOP Prioritaire
					if( i_DBG_trace_choix_proie_ON )
					{
						DBG_TraceObject(OBJ_Me())
						DBG_TraceString(" / ... TOP PRIORITE !!!")
						DBG_TraceEOL()	
					}
					
					break				// acteur Top prioritaire pas encore attaqué: on ne checke même pas les autres acteurs
				}
				
			}
			else
			{
				if( ti_deja_under_attack )
				{
					// acteur déjà attaqué par une bat
					if( i_DBG_trace_choix_proie_ON )
					{
						DBG_TraceObject(OBJ_Me())
						DBG_TraceString(" / ... ")
						DBG_TraceObject(to_pere)
						DBG_TraceString(" est déjà attaqué(e) par ")
						DBG_TraceObject(EVENT_PereGet(tmid_interet_ID))
						DBG_TraceString(" => suivant...")
						DBG_TraceEOL()
					}
				}
				else if( ti_bat_grabbing )
				{
					// c'est une bat qui grabbe une proie
					if( i_DBG_trace_choix_proie_ON )
					{
						DBG_TraceObject(OBJ_Me())
						DBG_TraceString(" / ... c'est une bat qui grabbe une proie => suivant...")
						DBG_TraceEOL()
					}
				}
			}
		}
		else
		{
			// cet acteur n'est pas devenu la meilleure proie
			if( i_DBG_trace_choix_proie_ON )
			{
				DBG_TraceObject(OBJ_Me())
				DBG_TraceString(" / ... pas plus intéressant que ")
				DBG_TraceObject(to_best_cible)
				DBG_TraceString(" => suivant...")
				DBG_TraceEOL()
			}
		}
	}
	// for
	
	if( tf_best_interet != 0.0 )
	{
		// la bat a choisi une cible à attaquer
		
		// Choix du type d'attaque : la bat ne grabbe que Ann ou le gamin
//		if( ( ( to_best_cible == o_ann ) || ( to_best_cible == o_gamin ) ) && i_LD_attack_paf_ANN_ON )	// tmp !!!
//		{
//			// LD : la bat agressive ne grabbe pas mais elle paffe ANN et le gamin
//			i_attack_mode = Ci_attack_mode_paf
//			i_last_cible_jack = faux
//		}
//		else if( ti_top_priorite || ti_best_is_top_prio_under_attack || ( i_DBG_attack_grab_marin_ON && ti_best_is_humain && ( to_best_cible != o_jack ) ) )
//		{
//			i_attack_mode = Ci_attack_mode_grab
//			tf_best_interet = Cf_interet_proie_grab				// pour indiquer que la bat compte grabber sa proie
//		}
//		else
//		{
//			i_attack_mode = Ci_attack_mode_paf
//			
			// backup identité cible (alternance Jack / marins)
			if( to_best_cible == o_jack )
				i_last_cible_jack = vrai
			else
				i_last_cible_jack = faux
//		}
		
		// intérêt sur la cible choisie
		o_cible_attaque = to_best_cible
	}
	else
	{
		if( i_DBG_trace_choix_proie_ON )
		{
			DBG_TraceObject(OBJ_Me())
			DBG_TraceString(" / Personne d'intéressant...")
		}
	}
}
else
{
	if( i_DBG_trace_choix_proie_ON )
	{
		DBG_TraceObject(OBJ_Me())
		DBG_TraceString(" / Personne de visible...")
	}
}


if( i_DBG_trace_choix_proie_ON )
{
	DBG_TraceEOL()
	DBG_TraceEOL()
}

