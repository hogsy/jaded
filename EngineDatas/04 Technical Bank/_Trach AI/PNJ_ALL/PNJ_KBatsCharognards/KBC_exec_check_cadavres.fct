#include "KBC_defines.var"

int			ti_rank
int			ti_ID
int			ti_test_cadavre
int			ti_test_nb_global
int			ti_test_nb_bat

vector	tv_target_pos

object	to_pere

messageid		tmid_ID

if( i_flag_check_cadavres_done )
	return

i_flag_check_cadavres_done = vrai


if( EVENT_LIFE_CurLifeGet(ID_LIFE) <= 0.0 )
	return

KBC_Fill_Fire_Array()

// CHECK CADAVRES ??? -------------------------------------------------------------------------------------------
ti_test_cadavre = faux
if( ! i_big_bat && ! i_ignore_cadavres )
{
	switch( i_etat_courant )
	{
		case ETAT_Move_Ronde :
		case ETAT_Move_Network :
		case ETAT_Wait_Perche :
			// bat en attente : délai pour les tests de cadavre
			ti_test_nb_global = MATH_Modulo(@get_global i_frame_nbr, 10)
			ti_test_nb_bat = MATH_Modulo(i_global_bat_number, 10)
			if( ti_test_nb_bat == ti_test_nb_global )
				ti_test_cadavre = vrai
			else
				ti_test_cadavre = faux
			break
		case ETAT_Paf :
//		case ETAT_Paf_Ecrase :
//		case ETAT_Paf_Explose :
//		case ETAT_Paf_Sol :
		case ETAT_KK_Grabbed_by_Kong :
		case ETAT_KK_Ride :
		case ETAT_KK_Projectile :
		case ETAT_KK_Finish :
		case ETAT_KK_Finished :
			ti_test_cadavre = faux
			break
		default:
			ti_test_cadavre = vrai		// interrompre les attaques et autres comportements
			break
	}
}


if( ! ti_test_cadavre )
	return

// CHECK EVENTS CADAVRE -------------------------------------------------------------------------------------------
ti_rank = -1
for (	tmid_ID = MSG_GlobalScan(C_EVENT_TYPE_Cadavre, &ti_rank);
		MSG_GlobalIsValid(tmid_ID);
		tmid_ID = MSG_GlobalScan(C_EVENT_TYPE_Cadavre, &ti_rank)	)
{
	to_pere = EVENT_PereGet(tmid_ID)
	if ( to_pere && to_pere != OBJ_Me() )
	{
		tv_target_pos = EVENT_PositionGet(tmid_ID)
		if( KBC_Pos_in_Territory(tv_target_pos, vrai) ) 		// pour la foodchain tester le feu !!!
		{
			if( KBC_Cadavre_Test(to_pere, EVENT_CadavreIDGet(tmid_ID)) )
			{
				KBC_Cadavre_Add(to_pere)
			}
		}
	}
}

