#include "prs_RaptorSlim_defines.var"

object	to_target
vector	tv_sens
vector	tv_projGravity
float		tf_dist
float		tf_time

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux
	DYN_TractionSet(Cv_NullVector)
	DYN_SpeedSetVector( Cv_NullVector)
	DYN_GravitySet(Cv_Raptor_Gravity)
	return
}

// INIT ETAT ======================================================================
if ( i_etat_courant != ETAT_PRS_THROWN)
{
	i_etat_courant = ETAT_PRS_THROWN
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	
	to_target = LNK_GrabKong_LanceObjectGet(mid_grabbed_by_Kong_LNK_ID)
	if( to_target )
	{
//		i_projectile_mode = Ci_projectile_lance_target
		// Raptor lancé par l'acteur qui le grabbait sur une cible
		v_thrown_pos = @to_target OBJ_PosGet()
		tv_sens = MATH_VecNormalize(v_thrown_pos - OBJ_PosGet())
		DYN_GravitySet( Cv_NullVector )
		v_thrown_Spd = tv_sens
		MATH_VecSetNorm(v_thrown_Spd, 75.0)
		DYN_FrictionVectorSet(Cv_NullVector)
	}
	else
	{
//		i_projectile_mode = Ci_projectile_lance_aveugle
		// Raptor lancé par l'acteur qui le grabbait (pas de cible)
		tv_sens = MATH_VecNormalize(LNK_GrabKong_LanceVectorGet(mid_grabbed_by_Kong_LNK_ID))
		v_thrown_pos = OBJ_PosGet() + (tv_sens * 30.0)
		tf_dist = MATH_VecNorm(v_thrown_pos - OBJ_PosGet())
		v_thrown_Spd = DYN_LIB_ImpulsionGet_Friction(OBJ_PosGet(), v_thrown_pos, DYN_GravityVectorGet(), Cf_Raptor_jump_friction, tf_time, faux, 2.0)
		DYN_FrictionVectorSet(cvector( Cf_Raptor_jump_friction, Cf_Raptor_jump_friction, 0.0))
	}
	

	COL_ColSetActivationSet(C_bit_zdm_pied, none)
	o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, faux, nofunc, nofunc)
	
	v_thrown_dir = tv_sens

	f_time_start_etat = 0.0
	
	DYN_SpeedSetVector(v_thrown_Spd)
	
	ACT_ActionSet(Action_Mort_2)
//	SND_RequestPlay(Ci_SND_Woosh)

}
else
	f_time_start_etat += TIME_GetDt()


// ANALYSE =======================================================================================================

// test collision with another ennemy
//COL_ColSetActivationSet( C_bit_zde_fight, none)
//COL_ZoneSizeSet(C_zde_fight, cvector( 1.0, 1.0, 1.0))// * f_body_scale)
//if( KR_TestCollision_ZDE_ZDE(C_zde_corps, C_zde_corps, o_KONG) )
//{
//	// slow down
//	DYN_SpeedSetVector(DYN_SpeedGetVector()/2.0)//Cv_NullVector)
//	DYN_GravitySet(Cv_Raptor_Gravity)
//	DYN_FrictionVectorSet(Cv_Raptor_friction_chute)
//}
//COL_ZoneSizeSet(C_zde_fight, cvector(0.5, 0.5, 0.5))// * f_body_scale)
//COL_ColSetActivationSet( none, C_bit_zde_fight)

if ( f_time_start_etat > 0.25 )	
{
	// 0.25 sinon c trop tôt et le raptor peut paffer Kong quand Kong gagne un finish...
	// ne pas décecter tout de suite (sinon le raptor ne va même pas être projeté)
	
	// if we're beyond destination go down faster	
	if (MATH_VecDotProduct( DYN_SpeedGetVector(), v_thrown_pos - OBJ_PosGet()) < 0.0)
	{
		DYN_GravitySet(cvector(0.0, 0.0, -50.0))
	}	
	
	if( o_paf_actor)
		macro_change_etat("prs_ETAT_PAF_FALL")
	
	// check mur
	if ( COL_CollideType(COL_C_Wall) || COL_CollideType(COL_C_Ground))
	{
//		SND_RequestPlay(Ci_SND_ChocMur)
		
		EVENT_LIFE_LifeChange(ID_LIFE, 10000.0) // perd points de vie en tombant s'il a été lancé, mais pas s'il a été laché (KONG paffé)
		macro_change_etat("prs_ETAT_MORT")		
	}
}

// COMPORTEMENT =======================================================================================================

OBJ_BankingGeneralSet( MATH_VecBlendRotate(OBJ_SightGet(), v_thrown_dir, 15.0 * TIME_GetDt()), 
		MATH_VecBlendRotate(OBJ_BankingGet(), Cv_VerticalVector, 15 * TIME_GetDt()))
