#include "prs_RaptorSlim_defines.var"
Include_UltraProcedure_Header


procedure_local void PRS_ActionSet(int ti_action_num)
{
	ACT_ActionSet(ti_action_num)
}


procedure_local float PRS_Choose_Best_Action(float tf_speed)
{
	int			ti_i
	int			ti_start_action_index
	int			ti_last_action_index
	int			ti_action
	int			ti_freq	

	float		tf_coef	
	float		tf_action_A_mult_coef
	float		tf_action_B_mult_coef

		
	if (i_flag_blesse)
	{
		ti_start_action_index = i_blesse_action_first_index
		ti_last_action_index = i_blesse_action_last_index
	}
	else if (i_etat_courant == ETAT_PRS_SEARCH && i_flag_head_search)
	{
		ti_start_action_index = i_renifle_action_first_index
		ti_last_action_index = i_renifle_action_last_index
	}
	else
	{
		ti_start_action_index = i_normal_action_first_index
		ti_last_action_index = i_normal_action_last_index
	}

	if (ti_start_action_index == ti_last_action_index)
	{
		ti_action = ti_start_action_index
	}
	else
	{
		// Plusieurs anim de déplacement
		for (ti_i = ti_start_action_index; ti_i < ti_last_action_index; ti_i++)
		{
			if (tf_speed < af_action_speed[ti_i])
			{
				ti_action = ti_i
				break
			}
			else if (tf_speed > af_action_speed[ti_i + 1])
			{
				ti_action = ti_i + 1
				continue
			}
			
			tf_action_A_mult_coef = tf_speed / af_action_speed[ti_i]
			tf_action_B_mult_coef = af_action_speed[ti_i + 1] / tf_speed
			
			if (tf_action_A_mult_coef < tf_action_B_mult_coef)
				ti_action = ti_i
			else
				ti_action = ti_i + 1	
		
			break
		}
	}

	PRS_ActionSet(ai_action_index[ti_action])

	tf_coef = tf_speed
	tf_coef /= af_action_speed[ti_action]
	
	return(tf_coef)
}


procedure_local void PRS_Init_Speed_Array()
{
	int			ti_i	
	int			ti_action
	int			ti_action_nb
	int			ti_current_action

	float		tf_speed

	vector	tv_pos
	vector	tv_sight
	vector	tv_banking

	i_normal_action_first_index = 0

	i_normal_action_last_index = i_normal_action_first_index
	ai_action_index[i_normal_action_last_index] = Action_Normal_Marche
	af_action_speed[i_normal_action_last_index] = 3.22
	i_normal_action_last_index++
	
	ai_action_index[i_normal_action_last_index] = Action_Normal_Marche_Rapide
	af_action_speed[i_normal_action_last_index] = 6.20
	i_normal_action_last_index++
	
	ai_action_index[i_normal_action_last_index] = Action_Normal_Trot
	af_action_speed[i_normal_action_last_index] = 9.35
	i_normal_action_last_index++

	ai_action_index[i_normal_action_last_index] = Action_Normal_Course
	af_action_speed[i_normal_action_last_index] = 9.24

	i_blesse_action_first_index = i_normal_action_last_index + 1
	i_blesse_action_last_index = i_blesse_action_first_index
	ai_action_index[i_blesse_action_last_index] = Action_Blesse_Marche
	af_action_speed[i_blesse_action_last_index] = 4.05
	i_blesse_action_last_index++
	
	ai_action_index[i_blesse_action_last_index] = Action_Blesse_Marche_Rapide
	af_action_speed[i_blesse_action_last_index] = 7.18
	
	i_renifle_action_first_index = i_blesse_action_last_index + 1
	i_renifle_action_last_index = i_renifle_action_first_index
	ai_action_index[i_renifle_action_last_index] = Action_Renifle_Marche
	af_action_speed[i_renifle_action_last_index] = 2.12
	
	ti_action_nb = i_renifle_action_last_index + 1
	
	tv_pos = OBJ_PosGet()
	tv_sight = OBJ_SightGet()
	tv_banking = OBJ_BankingGet()
	ti_current_action = ACT_ActionGet()

//	for (ti_i = 0; ti_i < ti_action_nb; ti_i++)
//	{
//		ti_action = ai_action_index[ti_i]
//		
//		PRS_ActionSet(ti_action + (Ci_ActionSet_Force_No_Blend | Ci_ActionSet_Force_SameAction))
//		ANI_RatioSet(0, 1.0)
//		PRS_ActionSet(ti_action + (Ci_ActionSet_Force_No_Blend | Ci_ActionSet_Force_SameAction))	
//	
//		tf_speed = MATH_VecNorm(OBJ_PosGet() - tv_pos)
////		tf_speed /= ACT_LIB_ActionDurationGet(ti_action)
//		tf_speed /= ACT_DurationGet(ti_action, 0)
//		tf_speed = MATH_FloatRound(tf_speed, 0.01)
//
//		af_action_speed[ti_i] = tf_speed
//
//		OBJ_PosSet(tv_pos)
//		OBJ_SightGeneralSet(tv_sight, tv_banking)
//	}
//	
	PRS_ActionSet(ti_current_action + (Ci_ActionSet_Force_No_Blend | Ci_ActionSet_Force_SameAction))

	return
}

procedure_local void PRS_Target_Reachable()
{	
	int			ti_result
	
	object	to_target
	object	to_target_bone	

	vector	tv_start_pos
	vector	tv_me_to_target
	vector	tv_offset

	if (i_flag_reachable_test_done)
		return

	if (i_perceived_best_actor_index == -1)
		return
		
	i_flag_reachable_test_done = vrai

	i_flag_bite_no_wall = faux

	to_target = ao_perceived_actor[i_perceived_best_actor_index]
	if ( ! to_target )
		return

	switch(ai_perceived_ID[i_perceived_best_actor_index])
	{
		case C_ID_Monture_Serpent :
			to_target_bone = @to_target ANI_CanalObjectGet(5)
			break
			
		case C_ID_Monture_Aigle :
			to_target_bone = @to_target ANI_CanalObjectGet(Anim_Canal_Torse)
			break	
	
		default:
			to_target_bone = @to_target ANI_CanalObjectGet(Anim_Canal_Tete)
	}

	if (!to_target_bone)
		to_target_bone = to_target
		
	tv_start_pos = OBJ_PosGet()
	tv_start_pos.z = @ao_head_bones[i_head_bone_nb] OBJ_PosGet().z

	if (COL_LIB_Can_See_Actor(to_target, tv_start_pos, @to_target_bone OBJ_PosGet(), all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
	{
		// Le lancer de rayon n'a rien touché
		i_flag_bite_no_wall = vrai
	}
}


procedure_local void PRS_Do_Commun_Bite_Stuff(object to_target)
{
	int			ti_wall_col_cpt	

	float		tf_norm	

	vector 	tv_new_sight
	vector	tv_dest_sight
	vector	tv_traction

#define Cf_Dist_Min					4.2
#define Cf_Dist_Recalage			4.1
#define Cf_Traction_Coef			30.0

	PRS_Target_Reachable()

	if ( ! o_IK_bassin_bite_actor )
		return

	tv_dest_sight = @o_IK_bassin_bite_actor OBJ_PosGet()
	tv_dest_sight -= OBJ_PosGet()
	tv_dest_sight.z = 0.0
	
	tf_norm = MATH_VecNorm(tv_dest_sight)
	
	if (tf_norm)
		tv_dest_sight /= tf_norm
	else
		tv_dest_sight = OBJ_SightGet()

	if ( tf_norm < Cf_Dist_Min * OBJ_ZoomGet())
	{
		switch(ai_perceived_ID[i_perceived_best_actor_index])
		{
			case C_ID_Monture_Serpent :
				break
				
			default:
				tv_traction = tv_dest_sight
				tv_traction *= -Cf_Dist_Recalage * OBJ_ZoomGet()
				tv_traction += @o_IK_bassin_bite_actor OBJ_PosGet()
				tv_traction -= OBJ_PosGet()
				tv_traction *= Cf_Traction_Coef * DYN_FrictionGet()
				tv_traction.z = 0.0
				tv_traction += DYN_TractionVectorGet()
				DYN_TractionSet(tv_traction)
		}
	}

	if (i_flag_bite_no_wall)
		tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_dest_sight, 8.0 * TIME_GetDt())
	else
		tv_new_sight = OBJ_SightGet()

	OBJ_BankingGeneralSet(tv_new_sight, v_virtual_banking)
}


//==================================================================================
// Check si on doit faire des tests approfondis de vision sur ce message id
//==================================================================================
procedure_local int PRS_Invalid_Vision_Event(messageid EVT_Visibility_ID)
{	
	int		ti_filter
	int		ti_ID

	float	tf_life

	object	to_actor

	to_actor = EVENT_PereGet(EVT_Visibility_ID)
	ti_ID = EVENT_VisionIDGet(EVT_Visibility_ID)

	if (to_actor == OBJ_Me())
		return(vrai)

//	if (to_actor == o_grab_actor)
//		return(faux)

	switch(ti_ID)
	{
		case C_ID_Rayman :
			return(faux)
			
		case C_ID_Raptor :
			return(faux)	

		default:
			return(vrai)	// ignoré
	}
}


procedure_local void PRS_Del_Perceived_Actor(int ti_index)
{
	i_perceived_actor_nb--

	// EST-CE QU'ON EFFACE LA CIBLE COURANTE ?
		
	if (ti_index == i_perceived_best_actor_index)
		i_perceived_best_actor_index = -1
	
	// EST-CE QU'ON DEPLACE LE MAIN OU LA CIBLE COURANTE ?
	
	if (i_perceived_actor_nb == i_perceived_best_actor_index)
		i_perceived_best_actor_index = ti_index

	// ON ECRASE CET ACTEUR AVEC LE DERNIER
	ai_perceived_accessible[ti_index] = ai_perceived_accessible[i_perceived_actor_nb]
	ai_perceived_hiding_place_index[ti_index] = ai_perceived_hiding_place_index[i_perceived_actor_nb]
	ai_perceived_ID[ti_index] = ai_perceived_ID[i_perceived_actor_nb]
	ai_perceived_seen[ti_index] = ai_perceived_seen[i_perceived_actor_nb]
	ai_perceived_status[ti_index] = ai_perceived_status[i_perceived_actor_nb]
	ai_perceived_territory[ti_index] = ai_perceived_territory[i_perceived_actor_nb]
	
	af_perceived_dist[ti_index] = af_perceived_dist[i_perceived_actor_nb]
	af_perceived_interest[ti_index] = af_perceived_interest[i_perceived_actor_nb]
	af_perceived_life_ratio[ti_index] = af_perceived_life_ratio[i_perceived_actor_nb]
	
	ao_perceived_actor[ti_index] = ao_perceived_actor[i_perceived_actor_nb]	
	av_perceived_position[ti_index] = av_perceived_position[i_perceived_actor_nb]

	// ON EFFACE LES DONNEES DU DERNIER 
	ai_perceived_accessible[i_perceived_actor_nb] = faux
	ai_perceived_hiding_place_index[i_perceived_actor_nb] = -1
	ai_perceived_ID[i_perceived_actor_nb] = -1
	ai_perceived_seen[i_perceived_actor_nb] = faux
	ai_perceived_status[i_perceived_actor_nb] = 0
	ai_perceived_territory[i_perceived_actor_nb] = -1
	
	af_perceived_dist[i_perceived_actor_nb] = -1.0
	af_perceived_interest[i_perceived_actor_nb] = -1.0
	af_perceived_life_ratio[i_perceived_actor_nb] = -1.0
	
	ao_perceived_actor[i_perceived_actor_nb] = nobody
	
	av_perceived_position[i_perceived_actor_nb] = Cv_NullVector
}

procedure_local void PRS_Check_Perceived_Actor()
{
	int		ti_i
	
	for (ti_i = 0; ti_i < i_perceived_actor_nb; ti_i++)
	{
		if (i_perceived_bit_field & (1 << ti_i))
			continue
			
		PRS_Del_Perceived_Actor(ti_i)
	}
}


procedure_local void PRS_Remove_Hiding_Place(object to_wp)
{
	int		ti_index
	int		pi_nb_links, pi_i
	if (!to_wp)
		return

	ti_index = ARR_ObjSearch(&ao_net_hiding_place[0], i_net_hiding_place_nb, to_wp)
	if (ti_index != -1)
	{
		i_net_hiding_place_nb--
		ao_net_hiding_place[ti_index] = ao_net_hiding_place[i_net_hiding_place_nb]
		ao_net_hiding_place[i_net_hiding_place_nb] = nobody

		if ( i_break_hideout_target_hidden)
		{
			// OCCLUDER
			if ( i_way_move_bit & Ci_WAY_BIT_BREAK)
				@to_wp OBJ_FlagsControlSet(OBJ_C_ControlFlag_ForceInactive, none)		// desactivate occluder
//			else
//				@to_wp OBJ_CapaSet( Ci_Capa_Cache_checked, none)
		}
		else
		{
			if ( i_way_move_bit & Ci_WAY_BIT_BREAK)
			{
				pi_nb_links = WAY_GetNumLinks( WAY_Territory, o_next_wp)				// 
				for ( pi_i = 0; pi_i < pi_nb_links; pi_i++) 
				{
					WAY_LinkCapaSet( WAY_Territory, WAY_NetNextWP( WAY_Territory, o_next_wp, 6, pi_i), o_next_wp, none, Ci_Capa_Link_Break)
				}
				@to_wp OBJ_CapaSet(none, Ci_Capa_Break_Item)
			}
//			else
//				@to_wp OBJ_CapaSet( Ci_Capa_Cache_checked, none)
		} 
	}
}

procedure_local void PRS_Check_Hiding_Place(int ti_index)
{
	int					ti_i

	object			to_hiding_place_wp

	// ON VA REGARDER TOUTES LES CACHES DE MON RESEAU
	for (ti_i = 0; ti_i < i_net_hiding_place_nb; ti_i++)
	{
		// Est-ce que la cache est encore valide ?
//		to_hiding_place_wp = @"Interactive_Objects/ODE_TREX_Cache" ao_net_hiding_place[ti_i] Humain_Hide_Place_WP 
//		if (to_hiding_place_wp && @to_hiding_place_wp OBJ_CapaTest(Ci_Capa_Occ_Cache))
//			continue
			
		// Est-ce que ce perso est dans la BV de cette cache ?
		if (! (@ao_net_hiding_place[ti_i] COL_BV_PivotCollide(ao_perceived_actor[ti_index])))
			continue

		// CAS SPECIAL, LE PERSO EST DANS UNE CACHE, ON LE VOIT...
		ai_perceived_status[ti_index] |= Ci_PERCEIVED_IN_HIDING_PLACE
		ai_perceived_hiding_place_index[ti_index] = ti_i
		ai_perceived_seen[ti_index] = vrai

		return
	}
}

procedure_local int PRS_Add_Perceived_Actor(object to_actor, int ti_status, messageid tmid_visibility_ref)
{
	int					ti_index
	int					ti_rank
	int					ti_world_ID
	int					ti_vision_or_cadavre
	
	float				tf_life_ratio

	object			to_nearest_wp
	object			to_serveur
	
	vector			tv_pos

	message		tmsg_filter

	messageid		tmid_lnk
	messageid 		tmid_visibility
	messageid		tmid_interet	

	tmid_visibility = tmid_visibility_ref
	
	if ( MSG_GlobalGetType( tmid_visibility_ref) ==  C_EVENT_TYPE_Visibility)
		ti_vision_or_cadavre = 1
	else
		ti_vision_or_cadavre = 0
	
	// EST-CE QU'ON RAJOUTE CE PERSO A LA LISTE DE CEUX QU'ON VOIT ?
	ti_index = ARR_ObjSearch(&ao_perceived_actor[0], i_perceived_actor_nb, to_actor)
	if (ti_index == -1)
	{
		// ON RAJOUTE UN ACTEUR
		if (i_perceived_actor_nb == 20)
		{
			DBG_Error("Trop d'acteur dans cette map")
			return(-1)
		}	
	
		ti_index = i_perceived_actor_nb
		i_perceived_actor_nb ++
	}
		
	// SI ON N'A PAS ENCORE MIS LES INFOS A JOUR CETTE TRAME
	if ( ! (i_perceived_bit_field & (1 << ti_index)) )
	{
		i_perceived_bit_field |= 1 << ti_index
		ao_perceived_actor[ti_index] = to_actor

		ai_perceived_hiding_place_index[ti_index] = -1

		ai_perceived_seen[ti_index] = faux

		ai_perceived_status[ti_index] &= Ci_PERCEIVED_MEMORY_MASK


		if (MSG_GlobalIsValid(tmid_visibility))
		{
			// EST-CE QUE C'EST UN CADAVRE DEJA TRAITE ?
			if ( ti_vision_or_cadavre)
			{
				ai_perceived_ID[ti_index] = EVENT_VisionIDGet(tmid_visibility)
				tf_life_ratio = EVENT_VisionLifeStateGet(tmid_visibility) 
			}
			else
			{
				ai_perceived_ID[ti_index] = EVENT_CadavreIDGet(tmid_visibility)
				tf_life_ratio = 0				
			}
		
			af_perceived_life_ratio[ti_index] = tf_life_ratio

			if ( IsThis_ID_Humain(ai_perceived_ID[ti_index]) )
			{					
				if ( tf_life_ratio == Cf_Life_Agonisant)
					ai_perceived_status[ti_index]	|= Ci_PERCEIVED_FAILING
			}
			else if (ai_perceived_ID[ti_index] == C_ID_Bidoche)
			{
				ai_perceived_status[ti_index] |= Ci_PERCEIVED_IS_DEAD
				if (@to_actor OBJ_CapaTest(CAPA_Bidoche_Oublie_Moi))
					ai_perceived_status[ti_index] &= ~(Ci_PERCEIVED_BODY_MEMORISED | Ci_PERCEIVED_BODY_UNREACHABLE)
			}
			else
			{
				if (tf_life_ratio > 0.0)
					ai_perceived_status[ti_index] &= ~(Ci_PERCEIVED_BODY_MEMORISED | Ci_PERCEIVED_BODY_UNREACHABLE)
//					PNJ_Raptor_Forget_Body(to_actor)
				else
					ai_perceived_status[ti_index]	|= Ci_PERCEIVED_IS_DEAD
			}

			if (ai_perceived_ID[ti_index] == C_ID_Rayman)
			{
				if ( @to_actor OBJ_HierarchyGet())
					af_perceived_interest[ti_index] = 200.0
				else
					af_perceived_interest[ti_index] = EVENT_VisionInteretGet(tmid_visibility)
			}
			else
			{
				if ( ti_vision_or_cadavre)
					af_perceived_interest[ti_index] = EVENT_VisionInteretGet(tmid_visibility)
				else
					af_perceived_interest[ti_index] = 150.0
			}

			av_perceived_position[ti_index] = EVENT_PositionGet(tmid_visibility)

			// I DON'T KNOW WHY HUMAN DON T SET HIS TERRITORY WITH THE GOOD VALUE
			ai_perceived_territory[ti_index] = PROC_GAO_GET_TERRITORY(to_actor)
//			ai_perceived_territory[ti_index] = EVENT_VisionTerritoryGet(tmid_visibility)

			tv_pos = av_perceived_position[ti_index]
			ai_perceived_accessible[ti_index] = PROC_WAY_TERRITORY_ID_ALLOWED( ai_perceived_territory[ti_index])
		}
		else
		{
			af_perceived_life_ratio[ti_index] = 1.0
		
			af_perceived_interest[ti_index] = 30.0
			ai_perceived_ID[ti_index] = -1

			av_perceived_position[ti_index] = @to_actor OBJ_PosGet()

			ai_perceived_territory[ti_index] = GST_EVENT_Territory_Get(av_perceived_position[ti_index])

			tv_pos = av_perceived_position[ti_index]
			ai_perceived_accessible[ti_index] = PROC_WAY_TERRITORY_ID_ALLOWED( ai_perceived_territory[ti_index])
		}

		af_perceived_dist[ti_index] = MATH_VecNorm(av_perceived_position[ti_index] - OBJ_PosGet())


				if (ai_perceived_ID[ti_index] == C_ID_Raptor)
				{
					// IL M'ATTAQUE ??? ==========================================================================
					ti_rank = -1
					MSG_SetNull(tmsg_filter)
					tmsg_filter.msg_sender = to_actor
					tmsg_filter.msg_gao1 = OBJ_Me()
					tmsg_filter.msg_int2 = C_EVENT_InteretStatusLock
					tmsg_filter.msg_int3 = C_ID_Raptor
					tmid_interet = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_rank, tmsg_filter)
					if (MSG_GlobalIsValid(tmid_interet))
						ai_perceived_status[ti_index] |= Ci_PERCEIVED_DANGEROUS
				}	
				else if (IsThis_ID_Humain(ai_perceived_ID[ti_index]))
				{
					// IL PORTE QUELQU'UN ??? ==========================================================================
					ti_rank = -1
					MSG_SetNull(tmsg_filter)
					tmsg_filter.msg_gao1 = to_actor
					tmid_lnk = MSG_GlobalSearchIntGao(Ci_LNK_EVENT_OFFSET + Ci_LNK_CARRY, &ti_rank, tmsg_filter)
					if (MSG_GlobalIsValid(tmid_lnk))
						ai_perceived_status[ti_index] |= Ci_PERCEIVED_CARRY
				}
		
			
				if ( ! (ai_perceived_status[ti_index]	& Ci_PERCEIVED_IS_DEAD) )
				{
					// DEJA GRABE ??? ==========================================================================
					ti_rank = -1
					MSG_SetNull(tmsg_filter)
					tmsg_filter.msg_sender = to_actor
					tmid_lnk = MSG_GlobalSearchIntGao(Ci_LNK_EVENT_OFFSET + Ci_LNK_GRAB_EAGLE, &ti_rank, tmsg_filter)
					if (MSG_GlobalIsValid(tmid_lnk))
					{
						to_serveur = MSG_GlobalGetGao(tmid_lnk, SERVEUR)
						if (to_serveur && to_serveur != OBJ_Me())
							ai_perceived_status[ti_index] |= Ci_PERCEIVED_ALREADY_GRABBED
					}
			
					// DEJA ATTAQUE ??? ==========================================================================
					ti_rank = -1
					MSG_SetNull(tmsg_filter)
					tmsg_filter.msg_gao1 = to_actor
					tmsg_filter.msg_int2 = C_EVENT_InteretStatusLock
					tmsg_filter.msg_int3 = C_ID_Raptor
					tmid_interet = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_rank, tmsg_filter)
					while (MSG_GlobalIsValid(tmid_interet))
					{
						if (EVENT_InteretTargetAlreadySeen(tmid_interet))
						{
							ai_perceived_status[ti_index] |= Ci_PERCEIVED_ATTACKED
							break
						}
						tmid_interet = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_rank, tmsg_filter)
					}
				}

				// ALREADY CHECKED ??? ======================================================================
				if ( ! ai_perceived_accessible[ti_index])
				{
					// ON MEMORISE UN WP LE PLUS PROCHE
				}
				

		PRS_Check_Hiding_Place(ti_index)
	}

	ai_perceived_status[ti_index] |= ti_status

	return(ti_index)
}


procedure_local void PRS_Del_Interest()
{
	i_perceived_best_actor_index = -1
	if (MSG_GlobalIsValid(mid_best_interet))
	{
		i_flag_change_target = faux

		MSG_GlobalDelete(mid_best_interet, C_EVENT_DEL)
		MSG_GlobalSetInvalid(mid_best_interet)
	}
}



procedure_local int PRS_Best_Interet_Update(int ti_index)
{
	int				ti_flag_update_best_interet	
	int				ti_flag_update_pos
	int				ti_flag_update_seen_time


	object		to_identified_actor
	object		to_last_best_interest_target

	if (ti_index == -1)
		return(-1)

	i_perceived_best_actor_index = ti_index

	ti_flag_update_pos = faux
	ti_flag_update_seen_time = faux

	to_identified_actor = nobody
	
	switch(i_etat_courant)
	{
		case ETAT_PRS_SEARCH :
//		case ETAT_DEVORE :
			if (af_perceived_dist[ti_index] < 5.0 && ai_perceived_status[ti_index] & (Ci_PERCEIVED_HEARD_SHOT | Ci_PERCEIVED_PAF))
			{
				// Trop pres, je sais ou il est
				ti_flag_update_seen_time = vrai
				ti_flag_update_pos = vrai
				
				to_identified_actor = ao_perceived_actor[ti_index]
				
				break
			}

		default:

			if (i_flag_en_chasse || ai_perceived_seen[ti_index] || (ai_perceived_status[ti_index] & (Ci_PERCEIVED_ATTACKED | Ci_PERCEIVED_IS_DEAD)) )
			{
				ti_flag_update_seen_time = vrai
				ti_flag_update_pos = vrai
				
				to_identified_actor = ao_perceived_actor[ti_index]
			}
			else if (ai_perceived_status[ti_index] & (Ci_PERCEIVED_HEARD | Ci_PERCEIVED_PAF))
			{
				// En cas de paf, je sais d'ou ça vient mais je ne considère pas que je le vois...
				ti_flag_update_pos = vrai
		
				switch(i_etat_courant)
				{
					case ETAT_PRS_FIGHT :
					case ETAT_PRS_MORD :
//					case ETAT_COODBOOL :
						to_identified_actor = ao_perceived_actor[ti_index]
						break
				}
			}
//			else if (PNJ_Raptor_Is_Body_Memorised(ao_perceived_actor[ti_index]))
			else if (ai_perceived_status[ti_index] & Ci_PERCEIVED_BODY_MEMORISED)
			{
				// Je me souviens de ce machin
				ti_flag_update_pos = vrai
				
				to_identified_actor = ao_perceived_actor[ti_index]
			}
	}

	if ( ! ti_flag_update_pos && MSG_GlobalIsValid(mid_best_interet) && EVENT_TargetGet(mid_best_interet) != ao_perceived_actor[ti_index] )
		ti_flag_update_pos = vrai
//		DBG_Error("On va droit au bug là !!!")

	if (ti_flag_update_pos)
	{
		if (! MSG_GlobalIsValid(mid_best_interet))
		{
			// JE N'AVAIS PAS D'INTERET
		
//			if (ti_index == i_perceived_main_actor_index)
//				i_SND_flag_attaque_hors_champs = vrai
//			else
//				i_SND_flag_attaque_hors_champs = faux
		
			mid_best_interet = EVENT_AddEventInteret(OBJ_Me(), Cf_Infinit, af_perceived_interest[ti_index], av_perceived_position[ti_index], to_identified_actor)
			EVENT_InteretVisionIDSet(mid_best_interet, C_ID_Raptor)

//			f_rode_duration = 0.0
//			f_rode_duration_limit	 = delay_rode * MATH_RandFloat(0.5, 1.0)
		
			f_time_last_best_interet_paf = TIME_Get()

//			if (ai_perceived_status[ti_index] & Ci_PERCEIVED_PAF)
//				i_flag_run_after_paf = vrai
//			else
//				i_flag_run_after_paf = faux
		}	
		else
		{
			to_last_best_interest_target = EVENT_InteretTargetGet(mid_best_interet)

			if (ao_perceived_actor[ti_index] != to_last_best_interest_target)
			{
				// INTERET DIFFERENT DE L'ANCIEN
//				if (ti_index == i_perceived_main_actor_index)
//					i_SND_flag_attaque_hors_champs = vrai
//				else
//					i_SND_flag_attaque_hors_champs = faux

				EVENT_Delete(mid_best_interet, C_EVENT_DEL)
				mid_best_interet = EVENT_AddEventInteret(OBJ_Me(), Cf_Infinit, af_perceived_interest[ti_index], av_perceived_position[ti_index], to_identified_actor)
				EVENT_InteretVisionIDSet(mid_best_interet, C_ID_Raptor)

//				f_rode_duration = 0.0
//				f_rode_duration_limit	 = delay_rode * MATH_RandFloat(0.5, 1.0)
//
				f_time_last_best_interet_paf = TIME_Get()
	
//				if (ai_perceived_status[ti_index] & Ci_PERCEIVED_PAF)
//					i_flag_run_after_paf = vrai
//				else
//					i_flag_run_after_paf = faux
			}
		}

		EVENT_InteretPositionSet(mid_best_interet, av_perceived_position[ti_index])
	}

	if (ai_perceived_status[ti_index] & Ci_PERCEIVED_PAF)
		f_time_last_best_interet_paf = TIME_Get()

	if (ti_flag_update_seen_time)
	{
		EVENT_InteretTargetSet(mid_best_interet, to_identified_actor)
		EVENT_InteretSeenTimeSet(mid_best_interet, TIME_Get())
	}

	if (ai_perceived_status[ti_index] & Ci_PERCEIVED_IS_DEAD)
	{
		ai_perceived_status[ti_index] |= Ci_PERCEIVED_BODY_MEMORISED
		EVENT_InteretStatusSet( mid_best_interet, C_EVENT_InteretStatusFoodchain)
	}
//		PNJ_Raptor_Memorise_Body(ao_perceived_actor[ti_index])

	i_target_territory_ID = ai_perceived_territory[ti_index]

	return(ti_index)
}



//===================================================================================
// Retourne un vecteur de déplacement (avance, recule ou ne bouge pas)
// Si on veut tester avec les occluders, il faut mettre ti_testOccluders a vrai, alors
// le déplacement retourné sera sera le vecteur différence au premier obstacle
//===================================================================================
procedure_local vector PRS_Compute_Deplacement(vector tv_dest_pos, float tf_dist_min_sqr, float tf_dist_max_sqr, int ti_testOccluders, byref int ti_report, byref object to_cache)
{
	vector				tv_offset
	vector				tv_depl
	int						ti_occluderResult
	int						ti_i
	int						ti_pathToTargetIsOccluded
	vector				tv_occluderNextPos
	object				to_occluderJump
////	object				tao_fake[5]
	float					taf_fake[10]
	float 					tf_orbitOffset
	float					tf_sqrDistToActor
	object				to_blockingWall
	
	tv_offset = tv_dest_pos - OBJ_PosGet()
	ti_pathToTargetIsOccluded = faux
	ti_report = 0
	if (ti_testOccluders)
	{
		for( ti_i = 0; ti_i < i_raptors_nb; ti_i++)
			taf_fake[ti_i] = 1.0

		ti_occluderResult = WAY_LIB_Test_Occluder( 	OBJ_PosGet() + Cv_VerticalVector, 
																		OBJ_SightGet(), 
																		COL_ZoneSizeGet(C_zdm_pied) + 0.1,
																		tv_dest_pos, 
																		i_my_territory_ID, //-1,	// territory not used for now
																		tv_occluderNextPos,
																		to_occluderJump, 
																		&ao_raptors[0],
																		&taf_fake[0],
																		i_raptors_nb,
																		i_type )
		if ( ti_occluderResult & Ci_OCCLUDER_DEST_POS_IS_IN_OCCLUDER)
		{
			// DEST IN OCCLUDER
			if ( ti_occluderResult & ( Ci_OCCLUDER_BREAK | Ci_OCCLUDER_HIDE))
			{
				// IN A BREAKABLE HIDEOUT
				ti_report = ti_occluderResult
				to_cache = to_occluderJump
			}
			else
			{
				tv_depl = tv_occluderNextPos - OBJ_PosGet()
				ti_pathToTargetIsOccluded= vrai
				DBG_RenderVector( OBJ_PosGet(), tv_depl, color_bleu )						
			}
		}
		else if (ti_occluderResult != 0)
		{
			tv_depl = tv_occluderNextPos - OBJ_PosGet()
			ti_pathToTargetIsOccluded= vrai
			DBG_RenderVector( OBJ_PosGet(), tv_depl, color_blanc )		
		}
	}

	if ( ! ti_pathToTargetIsOccluded)
	{
		tv_depl = tv_dest_pos - OBJ_PosGet()
	}

	// keep it in 2d	
	tv_depl.z = 0.0

	return	 tv_depl
}	


// HABILLAGE
procedure_local void PRS_Add_Visual_Paf(messageid tmid_paf_event)
{
	int				ti_flag_ok
	int				ti_i
	int				ti_bone_canal

	float			tf_puissance

	vector		tv_bras_de_levier

	object		to_bone

	// DEPLACEMENT BASSIN EN FONCTION DU PAF

//	switch(i_etat_courant)
//	{
//		case ETAT_PAF_FLY :
//		case ETAT_PAF_FALL :
//		case ETAT_A_TERRE :
//		case ETAT_BURN :
//		case ETAT_MORT :
//		case ETAT_FADE :
//			if (TIME_Elapsed(f_visual_paf_time, 0.5))
//			{
//				f_visual_paf_time = TIME_Get()
//				v_visual_paf_dir = MATH_VecBlendRotate(v_paf_dir, Cv_VerticalVector, 0.5) * 2.0
//			}
//			break
//		default:
			if ( ! i_flag_saut && TIME_Elapsed(f_visual_paf_time, 0.5))
			{
				f_visual_paf_time = TIME_Get()
				v_visual_paf_dir = v_paf_dir
			}
//	}

	// ROTATION BASSIN EN FONCTION DU PAF

	ti_flag_ok = vrai

//	switch(i_etat_courant)
//	{
//		case ETAT_LANCE :
//		case ETAT_PAF_FLY :
//		case ETAT_PAF_FALL :
//			break
//	
//		default:
			if (i_flag_paf_fall || i_flag_paf_fly)
				ti_flag_ok = faux
//	}

	if (!ti_flag_ok)
		return

//	if ( i_paf_type & (C_PAF_RM_Repousse | C_PAF_RM_Weapon | C_PAF_RM_Javelin) && TIME_Elapsed(f_quat_last_time, 0.15) )
	{
		if (TIME_Elapsed(f_quat_last_time, 0.5))
			af_quat_coef[i_quat_index] = 0.3
		else
			af_quat_coef[i_quat_index] = 0.2

		f_quat_last_time = TIME_Get()
		af_quat_time[i_quat_index] = f_quat_last_time

		av_quat_start[i_quat_index] = EVENT_PafPositionGet(tmid_paf_event)
		av_quat_start[i_quat_index] -= @ao_head_bones[i_head_bone_nb] OBJ_PosGet()
		MATH_VecSetNormalize(av_quat_start[i_quat_index])

		av_quat_end[i_quat_index] = MATH_VecCrossProduct(v_paf_dir, av_quat_start[i_quat_index])
		av_quat_end[i_quat_index] = MATH_VecCrossProduct(av_quat_start[i_quat_index], av_quat_end[i_quat_index])

//		switch(i_etat_courant)
//		{
//			case ETAT_PAF_FALL :
//			case ETAT_PAF_FLY :
//			case ETAT_A_TERRE :
//			case ETAT_BURN :
//			case ETAT_MORT :
//			case ETAT_FADE :
//				MATH_VecSetHorzNormalize(av_quat_end[i_quat_index])
//				break
//
//			default:
				MATH_VecSetNormalize(av_quat_end[i_quat_index])
//		}

		i_quat_index = MATH_Modulo(i_quat_index + 1, 10)
	}
}


procedure_local void PRS_Remove_Life(float tf_life_loss, object to_killer)
{
	float tf_last_lifecur
	
	tf_last_lifecur = f_lifecur

	f_lifecur -= MATH_FloatMin(f_lifecur, tf_life_loss)
	f_lifecur = MATH_FloatRound(f_lifecur, 0.01)

//	if (tf_last_lifecur && !f_lifecur)
//	{
//		STATS_IncEnemyKilled_New( to_killer, C_EnemyType_Raptor, 0 ) break
//	}
}
procedure_local void PRS_Set_Life(float tf_max_life, object to_killer)
{
	float tf_last_lifecur
	
	tf_last_lifecur = f_lifecur

	f_lifecur = MATH_FloatMin(f_lifecur, tf_max_life)
	f_lifecur = MATH_FloatRound(f_lifecur, 0.01)

//	if (tf_last_lifecur && !f_lifecur)
//	{
//		STATS_IncEnemyKilled_New( to_killer, C_EnemyType_Raptor, 0 ) break
//	}
}



procedure_local void PRS_Set_OBBOX( float tf_size_coef)
{
	object	to_bone
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_Machoire)
	@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.1 * tf_size_coef, 0.8))
	
	// TETE A BASSIN
	@ao_head_bones[0] BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.3 * tf_size_coef, -0.1))
	@ao_head_bones[0] BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.2 * tf_size_coef, 0.8))
	
	@ao_head_bones[1] BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.3 * tf_size_coef, -0.1))
	@ao_head_bones[1] BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.2 * tf_size_coef, 0.5))
	
	@ao_head_bones[2] BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.3 * tf_size_coef, -0.1))
	@ao_head_bones[2] BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.2 * tf_size_coef, 0.5))
	
	@ao_head_bones[3] BV_OBBoxMinSet(cvector(-0.5 * tf_size_coef, -0.6 * tf_size_coef, -0.2))
	@ao_head_bones[3] BV_OBBoxMaxSet(cvector(0.5 * tf_size_coef, 0.3 * tf_size_coef, 0.9))
	
	to_bone = ANI_CanalObjectGet(4)
	@to_bone BV_OBBoxMinSet(cvector(-0.5 * tf_size_coef, -0.4 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.5 * tf_size_coef, 0.3 * tf_size_coef, 0.8))

	@ao_head_bones[4] BV_OBBoxMinSet(cvector(-0.55 * tf_size_coef, -0.5 * tf_size_coef, -0.3))
	@ao_head_bones[4] BV_OBBoxMaxSet(cvector(0.55 * tf_size_coef, 0.2 * tf_size_coef, 0.7))

	to_bone = ANI_CanalObjectGet(Anim_Canal_Queue)
	@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.25 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.25 * tf_size_coef, 0.6))
			
	to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 1)
	@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.2 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.2 * tf_size_coef, 1.3))
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 2) 
	@to_bone BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 1.2))
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 3)
	@to_bone BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 1.2))

	to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 4)
	@to_bone BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 1.2))

	@ao_IK_bones[Ci_IK_pied_gauche][0] BV_OBBoxMinSet(cvector(-0.2 * tf_size_coef, -0.25 * tf_size_coef, 0.0))
	@ao_IK_bones[Ci_IK_pied_gauche][0] BV_OBBoxMaxSet(cvector(0.2 * tf_size_coef, 0.25 * tf_size_coef, 1.0))
	
	@ao_IK_bones[Ci_IK_pied_gauche][1] BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.2 * tf_size_coef, -0.1))
	@ao_IK_bones[Ci_IK_pied_gauche][1] BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.95))
	
	@ao_IK_bones[Ci_IK_pied_gauche][2] BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.05))
	@ao_IK_bones[Ci_IK_pied_gauche][2] BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.6))
	
	@ao_IK_bones[Ci_IK_pied_gauche][3] BV_OBBoxMinSet(cvector(-0.2 * tf_size_coef, -0.1 * tf_size_coef, -0.05))
	@ao_IK_bones[Ci_IK_pied_gauche][3] BV_OBBoxMaxSet(cvector(0.3 * tf_size_coef, 0.1 * tf_size_coef, 0.7))
	
	@ao_IK_bones[Ci_IK_pied_droit][0] BV_OBBoxMinSet(cvector(-0.2 * tf_size_coef, -0.25 * tf_size_coef, 0.0))
	@ao_IK_bones[Ci_IK_pied_droit][0] BV_OBBoxMaxSet(cvector(0.2 * tf_size_coef, 0.25 * tf_size_coef, 1.0))
	
	@ao_IK_bones[Ci_IK_pied_droit][1] BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.2 * tf_size_coef, -0.1))
	@ao_IK_bones[Ci_IK_pied_droit][1] BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.95))
	
	@ao_IK_bones[Ci_IK_pied_droit][2] BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.05))
	@ao_IK_bones[Ci_IK_pied_droit][2] BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.6))
	
	@ao_IK_bones[Ci_IK_pied_droit][3] BV_OBBoxMinSet(cvector(-0.3 * tf_size_coef, -0.1 * tf_size_coef, -0.05))
	@ao_IK_bones[Ci_IK_pied_droit][3] BV_OBBoxMaxSet(cvector(0.2 * tf_size_coef, 0.1 * tf_size_coef, 0.7))
			
	to_bone = ANI_CanalObjectGet(Anim_Canal_EpauleDroite)
	@to_bone BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.4))
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_BrasDroit)
	@to_bone BV_OBBoxMinSet(cvector(-0.05 * tf_size_coef, -0.05 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.05 * tf_size_coef, 0.05 * tf_size_coef, 0.5))
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_AvantBrasDroit)
	@to_bone BV_OBBoxMinSet(cvector(-0.05 * tf_size_coef, -0.05 * tf_size_coef, -0.05))
	@to_bone BV_OBBoxMaxSet(cvector(0.05 * tf_size_coef, 0.05 * tf_size_coef, 0.2))
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_MainDroite)
	@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.05 * tf_size_coef, -0.05))
	@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.05 * tf_size_coef, 0.5))
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_DoigtD1)
	if (to_bone)
		@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_PouceD1)
	@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_EpauleGauche)
	@to_bone BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.4))
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_BrasGauche)
	@to_bone BV_OBBoxMinSet(cvector(-0.05 * tf_size_coef, -0.05 * tf_size_coef, -0.1))
	@to_bone BV_OBBoxMaxSet(cvector(0.05 * tf_size_coef, 0.05 * tf_size_coef, 0.5))
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_AvantBrasGauche)
	@to_bone BV_OBBoxMinSet(cvector(-0.05 * tf_size_coef, -0.05 * tf_size_coef, -0.05))
	@to_bone BV_OBBoxMaxSet(cvector(0.05 * tf_size_coef, 0.05 * tf_size_coef, 0.2))
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_MainGauche)
	@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.05 * tf_size_coef, -0.05))
	@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.05 * tf_size_coef, 0.5))
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_DoigtG1)
	if (to_bone)
		@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
	
	to_bone = ANI_CanalObjectGet(Anim_Canal_PouceG1)
	@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)

}


//procedure float VIEW_LIB_Pourcent_On_Screen(vector tv_pos, float tf_size, float tf_X_size, float tf_Y_size, byref vector tv_2D_center_pos, int ti_draw_debug_info)
//{
//	int			ti_i	
//	int			ti_flag_zone_in_zone
//
//	float		tf_X_min
//	float		tf_X_max
//	float		tf_Y_min
//	float		tf_Y_max
//
//	float		tf_test_zone_surface
//	float		tf_zone_surface
//	float		tf_inside_surface
//
//	vector	tv_point_A	
//	vector	tv_point_B
//
//	vector	tv_upper_left_corner
//	vector	tv_bottom_right_corner
//	vector	tv_clipped_upper_left_corner
//	vector	tv_clipped_bottom_right_corner
//
//
//	object	to_camera	
//
//	color		tc_color
//
//	tf_test_zone_surface = tf_X_size * tf_Y_size
//
//	tf_X_size *= 0.5
//	tf_Y_size *= 0.5
//
//	tf_X_min = 0.5 - tf_X_size
//	tf_X_max = 0.5 + tf_X_size
//	tf_Y_min = 0.5 - tf_Y_size
//	tf_Y_max = 0.5 + tf_Y_size
//
//	to_camera = VIEW_GetObject(0)
//
//	tv_upper_left_corner = tv_pos
//	tv_upper_left_corner += @to_camera OBJ_HorizonGet() * tf_size
//	tv_upper_left_corner += @to_camera OBJ_BankingGet() * tf_size
//
//	tv_bottom_right_corner = tv_pos
//	tv_bottom_right_corner -= @to_camera OBJ_HorizonGet() * tf_size
//	tv_bottom_right_corner -= @to_camera OBJ_BankingGet() * tf_size
//
//	tv_upper_left_corner = VIEW_3dWorldTo2d(0, tv_upper_left_corner)
//	tv_bottom_right_corner = VIEW_3dWorldTo2d(0, tv_bottom_right_corner)
//
//	if (tv_upper_left_corner.x < 0.0 && tv_bottom_right_corner.x < 0.0)
//		return(-1.0)
//
//	if (tv_upper_left_corner.x > 1.0 && tv_bottom_right_corner.x > 1.0)
//		return(-1.0)
//
//	if (tv_upper_left_corner.y < 0.0 && tv_bottom_right_corner.y < 0.0)
//		return(-1.0)
//
//	if (tv_upper_left_corner.y > 1.0 && tv_bottom_right_corner.y > 1.0)
//		return(-1.0)
//
//	tf_zone_surface = tv_bottom_right_corner.x - tv_upper_left_corner.x
//	tf_zone_surface *= tv_bottom_right_corner.y - tv_upper_left_corner.y
//
//	if (tf_zone_surface < 0.001)
//		return(-1.0)
//
//	if (tf_zone_surface > tf_test_zone_surface)
//	{
//		tc_color = 0x00008000
//		tf_zone_surface = tf_test_zone_surface
//	}
//	else
//	{
//		tc_color = 0x00FFFFFF
//	}
//
//#ifndef _FINAL_
//	if (ti_draw_debug_info)
//	{
//		// Affichage de la zone ok
//		DBG_Render2DRect(tv_upper_left_corner, tv_bottom_right_corner, 0x00FFFFFF)
//	}
//#endif
//
//	tv_clipped_upper_left_corner.x = MATH_FloatLimit(tv_upper_left_corner.x, tf_X_min, tf_X_max)
//	tv_clipped_upper_left_corner.y = MATH_FloatLimit(tv_upper_left_corner.y, tf_Y_min, tf_Y_max)
//	tv_clipped_upper_left_corner.z = 0.01
//
//	tv_clipped_bottom_right_corner.x = MATH_FloatLimit(tv_bottom_right_corner.x, tf_X_min, tf_X_max)
//	tv_clipped_bottom_right_corner.y = MATH_FloatLimit(tv_bottom_right_corner.y, tf_Y_min, tf_Y_max)
//	tv_clipped_bottom_right_corner.z = 0.01
//
//	tf_inside_surface = tv_clipped_bottom_right_corner.x - tv_clipped_upper_left_corner.x
//	tf_inside_surface *= tv_clipped_bottom_right_corner.y - tv_clipped_upper_left_corner.y
//
//	tf_inside_surface /= tf_zone_surface
//
//#ifndef _FINAL_
//	if (ti_draw_debug_info)
//	{
//		if (tf_inside_surface)
//		{
//			// Affichage de la zone ok
//			DBG_Render2DRect(tv_clipped_upper_left_corner, tv_clipped_bottom_right_corner, 0x80008000)
//		}
//		else
//		{
//			// Affichage de la zone ok
//			DBG_Render2DRect(tv_upper_left_corner, tv_bottom_right_corner, 0x800000FF)
//		}
//	
//		DBG_Render2DRect(cvector(tf_X_min, tf_Y_min, 0.0), cvector(tf_X_max, tf_Y_max, 0.0), tc_color)
//	}
//#endif
//
//	tv_2D_center_pos = tv_clipped_upper_left_corner
//	tv_2D_center_pos += (tv_clipped_bottom_right_corner - tv_clipped_upper_left_corner) * 0.5
//
//	return(tf_inside_surface)
//}
//


procedure_local void PRS_Hit_Hiding_Place()
{
	int			ti_i
	int			ti_k

	float		tf_shake_cam_coef

	object	to_hiding_place_nearest_wp
	object	to_hiding_place
	object	to_ODE_structure
	object	to_gao

	to_hiding_place_nearest_wp = ao_net_hiding_place[i_hiding_place_index]

	for ( ti_i =01; ti_i < 10; ti_i++)
	{
		to_gao = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp GAO_To_Desactivate[0]
		if ( to_gao)
		{
			@to_gao OBJ_FlagInvisibleSet(vrai)
			@to_gao OBJ_FlagInactiveSet(vrai)
		}
		else 
			break
	}
	to_hiding_place = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp Humain_Hide_Place_WP
	@to_hiding_place OBJ_CapaSet( Ci_Capa_Item_Breaken, Ci_Capa_Break_Item)
//	@to_next OBJ_CapaSet(none, Ci_Capa_Break_Item)

//	for (ti_i = 0; ti_i < 10; ti_i++)
//	{
//		to_ODE_structure = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp ODE_structure[ti_i]
//		if (!to_ODE_structure)
//			return
//
//		if (@to_ODE_structure OBJ_CapaTest(Obj_Capa_Switch))
//			continue
//
//		@to_ODE_structure OBJ_CapaSet(Obj_Capa_Switch, none)
//
//		// EST-CE QU'ON CRI APRES ?
//		i_flag_roar = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp ROAR_After_Hit[ti_i]
//
//		// ON ACTIVE DES GAOS
//		for (ti_k = 0; ti_k < 10; ti_k++)
//		{
//			to_gao = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp GAO_To_Activate[ti_i][ti_k]
//			if (to_gao)
//				@to_gao OBJ_FlagInactiveSet(faux)
//			else
//				break
//		}
//
//		// ON DESACTIVE UN GAO
//		to_gao = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp GAO_To_Desactivate[ti_i]
//		if (to_gao)
//			@to_gao OBJ_FlagInactiveSet(vrai)
//
//		// SHAKE
////		if (f_me_to_main_dist < 200.0)
////		{
////			tf_shake_cam_coef = MATH_FloatMax(f_me_to_main_dist - 10.0, 0.0)
////			tf_shake_cam_coef /= 190.0
////			tf_shake_cam_coef = 1.0 - tf_shake_cam_coef
////
////			if (tf_shake_cam_coef > 0.5)
////			{
////				tf_shake_cam_coef *= 0.025
////				
////			 	LIBGFX_ShakeCam(tf_shake_cam_coef, 50.0, 0.0, 0.0, 0.1, 0.95)
////			 }
////		}
//
//		break
//	}
//	
//	to_ODE_structure = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp ODE_structure[ti_i + 1]
//	if (to_ODE_structure == nobody)
//		@to_hiding_place OBJ_CapaSet(OBJ_Capa_0, none)
}



procedure_local void PRS_Jump()
{
	int			ti_cycl_index
	int			ti_cycle_anim
//	int			ti_flag_try_to_keep_dir
	int			ti_double_jump
	int			ti_link_nb

	float		tf_altitude	
	float		tf_dot_product

	vector	tv_sight	
	vector	tv_dest_pos_bassin_offset
	vector	tv_me_to_dest_pos
	
	object	to_next_wp

	i_flag_snap_pos = faux	
	
//	ti_flag_try_to_keep_dir = faux

	tv_me_to_dest_pos = v_jump_dest_pos
	tv_me_to_dest_pos -= OBJ_PosGet()
	
	tf_dot_product = MATH_VecDotProduct(MATH_VecNormalize(tv_me_to_dest_pos), Cv_VerticalVector)

	tf_altitude = tv_me_to_dest_pos.z
	tv_me_to_dest_pos.z = 0.0

	if (tf_altitude < -2.0 || ACT_ActionGet() == Action_Saut_Impulse_Long)
		i_jump_reception_action = Action_Grosse_Reception // Saut vers le bas
	else if (tf_altitude > 2.0)
		i_jump_reception_action = Action_Saut_fin_surplace
	else
		i_jump_reception_action = Action_Saut_fin

	switch(ACT_ActionGet())
	{
		case Action_Saut_Reception_D :
			PRS_ActionSet(Action_Saut_Pied_D)

//			f_jump_freq_coef = ACT_LIB_ActionDurationGet(ACT_ActionGet())
			f_jump_freq_coef = ACT_DurationGet(ACT_ActionGet(), 0)
			f_jump_freq_coef /= f_jump_duration
			ACT_LIB_ActionFrequencyMultiply(f_jump_freq_coef)

			v_jump_bassin_reception_pos = v_jump_bassin_impulsion_pos
			v_jump_bassin_reception_speed = v_jump_bassin_impulsion_speed
			break

		case Action_Saut_Reception_G :
			PRS_ActionSet(Action_Saut_Pied_G)

//			f_jump_freq_coef = ACT_LIB_ActionDurationGet(ACT_ActionGet())
			f_jump_freq_coef = ACT_DurationGet(ACT_ActionGet(), 0)
			f_jump_freq_coef /= f_jump_duration
			ACT_LIB_ActionFrequencyMultiply(f_jump_freq_coef)
		
			v_jump_bassin_reception_pos = v_jump_bassin_impulsion_pos
			v_jump_bassin_reception_speed	= v_jump_bassin_impulsion_speed
			break

//		case Action_Saut_deb :
//			ti_flag_try_to_keep_dir =vrai
//			// PAS DE BREAK

		default:

			ti_double_jump = faux
//			if (o_occluder_jump_wp && n_occluder_jump_net && WAY_GetNumLinks(n_occluder_jump_net, o_occluder_jump_wp))
//				ti_double_jump = vrai
//			else 
			if (i_way_wp_nb > 2 && WAY_LinkCapaGet(@ao_way_wp[i_way_wp_nb - 1] WAY_NetOfObj(), ao_way_wp[i_way_wp_nb - 1], ao_way_wp[i_way_wp_nb - 2]) & Ci_Capa_Link_Jump)
				ti_double_jump = vrai
			else if (o_next_wp && o_next_next_wp && @o_next_wp WAY_HasLinks(@o_next_next_wp WAY_NetOfObj(), o_next_next_wp) && WAY_LinkCapaGet(WAY_Territory, o_next_wp, o_next_next_wp) & Ci_Capa_Link_Jump)
				ti_double_jump = vrai

			if (ti_double_jump)
			{
//				ti_cycle_anim = -1
				ti_cycle_anim = Action_Saut_Pied_D
				ti_cycl_index = Ci_IK_pied_droit
			}
			else
			{
				ti_cycle_anim = Action_Saut_cycl
				ti_cycl_index = 2
			}

			v_jump_bassin_reception_pos = @ao_head_bones[i_head_bone_nb] OBJ_PosGet()

			tv_sight = OBJ_SightGet()

			v_jump_start_pos = OBJ_PosGet()
			v_jump_impulsion_banking = OBJ_BankingGet()

			v_jump_impulsion_sight = v_jump_dest_pos
			v_jump_impulsion_sight -= v_jump_start_pos
			MATH_VecSetHorzNormalize(v_jump_impulsion_sight)

//			if (ti_cycle_anim == -1)
//			{
//				OBJ_BankingGeneralSet(v_jump_impulsion_sight, Cv_VerticalVector)
//				if (MATH_VecDotProduct(OBJ_HorizonGet(), v_jump_reception_banking) > 0.0)
//					ti_cycle_anim = Action_Saut_Pied_G
//				else 
//					ti_cycle_anim = Action_Saut_Pied_D
//			}
			
			OBJ_BankingGeneralSet(v_jump_impulsion_sight, v_jump_reception_banking)
			tv_dest_pos_bassin_offset = MATH_VecLocalToGlobal(av_IK_bassin_reception_offset[ti_cycl_index])
			OBJ_BankingGeneralSet(tv_sight, v_jump_impulsion_banking)

			if (tf_altitude < -2.0 || tf_altitude > 3.0)
			{
				// CALCUL DE L'IMPULSION MIN
				f_jump_duration = 0.0
				v_jump_bassin_reception_speed = DYN_LIB_ImpulsionGet_Friction(v_jump_bassin_reception_pos, v_jump_dest_pos + tv_dest_pos_bassin_offset, v_jump_gravity, f_jump_friction, f_jump_duration, faux, 0.0)
			}
			else
			{
				// CALCUL DE L'IMPULSION MIN
				f_jump_duration = 0.0
				v_jump_bassin_reception_speed = DYN_LIB_ImpulsionGet_Friction(v_jump_bassin_reception_pos, v_jump_dest_pos + tv_dest_pos_bassin_offset, v_jump_gravity, f_jump_friction, f_jump_duration, faux, 0.0)
				
				// CALCUL DE L'IMPULSION TENDUE
				f_jump_duration = MATH_FloatMax(0.7 * f_jump_duration, 0.1)
	
				v_jump_bassin_reception_speed = DYN_LIB_ImpulsionGet_Friction(v_jump_bassin_reception_pos, v_jump_dest_pos + tv_dest_pos_bassin_offset, v_jump_gravity, f_jump_friction, f_jump_duration, faux, 0.0)
			}
			
			f_jump_total_duration = f_jump_duration

			PRS_ActionSet(ti_cycle_anim)

//			f_jump_freq_coef = ACT_LIB_ActionDurationGet(ACT_ActionGet())
			f_jump_freq_coef = ACT_DurationGet(ACT_ActionGet(), 0)
			f_jump_freq_coef /= f_jump_duration
			ACT_LIB_ActionFrequencyMultiply(f_jump_freq_coef)
	}
		
#ifndef _FINAL_
	if (DBG_Display_Jump)
	{
		DBG_RenderVector(v_jump_dest_pos, tv_dest_pos_bassin_offset, color_jaune)
		DYN_LIB_Display_Trajectory(v_jump_bassin_reception_pos, v_jump_bassin_reception_speed, v_jump_gravity, v_jump_friction, f_jump_duration, 20, 0.0)
	}
#endif
	
	if( i_dernier_etat != ETAT_PRS_RIDED )
		COL_ColSetActivationSet(none, C_bit_zdm_pied)		// en rided on n'éteint pas la ZDM
}



procedure_local void PRS_Soft_Col()
{
	int		ti_i
	
	float		tf_dist
	float		tf_test_dist
	float		tf_test_sqr_dist

	vector	tv_me_to_budy
	vector	tv_col_move_axis
	
	tf_test_dist = 5.0
	tf_test_sqr_dist = tf_test_dist * tf_test_dist
	
	switch(i_etat_courant)
	{
		case ETAT_PRS_A_TERRE :
		case ETAT_PRS_PAF_FALL :
		case ETAT_PRS_PAF_FLY	: 
		case ETAT_PRS_PAF_SLIDE :
		case ETAT_PRS_GRABBED :
		case ETAT_PRS_MORT : 
		case ETAT_PRS_FADE : 
		case ETAT_PRS_JUMP :
			return
	}
	
	tv_col_move_axis = Cv_NullVector

	for (ti_i = 0; ti_i < i_raptors_nb; ti_i++)
	{
		if (ao_raptors[ti_i] == OBJ_Me())
			continue
	
		tv_me_to_budy = @ao_raptors[ti_i] OBJ_PosGet() - OBJ_PosGet()
		tv_me_to_budy.z = 0.0
		
		tf_dist = MATH_VecDotProduct(tv_me_to_budy, tv_me_to_budy) 

		if (tf_dist < tf_test_sqr_dist) // && OBJ_LIB_Virtual_Colmap_Collision(OBJ_Me(), ao_budy[ti_i], vrai) )
		{
			tf_dist = MATH_FloatSqrt(tf_dist)

			if (tf_dist)
				tv_me_to_budy /= tf_dist
			else
				tv_me_to_budy = OBJ_HorizonGet()

			tv_me_to_budy *= 1.0 - (tf_dist / tf_test_dist)
			
			tv_col_move_axis -= tv_me_to_budy
		}
	}
	
	tv_col_move_axis -= MATH_FloatMin(MATH_VecDotProduct(tv_col_move_axis, OBJ_SightGet()), 0.0) * OBJ_SightGet()
	tv_col_move_axis *= 40.0 * DYN_FrictionGet()
	tv_col_move_axis += DYN_TractionVectorGet()
	DYN_TractionSet(tv_col_move_axis)
}


procedure_local void PRS_Reset_IK_Legs()
{
//	// PILOTAGE ET IK LEGS
//	int			ti_i	
//
//	f_bassin_rotation_angle = 0.0
//	f_bassin_Z_offset = 0.0
//
//	v_IK_bassin_pos = @ao_head_bones[i_head_bone_nb] OBJ_PosGet()
//
//	for (ti_i = 0; ti_i < 2; ti_i++)
//	{
//		i_flag_leg_IK[ti_i] = faux
//
//		f_IK_Z_offset[ti_i] = 0.0
//		f_IK_coef[ti_i] = 0.0
//		f_IK_tenseur[ti_i] = 0.5
//
//		f_IK_bassin_look_rot_coef = 0.0
//
//		v_IK_ref_ground_pos = OBJ_PosGet()
//
//		v_IK_dest_pos[ti_i] = @ao_IK_bones[ti_i][3] OBJ_PosGet()
//		v_IK_local_offset[ti_i] = MATH_VecGlobalToLocal(v_IK_dest_pos[ti_i] - OBJ_PosGet())
//	}
}

procedure_local void PRS_Reset_IK_Neck()
{
	// PILOTAGE ET IK TETE
	i_flag_look = faux
	i_flag_look_best_interet = faux

	f_look_blend_coef = 0.0
	f_look_angle_blend_speed = 0.0
	f_look_head_coef = 0.0

	v_look_axis = OBJ_SightGet() * f_look_axis_length
}

procedure_local void PRS_Reset_IK()
{
	PRS_Reset_IK_Legs()
	PRS_Reset_IK_Neck()
}



procedure_local void PRS_Dead()
{
	OBJ_CapaSet(OBJ_Capa_15, none)

	OBJ_Me().des_int1 = Ci_DISPLAY_NOTHING
	OBJ_InfoPhotoParamSet(0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0)

	f_lifecur = 0.0
	
	HotSpot_Del_Obj(OBJ_Me())
	
	PRS_Del_Interest()
}

