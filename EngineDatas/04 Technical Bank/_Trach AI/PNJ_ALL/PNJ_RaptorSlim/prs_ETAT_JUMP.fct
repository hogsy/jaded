#include "prs_RaptorSlim_defines.var"

vector	tv_way_sight

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux
	DYN_FrictionVectorSet( cvector(f_friction, f_friction, 0.0))
	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_PRS_JUMP)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_PRS_JUMP

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()

	// IF OCCLUDER TAKE PARAM FROM IT
	v_jump_impulsion_banking = OBJ_BankingGet()
	v_jump_reception_banking = Cv_VerticalVector
	
	i_jump_etat = 1

	if( i_jump_mode != Ci_jump_mode_rided_fast )
		PRS_ActionSet(Action_Saut_deb)
	
//	if( i_jump_mode == Ci_jump_mode_rided_fast )
//		ACT_LIB_ActionFrequencyMultiply(3.0)
//	else
//		ACT_LIB_ActionFrequencyMultiply(1.0)
	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
	
	// Rided duration
//	if( i_jump_mode == Ci_jump_mode_rided_fast || i_jump_mode == Ci_jump_mode_rided_slow )
//		f_Rided_duration += TIME_GetDt()
}

// ANALYSE =======================================================================================================
// STIMULI ===========================================================================
AI_Execute("prs_exec_check_cadavre")
AI_Execute("prs_exec_check_vision")

AI_Execute("prs_exec_check_paf")
if (i_flag_paf_fly)
	macro_change_etat("prs_ETAT_PAF_FLY")
if (i_flag_paf_fall)
	macro_change_etat("prs_ETAT_PAF_FALL")
if (i_flag_paf_repousse || i_flag_paf_slide || ! EVENT_LIFE_CurLifeGet(ID_LIFE))
	macro_change_etat("prs_ETAT_PAF_SLIDE")
	
AI_Execute("prs_exec_update_best_interest")


// COMPORTEMENT ==================================================
switch( i_jump_etat )
{
	case 1 :
		// ORIENTATION
		if( ACT_ActionFinished() || i_jump_mode == Ci_jump_mode_rided_fast )
		{
			// Impulsion
			i_jump_etat++
			PRS_Jump()
			DYN_FrictionVectorSet( cvector(f_jump_friction, f_jump_friction, 0.0))
			DYN_SpeedSetVector(v_jump_bassin_reception_speed)
		}
		tv_way_sight = v_jump_dest_pos - OBJ_PosGet()
		tv_way_sight.z = 0.0
		MATH_VecSetNormalize(tv_way_sight)
		OBJ_BankingGeneralSet( MATH_VecBlendRotate( OBJ_SightGet(), tv_way_sight, 5.0 * TIME_GetDt()), v_ground_normal)
		break
	case 2 :
		// FLY
		if ( DYN_SpeedGetVector().z < 0.0)
			COL_ColSetActivationSet( C_bit_zdm_pied, none)
		if ( COL_CollideType(COL_C_Ground))
		{
			// Reception
			if( i_jump_mode != Ci_jump_mode_rided_fast || f_time_start_etat > 0.75 )
			{
				i_jump_etat++
				PRS_ActionSet(i_jump_reception_action)
			}
		}
		break
	case 3 :
		// RECEPTION
		if ( ACT_ActionFinished())
		{
			if( i_dernier_etat == ETAT_PRS_RIDED )
				macro_change_etat("prs_ETAT_RIDED")		// ce n'est pas un main_etat
			else
				macro_change_etat(fct_main_etat)
		}
		break
	case 4 :
		// RECEPTION
}
