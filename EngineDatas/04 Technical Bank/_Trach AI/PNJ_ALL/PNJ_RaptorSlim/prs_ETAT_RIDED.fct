#include "prs_RaptorSlim_defines.var"

vector	tv_sight
vector	tv_horizon
vector	tv_banking
vector	tv_temp
object	to_obj
object	to_target
int			ti_trame
int			ti_rided_exit


// SORTIE ETAT ===================================================================
if( i_sort_etat )
{
	i_sort_etat = faux
	switch( i_etat_courant )
	{
		case ETAT_PRS_JUMP :
		case ETAT_PRS_FALL :
			ti_rided_exit = faux
			break
		case ETAT_PRS_PAF_SLIDE :
			if( EVENT_LIFE_CurLifeGet(ID_LIFE) )
				ti_rided_exit = faux
			else
				ti_rided_exit = vrai
			break
		default:
			ti_rided_exit = vrai
			break
	}
	if( ti_rided_exit )
	{
		o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, faux, nofunc, nofunc)
		DYN_GravitySet(Cv_Raptor_Gravity)
		DYN_FrictionVectorSet(cvector(f_friction,f_friction,0))
		f_Rided_last_time = TIME_Get()
//			f_Rided_duration = 0.0
	}
	return
}

// INITIALISATION ETAT ==============================================================
if( i_etat_courant != ETAT_PRS_RIDED )
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_PRS_RIDED
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	
	DYN_GravitySet(Cv_Raptor_Gravity)
	DYN_FrictionVectorSet(cvector(f_friction,f_friction,0))
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE =======================================================================================================

// PAFS ------------------------------------------------------------
AI_Execute("prs_exec_check_paf")
if (i_flag_paf_fly)
	macro_change_etat("prs_ETAT_PAF_FLY")
if (i_flag_paf_fall)
	macro_change_etat("prs_ETAT_PAF_FALL")
if (i_flag_paf_repousse || i_flag_paf_slide || ! EVENT_LIFE_CurLifeGet(ID_LIFE))
	macro_change_etat("prs_ETAT_PAF_SLIDE")


// RIDED END -----------------------------------------------------
if( ! DBG_FAKE_RIDED )
{
	// TEST LIAISON RIDE ------------------------------------
	o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
	if( o_Rided_Actor == nobody )
	{
		// il n'y a plus personne qui grabbe le raptor
		if( ACT_ActionGet() != Action_Rided_Eject )
			PRS_ActionSet(Action_Rided_Eject)
	}
	
	// AUTO DEGRAB -------------------------------------------
	if( f_Rided_duration > Cf_NMI_Rided_Escape_Delai )
	{
		// leave the link
		o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, faux, nofunc, nofunc)
		if( ACT_ActionGet() != Action_Rided_Eject )
			PRS_ActionSet(Action_Rided_Eject)
	}
}
else		// END OF FAKE RIDE
{
	if( IO_KeyJustPressed(65) )	// A
		PRS_ActionSet(Action_Rided_Eject)
}


// COMPORTEMENT  =======================================================================================================


// JOY ----------------------------------------------------------------
f_joy_norm = @get_global f_joy_norm	
v_next_pos = Cv_NullVector


// ACTION -----------------------------------------------------------
switch( ACT_ActionGet() )
{
	case Action_Rided_Eject :
		if( ACT_ActionFinished() )
			macro_change_etat("prs_ETAT_ATTENTE")
		i_flag_dont_change_action = vrai
		break
	
	case Action_Rided_Attack :
		i_flag_zde_fight_enable = vrai
		ti_trame = ANI_CurrentFrameGet(0)
		if( ti_trame >= 14 && ti_trame <= 19 )
		{
			i_flag_bite = vrai
		}
		if( ACT_ActionFinished() )
		{
			i_frappe_target_nb = 0
			PRS_ActionSet(Action_Rided_Attente)
		}
		i_flag_dont_change_action = vrai
		break
	
	default:
		if( IO_ButtonJustPressed(RM_Joy_Punch) )
		{
			PRS_ActionSet(Action_Rided_Attack)
			i_flag_dont_change_action = vrai
		}
		else if( IO_ButtonJustPressed(RM_Joy_Ride_NMI_Action) )
		{
			// axe du jump : sight ou parallèle au sol
			to_obj = COL_RayObject_Vector(OBJ_PosGet(), OBJ_SightGet(), OBJ_C_IdentityFlag_ColMap, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
			if( to_obj )
			{
				tv_temp = COL_RayObject_PosGet()
				DBG_RenderVector(OBJ_PosGet(), tv_temp - OBJ_PosGet(), color_vert)
				tv_banking = COL_RayObject_NormalGet()
				DBG_RenderVector(tv_temp, tv_banking, color_bleu)
				tv_horizon = MATH_VecCrossProduct(OBJ_SightGet(), tv_banking)
				DBG_RenderVector(tv_temp, tv_horizon, color_rouge)
				tv_sight = MATH_VecCrossProduct(tv_banking, tv_horizon)
				DBG_RenderVector(tv_temp, tv_sight, color_vert)
			}
			else
				tv_sight = OBJ_SightGet()
			v_jump_dest_pos = OBJ_PosGet() + (15.0 * tv_sight)
			DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, v_jump_dest_pos - OBJ_PosGet(), color_rouge)
			if( f_joy_norm == 1.0 )
				i_jump_mode = Ci_jump_mode_rided_fast
			else
				i_jump_mode = Ci_jump_mode_rided_slow
			macro_change_etat("prs_ETAT_JUMP")
		}
		else
		{
			// Pas d'action = joy ?
			if( f_joy_norm )
			{
				v_joy_dir = @get_global v_joy_camera_normalized
				v_next_pos = OBJ_PosGet() + (f_joy_norm * v_joy_dir)
			}
		}
		break
}

AI_Execute("prs_exec_way_move")

AI_Execute("prs_exec_select_action")


