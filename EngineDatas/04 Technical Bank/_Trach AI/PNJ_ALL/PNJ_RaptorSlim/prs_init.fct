#include "prs_RaptorSlim_defines.var"

int			ti_i, ti_k
int			ti_membre_index
vector	tv_pos
object	to_bone
object	to_raptor
//object	to_kong
object	to_occluder
object	tao_way_wp[50]
vector	tv_temp

AI_CBAdd(OBJ_Me(), CallBack_WhenDestroy, "prs_CALLBACK_when_destroy")

//OBJ_Destroy()

if( ! O_Return )
{
	DBG_TraceObject(OBJ_Me())
	DBG_TraceEOL()
	DBG_Error("The Raptor <name in log> need a WP O_Return")
}
// NETWORK TERRITORY
// If all initialisation is already done just copy from global
// Else do it

//	ti_index = ARR_LIB_NetworkSearch( & @get_global an_precal[0], @get_global i_precal_nb, n_net)
//	if (ti_index == -1)
//	{
		PROC_WAY_Init( )

		PROC_WAY_Compute_Territory()
//	}

// CACHES
i_net_hiding_place_nb = 0
for (ti_i = 0; ti_i < i_net_wp_nb; ti_i++)
{
	// ON MEMORISE TOUTES LES ITEMS DESTRUCTIBLE DU RESEAU
	if ( @ao_net_wp[ti_i] OBJ_CapaTest(Ci_Capa_Break_Item))
	{
		ao_net_hiding_place[i_net_hiding_place_nb] = ao_net_wp[ti_i]
		i_net_hiding_place_nb++
	}
}

// OCCLUDER DESTRUCTIBLES( caches)
for ( ti_i = 0; ti_i < @get_list_manager i_occluder_nb; ti_i++)
{
	to_occluder = @get_list_manager ao_occluder[ti_i]
	if ( @to_occluder OBJ_CapaTest(Ci_Capa_Occluder_Cache))
	{
		ao_net_hiding_place[i_net_hiding_place_nb] = to_occluder
		i_net_hiding_place_nb++
	}
}

PRS_Init_Speed_Array()
f_point_de_viande = 10.0
f_friction = Cf_Raptor_friction
v_jump_gravity = Cv_Raptor_Gravity
f_jump_friction = Cf_Raptor_jump_friction
v_jump_friction = cvector(f_jump_friction, f_jump_friction, 0.0)

// MOVE
i_way_move_bit |= Ci_WAY_BIT_JUMP
if ( i_can_break_hideout)
	i_way_move_bit |= Ci_WAY_BIT_BREAK



// BONES INIT
o_ventre = ANI_CanalObjectGet(Anim_Canal_Tete + 4)
		
// IK NECK INIT ================================================================================================
i_head_bone_nb = 4
for (ti_i = 0; ti_i < i_head_bone_nb; ti_i++)
{
	ao_head_bones[ti_i] = ANI_CanalObjectGet(Anim_Canal_Tete + ti_i)

	if (ti_i)	
	{
		af_neck_bone_length[ti_i - 1] = MATH_VecNorm(@ao_head_bones[ti_i - 1] OBJ_PosGet() - @ao_head_bones[ti_i] OBJ_PosGet())
		f_neck_length += af_neck_bone_length[ti_i - 1]
	}
}
ao_head_bones[i_head_bone_nb] = ANI_CanalObjectGet(Anim_Canal_Bassin)

// IK LEGS INIT ================================================================================================
tv_pos = OBJ_PosGet()

for (ti_i = 0; ti_i < 2; ti_i++)
{
	switch(ti_i)
	{
		case Ci_IK_pied_gauche :
			ti_membre_index = Anim_Canal_PiedGauche
			break
		case Ci_IK_pied_droit :
			ti_membre_index = Anim_Canal_PiedDroit
			break
		case Ci_IK_main_gauche :
			ti_membre_index = Anim_Canal_MainGauche + 1
			break
		case Ci_IK_main_droite :
			ti_membre_index = Anim_Canal_MainDroite + 1
			break
	}	

	for (ti_k = 0; ti_k < 3; ti_k++)
	{
		to_bone = ANI_CanalObjectGet(ti_membre_index + (2 - ti_k))
//		DBG_RenderVector(@to_bone OBJ_PosGet(), @to_bone OBJ_BankingGet(), color_bleu)
		ao_IK_bones[ti_i][ti_k] = to_bone
	}

	switch(ti_i)
	{
		case Ci_IK_pied_gauche :
			ti_membre_index = Anim_Canal_OrteilGauche
			break
		case Ci_IK_pied_droit :
			ti_membre_index = Anim_Canal_OrteilDroit
			break
		case Ci_IK_main_gauche :
			ti_membre_index = Anim_Canal_MainGauche
			break
		case Ci_IK_main_droite :
			ti_membre_index = Anim_Canal_MainDroite
			break
	}	

	ao_IK_bones[ti_i][3] = ANI_CanalObjectGet(ti_membre_index)
		
	af_IK_bones_length[ti_i][0] = MATH_VecNorm(@ao_IK_bones[ti_i][1] OBJ_PosGet() - @ao_IK_bones[ti_i][0] OBJ_PosGet())
	af_IK_bones_length[ti_i][1] = MATH_VecNorm(@ao_IK_bones[ti_i][2] OBJ_PosGet() - @ao_IK_bones[ti_i][1] OBJ_PosGet())
	af_IK_bones_length[ti_i][2] = MATH_VecNorm(@ao_IK_bones[ti_i][3] OBJ_PosGet() - @ao_IK_bones[ti_i][2] OBJ_PosGet())

	f_IK_leg_length[ti_i] = af_IK_bones_length[ti_i][0]
	f_IK_leg_length[ti_i] += af_IK_bones_length[ti_i][1]
	f_IK_leg_length[ti_i] += af_IK_bones_length[ti_i][2]
	f_IK_leg_length[ti_i] *= 1.75

	v_IK_bone_last_valid_sight[ti_i] = @ao_IK_bones[ti_i][2] OBJ_SightGet()
	v_IK_bone_last_valid_banking[ti_i] = @ao_IK_bones[ti_i][2] OBJ_BankingGet()

	if (ti_i < 2)
		v_IK_feet_Z_axis[ti_i] = @ao_IK_bones[ti_i][3] MATH_VecGlobalToLocal(Cv_VerticalVector)	

	if (ti_i < 2)
	{
		switch(ti_i)
		{
			case Ci_IK_pied_gauche :
				PRS_ActionSet(Action_Saut_Reception_G + (Ci_ActionSet_Force_No_Blend | Ci_ActionSet_Force_SameAction))
				break
	
			case Ci_IK_pied_droit :
				PRS_ActionSet(Action_Saut_Reception_D + (Ci_ActionSet_Force_No_Blend | Ci_ActionSet_Force_SameAction))
				break
		}
	
		av_IK_bassin_reception_offset[ti_i] = MATH_VecGlobalToLocal(@ao_head_bones[i_head_bone_nb] OBJ_PosGet() - OBJ_PosGet())
	
		switch(ti_i)
		{
			case Ci_IK_pied_gauche :
				PRS_ActionSet(Action_Saut_Pied_G + (Ci_ActionSet_Force_No_Blend | Ci_ActionSet_Force_SameAction))
				break
	
			case Ci_IK_pied_droit :
				PRS_ActionSet(Action_Saut_Pied_D + (Ci_ActionSet_Force_No_Blend | Ci_ActionSet_Force_SameAction))
				break
		}

		av_IK_bassin_saut_offset[ti_i] = MATH_VecGlobalToLocal(@ao_head_bones[i_head_bone_nb] OBJ_PosGet() - OBJ_PosGet())
	}
}

to_raptor = OBJ_Me()
to_raptor.des_int1 = Ci_DISPLAY_FIGHT

DYN_On()
DYN_FlagsSet(DYN_C_BasicForces | DYN_C_NeverDynamicFather | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_SkipFrictionWhenSpeedFromAnim | DYN_C_HorizontalGrounds, none)
DYN_GravitySet(Cv_Raptor_Gravity)
DYN_FrictionVectorSet(cvector(f_friction, f_friction, 0.0))

DYN_MaxStepSet(0.7)

COL_PrioritySet(100)

COL_SwapToSpecific(C_zdm_pied)
COL_ZoneSizeSet(C_zdm_pied, cvector(0.75, 0.75, 0.75))
COL_ZonePosSet(C_zdm_pied, cvector(0.0, 0.0, 0.75))
COL_ZoneFlagSet(C_zdm_pied, COL_C_Zone_NoScale, none)
//COL_ZoneSizeSet(C_zdm_pied, cvector(0.5, 0.5, 0.5))
//COL_ZonePosSet(C_zdm_pied, cvector(0.0, 0.0, 0.5))

COL_CrossableSet(Gmat_RM_Crossable_Default,none)
//COL_CrossableSet(none, Gmat_KK_Cross_All_But_Kong_And_Raptors)

OBJ_ZoomSet(1.0)
//OBJ_ZoomSet(0.7)


COL_SwapToSpecific(C_zde_corps)
COL_ZoneSizeSet(C_zde_corps, cvector(3.0, 3.0, 3.0))
COL_ZoneFlagSet( C_zde_corps, COL_C_Zone_ZDE, COL_C_Zone_ZDM)

COL_SwapToSpecific(C_zde_fight)
COL_ZoneSizeSet(C_zde_fight, cvector(0.75, 0.75, 0.75))

// LOOK
f_look_axis_length = 5.0
v_look_last_head_pos = @ao_head_bones[0] OBJ_PosGet()
v_look_head_pos = MATH_VecGlobalToLocal(@ao_head_bones[0] OBJ_PosGet() - OBJ_PosGet())
v_look_banking = MATH_VecGlobalToLocal(@ao_head_bones[0] OBJ_BankingGet())
v_look_axis = OBJ_SightGet() * f_look_axis_length

// PARAMS
f_vision_close_to_head_sqr_dist = 1.0
f_vision_close_to_feet_sqr_dist = 1.0
f_vision_near_in_move_dist = 10.0
i_foodchain_eat_slots_free = i_foodchain_eat_slots_nb


// LIFE
f_life = 100.0 * PAF_Unit
f_lifecur = f_life
ID_LIFE = EVENT_AddEventLife( f_life, f_life, f_life * 0.5)

i_perceived_best_actor_index = -1

PRS_Set_OBBOX( 1.0)

// BV
tv_temp = cvector(6.0, 6.0, 6.0) * OBJ_ZoomGet()
BV_MinSet(-tv_temp)
BV_MaxSet(tv_temp)

HotSpot_Add_Obj(OBJ_Me(), 1)

if( AI_GetCurSystem() != Ci_CurSystem_Editeur )
{
	DBG_Display_Jump = faux
	DBG_IK_Display_Pilotage = faux
	DBG_Display_Territory = faux
	DBG_FAKE_RIDED = faux
	DBG_IK_test_pilotage_tete = nobody
	DBG_Force_Target = nobody
	DBG_Mount_Only = faux
	DBG_Anim = 0
}

AI_CBAdd(OBJ_Me(), CallBack_After_Blend, "prs_CALLBACK_afterblend")
AI_CBAdd(OBJ_Me(), CallBack_Client, "prs_CALLBACK_client")

AI_TrackChange(1, "prs_reflex")
if( DBG_FAKE_RIDED )
	AI_TrackCurChange("prs_ETAT_RIDED")
else if ( o_Spawn )
{
	// FILL THE NETWORK
	i_way_wp_nb = WAY_NetFill( @o_Spawn WAY_NetOfObj() , o_Spawn, &tao_way_wp[0])
	for( ti_i = (i_way_wp_nb -1); ti_i >=0; ti_i-- )
		ao_way_wp[ti_i ] = tao_way_wp[i_way_wp_nb - ti_i - 1]
	
	// CHECK WAY LOOP
	i_Spawn_way_Loop = faux
	if( WAY_ShortWay( @o_Spawn WAY_NetOfObj(), &tao_way_wp[0], ao_way_wp[0], ao_way_wp[i_way_wp_nb-1], all, none ) == 2 )
	{
		i_Spawn_way_Loop = vrai			// lien direct entre le 1er et le dernier wp -> cyclique
		i_Spawn_way_Loop_wp_nb = i_way_wp_nb
	}
	
	i_way_wp_nb--
	o_current_wp = ao_way_wp[ i_way_wp_nb]
	o_next_wp = ao_way_wp[ i_way_wp_nb -1]
	OBJ_PosSet(@o_Spawn OBJ_PosGet())
	OBJ_BankingGeneralSet( @o_Spawn OBJ_SightGet(), @o_Spawn OBJ_BankingGet())
	COL_StartMatrixSet( OBJ_PosGet())
	i_Spawn_flag = vrai		// know that we are spawned, even in other functions
	AI_TrackCurChange("prs_ETAT_SPAWN")
}
else
	AI_TrackCurChange("prs_ETAT_ATTENTE")
AI_TrackChange(3, "prs_track_dyna")
AI_TrackChange(4, "prs_track_end")
