#include "prs_RaptorSlim_defines.var"


messageid		tmid_proposition

object	to_serveur

float		tf_dist

vector	tv_temp
vector	tv_sens
vector	tv_serveur_pos
vector	tv_ma_pos
vector	tv_sight
vector	tv_banking


#define	MACRO_REFUSE(texte)	\
{	\
//DBG_TraceObject(OBJ_Me())	\
//DBG_TraceString(" refuse le ride : ")	\
//DBG_TraceString(texte)	\
//DBG_TraceEOL()	\
LNK_ServeurRefuse(tmid_proposition)	\
return		\
}

tmid_proposition = pop

// Pas trop souvent !
//if( ! TIME_Elapsed(f_Rided_last_time, 1.0) )
//{
//	MACRO_REFUSE("trop souvent !")
//}

// Pour être ridé je dois être vivant
if( ! EVENT_LIFE_CurLifeGet(ID_LIFE) )
{
	MACRO_REFUSE("déjà mort")
}

// Pour être ridé je dois être ko au sol
if( ! DBG_Mount_Only )
{
	switch( i_etat_courant )
	{
		case ETAT_PRS_PAF_FALL :
		case ETAT_PRS_PAF_FLY :
		case ETAT_PRS_PAF_SLIDE :
		case ETAT_PRS_A_TERRE :
			break
		default:
			MACRO_REFUSE("pas dans un état au sol")
			break
	}
}

// Pour être ridé je dois être proche
to_serveur = MSG_GlobalGetGao(tmid_proposition, SERVEUR)
tv_serveur_pos = @to_serveur OBJ_PosGet()
//Proc_PRS_RidedInfosGet(tv_ma_pos, tv_sight, tv_banking)
tv_ma_pos = Proc_PRS_RidedPosGet()
//if( MATH_AbsFloat(tv_serveur_pos.z - tv_ma_pos.z) > 2.0 )
//	MACRO_REFUSE

// Pour être ridé je dois être proche
tv_temp = tv_serveur_pos - tv_ma_pos
//tv_temp.z = 0.0
tf_dist = MATH_VecNorm(tv_temp)
if( tf_dist <= 3.0 )
{
	// La distance est bonne
	tv_sens = LNK_GrabVectorGet(tmid_proposition)
	tf_dist = MATH_FloatMin(tf_dist, 999)
	tf_dist += Ci_Grab_Kong_Pond_Raptor_Kong
	if( ( ! MATH_VecNullEpsilon(tv_sens) ) && MATH_VecDotProduct(tv_sens, tv_temp) > 0.0 )
		tf_dist += Ci_Grab_Kong_Pond_Bad_Axe 			// BAD AXE
	LNK_ClientPropose(tmid_proposition, tf_dist)
}
else
{
//	DBG_TraceFloat(tf_dist)
	MACRO_REFUSE("trop loin")
}
