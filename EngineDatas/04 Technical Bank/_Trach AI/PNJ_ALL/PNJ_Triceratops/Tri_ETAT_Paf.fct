#include "Tri_defines.var"

vector	tv_temp
vector	tv_temp1
float		tf_paf_freq


// SORTIE ETAT ==========================================
if( i_etat_sortie )
{
	i_etat_sortie = faux
	return
}

// ENTREE ETAT =========================================
if( i_etat_courant != ETAT_PAF )
{
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_PAF
	if( fct_etat_ancien )
	{
		i_etat_sortie = vrai
		AI_Execute(fct_etat_ancien)
	}
	fct_etat_ancien = AI_TrackCurGet()
	ETAT_REINIT: 
	f_etat_duree = 0.0
	
	if( ! EVENT_LIFE_CurLifeGet(ID_LIFE) )
	{
		SND_RequestPlay(Ci_SND_Dead)
		Tri_ActionSet0(Action_PafMort)
	}
	else
	{
		SND_RequestPlay(Ci_SND_Paf)
		// action ?
		tv_temp = OBJ_HorizonGet()
		MATH_VecSetHorzNormalize(tv_temp)
		tv_temp1 = v_paf_dir
		MATH_VecSetHorzNormalize(tv_temp1)
		if( MATH_VecDotProduct(tv_temp, tv_temp1) > 0.0 )
			Tri_ActionSet0(Action_PafD)
		else
			Tri_ActionSet0(Action_PafG)
		tf_paf_freq = ANI_FrequencyGet(0)
		tf_paf_freq *= MATH_RandFloat(0.9,1.9)
		ANI_FrequencySet(0, tf_paf_freq)
	}
	// force fight paf actor
	v_paf_orient = @o_paf_actor OBJ_PosGet() - OBJ_PosGet()
	o_paf_actor_to_target = o_paf_actor
	o_paf_actor = nobody
}
else
{
	f_etat_duree += TIME_GetDt()
}

// ANALYSE =============================================
AI_Execute("Tri_exec_Check_Pafs")
if( o_paf_actor )
	goto ETAT_REINIT

// COMPORTEMENT =======================================
if( ACT_ActionFinished() )
{
	if( ! EVENT_LIFE_CurLifeGet(ID_LIFE) )
		macro_change_etat("Tri_ETAT_Dead")
	else
		macro_change_etat("Tri_ETAT_Idle")
}
OBJ_BankingGeneralSet(MATH_VecBlendRotate(OBJ_SightGet(), v_paf_orient, 2 * TIME_GetDt()), macro_banking)

