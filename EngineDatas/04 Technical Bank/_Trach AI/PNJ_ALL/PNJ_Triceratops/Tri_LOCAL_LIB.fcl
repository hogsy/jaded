#include "Tri_defines.var"
Include_UltraProcedure_Header

procedure int Tri_Pos_in_BV(vector pv_pos, object po_zone) 
{
	if( ! po_zone )
		return faux	// vrai
	else if( ! ( @po_zone OBJ_FlagsStatusGet() & OBJ_C_StatusFlag_Active ) )
		return faux
	else
		return( @po_zone COL_BV_PointCollide(pv_pos) )
}
procedure int Tri_Gao_in_BV(object to_gao, object po_zone) 
{
	if( ! to_gao )
		return faux
	else
		return Tri_Pos_in_BV(@to_gao OBJ_PosGet(), po_zone)
}
procedure_local int Tri_Pos_in_Territory(vector tv_pos)
{
	int		ti_type_sol
	int		ti_return
	int		ti_i
	
	if( o_Territoire && ! Tri_Pos_in_BV(tv_pos, o_Territoire) )
		return faux
	
	return vrai		// pas de o_Territoire -> pas de limite
}
procedure_local int Tri_Gao_in_Territory(object to_gao)
{
	if( ! to_gao )
		return faux
	else
		return Tri_Pos_in_Territory(@to_gao OBJ_PosGet())
}

// Valide la cible courante
procedure_local int Tri_Target_Check(object to_target)
{
	if( ! to_target )
		return faux
	
	if( ! Tri_Gao_in_Territory(to_target) )
		return faux
	
//	if( o_Joueur && to_target == o_Joueur && @o_Joueur Proc_KIndigene_Kong_LiaisonStatusGet() != Ci_Kong_KIndigene_LinkStatus_None )
//		return faux
	
	if( to_target == o_Kong )
	{
		if( @to_target Proc_KK_Test_Mode(ETAT_Kong_climb_rapide)
		|| @to_target Proc_KK_Test_Mode(ETAT_Kong_accroch_mur) )
			return faux
	}
	
	return vrai
}

procedure_local void Tri_ActionSet(int ti_action)
{
	ACT_ActionSet(ti_action)
}

procedure_local void Tri_ActionSet0(int ti_action)
{
	ACT_ActionSet(ti_action | Ci_ActionSet_Force_SameAction | Ci_ActionSet_Force_FrameZero)
}


procedure_local int Tri_Occluder_Test(vector tv_dest_pos_init, byref vector tv_sight)
{
	int			ti_occluders_nb
	int			ti_result
	object	to_occluder_jump
	object	to_occluders[4]
	float		tf_occluders[4]
	float		tf_largeur
	vector	tv_dest_pos_new
	vector	tv_start_pos
	
	ti_occluders_nb = 0
	// Kong est-il un occluder ?
	if( o_Joueur && o_fight_actor == o_Joueur )
	{
		// si ma target est Indy
		if( @o_Joueur Proc_KIndigene_Kong_LiaisonStatusGet() == Ci_Kong_KIndigene_LinkStatus_None )
		{
			// si Indy est au sol
			if( o_Kong )
			{
				// alors Kong est un occluder
				to_occluders[ti_occluders_nb] = o_Kong
				tf_occluders[ti_occluders_nb] = 4.0
				ti_occluders_nb++
			}
		}
	}
	// Test des occluders
	tf_largeur = COL_ZoneSizeGet(C_zdm_pied) * 2.0
	tv_start_pos = OBJ_PosGet()
	ti_result = WAY_LIB_Test_Occluder(tv_start_pos, tv_sight, tf_largeur, tv_dest_pos_init, -1, tv_dest_pos_new, to_occluder_jump, &to_occluders[0], &tf_occluders[0], ti_occluders_nb, C_Occl_Type_All)
	if( ti_result & Ci_OCCLUDER_COLLISION )
	{
		tv_sight = tv_dest_pos_new - tv_start_pos
	}
	return ti_result
}


// SND LOOP ===============================================================
procedure_local void Tri_SND_Furax_Start()
{
	if( i_SND_furax_loop == -1 )
	{
		i_SND_furax_loop = SND_RequestPlayLoop(Ci_SND_Furax_Loop)
	}
}
procedure_local void Tri_SND_Furax_Stop()
{
	if( i_SND_furax_loop != -1 )
	{
		SND_Destroy(i_SND_furax_loop)
		i_SND_furax_loop = -1
	}
}
procedure_local void Tri_SND_Boire_Start()
{
	if( i_SND_boire_loop == -1 )
	{
		i_SND_boire_loop = SND_RequestPlayLoop(Ci_SND_Boire_Loop)
	}
}
procedure_local void Tri_SND_Boire_Stop()
{
	if( i_SND_boire_loop != -1 )
	{
		SND_Destroy(i_SND_boire_loop)
		i_SND_boire_loop = -1
	}
}
procedure_local void Tri_SND_Brouter_Start()
{
	if( i_SND_brouter_loop == -1 )
	{
		i_SND_brouter_loop = SND_RequestPlayLoop(Ci_SND_Brouter_Loop)
	}
}
procedure_local void Tri_SND_Brouter_Stop()
{
	if( i_SND_brouter_loop != -1 )
	{
		SND_Destroy(i_SND_brouter_loop)
		i_SND_brouter_loop = -1
	}
}
procedure_local void Tri_SND_Devore_Start()
{
	if( i_SND_devore_loop == -1 )
	{
		i_SND_devore_loop = SND_RequestPlayLoop(Ci_SND_Devore_Loop)
	}
}
procedure_local void Tri_SND_Devore_Stop()
{
	if( i_SND_devore_loop != -1 )
	{
		SND_Destroy(i_SND_devore_loop)
		i_SND_devore_loop = -1
	}
}

procedure_local int Tri_EstUnCadavre(object to_actor, int ti_ID)
{
	if( IsThis_ID_Humain(ti_ID) )
		return faux
	else if( ti_ID == C_ID_Triceratops )
		return faux
	else if( @to_actor AI_IsModel(get_PNJ_Bidoche_path) )
		return faux
	else if( @to_actor AI_IsModel(get_OBJ_Cadavre_path) )
		return faux
	else if( @to_actor AI_IsModel(get_KCadavre_path) )
		return faux
	else
		return vrai
}

