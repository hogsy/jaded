#include "PNJ_Raptor_defines.var"

procedure_local void PNJ_Raptor_Update_Attack_Wp_Pos(object to_father_wp)
{
	int			ti_i
	
	float		tf_dot_product

	object	to_wp

	vector	tv_ray_start_pos
	vector	tv_pos

	if (raptor_type != C_ID_Raptor)
		return
		
	if (raptor_category == Ci_Raptor_Heavy)
		return

	if ( ! @to_father_wp AI_IsModel("Interactive_Objects/ODE_TREX_Cache") )
		return

	ti_i = 0
	while(ti_i < 10)
	{
		to_wp = @"Interactive_Objects/ODE_TREX_Cache" to_father_wp WP_Raptor_List[ti_i]
		if ( ! to_wp )
			break
	
		tv_ray_start_pos = @to_wp OBJ_PosGet()
		tv_ray_start_pos += @to_wp OBJ_SightGet() * 4.0
		tv_ray_start_pos += MATH_FloatSign(MATH_VecDotProduct(@to_father_wp OBJ_PosGet() - @to_wp OBJ_PosGet(), @to_wp OBJ_HorizonGet())) * @to_wp OBJ_HorizonGet()
		tv_ray_start_pos.z += 1.0
	
		COL_RayObject_Dist(tv_ray_start_pos, -@to_wp OBJ_SightGet(), 4.0, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
		tv_pos = COL_RayObject_PosGet()
		DBG_RenderVector(tv_ray_start_pos, tv_pos - tv_ray_start_pos, color_rouge)

		tf_dot_product = MATH_VecDotProduct(tv_pos - @to_wp OBJ_PosGet(), @to_wp OBJ_SightGet())
		tf_dot_product -= 2.0

		tv_pos = @to_wp OBJ_PosGet()
		tv_pos += tf_dot_product * @to_wp OBJ_SightGet()
		@to_wp OBJ_PosSet(tv_pos)

		ti_i++
	}
}

procedure_local void PNJ_Raptor_Del_Interest()
{
	i_perceived_best_actor_index = -1
	if (MSG_GlobalIsValid(mid_best_interet))
	{
		i_flag_change_target = faux

		MSG_GlobalDelete(mid_best_interet, C_EVENT_DEL)
		MSG_GlobalSetInvalid(mid_best_interet)
	}
}

procedure_local void PNJ_Raptor_ActionSet(int ti_action_num)
{
	ACT_ActionSet(ti_action_num)

//	switch(ti_action_num)
//	{
//		case Action_Demi_Tour_D_deb :
//		case Action_Demi_Tour_G_deb :
//			DBG_BreakPoint()
//			break
//	}
}

procedure_local void PNJ_Raptor_Remove_Life(float tf_life_loss, object to_killer)
{
	float tf_last_lifecur
	
	tf_last_lifecur = f_lifecur

	f_lifecur -= MATH_FloatMin(f_lifecur, tf_life_loss)
	f_lifecur = MATH_FloatRound(f_lifecur, 0.01)

	if (tf_last_lifecur && !f_lifecur)
	{
		switch( raptor_type )
		{
			case C_ID_Raptor : 			STATS_IncEnemyKilled_New( to_killer, C_EnemyType_Raptor, 0 ) break
			case C_ID_Galiminus : 	STATS_IncEnemyKilled_New( to_killer, C_EnemyType_Gallimini, 0 ) break
			case C_ID_Tyranosaure : 	STATS_IncEnemyKilled_New( to_killer, C_EnemyType_Trex, 0 ) break
			default: STATS_IncEnemyKilled_New( to_killer, C_EnemyType_Unkonwn, 0) break
		}
	}
}

procedure_local void PNJ_Raptor_Minimise_Life(float tf_max_life, object to_killer)
{
	float tf_last_lifecur
	
	tf_last_lifecur = f_lifecur

	f_lifecur = MATH_FloatMin(f_lifecur, tf_max_life)
	f_lifecur = MATH_FloatRound(f_lifecur, 0.01)

	if (tf_last_lifecur && !f_lifecur)
	{
		switch( raptor_type )
		{
			case C_ID_Raptor : 			STATS_IncEnemyKilled_New( to_killer, C_EnemyType_Raptor, 0 ) break
			case C_ID_Galiminus : 	STATS_IncEnemyKilled_New( to_killer, C_EnemyType_Gallimini, 0 ) break
			case C_ID_Tyranosaure : 	STATS_IncEnemyKilled_New( to_killer, C_EnemyType_Trex, 0 ) break
			default: STATS_IncEnemyKilled_New( to_killer, C_EnemyType_Unkonwn, 0) break
		}
	}
}

//procedure_local void PNJ_Raptor_UncollideAdd(object to_gao, floa0.0t tf_duration)
//{
//	int		ti_index
//	
//	ti_index = ARR_ObjSearch(&ao_uncollide_gao[0], i_uncollide_gao_nb, to_gao)
//	if (ti_index == -1)
//	{
//		ao_uncollide_gao[i_uncollide_gao_nb] = to_gao
//		af_uncollide_duration[i_uncollide_gao_nb] = tf_duration
//		i_uncollide_gao_nb++
//		COL_UnCollidableAdd(to_gao)
//	}
//	else
//	{
//		af_uncollide_duration[ti_index] = tf_duration
//	}
//}
//
//procedure_local void PNJ_Raptor_UncollideDel(object to_gao)
//{
//	int		ti_index
//	ti_index = ARR_ObjSearch(&ao_uncollide_gao[0], i_uncollide_gao_nb, to_gao)
//	if (ti_index != -1)
//		af_uncollide_duration[ti_index] = 0.0
//}
//
//procedure_local void PNJ_Raptor_UncollideCheck()
//{
//	int		ti_i
//	
//	for (ti_i = 0; ti_i < i_uncollide_gao_nb; ti_i++)
//	{
//		if (af_uncollide_duration[ti_i] == -1.0)
//			continue
//	
//		if (af_uncollide_duration[ti_i] <= 0.0 && ! OBJ_LIB_Virtual_Collision(OBJ_Me(), ao_uncollide_gao[ti_i], faux))
//		{
//			COL_UnCollidableDel(ao_uncollide_gao[ti_i])
//			
//			i_uncollide_gao_nb--
//
//			af_uncollide_duration[ti_i] = af_uncollide_duration[i_uncollide_gao_nb]
//			ao_uncollide_gao[ti_i] = ao_uncollide_gao[i_uncollide_gao_nb]
//			
//			af_uncollide_duration[i_uncollide_gao_nb] = -1.0
//			ao_uncollide_gao[i_uncollide_gao_nb] = nobody
//		}
//
//		af_uncollide_duration[ti_i] -= MATH_FloatMin(af_uncollide_duration[ti_i], TIME_GetDt())
//	}
//}

procedure_local void PNJ_Raptor_Forget_Wp(object to_wp)
{
	int		ti_index
	if (!to_wp)
		return

	ti_index = ARR_ObjSearch(&ao_memorised_wp[0], i_memorised_wp_nb, to_wp)
	if (ti_index != -1)
	{
		i_memorised_wp_nb--
		ao_memorised_wp[ti_index] = ao_memorised_wp[i_memorised_wp_nb]
		ao_memorised_wp[i_memorised_wp_nb] = nobody
	}
}

procedure_local void PNJ_Raptor_Memorise_Wp(object to_wp)
{
	int		ti_index
	
	if (!to_wp)
		return

	ti_index = ARR_ObjSearch(&ao_memorised_wp[0], i_memorised_wp_nb, to_wp)
	if (ti_index != -1)
		return

	ao_memorised_wp[i_memorised_wp_nb] = to_wp
	i_memorised_wp_nb++
}

procedure_local int PNJ_Raptor_Is_Wp_Memorised(object to_wp)
{
	int		ti_index
	
	ti_index = ARR_ObjSearch(&ao_memorised_wp[0], i_memorised_wp_nb, to_wp)
	if (ti_index != -1)
		return(vrai)

	return(faux)
}

//procedure_local void PNJ_Raptor_Check_Body()
//{
//	int		ti_i	
//	int		ti_index
//	int		ti_flag_del_body
//
//	for (ti_i = 0; ti_i < i_memorised_body_nb; ti_i++)
//	{
//		ti_flag_del_body	= faux
//	
//		ti_index = ARR_ObjSearch(&ao_perceived_actor[0], i_perceived_actor_nb, ao_memorised_body[ti_i])
//		if (ti_index == -1)
//			ti_flag_del_body = vrai
//		else if ((@ao_memorised_body[ti_i] AI_IsModel("PNJ_Pacifique/PNJ_EatMe")) && (@ao_memorised_body[ti_i] OBJ_CapaTest(OBJ_Capa_1)))
//			ti_flag_del_body = vrai
//		
//		if (ti_flag_del_body)
//		{
//			i_memorised_body_nb--
//			ao_memorised_body[ti_i] = ao_memorised_body[i_memorised_body_nb]
//			ao_memorised_body[i_memorised_body_nb] = nobody
//			
//			ti_i--
//		}
//	}
//}
//
//procedure_local void PNJ_Raptor_Forget_Body(object to_body)
//{
//	int		ti_index
//	
//	ti_index = ARR_ObjSearch(&ao_memorised_body[0], i_memorised_body_nb, to_body)
//	if (ti_index != -1)
//	{
//		i_memorised_body_nb--
//		ao_memorised_body[ti_index] = ao_memorised_body[i_memorised_body_nb]
//		ao_memorised_body[i_memorised_body_nb] = nobody
//	}
//}
//
//procedure_local void PNJ_Raptor_Memorise_Body(object to_body)
//{
//	int		ti_index
//	
//	ti_index = ARR_ObjSearch(&ao_memorised_body[0], i_memorised_body_nb, to_body)
//	if (ti_index != -1)
//		return
//		
//	ao_memorised_body[i_memorised_body_nb] = to_body
//	i_memorised_body_nb++
//}

//procedure_local int PNJ_Raptor_Is_Body_Memorised(object to_body)
//{
//	int		ti_index
//
//	ti_index = ARR_ObjSearch(&ao_memorised_body[0], i_memorised_body_nb, to_body)
//	if (ti_index != -1)
//		return(vrai)
//	
//	return(faux)
//}

procedure_local void PNJ_Raptor_Display_Territory()
{
#ifndef _FINAL_
	int		ti_i
	int		ti_k
	int		ti_m
	int		ti_color
	int		ti_string_ID

	object	to_dest_wp

	if ( ! DBG_Display_Territory )
		return
	
	if (AI_GetCurSystem() != 10)
		return

	for (ti_i = 0; ti_i < i_net_territory_ID_nb; ti_i++)
	{
		if (PNJ_Raptor_Territory_Num_Allowed(ti_i))	
		{
			for (ti_k = 0; ti_k < ai_net_territory_wp_nb[ti_i]; ti_k++)
			{
				to_dest_wp = ao_net_wp[ai_net_territory_first_wp_index[ti_i] + ti_k]
				ti_string_ID = STR_CreateText("ID: ", VIEW_3dWorldTo2d(0, @to_dest_wp OBJ_PosGet() + cvector(0.0, 0.0, 0.5)), 0.0)
				STR_AppendInt(ti_string_ID, ai_net_territory_ID[ti_i])
			}
		}
		else
		{
			for (ti_k = 0; ti_k < ai_net_territory_wp_nb[ti_i]; ti_k++)
			{
				to_dest_wp = ao_net_wp[ai_net_territory_first_wp_index[ti_i] + ti_k]
				ti_string_ID = STR_CreateText("\c000000FF\ID: ", VIEW_3dWorldTo2d(0, @to_dest_wp OBJ_PosGet() + cvector(0.0, 0.0, 0.5)), 0.0)
				STR_AppendInt(ti_string_ID, ai_net_territory_ID[ti_i])
			}
		}
	}
#endif
}

// Parcours du graphe des territoires en largeur pour déterminer l'accéssibilité de chaque territoire à partir du territoire courant
procedure_local void PNJ_Raptor_Refresh_Territory_List()
{
	int			ti_start_index
	int			ti_dest_index
	int			ti_link_nb
	int			ti_territory_checked_bit_field
	int			ti_wp_index
	int			ti_string_ID
	int			ti_territory_link

	color		tc_color

	object	to_start_wp
	object	to_dest_wp

	@get_global i_refresh_territory_call_nb ++

	ti_territory_checked_bit_field = 0

//	for (ti_k = 0; ti_k < i_net_territory_ID_nb; ti_k++)
//	{
//		ai_net_territory_father_index[ti_k] = -1
//		ai_net_territory_dist[ti_k] = 1000
//	}

	ti_start_index = PNJ_Raptor_Territory_Index_Get(i_my_territory_ID)
	if (ti_start_index == -1)
	{
		// Je ne suis sur aucun territoire ?
		ti_start_index = 0
	}

	ti_wp_index = ai_net_territory_first_wp_index[ti_start_index]

	PNJ_Raptor_Clean_File()
	PNJ_Raptor_Enfile(ti_start_index)

	// ON REMET A ZERO LE CHAMPS DE BIT DES TERRITOIRES ACCESSIBLES
	i_net_territory_bit_field = 0
	i_net_territory_ID_bit_field = 0

	// LE SOMMET DE DEPART EST MARQUE COMME DEJA PARCOURU
//	ai_net_territory_father_index[ti_start_index] = -1
//	ai_net_territory_dist[ti_start_index] = 0

	ti_territory_checked_bit_field |= (1 << ti_start_index)

	if ( ! (@ao_net_wp[ti_wp_index] OBJ_CapaGet() & (Ci_Capa_Exclusion | Ci_Capa_Exclude_Territory)) )
	{
		i_net_territory_bit_field |= (1 << ti_start_index)
		i_net_territory_ID_bit_field |= (1 << ai_net_territory_ID[ti_start_index])

#ifndef _FINAL_
		if (DBG_Display_Territory)
		{
			ti_string_ID = STR_CreateText("ID: ", VIEW_3dWorldTo2d(0, @ao_net_wp[ti_wp_index] OBJ_PosGet() + cvector(0.0, 0.0, 0.5)), 0.0)
			STR_AppendInt(ti_string_ID, ai_net_territory_ID[ti_start_index])
		}
#endif
	}

	// POUR CHAQUE SOMMET DE LA FILE
	while(PNJ_Raptor_File_Size_Get())
	{
		ti_start_index = PNJ_Raptor_Defile()

		if (PNJ_Raptor_Can_Jump())
			ti_territory_link = ai_territory_link[ti_start_index]
		else
			ti_territory_link = ai_territory_link2[ti_start_index]

		// POUR CHAQUE LIEN DE CE SOMMET
		for (ti_dest_index = 0; ti_dest_index < i_net_territory_ID_nb; ti_dest_index++)
		{
			// EST-CE QU'ON A UN LIEN DE CE TERRITOIRE VERS UN AURE TERRITOIRE
			if (! (ti_territory_link & (1 << ti_dest_index) ) )
				continue

			// ON EST DEJA PASSE PAR CE SOMMET
			if (ti_territory_checked_bit_field & (1 << ti_dest_index))
				continue

//			@get_global i_refresh_territory_iteration_nb	++

			// ON MARQUE CE SOMMET
			ti_territory_checked_bit_field |= (1 << ti_dest_index)

			to_dest_wp = ao_net_wp[ai_net_territory_first_wp_index[ti_dest_index]]

			// ON N'A PAS LE DROIT DE PASSER PAR CE SOMMET
			if (@to_dest_wp OBJ_CapaGet() & (Ci_Capa_Exclusion | Ci_Capa_Exclude_Territory))
				continue

			// CE SOMMET EST ATTEIGNABLE
			i_net_territory_bit_field |= (1 << ti_dest_index)
			i_net_territory_ID_bit_field |= (1 << ai_net_territory_ID[ti_dest_index])

//			ai_net_territory_dist[ti_dest_index] = ai_net_territory_dist[ti_start_index] + 1
//			ai_net_territory_father_index[ti_dest_index] = ai_net_territory_father_index[ti_start_index]

#ifndef _FINAL_
			if (DBG_Display_Territory)
			{
				tc_color = 0xFFFFFFFF
				to_start_wp = ao_net_wp[ai_net_territory_first_wp_index[ti_start_index]]

//				ti_string_ID = STR_CreateText("ID: ", VIEW_3dWorldTo2d(0, @to_dest_wp OBJ_PosGet() + cvector(0.0, 0.0, 0.5)), 0.0)
//				STR_AppendInt(ti_string_ID, ai_net_territory_ID[ti_dest_index])
				
				DBG_RenderVector(@to_dest_wp OBJ_PosGet(), Cv_VerticalVector * 10.0,  tc_color)
				DBG_RenderVector(@to_start_wp OBJ_PosGet(), @to_dest_wp OBJ_PosGet() - @to_start_wp OBJ_PosGet(), tc_color)
			}
#endif
			
			PNJ_Raptor_Enfile(ti_dest_index)
		}
	}

	PNJ_Raptor_Display_Territory()

	return
}

procedure_local void PNJ_Raptor_Add_Budy(messageid EVT_Visibility_ID)
{
	object	to_actor	

	if (i_budy_nb == 20)
	{
		DBG_Error("Plus de 20 galimus actifs en même temps")
		return
	}

	if (EVENT_VisionLifeStateGet(EVT_Visibility_ID) <= 0.0)
		return

	to_actor = EVENT_PereGet(EVT_Visibility_ID)
	ao_budy[i_budy_nb] = to_actor
	i_budy_nb++
}

//==================================================================================
// Check si on doit faire des tests approfondis de vision sur ce message id
// Si c'est un pote, va mettre à jour la liste des potes
//==================================================================================
procedure_local int PNJ_Raptor_Invalid_Vision_Event(messageid EVT_Visibility_ID)
{	
	int		ti_filter
	int		ti_ID

	float	tf_life

	object	to_actor

	// Le TRex n'est bloqué par rien
//	if (raptor_type == C_ID_Tyranosaure)
//		PNJ_Raptor_UncollideAdd(EVENT_PereGet(EVT_Visibility_ID), Cf_EVENT_Duree_1Trame)

	to_actor = EVENT_PereGet(EVT_Visibility_ID)
	ti_ID = EVENT_VisionIDGet(EVT_Visibility_ID)

	if (ti_ID == raptor_type)
		PNJ_Raptor_Add_Budy(EVT_Visibility_ID)

	if (to_actor == OBJ_Me())
		return(vrai)

	if (to_actor == o_grab_actor)
		return(faux)

	if (ti_ID == raptor_type && @"PNJ_Predators/PNJ_Raptor" to_actor raptor_category == raptor_category)
	{
		// C'est un perso de la même espèce que moi
//		PNJ_Raptor_Add_Budy(EVT_Visibility_ID)
		return(vrai)
	}
	else if (IsThis_ID_Humain(ti_ID) || IsThis_ID_HumainIndigene(ti_ID))
	{
		// C'est un humain, je dois le regarder
		return(faux)
	}
	else
	{
		// Ce n'est pas un humain, qui mange qui ?
		switch(raptor_type)
		{
			// TREX TREX TREX TREX TREX TREX TREX TREX TREX TREX TREX TREX TREX TREX TREX TREX TREX TREX TREX 
			case C_ID_Tyranosaure :
			
				switch(ti_ID)
				{
					case C_ID_Galiminus :
					case C_ID_SwampCrawler :
					case C_ID_Raptor :
					case C_ID_Cible :
					case C_ID_Bidoche :
						return(faux)	

					case C_ID_BatCharognard :
						if (PNJ_Raptor_Territory_ID_Allowed(EVENT_VisionTerritoryGet(EVT_Visibility_ID)))
							return(faux)	
						else
							return(vrai)
				
					default:
						return(vrai)
				}
				
				break
				
			// RAPTOR RAPTOR RAPTOR RAPTOR RAPTOR RAPTOR RAPTOR RAPTOR RAPTOR RAPTOR RAPTOR RAPTOR 
			case C_ID_Raptor :

				switch(ti_ID)
				{
					case C_ID_Tyranosaure :
						if (PNJ_Raptor_Territory_ID_Allowed(EVENT_VisionTerritoryGet(EVT_Visibility_ID)))
							i_flag_force_fuite = vrai
						return(vrai) 	

					case C_ID_Galiminus :
						if (EVENT_VisionLifeStateGet(EVT_Visibility_ID) > 0.0)
							return(vrai)
						else
							return(faux)
				
					case C_ID_SwampCrawler :
					case C_ID_Raptor :
					case C_ID_Cible :
					case C_ID_Bidoche :
					case C_ID_Scorpion :
						return(faux)	

					case C_ID_BatCharognard :
					case C_ID_Scolo :
						if (PNJ_Raptor_Territory_ID_Allowed(EVENT_VisionTerritoryGet(EVT_Visibility_ID)))
							return(faux)	
						else
							return(vrai)
				
					default:
						return(vrai)
				}
			
				break

			// GALIMINUS GALIMINUS GALIMINUS GALIMINUS GALIMINUS GALIMINUS GALIMINUS GALIMINUS GALIMINUS GALIMINUS 
			case C_ID_Galiminus :

				switch(ti_ID)
				{
					case C_ID_Cible :
					case C_ID_SwampCrawler :
					case C_ID_Bidoche :
						return(faux)	

					case C_ID_Scorpion :
						if (EVENT_VisionLifeStateGet(EVT_Visibility_ID) > 0.0)
							return(vrai)
						else
							return(faux)
						break

				
					case C_ID_Tyranosaure :
					case C_ID_Raptor :
						if (PNJ_Raptor_Territory_ID_Allowed(EVENT_VisionTerritoryGet(EVT_Visibility_ID)))
							i_flag_force_fuite = vrai
						return(vrai) 	

					case C_ID_BatCharognard :
						if (PNJ_Raptor_Territory_ID_Allowed(EVENT_VisionTerritoryGet(EVT_Visibility_ID)))
							return(faux)	
						else
							return(vrai)
				
					default:
						return(vrai)
				}
			
				break
		}
	}
	
	return(vrai)
}

procedure_local int PNJ_Raptor_Best_Interet_Update(int ti_index)
{
	int				ti_flag_update_best_interet	
	int				ti_flag_update_pos
	int				ti_flag_update_seen_time

	object		to_identified_actor
	object		to_last_best_interest_target

	if (ti_index == -1)
		return(-1)

	i_perceived_best_actor_index = ti_index

	ti_flag_update_pos = faux
	ti_flag_update_seen_time = faux

	to_identified_actor = nobody
	
	switch(i_etat_courant)
	{
		case ETAT_SEARCH :
		case ETAT_DEVORE :
			if (af_perceived_dist[ti_index] < 5.0 && ai_perceived_status[ti_index] & (Ci_PERCEIVED_HEARD_SHOT | Ci_PERCEIVED_PAF))
			{
				// Trop pres, je sais ou il est
				ti_flag_update_seen_time = vrai
				ti_flag_update_pos = vrai
				
				to_identified_actor = ao_perceived_actor[ti_index]
				
				break
			}

		default:

			if (i_flag_en_chasse || ai_perceived_seen[ti_index] || (ai_perceived_status[ti_index] & (Ci_PERCEIVED_ATTACKED | Ci_PERCEIVED_IS_DEAD)) )
			{
				ti_flag_update_seen_time = vrai
				ti_flag_update_pos = vrai
				
				to_identified_actor = ao_perceived_actor[ti_index]
			}
			else if (ai_perceived_status[ti_index] & (Ci_PERCEIVED_HEARD | Ci_PERCEIVED_PAF))
			{
				// En cas de paf, je sais d'ou ça vient mais je ne considère pas que je le vois...
				ti_flag_update_pos = vrai
		
				switch(i_etat_courant)
				{
					case ETAT_FIGHT :
					case ETAT_MORD :
					case ETAT_COODBOOL :
						to_identified_actor = ao_perceived_actor[ti_index]
						break
				}
			}
//			else if (PNJ_Raptor_Is_Body_Memorised(ao_perceived_actor[ti_index]))
			else if (ai_perceived_status[ti_index] & Ci_PERCEIVED_BODY_MEMORISED)
			{
				// Je me souviens de ce machin
				ti_flag_update_pos = vrai
				
				to_identified_actor = ao_perceived_actor[ti_index]
			}
	}

	if ( ! ti_flag_update_pos && MSG_GlobalIsValid(mid_best_interet) && EVENT_TargetGet(mid_best_interet) != ao_perceived_actor[ti_index] )
		ti_flag_update_pos = vrai
//		DBG_Error("On va droit au bug là !!!")

	if (ti_flag_update_pos)
	{
		if (! MSG_GlobalIsValid(mid_best_interet))
		{
			// JE N'AVAIS PAS D'INTERET
			i_flag_1st_detection = vrai
		
			if (ti_index == i_perceived_main_actor_index)
				i_SND_flag_attaque_hors_champs = vrai
			else
				i_SND_flag_attaque_hors_champs = faux
		
			mid_best_interet = EVENT_AddEventInteret(OBJ_Me(), Cf_Infinit, af_perceived_interest[ti_index], av_perceived_position[ti_index], to_identified_actor)
			EVENT_InteretVisionIDSet(mid_best_interet, raptor_type)

			f_rode_duration = 0.0
			f_rode_duration_limit	 = delay_rode * MATH_RandFloat(0.5, 1.0)
		
			f_time_last_best_interet_paf = TIME_Get()

			if (ai_perceived_status[ti_index] & Ci_PERCEIVED_PAF)
				i_flag_run_after_paf = vrai
			else
				i_flag_run_after_paf = faux
		}	
		else
		{
			to_last_best_interest_target = EVENT_InteretTargetGet(mid_best_interet)

			 if (ao_perceived_actor[ti_index] != to_last_best_interest_target)
			{
				// INTERET DIFFERENT DE L'ANCIEN
				if (ti_index == i_perceived_main_actor_index)
					i_SND_flag_attaque_hors_champs = vrai
				else
					i_SND_flag_attaque_hors_champs = faux

				EVENT_Delete(mid_best_interet, C_EVENT_DEL)
				mid_best_interet = EVENT_AddEventInteret(OBJ_Me(), Cf_Infinit, af_perceived_interest[ti_index], av_perceived_position[ti_index], to_identified_actor)
				EVENT_InteretVisionIDSet(mid_best_interet, raptor_type)

				f_rode_duration = 0.0
				f_rode_duration_limit	 = delay_rode * MATH_RandFloat(0.5, 1.0)

				f_time_last_best_interet_paf = TIME_Get()
	
				if (ai_perceived_status[ti_index] & Ci_PERCEIVED_PAF)
					i_flag_run_after_paf = vrai
				else
					i_flag_run_after_paf = faux
			}
		}

		EVENT_InteretPositionSet(mid_best_interet, av_perceived_position[ti_index])
	}

	if (ai_perceived_status[ti_index] & Ci_PERCEIVED_PAF)
		f_time_last_best_interet_paf = TIME_Get()

	if (ti_flag_update_seen_time)
	{
		EVENT_InteretTargetSet(mid_best_interet, to_identified_actor)
		EVENT_InteretSeenTimeSet(mid_best_interet, TIME_Get())
	}

	if (ai_perceived_status[ti_index] & Ci_PERCEIVED_IS_DEAD)
		ai_perceived_status[ti_index] |= Ci_PERCEIVED_BODY_MEMORISED
//		PNJ_Raptor_Memorise_Body(ao_perceived_actor[ti_index])

	i_target_territory_ID = ai_perceived_territory[ti_index]

	return(ti_index)
}

//procedure_local int PNJ_Raptor_Is_In_Hiding_Place(vector tv_pos)
//{
//	int		ti_grid_capa	
//	int		ti_return_value
//
//	GRID_CurrentSet(1)
//
//	ti_grid_capa = GRID_CapaGet(tv_pos) & tag_grid_terrain
//
//	switch(ti_grid_capa)
//	{
//		case Ci_sol_cache_raptor :
//		case Ci_sol_cache_raptor_bats :
//			ti_return_value = vrai
//			break
//			
//		default:
//			ti_return_value = faux
//	}
//	
//	GRID_CurrentSet(0)
//	
//	return(ti_return_value)
//}

procedure_local void PNJ_Raptor_Remove_Hiding_Place(object to_wp)
{
	int		ti_index
	
	if (!to_wp)
		return

	ti_index = ARR_ObjSearch(&ao_net_hiding_place[0], i_net_hiding_place_nb, to_wp)
	if (ti_index != -1)
	{
		i_net_hiding_place_nb--
		ao_net_hiding_place[ti_index] = ao_net_hiding_place[i_net_hiding_place_nb]
		ao_net_hiding_place[i_net_hiding_place_nb] = nobody
	}
}

procedure_local void PNJ_Raptor_Check_Hiding_Place(int ti_index)
{
	int					ti_i

	object			to_hiding_place_wp

	// A PAR POUR LE TREX, JE NE CHECK PAS LES CACHES
	if (raptor_type == C_ID_Galiminus)
		return

	// ON VA REGARDER TOUTES LES CACHES DE MON RESEAU
	for (ti_i = 0; ti_i < i_net_hiding_place_nb; ti_i++)
	{
		// Est-ce que la cache est encore valide ?
		to_hiding_place_wp = @"Interactive_Objects/ODE_TREX_Cache" ao_net_hiding_place[ti_i] Humain_Hide_Place_WP 
		if (to_hiding_place_wp && @to_hiding_place_wp OBJ_CapaTest(OBJ_Capa_0))
			continue
			
		// Est-ce que ce perso est dans la BV de cette cache ?
		if (! (@ao_net_hiding_place[ti_i] COL_BV_PivotCollide(ao_perceived_actor[ti_index])))
			continue

		// CAS SPECIAL, LE PERSO EST DANS UNE CACHE, ON LE VOIT...
		ai_perceived_status[ti_index] |= Ci_PERCEIVED_IN_HIDING_PLACE
		ai_perceived_hiding_place_index[ti_index] = ti_i
		ai_perceived_seen[ti_index] = vrai

		return
	}
}

procedure_local void PNJ_Raptor_Del_Perceived_Actor(int ti_index)
{
	i_perceived_actor_nb--

	// EST-CE QU'ON EFFACE LE MAIN OU LA CIBLE COURANTE ?
	if (ti_index == i_perceived_main_actor_index)
		i_perceived_main_actor_index = -1
		
	if (ti_index == i_perceived_best_actor_index)
		i_perceived_best_actor_index = -1
	
	// EST-CE QU'ON DEPLACE LE MAIN OU LA CIBLE COURANTE ?
	if (i_perceived_actor_nb == i_perceived_main_actor_index)
		i_perceived_main_actor_index = ti_index
		
	if (i_perceived_actor_nb == i_perceived_best_actor_index)
		i_perceived_best_actor_index = ti_index

	// ON ECRASE CET ACTEUR AVEC LE DERNIER
	ai_perceived_accessible[ti_index] = ai_perceived_accessible[i_perceived_actor_nb]
	ai_perceived_hiding_place_index[ti_index] = ai_perceived_hiding_place_index[i_perceived_actor_nb]
	ai_perceived_ID[ti_index] = ai_perceived_ID[i_perceived_actor_nb]
	ai_perceived_seen[ti_index] = ai_perceived_seen[i_perceived_actor_nb]
	ai_perceived_status[ti_index] = ai_perceived_status[i_perceived_actor_nb]
	ai_perceived_territory[ti_index] = ai_perceived_territory[i_perceived_actor_nb]
	
	af_perceived_dist[ti_index] = af_perceived_dist[i_perceived_actor_nb]
	af_perceived_interest[ti_index] = af_perceived_interest[i_perceived_actor_nb]
	af_perceived_life_ratio[ti_index] = af_perceived_life_ratio[i_perceived_actor_nb]
	
	ao_perceived_actor[ti_index] = ao_perceived_actor[i_perceived_actor_nb]
	ao_perceived_nearest_wp[ti_index] = ao_perceived_nearest_wp[i_perceived_actor_nb]
	
	av_perceived_position[ti_index] = av_perceived_position[i_perceived_actor_nb]

	// ON EFFACE LES DONNEES DU DERNIER 
	ai_perceived_accessible[i_perceived_actor_nb] = faux
	ai_perceived_hiding_place_index[i_perceived_actor_nb] = -1
	ai_perceived_ID[i_perceived_actor_nb] = -1
	ai_perceived_seen[i_perceived_actor_nb] = faux
	ai_perceived_status[i_perceived_actor_nb] = 0
	ai_perceived_territory[i_perceived_actor_nb] = -1
	
	af_perceived_dist[i_perceived_actor_nb] = -1.0
	af_perceived_interest[i_perceived_actor_nb] = -1.0
	af_perceived_life_ratio[i_perceived_actor_nb] = -1.0
	
	ao_perceived_actor[i_perceived_actor_nb] = nobody
	ao_perceived_nearest_wp[i_perceived_actor_nb] = nobody
	
	av_perceived_position[i_perceived_actor_nb] = Cv_NullVector
}

procedure_local void PNJ_Raptor_Check_Perceived_Actor()
{
	int		ti_i
	
	for (ti_i = 0; ti_i < i_perceived_actor_nb; ti_i++)
	{
		if (i_perceived_bit_field & (1 << ti_i))
			continue
			
		PNJ_Raptor_Del_Perceived_Actor(ti_i)
	}
}

procedure_local int PNJ_Raptor_Add_Perceived_Actor(object to_actor, int ti_status, messageid tmid_visibility_ref)
{
	int					ti_index
	int					ti_rank
	int					ti_world_ID

	float				tf_life_ratio

	object			to_nearest_wp
	object			to_serveur
	
	vector			tv_pos

	message		tmsg_filter

	messageid		tmid_lnk
	messageid 		tmid_visibility
	messageid		tmid_interet	

	tmid_visibility = tmid_visibility_ref

	// EST-CE QU'ON RAJOUTE CE PERSO A LA LISTE DE CEUX QU'ON VOIT ?
	ti_index = ARR_ObjSearch(&ao_perceived_actor[0], i_perceived_actor_nb, to_actor)
	if (ti_index == -1)
	{
		// ON RAJOUTE UN ACTEUR
		if (i_perceived_actor_nb == 20)
		{
			DBG_Error("Trop d'acteur dans cette map")
			return(-1)
		}	
	
		ti_index = i_perceived_actor_nb
		i_perceived_actor_nb ++
	}
		
	// SI ON N'A PAS ENCORE MIS LES INFOS A JOUR CETTE TRAME
	if ( ! (i_perceived_bit_field & (1 << ti_index)) )
	{
		ao_perceived_actor[ti_index] = to_actor

		ai_perceived_hiding_place_index[ti_index] = -1

		ai_perceived_seen[ti_index] = faux

		ai_perceived_status[ti_index] &= Ci_PERCEIVED_MEMORY_MASK

		ao_perceived_nearest_wp[ti_index] = nobody

		if (MSG_GlobalIsValid(tmid_visibility))
		{
			// EST-CE QUE C'EST UN CADAVRE DEJA TRAITE ?
			ai_perceived_ID[ti_index] = EVENT_VisionIDGet(tmid_visibility)
			tf_life_ratio = EVENT_VisionLifeStateGet(tmid_visibility) 
		
			af_perceived_life_ratio[ti_index] = tf_life_ratio

			if (ai_perceived_ID[ti_index] == C_ID_Joueur)
			{
				i_perceived_main_actor_index = ti_index
			}
			else if ( IsThis_ID_Humain(ai_perceived_ID[ti_index]) )
			{
				if ( ! tf_life_ratio && to_actor != o_grab_actor )
				{
					PNJ_Raptor_Del_Perceived_Actor(ti_index)
					return(-1)
				}
					
				if ( tf_life_ratio == Cf_Life_Agonisant && raptor_type != C_ID_Tyranosaure)
					ai_perceived_status[ti_index]	|= Ci_PERCEIVED_FAILING
			}
			else if (ai_perceived_ID[ti_index] == C_ID_Bidoche)
			{
				ai_perceived_status[ti_index] |= Ci_PERCEIVED_IS_DEAD
				if (@to_actor OBJ_CapaTest(CAPA_Bidoche_Oublie_Moi))
					ai_perceived_status[ti_index] &= ~(Ci_PERCEIVED_BODY_MEMORISED | Ci_PERCEIVED_BODY_UNREACHABLE)
			}
			else
			{
				if (tf_life_ratio > 0.0)
					ai_perceived_status[ti_index] &= ~(Ci_PERCEIVED_BODY_MEMORISED | Ci_PERCEIVED_BODY_UNREACHABLE)
//					PNJ_Raptor_Forget_Body(to_actor)
				else
					ai_perceived_status[ti_index]	|= Ci_PERCEIVED_IS_DEAD
			}

			if (ai_perceived_ID[ti_index] == C_ID_Joueur)
			{
				if (Jack_Is_The_Best_Target || @to_actor OBJ_HierarchyGet())
					af_perceived_interest[ti_index] = 200.0
				else
					af_perceived_interest[ti_index] = EVENT_VisionInteretGet(tmid_visibility)
			}
			else
			{
				af_perceived_interest[ti_index] = EVENT_VisionInteretGet(tmid_visibility)
			}

			if (to_actor == o_main_actor)
				av_perceived_position[ti_index] = @to_actor OBJ_PosGet()
			else
				av_perceived_position[ti_index] = EVENT_PositionGet(tmid_visibility)

			ai_perceived_territory[ti_index] = EVENT_VisionTerritoryGet(tmid_visibility)

			tv_pos = av_perceived_position[ti_index]
			ai_perceived_accessible[ti_index] = PNJ_Raptor_Is_Accessible(tv_pos, ai_perceived_territory[ti_index])
		}
		else
		{
			af_perceived_life_ratio[ti_index] = 1.0
		
			af_perceived_interest[ti_index] = 30.0
			ai_perceived_ID[ti_index] = -1

			av_perceived_position[ti_index] = @to_actor OBJ_PosGet()

			ai_perceived_territory[ti_index] = GST_EVENT_Territory_Get(av_perceived_position[ti_index])

			tv_pos = av_perceived_position[ti_index]
			ai_perceived_accessible[ti_index] = PNJ_Raptor_Is_Accessible(tv_pos, ai_perceived_territory[ti_index])
		}

		af_perceived_dist[ti_index] = MATH_VecNorm(av_perceived_position[ti_index] - OBJ_PosGet())

		switch(raptor_type)
		{
//			case C_ID_Galiminus :
//				if (! ai_perceived_accessible[ti_index] )
//					ai_perceived_status[ti_index] |= Ci_PERCEIVED_ALREADY_CHECKED
//				break
		
			case C_ID_Raptor :
				if (ai_perceived_ID[ti_index] == C_ID_Raptor)
				{
					// IL M'ATTAQUE ??? ==========================================================================
					ti_rank = -1
					MSG_SetNull(tmsg_filter)
					tmsg_filter.msg_sender = to_actor
					tmsg_filter.msg_gao1 = OBJ_Me()
					tmsg_filter.msg_int2 = C_EVENT_InteretStatusLock
					tmsg_filter.msg_int3 = raptor_type
					tmid_interet = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_rank, tmsg_filter)
					if (MSG_GlobalIsValid(tmid_interet))
						ai_perceived_status[ti_index] |= Ci_PERCEIVED_DANGEROUS
				}	
				else if (IsThis_ID_Humain(ai_perceived_ID[ti_index]))
				{
					// IL PORTE QUELQU'UN ??? ==========================================================================
					ti_rank = -1
					MSG_SetNull(tmsg_filter)
					tmsg_filter.msg_gao1 = to_actor
					tmid_lnk = MSG_GlobalSearchIntGao(Ci_LNK_EVENT_OFFSET + Ci_LNK_CARRY, &ti_rank, tmsg_filter)
					if (MSG_GlobalIsValid(tmid_lnk))
						ai_perceived_status[ti_index] |= Ci_PERCEIVED_CARRY
				}
		
			case C_ID_Tyranosaure :
			
				// CINE TARGET ??? =============================================================================
				if (i_CineStack && am_CineStack[1].msg_gao2 == to_actor)
				{
					switch(am_CineStack[1].msg_id)
					{
						case CINE_Fight :
						case CINE_Bite :
							ai_perceived_status[ti_index] |= Ci_PERCEIVED_CINE_TARGET
							ai_perceived_seen[ti_index] = vrai
							break
					}
				}

				if ( ! (ai_perceived_status[ti_index]	& Ci_PERCEIVED_IS_DEAD) )
				{
					// DEJA GRABE ??? ==========================================================================
					ti_rank = -1
					MSG_SetNull(tmsg_filter)
					tmsg_filter.msg_sender = to_actor
					tmid_lnk = MSG_GlobalSearchIntGao(Ci_LNK_EVENT_OFFSET + Ci_LNK_GRAB_RAPTOR, &ti_rank, tmsg_filter)
					if (MSG_GlobalIsValid(tmid_lnk))
					{
						to_serveur = MSG_GlobalGetGao(tmid_lnk, SERVEUR)
						if (to_serveur && to_serveur != OBJ_Me())
							ai_perceived_status[ti_index] |= Ci_PERCEIVED_ALREADY_GRABBED
					}
			
					// DEJA ATTAQUE ??? ==========================================================================
					ti_rank = -1
					MSG_SetNull(tmsg_filter)
					tmsg_filter.msg_gao1 = to_actor
					tmsg_filter.msg_int2 = C_EVENT_InteretStatusLock
					tmsg_filter.msg_int3 = raptor_type
					tmid_interet = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_rank, tmsg_filter)
					while (MSG_GlobalIsValid(tmid_interet))
					{
						if (EVENT_InteretTargetAlreadySeen(tmid_interet))
						{
							ai_perceived_status[ti_index] |= Ci_PERCEIVED_ATTACKED
							break
						}
						tmid_interet = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_rank, tmsg_filter)
					}
				}

//				// ALREADY CHECKED ??? ======================================================================
//				if (ai_perceived_accessible[ti_index])
//				{
//					ai_perceived_status[ti_index] &= ~ (Ci_PERCEIVED_ALREADY_CHECKED | Ci_PERCEIVED_ALREADY_ROARED)
//					ao_perceived_nearest_wp[ti_index] = nobody
//				}
//				else if (raptor_type != C_ID_Tyranosaure)
//				{
//					// ON MEMORISE UN WP LE PLUS PROCHE
//					if ( ! ao_perceived_nearest_wp[ti_index] )
//						ao_perceived_nearest_wp[ti_index] = PNJ_Raptor_Nearest_Wp_Get(av_perceived_position[ti_index], all, Ci_Capa_Exclusion)
//
//					// ON TESTE SI ON N'EST PAS ALLE UNE FOIS A CE WP
//					if ( ! (ai_perceived_status[ti_index] & Ci_PERCEIVED_ALREADY_CHECKED) && PNJ_Raptor_Is_Wp_Memorised(ao_perceived_nearest_wp[ti_index] ))
//					{
//						ai_perceived_status[ti_index] |= Ci_PERCEIVED_ALREADY_CHECKED
//						if (raptor_type != C_ID_Raptor)
//							ai_perceived_status[ti_index] |= Ci_PERCEIVED_ALREADY_ROARED
//					}
//				}	

				// ALREADY CHECKED ??? ======================================================================
				if ( ! ai_perceived_accessible[ti_index] && raptor_type != C_ID_Tyranosaure)
				{
					// ON MEMORISE UN WP LE PLUS PROCHE
					ao_perceived_nearest_wp[ti_index] = PNJ_Raptor_Nearest_Wp_Get(av_perceived_position[ti_index], all, Ci_Capa_Stalk, faux)
					if (PNJ_Raptor_Is_Wp_Memorised(ao_perceived_nearest_wp[ti_index] ))
						ai_perceived_status[ti_index] |= Ci_PERCEIVED_ALREADY_CHECKED
				}
				
				break
		}

		PNJ_Raptor_Check_Hiding_Place(ti_index)

		i_perceived_bit_field |= 1 << ti_index
	}

	ai_perceived_status[ti_index] |= ti_status

	return(ti_index)
}

procedure_local void PNJ_Raptor_OBBOX_Set(float tf_size_coef)
{
	object	to_bone

	if (tf_size_coef == f_obbox_size_coef)
		return

	switch(raptor_type)
	{
		case C_ID_Tyranosaure :
		
			f_obbox_size_coef = tf_size_coef
		
			to_bone = ANI_CanalObjectGet(Anim_Canal_Machoire)
			@to_bone BV_OBBoxMinSet(cvector(-0.5, -0.2, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.5, 0.4, 1.6))
			
			// TETE A BASSIN
			@ao_head_bones[0] BV_OBBoxMinSet(cvector(-0.5, -0.8, -0.3))
			@ao_head_bones[0] BV_OBBoxMaxSet(cvector(0.5, 0.6, 1.6))
			
			@ao_head_bones[1] BV_OBBoxMinSet(cvector(-0.4, -0.6, -0.1))
			@ao_head_bones[1] BV_OBBoxMaxSet(cvector(0.4, 0.6, 1.5))
			
			@ao_head_bones[2] BV_OBBoxMinSet(cvector(-0.6, -1.0, -0.5))
			@ao_head_bones[2] BV_OBBoxMaxSet(cvector(0.6, 0.6, 1.2))
			
			@ao_head_bones[3] BV_OBBoxMinSet(cvector(-0.8, -1.5, -0.4))
			@ao_head_bones[3] BV_OBBoxMaxSet(cvector(0.8, 1.0, 1.4))
			
			@ao_head_bones[4] BV_OBBoxMinSet(cvector(-0.8, -1.2, -0.3))
			@ao_head_bones[4] BV_OBBoxMaxSet(cvector(0.8, 1.0, 1.8))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue)
			@to_bone BV_OBBoxMinSet(cvector(-0.4, -0.6, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.4, 1.0, 0.8))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 1)
			@to_bone BV_OBBoxMinSet(cvector(-0.4, -0.6, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.4, 0.8, 2.0))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 2) 
			@to_bone BV_OBBoxMinSet(cvector(-0.4, -0.4, -0.3))
			@to_bone BV_OBBoxMaxSet(cvector(0.4, 0.6, 1.8))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 3)
			@to_bone BV_OBBoxMinSet(cvector(-0.4, -0.3, -0.3))
			@to_bone BV_OBBoxMaxSet(cvector(0.4, 0.5, 1.6))

			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 4)
			@to_bone BV_OBBoxMinSet(cvector(-0.4, -0.2, -0.3))
			@to_bone BV_OBBoxMaxSet(cvector(0.4, 0.4, 1.8))
			
			@ao_IK_bones[Ci_IK_pied_gauche][0] BV_OBBoxMinSet(cvector(-0.4, -0.6, 0.0))
			@ao_IK_bones[Ci_IK_pied_gauche][0] BV_OBBoxMaxSet(cvector(0.4, 0.6, 2.0))
			
			@ao_IK_bones[Ci_IK_pied_gauche][1] BV_OBBoxMinSet(cvector(-0.2, -0.4, -0.1))
			@ao_IK_bones[Ci_IK_pied_gauche][1] BV_OBBoxMaxSet(cvector(0.2, 0.4, 1.0))
			
			@ao_IK_bones[Ci_IK_pied_gauche][2] BV_OBBoxMinSet(cvector(-0.2, -0.2, -0.05))
			@ao_IK_bones[Ci_IK_pied_gauche][2] BV_OBBoxMaxSet(cvector(0.2, 0.4, 1.2))
			
			@ao_IK_bones[Ci_IK_pied_gauche][3] BV_OBBoxMinSet(cvector(-0.4, -0.2, -0.05))
			@ao_IK_bones[Ci_IK_pied_gauche][3] BV_OBBoxMaxSet(cvector(0.4, 0.2, 1.0))

			@ao_IK_bones[Ci_IK_pied_droit][0] BV_OBBoxMinSet(cvector(-0.4, -0.6, 0.0))
			@ao_IK_bones[Ci_IK_pied_droit][0] BV_OBBoxMaxSet(cvector(0.4, 0.6, 2.0))
			
			@ao_IK_bones[Ci_IK_pied_droit][1] BV_OBBoxMinSet(cvector(-0.2, -0.4, -0.1))
			@ao_IK_bones[Ci_IK_pied_droit][1] BV_OBBoxMaxSet(cvector(0.2, 0.4, 1.0))
			
			@ao_IK_bones[Ci_IK_pied_droit][2] BV_OBBoxMinSet(cvector(-0.2, -0.2, -0.05))
			@ao_IK_bones[Ci_IK_pied_droit][2] BV_OBBoxMaxSet(cvector(0.2, 0.4, 1.2))
			
			@ao_IK_bones[Ci_IK_pied_droit][3] BV_OBBoxMinSet(cvector(-0.4, -0.2, -0.05))
			@ao_IK_bones[Ci_IK_pied_droit][3] BV_OBBoxMaxSet(cvector(0.4, 0.2, 1.0))

			to_bone = ANI_CanalObjectGet(Anim_Canal_EpauleDroite)
			@to_bone BV_OBBoxMinSet(cvector(-0.1, -0.1, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.1, 0.1, 1.0))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_BrasDroit)
			@to_bone BV_OBBoxMinSet(cvector(-0.1, -0.1, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.1, 0.1, 0.4))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_AvantBrasDroit)
			@to_bone BV_OBBoxMinSet(cvector(-0.1, -0.1, -0.05))
			@to_bone BV_OBBoxMaxSet(cvector(0.1, 0.1, 0.5))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_MainDroite)
			@to_bone BV_OBBoxMinSet(cvector(-0.1, -0.1, -0.05))
			@to_bone BV_OBBoxMaxSet(cvector(0.1, 0.1, 0.3))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_EpauleGauche)
			@to_bone BV_OBBoxMinSet(cvector(-0.1, -0.1, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.1, 0.1, 1.0))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_BrasGauche)
			@to_bone BV_OBBoxMinSet(cvector(-0.1, -0.1, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.1, 0.1, 0.4))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_AvantBrasGauche)
			@to_bone BV_OBBoxMinSet(cvector(-0.1, -0.1, -0.05))
			@to_bone BV_OBBoxMaxSet(cvector(0.1, 0.1, 0.5))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_MainGauche)
			@to_bone BV_OBBoxMinSet(cvector(-0.1, -0.1, -0.05))
			@to_bone BV_OBBoxMaxSet(cvector(0.1, 0.1, 0.3))
			
			break

		case C_ID_Raptor :
//		case C_ID_Galiminus :
		
			f_obbox_size_coef = tf_size_coef
		
			to_bone = ANI_CanalObjectGet(Anim_Canal_Machoire)
			@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.1 * tf_size_coef, 0.8))
			
			// TETE A BASSIN
			@ao_head_bones[0] BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.3 * tf_size_coef, -0.1))
			@ao_head_bones[0] BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.2 * tf_size_coef, 0.8))
			
			@ao_head_bones[1] BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.3 * tf_size_coef, -0.1))
			@ao_head_bones[1] BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.2 * tf_size_coef, 0.5))
			
			@ao_head_bones[2] BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.3 * tf_size_coef, -0.1))
			@ao_head_bones[2] BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.2 * tf_size_coef, 0.5))
			
			@ao_head_bones[3] BV_OBBoxMinSet(cvector(-0.5 * tf_size_coef, -0.6 * tf_size_coef, -0.2))
			@ao_head_bones[3] BV_OBBoxMaxSet(cvector(0.5 * tf_size_coef, 0.3 * tf_size_coef, 0.9))
			
			to_bone = ANI_CanalObjectGet(4)
			@to_bone BV_OBBoxMinSet(cvector(-0.5 * tf_size_coef, -0.4 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.5 * tf_size_coef, 0.3 * tf_size_coef, 0.8))

			@ao_head_bones[4] BV_OBBoxMinSet(cvector(-0.55 * tf_size_coef, -0.3 * tf_size_coef, -0.3))
			@ao_head_bones[4] BV_OBBoxMaxSet(cvector(0.55 * tf_size_coef, 0.2 * tf_size_coef, 0.6))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue)
			@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.25 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.25 * tf_size_coef, 0.6))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 1)
			@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.2 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.2 * tf_size_coef, 1.3))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 2) 
			@to_bone BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 1.2))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 3)
			@to_bone BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 1.2))

			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 4)
			@to_bone BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 1.2))

			@ao_IK_bones[Ci_IK_pied_gauche][0] BV_OBBoxMinSet(cvector(-0.2 * tf_size_coef, -0.25 * tf_size_coef, 0.0))
			@ao_IK_bones[Ci_IK_pied_gauche][0] BV_OBBoxMaxSet(cvector(0.2 * tf_size_coef, 0.25 * tf_size_coef, 1.0))
			
			@ao_IK_bones[Ci_IK_pied_gauche][1] BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.2 * tf_size_coef, -0.1))
			@ao_IK_bones[Ci_IK_pied_gauche][1] BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.95))
			
			@ao_IK_bones[Ci_IK_pied_gauche][2] BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.05))
			@ao_IK_bones[Ci_IK_pied_gauche][2] BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.6))
			
			@ao_IK_bones[Ci_IK_pied_gauche][3] BV_OBBoxMinSet(cvector(-0.2 * tf_size_coef, -0.1 * tf_size_coef, -0.05))
			@ao_IK_bones[Ci_IK_pied_gauche][3] BV_OBBoxMaxSet(cvector(0.3 * tf_size_coef, 0.1 * tf_size_coef, 0.7))
			
			@ao_IK_bones[Ci_IK_pied_droit][0] BV_OBBoxMinSet(cvector(-0.2 * tf_size_coef, -0.25 * tf_size_coef, 0.0))
			@ao_IK_bones[Ci_IK_pied_droit][0] BV_OBBoxMaxSet(cvector(0.2 * tf_size_coef, 0.25 * tf_size_coef, 1.0))
			
			@ao_IK_bones[Ci_IK_pied_droit][1] BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.2 * tf_size_coef, -0.1))
			@ao_IK_bones[Ci_IK_pied_droit][1] BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.95))
			
			@ao_IK_bones[Ci_IK_pied_droit][2] BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.05))
			@ao_IK_bones[Ci_IK_pied_droit][2] BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.6))
			
			@ao_IK_bones[Ci_IK_pied_droit][3] BV_OBBoxMinSet(cvector(-0.3 * tf_size_coef, -0.1 * tf_size_coef, -0.05))
			@ao_IK_bones[Ci_IK_pied_droit][3] BV_OBBoxMaxSet(cvector(0.2 * tf_size_coef, 0.1 * tf_size_coef, 0.7))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_EpauleDroite)
			@to_bone BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.4))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_BrasDroit)
			@to_bone BV_OBBoxMinSet(cvector(-0.05 * tf_size_coef, -0.05 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.05 * tf_size_coef, 0.05 * tf_size_coef, 0.5))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_AvantBrasDroit)
			@to_bone BV_OBBoxMinSet(cvector(-0.05 * tf_size_coef, -0.05 * tf_size_coef, -0.05))
			@to_bone BV_OBBoxMaxSet(cvector(0.05 * tf_size_coef, 0.05 * tf_size_coef, 0.2))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_MainDroite)
			@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.05 * tf_size_coef, -0.05))
			@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.05 * tf_size_coef, 0.5))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_DoigtD1)
			if (to_bone)
				@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_PouceD1)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_EpauleGauche)
			@to_bone BV_OBBoxMinSet(cvector(-0.1 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.1 * tf_size_coef, 0.1 * tf_size_coef, 0.4))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_BrasGauche)
			@to_bone BV_OBBoxMinSet(cvector(-0.05 * tf_size_coef, -0.05 * tf_size_coef, -0.1))
			@to_bone BV_OBBoxMaxSet(cvector(0.05 * tf_size_coef, 0.05 * tf_size_coef, 0.5))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_AvantBrasGauche)
			@to_bone BV_OBBoxMinSet(cvector(-0.05 * tf_size_coef, -0.05 * tf_size_coef, -0.05))
			@to_bone BV_OBBoxMaxSet(cvector(0.05 * tf_size_coef, 0.05 * tf_size_coef, 0.2))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_MainGauche)
			@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.05 * tf_size_coef, -0.05))
			@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.05 * tf_size_coef, 0.5))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_DoigtG1)
			if (to_bone)
				@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_PouceG1)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			break

		
		case C_ID_Galiminus :
		
			f_obbox_size_coef = tf_size_coef
		
			to_bone = ANI_CanalObjectGet(Anim_Canal_Machoire)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			// TETE A BASSIN
			@ao_head_bones[0] BV_OBBoxMinSet(cvector(-0.5 * tf_size_coef, -0.5 * tf_size_coef, -1.5))
			@ao_head_bones[0] BV_OBBoxMaxSet(cvector(0.5 * tf_size_coef,  0.5 * tf_size_coef, 1.0))

			@ao_head_bones[1] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			@ao_head_bones[2] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			@ao_head_bones[3] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
//			@ao_head_bones[4] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)

			to_bone = ANI_CanalObjectGet(4)
//			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)			
			@to_bone BV_OBBoxMinSet(cvector(-0.75 * tf_size_coef, -0.5 * tf_size_coef, -0.5))
			@to_bone BV_OBBoxMaxSet(cvector(0.75 * tf_size_coef,  0.5 * tf_size_coef, 1.5))
			
			@ao_head_bones[4] BV_OBBoxMinSet(cvector(-0.75 * tf_size_coef, -2.0 * tf_size_coef, -3.0))
			@ao_head_bones[4] BV_OBBoxMaxSet(cvector(0.75 * tf_size_coef,  0.5 * tf_size_coef, 1.0))
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)			
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 1)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 2) 
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 3)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)

			to_bone = ANI_CanalObjectGet(Anim_Canal_Queue + 4)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			@ao_IK_bones[Ci_IK_pied_gauche][0] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			@ao_IK_bones[Ci_IK_pied_gauche][1] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			@ao_IK_bones[Ci_IK_pied_gauche][2] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			@ao_IK_bones[Ci_IK_pied_gauche][3] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			@ao_IK_bones[Ci_IK_pied_droit][0] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			@ao_IK_bones[Ci_IK_pied_droit][1] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			@ao_IK_bones[Ci_IK_pied_droit][2] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			@ao_IK_bones[Ci_IK_pied_droit][3] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_EpauleDroite)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_BrasDroit)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_AvantBrasDroit)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_MainDroite)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_DoigtD1)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_PouceD1)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_EpauleGauche)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_BrasGauche)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_AvantBrasGauche)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_MainGauche)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_DoigtG1)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			to_bone = ANI_CanalObjectGet(Anim_Canal_PouceG1)
			@to_bone OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
			
			break
	}
}

//procedure_local void PNJ_Raptor_Bondary_Fill(vector tv_pos)
//{
//	if ( ! PNJ_Raptor_Blocked(tv_pos, 0b1) && i_flood_fill_call < 255)
//	{
//		i_flood_fill_call	++
//	
//		GRID_TagBox(tv_pos, cvector(0.0, 1.0, 0.0), -cvector(0.25, 0.25, 0.0), cvector(0.25, 0.25, 0.0), tag_grid_occupe)		
//		DBG_RenderVector(tv_pos, cvector(0.0, 0.0, 1000.0), color_blanc)
//	
//		PNJ_Raptor_Bondary_Fill(tv_pos + cvector(-1.0, 0.0, 0.0))
//		PNJ_Raptor_Bondary_Fill(tv_pos + cvector(1.0, 0.0, 0.0))
//		PNJ_Raptor_Bondary_Fill(tv_pos + cvector(0.0, 1.0, 0.0))
//		PNJ_Raptor_Bondary_Fill(tv_pos + cvector(0.0, -1.0, 0.0))
//	}
//}
//

procedure_local void PNJ_Raptor_Init_Speed_Array()
{
	int			ti_i	
	int			ti_action
	int			ti_action_nb
	int			ti_current_action

	float		tf_speed

	vector	tv_pos
	vector	tv_sight
	vector	tv_banking

	switch(raptor_type)
	{
		case C_ID_Tyranosaure :

			i_normal_action_first_index = 0
			i_normal_action_last_index = 3
			ai_action_index[0] = Action_Normal_Marche
			ai_action_index[1] = Action_Normal_Marche_Rapide
			ai_action_index[2] = Action_Normal_Trot
			ai_action_index[3] = Action_Normal_Course

			i_renifle_action_first_index = 4
			i_renifle_action_last_index = 6
			ai_action_index[4] = Action_Renifle_Marche
			ai_action_index[5] = Action_Renifle_Marche_Rapide
			ai_action_index[6] = Action_Renifle_Trot

			ti_action_nb = i_renifle_action_last_index + 1

			break
			
		default:
			i_normal_action_first_index = 0

			i_normal_action_last_index = i_normal_action_first_index
			ai_action_index[i_normal_action_last_index] = Action_Normal_Marche
			i_normal_action_last_index++
			ai_action_index[i_normal_action_last_index] = Action_Normal_Marche_Rapide
//			i_normal_action_last_index++
//			ai_action_index[i_normal_action_last_index] = Action_Normal_Trot
			i_normal_action_last_index++
			ai_action_index[i_normal_action_last_index] = Action_Normal_Course

			i_blesse_action_first_index = i_normal_action_last_index + 1
			i_blesse_action_last_index = i_blesse_action_first_index
			ai_action_index[i_blesse_action_last_index] = Action_Blesse_Marche
			i_blesse_action_last_index++
			ai_action_index[i_blesse_action_last_index] = Action_Blesse_Marche_Rapide

			i_renifle_action_first_index = i_blesse_action_last_index + 1
			i_renifle_action_last_index = i_renifle_action_first_index
			ai_action_index[i_renifle_action_last_index] = Action_Renifle_Marche
			
			ti_action_nb = i_renifle_action_last_index + 1
	}
	
	tv_pos = OBJ_PosGet()
	tv_sight = OBJ_SightGet()
	tv_banking = OBJ_BankingGet()
	ti_current_action = ACT_ActionGet()

	for (ti_i = 0; ti_i < ti_action_nb; ti_i++)
	{
		ti_action = ai_action_index[ti_i]
		
		PNJ_Raptor_ActionSet(ti_action + (Ci_ActionSet_Force_No_Blend | Ci_ActionSet_Force_SameAction))
		ANI_RatioSet(0, 1.0)
		PNJ_Raptor_ActionSet(ti_action + (Ci_ActionSet_Force_No_Blend | Ci_ActionSet_Force_SameAction))	
	
		tf_speed = MATH_VecNorm(OBJ_PosGet() - tv_pos)
//		tf_speed /= ACT_LIB_ActionDurationGet(ti_action)
		tf_speed /= ACT_DurationGet(ti_action, 0)
		tf_speed = MATH_FloatRound(tf_speed, 0.01)

		af_action_speed[ti_i] = tf_speed

		OBJ_PosSet(tv_pos)
		OBJ_SightGeneralSet(tv_sight, tv_banking)
	}
	
	PNJ_Raptor_ActionSet(ti_current_action + (Ci_ActionSet_Force_No_Blend | Ci_ActionSet_Force_SameAction))

	return
}

procedure_local float PNJ_Raptor_Choose_Best_Action(float tf_speed)
{
	int			ti_i
	int			ti_start_action_index
	int			ti_last_action_index
	int			ti_action
	int			ti_freq	

	float		tf_coef	
	float		tf_action_A_mult_coef
	float		tf_action_B_mult_coef

	switch(raptor_type)
	{
		case C_ID_Tyranosaure :
			if (i_flag_head_search) // && tf_speed < af_action_speed[i_renifle_action_last_index] * 1.25)
			{
				ti_start_action_index = i_renifle_action_first_index
				ti_last_action_index = i_renifle_action_last_index
			}
			else
			{
				ti_start_action_index = i_normal_action_first_index
				ti_last_action_index = i_normal_action_last_index
			}
			break
			
		default:
		
			if (i_flag_blesse)
			{
				ti_start_action_index = i_blesse_action_first_index
				ti_last_action_index = i_blesse_action_last_index
			}
			else if (i_etat_courant == ETAT_SEARCH && i_flag_head_search)
			{
				ti_start_action_index = i_renifle_action_first_index
				ti_last_action_index = i_renifle_action_last_index
			}
			else
			{
				ti_start_action_index = i_normal_action_first_index
				ti_last_action_index = i_normal_action_last_index
			}
	}

	if (ti_start_action_index == ti_last_action_index)
	{
		ti_action = ti_start_action_index
	}
	else
	{
		// Plusieurs anim de déplacement
		for (ti_i = ti_start_action_index; ti_i < ti_last_action_index; ti_i++)
		{
			if (tf_speed < af_action_speed[ti_i])
			{
				ti_action = ti_i
				break
			}
			else if (tf_speed > af_action_speed[ti_i + 1])
			{
				ti_action = ti_i + 1
				continue
			}
			
//			tf_coef = tf_speed
//			tf_coef -= af_action_speed[ti_i]
//			tf_coef /= af_action_speed[ti_i + 1] - af_action_speed[ti_i]
//		
//			if (tf_coef > 0.5)
//				ti_action = ti_i + 1
//			else
//				ti_action = ti_i	
				
			tf_action_A_mult_coef = tf_speed / af_action_speed[ti_i]
			tf_action_B_mult_coef = af_action_speed[ti_i + 1] / tf_speed

			if (tf_action_A_mult_coef < tf_action_B_mult_coef)
				ti_action = ti_i
			else
				ti_action = ti_i + 1	
		
			break
		}
	}

	PNJ_Raptor_ActionSet(ai_action_index[ti_action])

	tf_coef = tf_speed
	tf_coef /= af_action_speed[ti_action]
	
	return(tf_coef)
}

procedure_local int PNJ_Raptor_Nearest_Actor_Index()
{
	int		ti_i
	int		ti_index
	
	float	tf_best_dist
	
	ti_index = -1
	tf_best_dist = Cf_Infinit
	
	for (ti_i= 0; ti_i < i_perceived_actor_nb; ti_i++)
	{
		if (ai_perceived_status[ti_i] & Ci_PERCEIVED_IS_DEAD)
			continue
		
		if (! ai_perceived_accessible[ti_i])
			continue
		
		if (! ai_perceived_seen[ti_i])
			continue
			
		if (af_perceived_dist[ti_i] < tf_best_dist)
		{
			ti_index = ti_i
			tf_best_dist = af_perceived_dist[ti_i]
		}
	}
	
	return(ti_index)
}

procedure_local void PNJ_Raptor_Add_Visual_Paf(messageid tmid_paf_event)
{
	int				ti_flag_ok
	int				ti_i
	int				ti_bone_canal

	float			tf_puissance

	vector		tv_bras_de_levier

	object		to_bone

	// DEPLACEMENT BASSIN EN FONCTION DU PAF

	switch(i_etat_courant)
	{
		case ETAT_PAF_FLY :
		case ETAT_PAF_FALL :
		case ETAT_A_TERRE :
		case ETAT_BURN :
		case ETAT_MORT :
		case ETAT_FADE :
			if (TIME_Elapsed(f_visual_paf_time, 0.5))
			{
				f_visual_paf_time = TIME_Get()
				v_visual_paf_dir = MATH_VecBlendRotate(v_paf_dir, Cv_VerticalVector, 0.5) * 2.0
			}
			break

		default:
			if ( ! i_flag_saut && TIME_Elapsed(f_visual_paf_time, 0.5))
			{
				f_visual_paf_time = TIME_Get()
				v_visual_paf_dir = v_paf_dir
			}
	}

	// ROTATION BASSIN EN FONCTION DU PAF

	ti_flag_ok = vrai

	switch(i_etat_courant)
	{
		case ETAT_LANCE :
		case ETAT_PAF_FLY :
		case ETAT_PAF_FALL :
			break
	
		default:
			if (i_flag_paf_fall || i_flag_paf_fly)
				ti_flag_ok = faux
	}

	if (!ti_flag_ok)
		return

	if ( i_paf_type & (C_PAF_KK_Repousse | C_PAF_KK_Weapon | C_PAF_KK_Javelin) && TIME_Elapsed(f_quat_last_time, 0.15) )
	{
		switch(raptor_type)
		{
			case C_ID_Tyranosaure :
				if (TIME_Elapsed(f_quat_last_time, 0.5))
					af_quat_coef[i_quat_index] = 0.2
				else
					af_quat_coef[i_quat_index] = 0.1
				break
				
			default:
				if (TIME_Elapsed(f_quat_last_time, 0.5))
					af_quat_coef[i_quat_index] = 0.3
				else
					af_quat_coef[i_quat_index] = 0.2
		}

		f_quat_last_time = TIME_Get()
		af_quat_time[i_quat_index] = f_quat_last_time

		av_quat_start[i_quat_index] = EVENT_PafPositionGet(tmid_paf_event)
		av_quat_start[i_quat_index] -= @ao_head_bones[i_head_bone_nb] OBJ_PosGet()
		MATH_VecSetNormalize(av_quat_start[i_quat_index])

		av_quat_end[i_quat_index] = MATH_VecCrossProduct(v_paf_dir, av_quat_start[i_quat_index])
		av_quat_end[i_quat_index] = MATH_VecCrossProduct(av_quat_start[i_quat_index], av_quat_end[i_quat_index])

		switch(i_etat_courant)
		{
			case ETAT_PAF_FALL :
			case ETAT_PAF_FLY :
			case ETAT_A_TERRE :
			case ETAT_BURN :
			case ETAT_MORT :
			case ETAT_FADE :
				MATH_VecSetHorzNormalize(av_quat_end[i_quat_index])
				break

			default:
				MATH_VecSetNormalize(av_quat_end[i_quat_index])
		}

		i_quat_index = MATH_Modulo(i_quat_index + 1, 10)
	}
}

procedure_local void PNJ_Raptor_Hit_Hiding_Place()
{
	int			ti_i
	int			ti_k

	float		tf_shake_cam_coef

	object	to_hiding_place_nearest_wp
	object	to_hiding_place
	object	to_ODE_structure
	object	to_gao

	to_hiding_place_nearest_wp = ao_net_hiding_place[i_hiding_place_index]
	to_hiding_place = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp Humain_Hide_Place_WP

	for (ti_i = 0; ti_i < 10; ti_i++)
	{
		to_ODE_structure = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp ODE_structure[ti_i]
		if (!to_ODE_structure)
			return

		if (@to_ODE_structure OBJ_CapaTest(Obj_Capa_Switch))
			continue

		@to_ODE_structure OBJ_CapaSet(Obj_Capa_Switch, none)

		// EST-CE QU'ON CRI APRES ?
		i_flag_roar = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp ROAR_After_Hit[ti_i]

		// ON ACTIVE DES GAOS
		for (ti_k = 0; ti_k < 10; ti_k++)
		{
			to_gao = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp GAO_To_Activate[ti_i][ti_k]
			if (to_gao)
				@to_gao OBJ_FlagInactiveSet(faux)
			else
				break
		}

		// ON DESACTIVE UN GAO
		to_gao = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp GAO_To_Desactivate[ti_i]
		if (to_gao)
			@to_gao OBJ_FlagInactiveSet(vrai)

		if (f_me_to_main_dist < 200.0 && raptor_type == C_ID_Tyranosaure)
		{
			tf_shake_cam_coef = MATH_FloatMax(f_me_to_main_dist - 10.0, 0.0)
			tf_shake_cam_coef /= 190.0
			tf_shake_cam_coef = 1.0 - tf_shake_cam_coef

			if (tf_shake_cam_coef > 0.5)
			{
				tf_shake_cam_coef *= 0.025
	
//				f_sfx_shake_amplitude = 0.025
//				f_sfx_shake_freq = 50
//	  
//				f_sfx_shake_bank_amplitude = 0.0
//				f_sfx_shake_bank_freq = 0
//	  
//				f_sfx_shake_speed = 0.1
//				f_sfx_shake_attenuation = 0.95
				
			 	LIBGFX_ShakeCam(tf_shake_cam_coef, 50.0, 0.0, 0.0, 0.1, 0.95)
			 }
		}

		break
	}
	
	to_ODE_structure = @"Interactive_Objects/ODE_TREX_Cache" to_hiding_place_nearest_wp ODE_structure[ti_i + 1]
	if (to_ODE_structure == nobody)
		@to_hiding_place OBJ_CapaSet(OBJ_Capa_0, none)
}

// MIX ANIM DE CRI ===================================================
procedure_local void PNJ_Raptor_Shout_Mix()
{
	int		ti_flag_ok	

	if (!f_delay_before_next_shout_mix)
	{
		ti_flag_ok = faux
		switch(ACT_PartialActionGet())
		{
			case Action_Paf_Petit_Sol_G :
			case Action_Paf_Petit_Sol_D :
			case Action_Paf_Petit_Sol_Dos :
			case Action_Paf_Petit_Sol_Face :
			case Action_Cri_Deplacement :
				if (ACT_PartialActionFinished())
					ti_flag_ok = vrai
				break
		
			default:
				ti_flag_ok = vrai
		}
	
		if (ti_flag_ok)
		{
			f_delay_before_next_shout_mix = MATH_RandFloat(2.0, 6.0)	
		
			ACT_PartialActionOnOff(vrai)	
			macro_action_new_mix
			macro_action_mix_ventre
	
			ACT_PartialMaskSet(i_bone_nb, &ai_bones[0])
			ACT_PartialBlendSet(6, 6)
			ACT_PartialActionSet(Action_Cri_Deplacement)
		}
	}
}

procedure_local void PNJ_Raptor_Roar_Mix()
{
	int		ti_flag_ok	

	ti_flag_ok = faux
	switch(ACT_PartialActionGet())
	{
		case Action_Paf_Petit_Sol_G :
		case Action_Paf_Petit_Sol_D :
		case Action_Paf_Petit_Sol_Dos :
		case Action_Paf_Petit_Sol_Face :
		case Action_Cri_Deplacement :
			if (ACT_PartialActionFinished())
				ti_flag_ok = vrai
			break
	
		default:
			ti_flag_ok = vrai
	}

	if (ti_flag_ok)
	{
		f_delay_before_next_shout_mix = MATH_RandFloat(2.0, 6.0)	
	
		ACT_PartialActionOnOff(vrai)	
		macro_action_new_mix
		macro_action_mix_ventre

		ACT_PartialMaskSet(i_bone_nb, &ai_bones[0])
		ACT_PartialBlendSet(6, 6)
		ACT_PartialActionSet(Action_Cri_Deplacement)
	}
}

procedure_local void PNJ_Raptor_Reset_IK_Legs()
{
	int			ti_i	

	// IK LEG
//	v_grav_last_speed = Cv_NullVector	
//
//	v_grav_last_pos = OBJ_PosGet()
//	v_grav_last_pos.z -= Cf_pendule_length
	
	f_bassin_rotation_angle = 0.0
	f_bassin_Z_offset = 0.0

	v_IK_bassin_pos = @ao_head_bones[i_head_bone_nb] OBJ_PosGet()

	for (ti_i = 0; ti_i < 2; ti_i++)
	{
		i_flag_leg_IK[ti_i] = faux

		f_IK_Z_offset[ti_i] = 0.0
		f_IK_coef[ti_i] = 0.0
		f_IK_tenseur[ti_i] = 0.5

		f_IK_bassin_look_rot_coef = 0.0

		v_IK_ref_ground_pos = OBJ_PosGet()

		v_IK_dest_pos[ti_i] = @ao_IK_bones[ti_i][3] OBJ_PosGet()
		v_IK_local_offset[ti_i] = MATH_VecGlobalToLocal(v_IK_dest_pos[ti_i] - OBJ_PosGet())
	}
}

procedure_local void  PNJ_Raptor_Reset_IK_Neck()
{
	// PILOTAGE ET IK TETE
	i_flag_look = faux
	i_flag_look_best_interet = faux

	f_look_blend_coef = 0.0
	f_look_angle_blend_speed = 0.0
	f_look_head_coef = 0.0

	v_look_axis = OBJ_SightGet() * f_look_axis_length
}

procedure_local void PNJ_Raptor_Reset_IK()
{
	PNJ_Raptor_Reset_IK_Legs()
	PNJ_Raptor_Reset_IK_Neck()
}

procedure_local float PNJ_Raptor_Get_Move_Coef(int ti_leg)
{
	int		ti_action
	
	float		tf_coef
	
	if (i_flag_soft_collision)
		return(-1.0)

	switch(raptor_type)
	{
		case C_ID_Tyranosaure :

			ti_action = ACT_ActionGet()
			switch(ti_action)
			{
//				case Action_Fight_Mord_Haut :
//					if (ACT_ActionItemGet())
//						return(-1.0)
//					else if (ti_leg == Ci_IK_pied_gauche)
//						return(ACT_LIB_Get_Move_Coef(0.0, 0.25))
//					else
//						return(ACT_LIB_Get_Move_Coef(0.5, 1.0))
//					break	
			
				case Action_Recul :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.7, 0.25))
					else
						return(ACT_LIB_Get_Move_Coef(0.2, 0.65))
				break
			
				case Action_Normal_Marche :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.7, 0.2))
					else
						return(ACT_LIB_Get_Move_Coef(0.2, 0.7))
					break
			
				case Action_Normal_Marche_Rapide :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.8, 0.35))
					else
						return(ACT_LIB_Get_Move_Coef(0.3, 0.85))
					break

				case Action_Normal_Trot :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.55, 0.25))
					else
						return(ACT_LIB_Get_Move_Coef(0.05, 0.8))
					break

				case Action_Normal_Course :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.55, 0.35))
					else
						return(ACT_LIB_Get_Move_Coef(0.05, 0.85))
					break

				case Action_Renifle_Marche :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.8, 0.15))
					else
						return(ACT_LIB_Get_Move_Coef(0.3, 0.7))
					break

				case Action_Renifle_Marche_Rapide :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.75, 0.35))
					else
						return(ACT_LIB_Get_Move_Coef(0.25, 0.85))
					break
					
				case Action_Renifle_Trot :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.7, 0.35))
					else
						return(ACT_LIB_Get_Move_Coef(0.25, 0.8))
					break
			}	
			
			break

		case C_ID_Raptor :

			ti_action = ACT_ActionGet()
			switch(ti_action)
			{
				case Action_Fight_Secoue :
					// Cauchemar	
					tf_coef = ANI_RatioGet(0)

					if (ti_leg == Ci_IK_pied_gauche)
					{
						if (tf_coef > 0.2 && tf_coef < 0.4)
						{
							tf_coef -= 0.2
							tf_coef /= 0.2
						}
						else if (tf_coef > 0.7 && tf_coef < 0.9)
						{
							tf_coef -= 0.7
							tf_coef /= 0.2
						}
						else
						{
							tf_coef = 1.0
						}
					}
					else
					{
						if (tf_coef > 0.2 && tf_coef < 0.5)
						{
							tf_coef -= 0.2
							tf_coef /= 0.2
						}
						else if (tf_coef > 0.5 && tf_coef < 0.7)
						{
							tf_coef -= 0.5
							tf_coef /= 0.2
						}
						else
						{
							tf_coef = 1.0
						}
					}
						
					return(tf_coef)
					break
			
				case Action_Normal_Marche :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.7, 0.2))
					else
						return(ACT_LIB_Get_Move_Coef(0.2, 0.7))
					break

				case Action_Normal_Marche_Rapide :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.65, 0.35))
					else
						return(ACT_LIB_Get_Move_Coef(0.1, 0.9))
					break
		
				case Action_Normal_Course :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.45, 0.25))
					else
						return(ACT_LIB_Get_Move_Coef(0.0, 0.8))
					break

				case Action_Stop :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.0, 0.8))
					else
						return(ACT_LIB_Get_Move_Coef(0.8, 1.0))
					break

//				case Action_Stop_Rapide :
//					if (ti_leg == Ci_IK_pied_gauche)
//						return(ACT_LIB_Get_Move_Coef(0.5, 1.0))
//					else
//						return(ACT_LIB_Get_Move_Coef(0.0, 0.5))
//					break


				case Action_Blesse_Marche :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.35, 0.8))
					else
						return(ACT_LIB_Get_Move_Coef(0.8, 0.5))
					break

				case Action_Blesse_Marche_Rapide :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.25, 0.75))
					else
						return(ACT_LIB_Get_Move_Coef(0.75, 0.5))
					break

				case Action_Renifle_Marche :
					if (ti_leg == Ci_IK_pied_gauche)
						return(ACT_LIB_Get_Move_Coef(0.5, 1.0))
					else
						return(ACT_LIB_Get_Move_Coef(0.95, 0.5))
					break

			}	

			break
	}

	return(-1.0)
}

procedure_local void PNJ_Raptor_Init_Network()
{
	int			ti_i
	int			ti_last_territory_ID
	int			ti_color
	int			ti_rank
	int			ti_index
	int			ti_warning
	int			sect0
	int			sect1
	int			sect2
	int			sect3

	float		taf_ponderation[100]

	vector	tv_pos
	vector	tv_temp

	ti_warning = faux

	for (ti_i = 0; ti_i < i_net_wp_nb; ti_i++)
	{
#ifndef _FINAL_
		@ao_net_wp[ti_i] SCT_GetOf(&sect0, &sect1, &sect2, &sect3)
		if (sect0)
		{
			DBG_TraceObject(ao_net_wp[ti_i])
			DBG_TraceString(" ne doit pas être sectorisé")
			DBG_TraceEOL()
			DBG_Warning("WP sectorisé => LOG")
		}
		if (sect1)
		{
			DBG_TraceObject(ao_net_wp[ti_i])
			DBG_TraceString(" ne doit pas être sectorisé")
			DBG_TraceEOL()
			DBG_Warning("WP sectorisé => LOG")
		}
		if (sect2)
		{
			DBG_TraceObject(ao_net_wp[ti_i])
			DBG_TraceString(" ne doit pas être sectorisé")
			DBG_TraceEOL()
			DBG_Warning("WP sectorisé => LOG")
		}
		if (sect3)
		{
			DBG_TraceObject(ao_net_wp[ti_i])
			DBG_TraceString(" ne doit pas être sectorisé")
			DBG_TraceEOL()
			DBG_Warning("WP sectorisé => LOG")
		}
#endif

		@ao_net_wp[ti_i] OBJ_FlagsIdentitySet(OBJ_C_IdentityFlag_DesignStruct, none)

		if (! (@ao_net_wp[ti_i] OBJ_CapaTest(Ci_Capa_LD_Territory) ) )
			ao_net_wp[ti_i].des_int2 = GST_EVENT_Territory_Get(@ao_net_wp[ti_i] OBJ_PosGet())	

		if (@ao_net_wp[ti_i] OBJ_CapaTest(Ci_Capa_Cache))
			PNJ_Raptor_Update_Attack_Wp_Pos(ao_net_wp[ti_i])

		if (ao_net_wp[ti_i].des_int2 >= 32)
			DBG_Warning("Pas d'ID de territoire au dela de 31 !!!")
	
//		// Un WP Alien est automatiquement un WP out opf grid et un WP stalk !!!
//		if (@ao_net_wp[ti_i] OBJ_CapaTest(Ci_Capa_Alien))
//		{
//			if ( ! @ao_net_wp[ti_i] OBJ_CapaTest(Ci_Capa_Out_Of_Grid) )
//			{
//				ti_warning = vrai
//			
//				DBG_TraceObject(ao_net_wp[ti_i])
//				DBG_TraceString(" doit avoir la capa Out Of Grid à vrai car il a la capa Alien")
//				DBG_TraceEOL()
//			}
//			
//			if ( ! @ao_net_wp[ti_i] OBJ_CapaTest(Ci_Capa_Stalk) )
//			{
//				ti_warning	 = vrai
//			
//				DBG_TraceObject(ao_net_wp[ti_i])
//				DBG_TraceString(" doit avoir la capa Stalk à vrai car il a la capa Alien")
//				DBG_TraceEOL()
//			}
//	
//			@ao_net_wp[ti_i] OBJ_CapaSet(Ci_Capa_Out_Of_Grid | Ci_Capa_Stalk, none)
//		}
//
//		if ( @ao_net_wp[ti_i] OBJ_CapaTest(Ci_Capa_Stalk) )
//		{
//			if ( ! @ao_net_wp[ti_i] OBJ_CapaTest(Ci_Capa_Out_Of_Grid) )
//			{
//				ti_warning = vrai
//			
//				DBG_TraceObject(ao_net_wp[ti_i])
//				DBG_TraceString(" doit avoir la capa Out Of Grid à vrai car il a la capa Stalk")
//				DBG_TraceEOL()
//			}
//
//			@ao_net_wp[ti_i] OBJ_CapaSet(Ci_Capa_Out_Of_Grid, none)
//		}

		taf_ponderation[ti_i] = ao_net_wp[ti_i].des_int2
		if (taf_ponderation[ti_i] == -1)
		{
			taf_ponderation[ti_i] = Cf_Infinit
		}
		else
		{
			taf_ponderation[ti_i] *= 10.0
			
			if (@ao_net_wp[ti_i] OBJ_CapaTest(Ci_Capa_Territory))
				taf_ponderation[ti_i] += 0.0
			else if (@ao_net_wp[ti_i] OBJ_CapaTest(Ci_Capa_Use_Occluder))
				taf_ponderation[ti_i] += 1.0
			else if (@ ao_net_wp[ti_i] OBJ_CapaGet() & (Ci_Capa_Out_Of_Grid | Ci_Capa_Alien))
				taf_ponderation[ti_i] += 3.0
			else
				taf_ponderation[ti_i] += 2.0
		}
	
//		if (COL_RayObject_Dist(@ao_net_wp[ti_i] OBJ_PosGet() + Cv_VerticalVector, - Cv_VerticalVector, 2.0, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
//			@ao_net_wp[ti_i] OBJ_PosSet(COL_RayObject_PosGet() + cvector(0.0, 0.0, 0.1))
	}

	if (ti_warning)
		DBG_Warning("Regardez les lignes ci-dessus")

	ARR_LIB_Gao_QuickSort_Order(&ao_net_wp[0], &taf_ponderation[0], i_net_wp_nb)
	
	ti_last_territory_ID = -1
	ti_color = 0
	i_net_territory_ID_nb = 0

	for (ti_i = 0; ti_i < 32; ti_i++)
		ai_net_territory_ID_index[ti_i] = -1

	for (ti_i = 0; ti_i < i_net_wp_nb; ti_i++)
	{
		// Houla, pas de territoire pour ce wp ????
		ao_net_wp[ti_i].des_int3 = ti_i
	
		if (ao_net_wp[ti_i].des_int2 == -1)
			break	

		if (ao_net_wp[ti_i].des_int2 != ti_last_territory_ID)
		{
			ti_last_territory_ID = ao_net_wp[ti_i].des_int2

			ti_color = MATH_RandFloat(0x202020, 0xFFFFFF)

			ai_net_territory_ID_index[ti_last_territory_ID] = i_net_territory_ID_nb
			ai_net_territory_ID[i_net_territory_ID_nb] = ti_last_territory_ID
			ai_net_territory_first_wp_index[i_net_territory_ID_nb] = ti_i
			ai_net_territory_wp_nb[i_net_territory_ID_nb] = 1
			i_net_territory_ID_nb++
		}
		else
		{
			ai_net_territory_wp_nb[i_net_territory_ID_nb - 1] ++
		}
	}

	i_net_invalid_wp_nb = i_net_wp_nb - ti_i

#ifndef _FINAL_
	if (DBG_Display_Territory)
	{
		if (ti_i < i_net_wp_nb)
		{
			for (ti_i = ti_i; ti_i < i_net_wp_nb; ti_i++)
				DBG_RenderVector(@ao_net_wp[ti_i] OBJ_PosGet(), Cv_VerticalVector * 100.0, 0xFF)

			// IL Y A DES WPS QUI NE SONT SUR AUCUN TERRITOIRE !!!	
			DBG_BreakPoint()
		}
	
		ti_color = 0xFFFFFF
	
		for (ti_rank = 0; ti_rank < i_net_territory_ID_nb; ti_rank++)
		{
			ti_color = MATH_FloatRound(MATH_RandFloat(0x404040, 0xFFFF80), 0xFF)
			
			for (ti_i = 0; ti_i < ai_net_territory_wp_nb[ti_rank]; ti_i++)
			{
				ti_index = ai_net_territory_first_wp_index[ti_rank] + ti_i
				if (ti_i)
					DBG_RenderVector(@ao_net_wp[ti_index] OBJ_PosGet(), Cv_VerticalVector * 25.0, ti_color)
				else
					DBG_RenderVector(@ao_net_wp[ti_index] OBJ_PosGet(), Cv_VerticalVector * 50.0, ti_color)
			}
				
			DBG_BreakPoint()
		}
	}
#endif
	return
}
     
procedure_local int PNJ_Raptor_Territory_Find_Way(object to_start_wp, object to_dest_wp, int ti_flag_can_jump, int ti_color)
{
	int			ti_i
	int			ti_link_nb	
	int			ti_flag_result

	object	to_next_wp

	ti_flag_result = faux

	@to_start_wp OBJ_CapaSet(Ci_Capa_Skip_This_Wp, none)

	ti_link_nb = WAY_GetNumLinks(n_net, to_start_wp)
	for (ti_i = 0; ti_i < ti_link_nb; ti_i++)
	{
		to_next_wp = WAY_NetNextWP(n_net, to_start_wp, 6, ti_i)

		if (@to_next_wp OBJ_CapaTest(Ci_Capa_Skip_This_Wp))
			continue
		
		if (!ti_flag_can_jump && (WAY_LinkCapaGet(n_net, to_start_wp, to_next_wp) & Ci_Capa_Link_Jump) )
			continue

		if (to_next_wp.des_int2 == to_dest_wp.des_int2)
		{
//#ifndef _FINAL_
//			if (DBG_Display_Territory)
//				DBG_RenderVector(@to_start_wp OBJ_PosGet(), @to_next_wp OBJ_PosGet() - @to_start_wp OBJ_PosGet(), color_vert)
//#endif
			ti_flag_result = vrai
			break
		}

		if (to_next_wp.des_int2 != to_start_wp.des_int2)
			continue

		ti_flag_result = PNJ_Raptor_Territory_Find_Way(to_next_wp, to_dest_wp, ti_flag_can_jump, ti_color)
		if (ti_flag_result)
		{
//#ifndef _FINAL_
//			if (DBG_Display_Territory)
//				DBG_RenderVector(@to_start_wp OBJ_PosGet(), @to_next_wp OBJ_PosGet() - @to_start_wp OBJ_PosGet(), color_vert)
//#endif
			break
		}
	}

	@to_start_wp OBJ_CapaSet(none, Ci_Capa_Skip_This_Wp)
	
	return(ti_flag_result)
}

procedure_local void PNJ_Raptor_Compute_Territory_Net()
{
	int		ti_i
	int		ti_k
	int		ti_color	

	object	to_start_wp
	object	to_dest_wp
	object	tao_way[100]
	
	for (ti_i = 0; ti_i < i_net_territory_ID_nb; ti_i++)
	{
//		ai_net_territory_link_nb[ti_i] = 0
//		ai_net_territory_link2_nb[ti_i] = 0

		ai_territory_link[ti_i] = 0
		ai_territory_link2[ti_i] = 0
	}
	
	for (ti_i = 0; ti_i < i_net_territory_ID_nb; ti_i++)
	{
		to_start_wp	 = ao_net_wp[ai_net_territory_first_wp_index[ti_i]]

//#ifndef _FINAL_
//		if (DBG_Display_Territory)
//			DBG_RenderVector(@to_start_wp OBJ_PosGet(), Cv_VerticalVector * 100.0, color_blanc)	
//#endif

		DBG_TraceString(" => ")
		DBG_TraceObject(OBJ_Me())
		DBG_TraceString(" Le territoire ")
		DBG_TraceInt(ai_net_territory_ID[ti_i])
		DBG_TraceString(" est connecté aux territoires : ")

		switch(ti_i)
		{
			case 0 :
				ti_color = 0xFF
				break
			case 1 :
				ti_color = 0xFF00
				break
			case 2 :
				ti_color = 0xFF0000
				break
			case 3 :
				ti_color = 0x00FFFF
				break
			case 4 :
				ti_color = 0xFFFF00
				break
			case 5 :
				ti_color = 0x000080
				break
			case 6 :
				ti_color = 0x008000
				break
			case 7 :
				ti_color = 0x800000
				break
			case 8 :
				ti_color = 0x008080
				break
			case 9 :
				ti_color = 0x808000
				break
			case 10 :
				ti_color = 0x808080
				break
			default:
				ti_color = 0xFFFFFF
				break
		}

		for (ti_k = 0; ti_k < i_net_territory_ID_nb; ti_k++)
		{
			if (ti_i == ti_k)
				continue

			to_dest_wp	 = ao_net_wp[ai_net_territory_first_wp_index[ti_k]]

			// Accessible a pied
			if (PNJ_Raptor_Territory_Find_Way(to_start_wp, to_dest_wp, faux, ti_color))
			{
//				ai_net_territory_link[ti_i][ai_net_territory_link_nb[ti_i]] = ti_k
//				ai_net_territory_link_nb[ti_i]++
//
//				ai_net_territory_link2[ti_i][ai_net_territory_link2_nb[ti_i]] = ti_k
//				ai_net_territory_link2_nb[ti_i]++

				ai_territory_link[ti_i] |= (1 << ti_k)
				ai_territory_link2[ti_i] |= (1 << ti_k)

				DBG_TraceString(" ")
				DBG_TraceInt(ai_net_territory_ID[ti_k])
				DBG_TraceString(" sans saut ")

#ifndef _FINAL_
				if (DBG_Display_Territory)
				{
					DBG_RenderVector(@to_start_wp OBJ_PosGet() + cvector(0.0, 0.0, 0.5), @to_dest_wp OBJ_PosGet() - @to_start_wp OBJ_PosGet(), color_cyan)
					DBG_RenderVector(@to_start_wp OBJ_PosGet(), @to_dest_wp OBJ_PosGet() - @to_start_wp OBJ_PosGet(), color_blanc)
				}
#endif

				continue
			}

			// Accessible avec saut
			if (PNJ_Raptor_Territory_Find_Way(to_start_wp, to_dest_wp, vrai, ti_color))
			{
//				ai_net_territory_link[ti_i][ai_net_territory_link_nb[ti_i]] = ti_k
//				ai_net_territory_link_nb[ti_i]++

				ai_territory_link[ti_i] |= (1 << ti_k)

				DBG_TraceString(" ")
				DBG_TraceInt(ai_net_territory_ID[ti_k])
				DBG_TraceString(" nécessite un ou plusieurs sauts")

#ifndef _FINAL_
				if (DBG_Display_Territory)
					DBG_RenderVector(@to_start_wp OBJ_PosGet(), @to_dest_wp OBJ_PosGet() - @to_start_wp OBJ_PosGet(), color_blanc)
#endif
			}
		}
		
		DBG_TraceEOL()
	}

#ifndef _FINAL_
	if (DBG_Display_Territory)
		DBG_BreakPoint()
#endif

	return
}


// DETECTION DES COLLISIONS MOLLES
procedure_local void PNJ_Raptor_Soft_Collision()
{
	int		ti_i
	
	float		tf_dist
	float		tf_test_dist
	float		tf_test_sqr_dist

	vector	tv_me_to_budy
	vector	tv_col_move_axis

	switch(raptor_type)
	{
		case C_ID_Tyranosaure :
			return
			
		case C_ID_Raptor :
			tf_test_dist = 5.0 * OBJ_ZoomGet()
			tf_test_sqr_dist = tf_test_dist * tf_test_dist
			break

		case C_ID_Galiminus :
			tf_test_dist = 2.0 * OBJ_ZoomGet()
			tf_test_sqr_dist = tf_test_dist * tf_test_dist
			break
	}

	if ( ! OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Dyna) )
		return

	if (f_on_screen_pourcent == -1.0)
		return
		
	if (i_flag_saut)
		return
		
	if (i_way_status & Ci_WAY_STATUS_GRID_USED)
		return
		
	if (i_way_occluder_status & Ci_OCCLUDER_START_POS_IS_IN_OCCLUDER)
		return	

	if (COL_GMatReportGet(Gmat_KK_Face_de_Bord) != -1)
		return

	switch(i_etat_courant)
	{
		case ETAT_ATTAQUE_CACHE :
		case ETAT_LANCE : 
//		case ETAT_MORD :
		case ETAT_COODBOOL :
		case ETAT_GRAB :
		case ETAT_PAF_SLIDE :
		case ETAT_PAF_FALL :
		case ETAT_PAF_FLY :
		case ETAT_A_TERRE :
		case ETAT_BURN :
		case ETAT_MORT :
		case ETAT_FADE :
			return
	}

//	switch(ACT_ActionGet())
//	{
//		case Action_Demi_Tour_D_deb :
//		case Action_Demi_Tour_D_deb_tr_att :
//		case Action_Demi_Tour_G_deb :
//		case Action_Demi_Tour_G_deb_tr_att :
//		case Action_Demi_Tour_Rapide :
//		case Action_Demi_Tour_Rapide_tr_course :
//			return
//	}

	tv_col_move_axis = Cv_NullVector

	for (ti_i = 0; ti_i < i_budy_nb; ti_i++)
	{
		if (ao_budy[ti_i] == OBJ_Me())
			continue
	
		tv_me_to_budy = @ao_budy[ti_i] OBJ_PosGet() - OBJ_PosGet()
		tv_me_to_budy.z = 0.0
		
		tf_dist = MATH_VecDotProduct(tv_me_to_budy, tv_me_to_budy) 

		if (tf_dist < tf_test_sqr_dist && (raptor_type == C_ID_Galiminus || OBJ_LIB_Virtual_Colmap_Collision(OBJ_Me(), ao_budy[ti_i], faux)))
		{
			i_flag_soft_collision = vrai
		
			tf_dist = MATH_FloatSqrt(tf_dist)

			if (tf_dist)
				tv_me_to_budy /= tf_dist
			else
				tv_me_to_budy = OBJ_HorizonGet() * MATH_FloatSign(MATH_RandFloat(-1.0, 1.0))
				
//			if (raptor_type == C_ID_Raptor)
//			{
//				tv_me_to_budy *= f_soft_collision_duration * 4.0
//			
//				OBJ_BankingGeneralSet(
//					MATH_VecBlendRotate(OBJ_SightGet(),
//													MATH_FloatSign(MATH_VecDotProduct(OBJ_SightGet(), @ao_budy[ti_i] OBJ_SightGet())) * @ao_budy[ti_i] OBJ_SightGet(),
//													f_soft_collision_duration),
//					OBJ_BankingGet())
//			}
//			else
			{
				tv_me_to_budy *= 1.0 - (tf_dist / tf_test_dist)
			}
			
			tv_col_move_axis -= tv_me_to_budy
		}
	}

	tv_col_move_axis -= MATH_FloatMin(MATH_VecDotProduct(tv_col_move_axis, OBJ_SightGet()), 0.0) * OBJ_SightGet()
//	tv_col_move_axis -= MATH_VecDotProduct(tv_col_move_axis, OBJ_SightGet()) * OBJ_SightGet()
	tv_col_move_axis *= 40.0 * DYN_FrictionGet()
	tv_col_move_axis.z = 0.0
	tv_col_move_axis += DYN_TractionVectorGet()
	DYN_TractionSet(tv_col_move_axis)
}

//procedure_local void PNJ_Raptor_Main_Soft_Collision()
//{
//	float		tf_dist
//	
//	vector	tv_me_to_main
//	vector	tv_add_speed
//
//	return
//
//	if (raptor_type != C_ID_Raptor)
//		return
//
//	if (i_flag_saut)
//		return
//	
//	switch(i_etat_courant)
//	{
//		case ETAT_A_TERRE :
//		case ETAT_MORT :
//			return
//	}
//
//	tv_me_to_main =  @o_main_actor OBJ_PosGet() - OBJ_PosGet()
//	tv_me_to_main.z = 0.0
//	tf_dist = MATH_VecDotProduct(tv_me_to_main, tv_me_to_main) 
//	if (tf_dist < 16.0)
//	{
//		if (tf_dist)
//		{
//			tf_dist = MATH_FloatSqrt(tf_dist)
//			tv_me_to_main /= tf_dist 
//		}
//		else
//			tv_me_to_main = OBJ_SightGet()
//		
//		tv_add_speed = MATH_FloatMax(MATH_VecDotProduct(@o_main_actor DYN_SpeedGetVector(), tv_me_to_main), 0.0) * tv_me_to_main
//
//		tv_me_to_main *= 3.0
//		tv_me_to_main += OBJ_PosGet()
//		tv_me_to_main -= @o_main_actor OBJ_PosGet()
//		tv_me_to_main /= TIME_GetDt()
//
//		tv_add_speed += tv_me_to_main
//		@o_main_actor  DYN_SpeedSetVector(tv_add_speed)
//	}
//}

procedure_local void PNJ_Raptor_Init_Bronto()
{
	int				ti_i

	object		to_patte

	for (ti_i = 0; ti_i < @get_global i_bronto_leg_nb; ti_i++)
	{
		to_patte = @get_global ao_bronto_leg[ti_i]
//		if (@to_patte OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_ColMap) && @to_patte COL_ColMapActivationGet())
			COL_UnCollidableAdd(to_patte)
	}
}

procedure_local void PNJ_Raptor_Bronto_Soft_Collision()
{

	int		ti_i
	
	float		tf_dist
	float		tf_test_dist
	float		tf_test_sqr_dist
	float		tf_dt

	vector	tv_test_pos
	vector	tv_me_to_budy
	vector	tv_col_move_axis

	object	to_bronto_leg

	if (i_flag_saut)
		return
	
	if ( ! OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Dyna) )
		return

	switch(i_etat_courant)
	{
		case ETAT_PAF_FALL :
		case ETAT_PAF_FLY :
		case ETAT_A_TERRE :
		case ETAT_BURN :
		case ETAT_MORT :
		case ETAT_FADE :
			return
	}

	switch(raptor_type)
	{
		case C_ID_Tyranosaure :
			return
			
		case C_ID_Raptor :
			tf_test_dist = 1.5 // 20.0
			tf_test_sqr_dist = tf_test_dist * tf_test_dist
			break

		case C_ID_Galiminus :
			tf_test_dist = 0.75
			tf_test_sqr_dist = tf_test_dist * tf_test_dist
			break
	}
	
	tf_dt = TIME_GetDt()
	
	tv_test_pos = OBJ_PosGet()
	tv_test_pos += DYN_SpeedGetVector() * tf_dt

	tv_col_move_axis = Cv_NullVector

	for (ti_i = 0; ti_i < @get_global i_bronto_leg_nb; ti_i++)
	{
		to_bronto_leg = @get_global ao_bronto_leg[ti_i]
		tv_me_to_budy = @to_bronto_leg OBJ_PosGet() - tv_test_pos
		tv_me_to_budy.z = 0.0
		
		tf_dist = MATH_VecDotProduct(tv_me_to_budy, tv_me_to_budy) 

		if (tf_dist < tf_test_sqr_dist)
		{
			DBG_RenderCylinder(@to_bronto_leg OBJ_PosGet() + cvector(0.0, 0.0, -10.0), cvector(0.0, 0.0, 20.0), tf_test_dist, 0x80000080)
		
			i_flag_soft_collision = vrai

			tf_dist = MATH_FloatSqrt(tf_dist)

			if (tf_dist)
				tv_me_to_budy /= tf_dist
			else
				tv_me_to_budy = OBJ_HorizonGet()

			tv_me_to_budy *= tf_test_dist - tf_dist
			
			tv_col_move_axis -= tv_me_to_budy / TIME_GetDt()
			
			break
		}
	}
	
	tv_col_move_axis += DYN_SpeedGetVector()
	DYN_SpeedSetVector(tv_col_move_axis)
}

//procedure_local int PNJ_Raptor_Precal_Pos_Index_Get(vector tv_pos)
//{
//	int		ti_i
//
//	for (ti_i = 0; ti_i < 20; ti_i++)
//	{
//		if (@get_global an_raptor_precal_pos_net[ti_i] != n_net)
//			continue
//	
//		if (@get_global ai_raptor_precal_pos_bit_field[ti_i] != i_net_territory_bit_field)
//			continue	
//	
//		if (! MATH_VecNullToler(@get_global av_raptor_precal_pos[ti_i] - tv_pos, 0.1) )
//			continue
//			
//		return(ti_i)
//	}
//	
//	return(-1)
//}
//
//procedure_local void PNJ_Raptor_Precal_Pos_Add(vector tv_pos, int ti_flag)
//{
//	int		ti_index	
//
//	ti_index = @get_global i_raptor_precal_pos_index
//
//	@get_global an_raptor_precal_pos_net[ti_index] = n_net
//	@get_global ai_raptor_precal_pos_bit_field[ti_index] = i_net_territory_bit_field
//	@get_global av_raptor_precal_pos[ti_index] = tv_pos
//	@get_global ai_raptor_precal_pos_flag[ti_index] = ti_flag
//	@get_global i_raptor_precal_pos_index = MATH_Modulo(ti_index + 1, 20)
//}

procedure_local int PNJ_Raptor_Get_Check_Vision()
{
	int					ti_i
	int					ti_index

	float				tf_dot_product

	object			to_best_interet_target
		
	messageid		EVT_InfoSeen_ID

	if (raptor_type != C_ID_Galiminus)
		return(faux)

	if (MSG_GlobalIsValid(mid_best_interet))
		to_best_interet_target = EVENT_InteretTargetGet(mid_best_interet)
	else
		to_best_interet_target = nobody

	for (ti_index = 0; ti_index < @get_global i_galiminus_precal_nb; ti_index++)
	{
		if (@get_global an_galiminus_precal[ti_index] != n_net)
			continue
			
		if (@get_global ai_galiminus_bit_field[ti_index] != i_net_territory_bit_field)
			continue

		i_perceived_main_actor_index = @get_global i_perceived_main_actor_index[ti_index]
	
		i_perceived_actor_nb = @get_global i_perceived_actor_nb[ti_index]

		for (ti_i  = 0; ti_i < i_perceived_actor_nb; ti_i++)
		{
			ao_perceived_actor[ti_i] = @get_global ao_perceived_actor[ti_index][ti_i]

			if (ao_perceived_actor[ti_i] == to_best_interet_target)
				i_perceived_best_actor_index = ti_i

			ai_perceived_seen[ti_i] = @get_global ai_perceived_seen[ti_index][ti_i]
			ai_perceived_accessible[ti_i] = @get_global ai_perceived_accessible[ti_index][ti_i]
			ai_perceived_territory[ti_i] = @get_global ai_perceived_territory[ti_index][ti_i]
			ai_perceived_status[ti_i] = @get_global ai_perceived_status[ti_index][ti_i]
			ai_perceived_ID[ti_i] = @get_global ai_perceived_ID[ti_index][ti_i]
			ai_perceived_hiding_place_index[ti_i] = @get_global ai_perceived_hiding_place_index[ti_index][ti_i]

			af_perceived_interest[ti_i] = @get_global af_perceived_interest[ti_index][ti_i]
			af_perceived_life_ratio[ti_i] = @get_global af_perceived_life_ratio[ti_index][ti_i]
	
			av_perceived_position[ti_i] = @get_global av_perceived_position[ti_index][ti_i]

			af_perceived_dist[ti_i] = MATH_VecNorm(av_perceived_position[ti_i] - OBJ_PosGet())

			if (! i_flag_dont_use_grid && MATH_LIB_ZoneInCone(OBJ_PosGet(), OBJ_SightGet(), Cf_Cos30, f_vision_near_in_move_dist, av_perceived_position[ti_i], 1.0, vrai, tf_dot_product, 0, 0) )
				ai_perceived_status[ti_index] |= Ci_PERCEIVED_NEAR_IN_MOVE_CONE	

			if ( ! ai_perceived_accessible[ti_i] && raptor_type != C_ID_Tyranosaure)
			{
				ao_perceived_nearest_wp[ti_i] = PNJ_Raptor_Nearest_Wp_Get(av_perceived_position[ti_i], all, none, faux)
				if (PNJ_Raptor_Is_Wp_Memorised(ao_perceived_nearest_wp[ti_i] ))
					ai_perceived_status[ti_i] |= Ci_PERCEIVED_ALREADY_CHECKED
			}
			else if (IsThis_ID_Humain(ai_perceived_ID[ti_i]))
			{
				EVT_InfoSeen_ID = EVENT_AddEventInfo(OBJ_Me(), ao_perceived_actor[ti_i], C_EVENT_INFOTYPE_SEEN)
				EVENT_Info_OutsideGridSet(EVT_InfoSeen_ID, i_flag_dont_use_grid)
				EVENT_Info_StalkSet(EVT_InfoSeen_ID, i_flag_stalk)
				EVENT_Info_SeenSet(EVT_InfoSeen_ID, vrai)
			}
		}

		i_budy_nb = @get_global i_budy_nb[ti_index]

		for (ti_i = 0; ti_i < i_budy_nb; ti_i++)
			ao_budy[ti_i] = @get_global ao_budy[ti_index][ti_i]

		if (MSG_GlobalIsValid(mid_best_interet) && i_perceived_best_actor_index == -1)
		{
#ifndef _FINAL_
			if (DBG_Log_Allowed)
			{
				DBG_TraceObject(EVENT_InteretTargetGet(mid_best_interet))
				DBG_TraceString(" n'a plus d'évènement vision")
				DBG_TraceEOL()
			}
#endif
		
			PNJ_Raptor_Del_Interest()
		}

		return(vrai)
	}
	
	return(faux)
}

procedure_local void PNJ_Raptor_Backup_Check_Vision()
{
	int			ti_i
	int			ti_index

	if (raptor_type != C_ID_Galiminus)
		return
	
	ti_index = @get_global i_galiminus_precal_nb
	if (ti_index == 5)
		DBG_Error("5 Troupeaux de galiminus, c'est trop")

	@get_global an_galiminus_precal[ti_index] = n_net
	@get_global ai_galiminus_bit_field[ti_index] = i_net_territory_bit_field

	@get_global i_perceived_main_actor_index[ti_index] = i_perceived_main_actor_index

	@get_global i_perceived_actor_nb[ti_index] = i_perceived_actor_nb

	for (ti_i = 0; ti_i < i_perceived_actor_nb; ti_i++)
	{
		@get_global ao_perceived_actor[ti_index][ti_i] = ao_perceived_actor[ti_i]

		@get_global ai_perceived_seen[ti_index][ti_i] = ai_perceived_seen[ti_i]
		@get_global ai_perceived_accessible[ti_index][ti_i] = ai_perceived_accessible[ti_i]
		@get_global ai_perceived_territory[ti_index][ti_i] = ai_perceived_territory[ti_i]
		@get_global ai_perceived_status[ti_index][ti_i] = ai_perceived_status[ti_i]
		@get_global ai_perceived_ID[ti_index][ti_i] = ai_perceived_ID[ti_i]
		@get_global ai_perceived_hiding_place_index[ti_index][ti_i] = ai_perceived_hiding_place_index[ti_i]

		@get_global af_perceived_interest[ti_index][ti_i] = af_perceived_interest[ti_i]
		@get_global af_perceived_life_ratio[ti_index][ti_i] = af_perceived_life_ratio[ti_i]

		@get_global av_perceived_position[ti_index][ti_i] = av_perceived_position[ti_i]

		// INFORMATION NON PARTAGEABLE
		if ( ! ai_perceived_accessible[ti_i] && raptor_type != C_ID_Tyranosaure)
		{
			ao_perceived_nearest_wp[ti_i] = PNJ_Raptor_Nearest_Wp_Get(av_perceived_position[ti_i], all, none, faux)
			if (PNJ_Raptor_Is_Wp_Memorised(ao_perceived_nearest_wp[ti_i] ))
				ai_perceived_status[ti_i] |= Ci_PERCEIVED_ALREADY_CHECKED
		}
	}

	@get_global i_budy_nb[ti_index] = i_budy_nb

	for (ti_i = 0; ti_i < i_budy_nb; ti_i++)
		@get_global ao_budy[ti_index][ti_i] = ao_budy[ti_i]

	@get_global i_galiminus_precal_nb ++
}

procedure_local int PNJ_Raptor_EtatCine()
{
	switch(i_etat_courant)
	{
		case ETAT_CINE_WAIT :	
		case ETAT_CINE_WAITDEFAULT :	
		case ETAT_CINE_VALA :	
		case ETAT_CINE_FIGHT :	
		case ETAT_CINE_EAT :	
		case ETAT_CINE_ROAR :
			return(vrai)
	
		default:
			return(faux)
	}
}

procedure_local int PNJ_Raptor_CaseBrulee(vector pos)
{
	int	capa, oui, has
	
	oui = faux
	has = GRID_Has(1)
	if(!has) return 0
	GRID_CurrentSet(1)
	capa = GRID_CapaGet(pos)
	if(capa & Ci_Grid2_Brule) oui = vrai
	GRID_CurrentSet(0)
	return oui
}

procedure_local int PNJ_Raptor_Actor_Hided_By_Grass(int ti_index, vector tv_dest_pos, vector tv_start_pos)
{
	int			ti_grid_capa	
	int			ti_case_tested
	int			ti_case_brulee
	int			ti_case_nb
	int			ti_flag_test_ocluder

	float		tf_dist	
	float		tf_step_length

	vector 	tv_start_to_dest
	vector	tv_tested_pos
	vector	tv_pos
	vector	tv_virtual_collision_pos

	if (raptor_type != C_ID_Raptor)
		return(faux)

	if (ti_index != i_perceived_main_actor_index)
		return(faux)

	GRID_CurrentSet(0)	

//	tv_start_pos = GRID_PosGet(tv_start_pos)
//	tv_dest_pos = GRID_PosGet(tv_dest_pos)

 	tv_start_to_dest = tv_dest_pos - tv_start_pos
 	tv_start_to_dest.z = 0.0

	tf_dist = MATH_VecNorm(tv_start_to_dest)
	if (!tf_dist)
		return	(faux)

	tf_step_length = MATH_FloatMax(MATH_AbsFloat(tv_start_to_dest.x), MATH_AbsFloat(tv_start_to_dest.y))
	tv_start_to_dest /= tf_step_length
	tf_step_length = MATH_VecNorm(tv_start_to_dest)

//	tf_dist = MATH_FloatMin(tf_dist, 10.0)

	ti_case_nb = tf_dist / tf_step_length

	ti_flag_test_ocluder = faux

	tv_tested_pos = tv_start_pos
	for (ti_case_tested = 1; ti_case_tested <= ti_case_nb; ti_case_tested++)
	{
		AI_ClearStack()	
	
		tv_pos = tv_tested_pos
		ti_case_brulee = PNJ_Raptor_CaseBrulee(tv_pos)

		if ( ! ti_case_brulee )
		{
			ti_grid_capa = GRID_CapaGet(tv_pos)
			ti_grid_capa &= tag_grid_terrain
		
			switch(ti_grid_capa)
			{
				case Ci_sol_herbe :
				case Ci_sol_herbe_haute :
					ti_flag_test_ocluder = vrai
					break
			}
		}

		tv_tested_pos += tv_start_to_dest
	}

	if (ti_flag_test_ocluder)
	{
		tv_pos.z = 1000.0
		COL_RayObject_Dist(tv_pos, -Cv_VerticalVector, 2000.0, all, OBJ_C_IdentityFlag_Dyna | OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
		tv_pos = COL_RayObject_PosGet()
//		DBG_RenderVector(tv_pos, Cv_VerticalVector, color_vert)

		switch(ti_grid_capa)
		{
			case Ci_sol_herbe :
				tv_pos.z += 1.0
				break
			case Ci_sol_herbe_haute :
				tv_pos.z += 2.0
				break
		}
		
		tv_tested_pos	= tv_start_to_dest

	 	tv_start_to_dest = tv_dest_pos - tv_start_pos
		tf_dist = MATH_VecNorm(tv_start_to_dest)
	 	tv_start_to_dest /= tf_dist

		MATH_LIB_Intersection_Dir_Plane(tv_start_pos, tv_start_to_dest, tv_pos, tv_tested_pos, tf_dist, tv_virtual_collision_pos)
		
		if (tv_virtual_collision_pos.z < tv_pos.z)
		{
//			DBG_RenderVector(tv_dest_pos, tv_virtual_collision_pos - tv_dest_pos, color_vert)
			return(vrai)
		}
//		else
//		{
//		 	DBG_RenderVector(tv_dest_pos, -tv_start_to_dest, color_rouge)
//		}
	}

	return(faux)
}

procedure_local void PNJ_Raptor_Play_Move_Sound()
{
	if (raptor_type != C_ID_Galiminus)
		return	

	switch(ACT_ActionGet())
	{
		case Action_Normal_Marche :
		case Action_Normal_Marche_Rapide :
		case Action_Normal_Trot :
		case Action_Normal_Course :

		case Action_Renifle_Marche :
		case Action_Renifle_Marche_Rapide :
		case Action_Renifle_Trot :
		
		case Action_Blesse_Marche :
		case Action_Blesse_Marche_Rapide :
	
			if (f_me_to_main_dist > 625.0)
			{
				if (i_SND_instance_move != -1)
				{
					SND_Stop(i_SND_instance_move)
					i_SND_instance_move = -1
				}
			}
			else if (f_me_to_main_dist < 400.0)
			{
				if (i_SND_instance_move == -1)
					i_SND_instance_move = SND_RequestPlayLoop(0)
			}
	
			break
			
		default:
		
			if (i_SND_instance_move != -1)
			{
				SND_Stop(i_SND_instance_move)
				i_SND_instance_move = -1
			}

	}
}

procedure_local void PNJ_Raptor_Play_JackAttack_Sound()
{
	int		ti_flag_ok 

	if (raptor_type != C_ID_Raptor)
		return
	
	// PRESENCE LORS DE L'ATTAQUE VERS JACK
	switch(i_etat_courant)
	{
		case ETAT_FIGHT :
		case ETAT_SEARCH :
		case ETAT_MORD :
		case ETAT_GRAB :
	
			ti_flag_ok = vrai
	
			if (i_way_computation_mode != Ci_WAY_MODE_FIGHT)
				ti_flag_ok = faux
			else if (!MSG_GlobalIsValid(mid_best_interet))
				ti_flag_ok = faux
			else if (EVENT_InteretTargetGet(mid_best_interet) != o_main_actor)
				ti_flag_ok = faux
			else if (f_me_to_main_dist > 30.0)
				ti_flag_ok = faux
	
			break
			
		default:
			ti_flag_ok = faux
	}
	
	
	if (ti_flag_ok)
	{
		if (i_SND_instance_attack == -1)	
			i_SND_instance_attack = SND_RequestPlayLoopOnObjCanal(Ci_SND_Presence_Attaque, Anim_Canal_Tete)
	}
	else if (i_SND_instance_attack != -1)
	{
		SND_Stop(i_SND_instance_attack)
		i_SND_instance_attack = -1
	}
}

procedure_local void PNJ_Raptor_Play_Breath_Sound()
{
	if (raptor_type == C_ID_Galiminus)
		return

	switch(i_etat_courant)
	{
		case ETAT_BURN :
		case ETAT_MORT :
		case ETAT_FADE :
			if (i_SND_instance_breath != -1)
			{
				SND_Stop(i_SND_instance_breath)
				i_SND_instance_breath = -1
			}	
			break
			
		default:
			if (i_SND_instance_attack == -1)
			{
				if (i_SND_instance_breath == -1)
					i_SND_instance_breath = SND_RequestPlayLoopOnObjCanal(Ci_SND_Presence, Anim_Canal_Tete)
			}
			else if (i_SND_instance_breath != -1)
			{
				SND_Stop(i_SND_instance_breath)
				i_SND_instance_breath = -1
			}	
	}
}

procedure_local void PNJ_Raptor_Shake_Cam()
{
	int			ti_ani_signal
	
	float		tf_shake_cam_coef

	if (raptor_type != C_ID_Tyranosaure)
		return	
	
	if (f_me_to_main_dist > 200.0)
		return

	ti_ani_signal = ANI_SignalGet()
	if (!ti_ani_signal)
		return

	tf_shake_cam_coef = MATH_FloatMax(f_me_to_main_dist - 10.0, 0.0)
	tf_shake_cam_coef /= 190.0
	tf_shake_cam_coef = 1.0 - tf_shake_cam_coef

	switch(ti_ani_signal)
	{
		case 1 :
		 	IO_PafSet(100 * tf_shake_cam_coef, 7)
			tf_shake_cam_coef *= 0.025
		 	LIBGFX_ShakeCam(tf_shake_cam_coef, 50.0, 0.0, 0.0, 0.1, 0.95)
		 	break
		 	
		case 2 :
		 	IO_PafSet(100 * tf_shake_cam_coef, 7)
			tf_shake_cam_coef *= 0.05
		 	LIBGFX_ShakeCam(tf_shake_cam_coef, 50.0, 0.0, 0.0, 0.1, 0.95)
		 	break
	}
}

procedure_local void PNJ_Raptor_Target_Reachable()
{	
	int			ti_result
	
	object	to_target
	object	to_target_bone	

	vector	tv_start_pos
	vector	tv_me_to_target
	vector	tv_offset

	if (i_flag_reachable_test_done)
		return

	if (i_perceived_best_actor_index == -1)
		return
		
	i_flag_reachable_test_done = vrai

	i_flag_bite_no_wall = faux

	to_target = ao_perceived_actor[i_perceived_best_actor_index]
	if ( ! to_target )
		return

	switch(ai_perceived_ID[i_perceived_best_actor_index])
	{
		case C_ID_Joueur :
			to_target_bone = o_camera
			break

		case C_ID_Scolo :
			to_target_bone = @to_target ANI_CanalObjectGet(5)
			break
			
		case C_ID_BatCharognard :
			to_target_bone = @to_target ANI_CanalObjectGet(Anim_Canal_Torse)
			break	
	
		default:
			to_target_bone = @to_target ANI_CanalObjectGet(Anim_Canal_Tete)
	}

	if (!to_target_bone)
		to_target_bone = to_target
		
	if (raptor_type == C_ID_Galiminus || (i_CineStack && am_CineStack[0].msg_id == CINE_Bite) || PNJ_Raptor_On_Wall_Pos(@to_target OBJ_PosGet()) )
	{
		i_flag_bite_no_wall = vrai
	}
	else
	{
		tv_start_pos = OBJ_PosGet()
		tv_start_pos.z = @ao_head_bones[i_head_bone_nb] OBJ_PosGet().z

		if (COL_LIB_Can_See_Actor(to_target, tv_start_pos, @to_target_bone OBJ_PosGet(), all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
		{
			// Le premier lancer de rayon n'a rien touché
			if (raptor_type == C_ID_Tyranosaure)
			{
				tv_me_to_target = @to_target_bone OBJ_PosGet()
				tv_me_to_target -= tv_start_pos
				tv_me_to_target.z = 0.0
				MATH_VecSetNormalize(tv_me_to_target)
				
				tv_offset.x = -tv_me_to_target.y
				tv_offset.y = tv_me_to_target.x
				tv_offset.z = 0.0
				
				if (COL_LIB_Can_See_Actor(to_target, tv_start_pos + tv_offset, @to_target_bone OBJ_PosGet() + tv_offset - tv_me_to_target, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
				{
					// Le deuxième lancer de rayon n'a rien touché
					if (COL_LIB_Can_See_Actor(to_target, tv_start_pos - tv_offset, @to_target_bone OBJ_PosGet() - tv_offset - tv_me_to_target, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
					{
						// Le troisième lancer de rayon n'a rien touché
						i_flag_bite_no_wall = vrai
					}
				}
			}
			else
			{
				i_flag_bite_no_wall = vrai
			}
		}
	}
}

procedure_local void PNJ_Raptor_Do_Commun_Bite_Stuff(object to_target)
{
	int			ti_wall_col_cpt	

	float		tf_norm	

	vector 	tv_new_sight
	vector	tv_dest_sight
	vector	tv_traction

#define Cf_Dist_Min					4.2
#define Cf_Dist_Recalage			4.1
#define Cf_Traction_Coef			30.0

	PNJ_Raptor_Target_Reachable()

	if ( ! o_IK_bassin_bite_actor )
		return

	tv_dest_sight = @o_IK_bassin_bite_actor OBJ_PosGet()
	tv_dest_sight -= OBJ_PosGet()
	tv_dest_sight.z = 0.0
	
	tf_norm = MATH_VecNorm(tv_dest_sight)
	
	if (tf_norm)
		tv_dest_sight /= tf_norm
	else
		tv_dest_sight = OBJ_SightGet()

	if (raptor_type != C_ID_Tyranosaure && tf_norm < Cf_Dist_Min * OBJ_ZoomGet())
	{
		switch(ai_perceived_ID[i_perceived_best_actor_index])
		{
			case C_ID_Scolo :
			case C_ID_Spider :
				break
				
			default:
				tv_traction = tv_dest_sight
				tv_traction *= -Cf_Dist_Recalage * OBJ_ZoomGet()
				tv_traction += @o_IK_bassin_bite_actor OBJ_PosGet()
				tv_traction -= OBJ_PosGet()
				tv_traction *= Cf_Traction_Coef * DYN_FrictionGet()
				tv_traction.z = 0.0
				tv_traction += DYN_TractionVectorGet()
				DYN_TractionSet(tv_traction)
		}
	}

	if (i_flag_bite_no_wall)
		tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_dest_sight, 8.0 * TIME_GetDt())
	else
		tv_new_sight = OBJ_SightGet()

	OBJ_BankingGeneralSet(tv_new_sight, v_virtual_banking)
}

procedure_local void PNJ_Raptor_Check_Head_Col()
{
	int			ti_flag

	vector	tv_ray_start_pos
	vector	tv_ray_dest_pos
	vector	tv_ray_offset	

	if (i_flag_force_cri_haut)
	{
		f_head_search_hyteresis = 0.5
		i_flag_head_search = faux
		return
	}

//	if (v_bezier_head_look_pos.z >= OBJ_PosGet().z + 5.0)
	tv_ray_offset = v_bezier_head_look_pos
	tv_ray_offset -= OBJ_PosGet()
	tv_ray_offset.z -= 4.0
	tv_ray_offset = MATH_VecNormalize(tv_ray_offset) 
	if (tv_ray_offset.z >= Cf_Cos80)
	{
		ti_flag = faux
	}
	else
	{
		tv_ray_dest_pos = v_look_head_pos
		tv_ray_dest_pos  += v_look_banking * 2.5
	
	//	tv_ray_offset = tv_ray_dest_pos 
	//	tv_ray_offset -= v_look_pivot_pos
		tv_ray_offset = v_look_banking
		tv_ray_offset.z = tv_ray_offset.x
		tv_ray_offset.x = tv_ray_offset.y
		tv_ray_offset.y = - tv_ray_offset.z
		tv_ray_offset.z = 0.0
		MATH_VecSetNormalize(tv_ray_offset)
	
		tv_ray_dest_pos.z = OBJ_PosGet().z + 3.5
		tv_ray_dest_pos += MATH_VecRotate(tv_ray_offset, v_look_banking, 20.0 * TIME_Get()) * 1.5
	
		tv_ray_start_pos = v_look_pivot_pos
		tv_ray_start_pos.z = tv_ray_dest_pos.z
	
		ti_flag = GRID_LIB_IsReachableFrom(tv_ray_start_pos, tv_ray_dest_pos, 0b0, 0.0, faux, 0)
		if ( ti_flag )
		{
//			DBG_RenderVector(tv_ray_start_pos, tv_ray_dest_pos -  tv_ray_start_pos, color_vert)
		}
		else
		{
			COL_SpecificCrossableSet(all - Gmat_KK_Cross_All_But_TREX)
			if  ( COL_LIB_RayIsCut_Vector(tv_ray_start_pos, tv_ray_dest_pos - tv_ray_start_pos, all, OBJ_C_IdentityFlag_Anims | OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable + COL_C_Ray_use_SpecificCrossableSet) )
			{
#ifndef _FINAL_
				if (AI_GetCurSystem() == 10)
				{
					COL_RayObject_Vector(tv_ray_start_pos, tv_ray_dest_pos - tv_ray_start_pos, all, OBJ_C_IdentityFlag_Anims | OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable + COL_C_Ray_use_SpecificCrossableSet)
					DBG_RenderVector(tv_ray_start_pos, COL_RayObject_PosGet() - tv_ray_start_pos, color_rouge)
				}
#endif
			}
			else
			{
				DBG_RenderVector(tv_ray_start_pos, tv_ray_dest_pos -  tv_ray_start_pos, color_jaune)
				ti_flag = vrai
			}
		}
	}

	if ( ! ti_flag || ! f_head_search_hyteresis )
	{
		f_head_search_hyteresis = 0.5
		i_flag_head_search = ti_flag
	}
}

//procedure_local float PNJ_Raptor_Delay_Before_Grab(object to_target, float tf_target_size)
//{
//	int			ti_i
//	int			ti_flag_intersection
//
//	float		tf_total_time
//	float		tf_intersection_time	
//	float		tf_speed
//	float		tf_dist
//
//	vector	tv_start_pos
//	vector	tv_dest_pos
//	vector	tv_move_dir
//	vector	tv_target_pos
//	vector	tv_target_speed
//
//	if ( ! @to_target OBJ_HierarchyGet() )
//		return(0.0)
//
//	ti_flag_intersection = faux
//	tf_total_time = 0.0
//	tf_speed = DYN_SpeedGet()
//
//	tv_start_pos = OBJ_PosGet()
//	tv_target_pos = @to_target OBJ_PosGet()
//	tv_target_speed = (tv_target_pos - v_target_last_pos) / TIME_GetDt()
//	v_target_last_pos = tv_target_pos
//	
//	if (!tf_speed)
//	{
//		tv_start_pos -= tv_target_pos
//		tf_dist = MATH_VecNorm(tv_start_pos)
//		if (tf_dist < 5.0 + tf_target_size)
//			return(0.0)
//		else
//			return(Cf_Infinit)
//	}
//
//	for (ti_i = i_way_wp_nb - 1; ti_i >= 0; ti_i--)
//	{
//		tv_dest_pos = @ao_way_wp[ti_i] OBJ_PosGet()
//		tv_move_dir = tv_dest_pos - tv_start_pos
//		tf_dist = MATH_VecNorm(tv_move_dir)
//		tv_move_dir /= tf_dist
//		
//		tf_intersection_time = MATH_LIB_Get_Intersection_Time(OBJ_PosGet(), tv_move_dir * tf_speed, 5.0, tv_target_pos, tv_target_speed, tf_target_size)
//		if (tf_intersection_time == Cf_Infinit)
//		{
//			tf_intersection_time = tf_dist / tf_speed
//			tf_total_time += tf_intersection_time
//
//			DBG_RenderCylinder(tv_start_pos, tv_move_dir * tf_dist, 5.0, 0x8000FF00)
//			DBG_RenderCylinder(tv_target_pos, tv_target_speed * tf_intersection_time, tf_target_size, 0x8000FF00)
//
//			tv_target_pos += @to_target DYN_SpeedGetVector() * tf_intersection_time
//		}
//		else
//		{
//			ti_flag_intersection = vrai
//			tf_total_time += tf_intersection_time
//			
//			tf_dist = tf_speed * tf_intersection_time
//
//			DBG_RenderCylinder(tv_start_pos, tv_move_dir * tf_dist, 5.0, 0x800000FF)
//			DBG_RenderCylinder(tv_target_pos, tv_target_speed * tf_intersection_time, tf_target_size, 0x800000FF)
//
//			break
//		}
//
//		tv_start_pos = tv_dest_pos
//	}
//	
//	if ( ! ti_flag_intersection )
//	{
//		tv_dest_pos = @to_target OBJ_PosGet()
//		tv_move_dir = tv_dest_pos - tv_start_pos
//		tf_dist = MATH_VecNorm(tv_move_dir)
//		tv_move_dir /= tf_dist
//		
//		tf_intersection_time = MATH_LIB_Get_Intersection_Time(OBJ_PosGet(), tv_move_dir * tf_speed, 5.0, tv_target_pos, tv_target_speed, tf_target_size)
//		if (tf_intersection_time != Cf_Infinit)
//		{
//			ti_flag_intersection = vrai
//			tf_total_time += tf_intersection_time
//
//			tf_dist = tf_speed * tf_intersection_time
//			DBG_RenderCylinder(tv_start_pos, tv_move_dir * tf_dist, 5.0, 0x800000FF)
//			DBG_RenderCylinder(tv_target_pos, tv_target_speed * tf_intersection_time, tf_target_size, 0x800000FF)
//		}
//		else
//		{
//			DBG_RenderCylinder(tv_start_pos, tv_move_dir * tf_dist, 5.0, 0x8000FF00)
//			DBG_RenderCylinder(tv_target_pos, tv_target_speed * (tf_dist / tf_speed), tf_target_size, 0x8000FF00)
//		}
//	}
//
//	if (ti_flag_intersection)
//		return(tf_total_time)
//	else
//		return(Cf_Infinit)
//}

procedure_local float PNJ_Raptor_Delay_Before_Grab(object to_target, float tf_target_size)
{
	float		tf_dist
	float		tf_delay	

	vector	tv_target_pos
	vector	tv_target_speed
	vector	tv_me_to_target

	if ( ! @to_target OBJ_HierarchyGet() )
		return(0.0)

	tv_target_pos = @to_target OBJ_PosGet()
	tv_target_speed = (tv_target_pos - v_target_last_pos) / TIME_GetDt()
	v_target_last_pos = tv_target_pos

	tv_target_speed = DYN_SpeedGetVector() - tv_target_speed
	tv_target_speed.z = 0.0
	
	tv_me_to_target = tv_target_pos
	tv_me_to_target -= OBJ_PosGet()
	tv_me_to_target.z = 0.0
	
	tf_dist = MATH_VecNorm(tv_me_to_target)
	
	if (tf_dist < 20.0)
		return(0.0)
	
	tv_me_to_target /= tf_dist
	
	tf_delay = tf_dist / MATH_VecDotProduct(tv_target_speed, tv_me_to_target)
	if (tf_delay < 0.0)
		return(Cf_Infinit)
	else
		return(tf_delay)
}

procedure_local int PNJ_Raptor_In_Front_Of_Me(object to_actor)
{
	float		tf_dot_product	

	vector	tv_pivot_to_target

	tv_pivot_to_target = @to_actor OBJ_PosGet()
	tv_pivot_to_target -= OBJ_PosGet()

	tv_pivot_to_target = MATH_VecGlobalToLocal(tv_pivot_to_target)
	tv_pivot_to_target -= cvector(0.0, -6.0, 1.0)
	
	if (MATH_AbsFloat(tv_pivot_to_target.x) > 2.0)
	{
//		DBG_RenderBox(OBJ_Me(), cvector(-2.0, -12.0, -2.0), cvector(2.0, 0.0, 5.0), color_vert)
		return(faux)
	}

	if (MATH_AbsFloat(tv_pivot_to_target.y) > 6.0)
	{
//		DBG_RenderBox(OBJ_Me(), cvector(-2.0, -12.0, -2.0), cvector(2.0, 0.0, 5.0), color_vert)
		return(faux)
	}

	if (MATH_AbsFloat(tv_pivot_to_target.z) > 3.0)
	{
//		DBG_RenderBox(OBJ_Me(), cvector(-2.0, -12.0, -2.0), cvector(2.0, 0.0, 5.0), color_vert)
		return(faux)
	}

//	DBG_RenderBox(OBJ_Me(), cvector(-2.0, -12.0, -2.0), cvector(2.0, 0.0, 5.0), color_rouge)
	return(vrai)
}

procedure_local void PNJ_Raptor_GFX_Smoke(int	ti_index, int ti_flag_use_speed)
{
	int		ti_GFX_Smoke	
	int		ti_terrain
	
	float		tf_speed

	vector	tv_pos
	vector	tv_wind
	vector	tv_pos_dir

	if (raptor_type != C_ID_Raptor)
		return

	if (OBJ_FlagsStatusGet() & OBJ_C_StatusFlag_Culled)
		return

	if (OBJ_FlagsControlGet() & (OBJ_C_ControlFlag_ForceInvisible | OBJ_C_ControlFlag_SecInvisible))
		return

	ti_terrain = GRID_CapaGet(tv_pos) & tag_grid_terrain
	switch(ti_terrain)
	{
		case Ci_sol_eau :
		case Ci_sol_eau_basse :
			return		
			break
	}
	
	if (ti_flag_use_speed)
	{
		tv_pos_dir = DYN_SpeedGetVector()
//		tv_pos_dir.z = 0.0
		tf_speed = MATH_VecNorm(tv_pos_dir)

		if (tf_speed > 2.0)
		{
			tv_pos_dir /= tf_speed
			tf_speed = MATH_FloatMin(tf_speed, 10.0)
		}
		else
		{
			tf_speed = 2.0
			tv_pos_dir = OBJ_SightGet()
		}
	}
	else
	{
		tv_pos_dir = @ao_IK_bones[ti_index][3] OBJ_PosGet()
		tv_pos_dir -= av_feet_last_pos[ti_index]
//		tv_pos_dir.z = 0.0
		tv_pos_dir /= TIME_GetDt()

		tf_speed = MATH_VecNorm(tv_pos_dir)
		if (tf_speed < 3.0)
			return

		tv_pos_dir /= tf_speed
		tf_speed = MATH_FloatMin(tf_speed, 10.0)
	}

	tv_pos_dir *= 5.0

//	tv_pos_dir += tv_pos

//	if (ti_GFX_Smoke == -1)
	{
		ti_GFX_Smoke = GFX_Add(13)																// Create the boum
		
		GFX_MaterialSet(ti_GFX_Smoke, get_SFX_light_and_smoke, -1)						// met le materiau
		GFX_Seti(ti_GFX_Smoke, 13101, 8)															// Materiau 0

		if (ti_flag_use_speed)
		{
			GFX_Seti(ti_GFX_Smoke, 13100, 30)															// *Buffer number of sprite
			GFX_Seti(ti_GFX_Smoke, 13106, 30)												// *number of sprite to generate
		}
		else
		{	
			GFX_Seti(ti_GFX_Smoke, 13100, 15)															// *Buffer number of sprite
			GFX_Seti(ti_GFX_Smoke, 13106, 15)												// *number of sprite to generate
		}
	
		GFX_Setf(ti_GFX_Smoke, 13003, 0.1)															// Time fase 1
		GFX_Setf(ti_GFX_Smoke, 13004, 0.75)															// Time fase 2
	
		GFX_Seti(ti_GFX_Smoke, 13107, 0)															// Sprites non triés
	
		GFX_FlagSet(ti_GFX_Smoke, 0 , 1)
		GFX_FlagSet(ti_GFX_Smoke, 2 , 1)
		
		GFX_Setf(ti_GFX_Smoke, 13012, 0.75)														// Time random
	
		GFX_Setf(ti_GFX_Smoke, 13005, 0.2)														// Creation size min
		GFX_Setf(ti_GFX_Smoke, 13006, 0.3)														// Creation size max
		GFX_Setv(ti_GFX_Smoke, 13201, tv_pos_dir + cvector(-1.0, -1.0, -1.0))							// Speed min
		GFX_Setv(ti_GFX_Smoke, 13202, tv_pos_dir + cvector(1.0, 1.0, 1.0))								// Speed max
		GFX_Setf(ti_GFX_Smoke, 13009, tf_speed * 0.75)							// Norm speed min
		GFX_Setf(ti_GFX_Smoke, 13010, tf_speed * 1.25)									// Norm speed max
		GFX_Setv(ti_GFX_Smoke, 13203, cvector(0.02, 0.02, 0.05))					// friction speed
		GFX_Setf(ti_GFX_Smoke, 13000, 0.25)														// Growing speed min
		GFX_Setf(ti_GFX_Smoke, 13001, 0.5)														// Growing speed max
		GFX_Setf(ti_GFX_Smoke, 13002, 0.0001)													// Friction Grow

		GFX_Setf(ti_GFX_Smoke, 13007, 0.0)														// Gravity

		GFX_Seti(ti_GFX_Smoke, 13103, COLOR_Blend(0x40879E8B, 0x40000000 | (WOR_AmbiantColGet(0) & 0x00FFFFFF), 0.5))	// Color fase 0
		GFX_Seti(ti_GFX_Smoke, 13104, COLOR_Blend(0x20879E8B, 0x20000000 | (WOR_AmbiantColGet(0) & 0x00FFFFFF), 0.5))	// Color fase 1
		GFX_Seti(ti_GFX_Smoke, 13105, COLOR_Blend(0x00879E8B, WOR_AmbiantColGet(0) & 0x00FFFFFF, 0.5))	// Color fase 2
		
		GFX_Setf(ti_GFX_Smoke, 13008, 0.001)														// generation rate
	
		GFX_Setv(ti_GFX_Smoke, 13205, Cv_NullVector)										// Mainposspeed
		GFX_Setv(ti_GFX_Smoke, 13206, Cv_NullVector)										// Mainpossfriction
	}
	
	tv_wind = Cv_NullVector
	GFX_Setv(ti_GFX_Smoke, 13204, tv_wind)												// wind

	tv_pos = @ao_IK_bones[ti_index][3] OBJ_PosGet()
	tv_pos -= tv_wind * TIME_GetDt()
	GFX_Setv(ti_GFX_Smoke, 13200, tv_pos) 								// Creation Pos
	GFX_Setv(ti_GFX_Smoke, 13207, cvector(0.5, 0.0, 0.0))	// CreaPosAxe X
	GFX_Setv(ti_GFX_Smoke, 13208, cvector(0.0, 0.5, 0.0))	// CreaPosAxe Y
	GFX_Setv(ti_GFX_Smoke, 13209, cvector(0.0, 0.0, 0.25))	// CreaPosAxe Z
}


procedure_local void PNJ_Raptor_Test_Head_Col()
{
	int		ti_i			
	int		ti_flag_zde_fight_already_on
	
	vector	tv_temp

	if (raptor_type != C_ID_Raptor)
		return
		
	if (ACT_ActionGet() != Action_Attaque_Colonne)
		return

	ti_flag_zde_fight_already_on = COL_ColSetActivationGet() & C_bit_zde_fight
	COL_ColSetActivationSet(C_bit_zde_fight, none)	
	
	tv_temp	= v_look_head_pos
	tv_temp.z -= 0.25
	COL_ZonePosSet(C_zde_fight, tv_temp / OBJ_ZoomGet())

	if (COL_ZDE_ZDECollide(o_main_actor, C_zde_fight, C_zde_corps))
		EVENT_AddEventPaf(C_EVENT_FILTER_All, C_PAF_KK_Fort, OBJ_Me(), Cf_EVENT_Duree_1Trame, o_main_actor, 6.0 * PAF_Unit, OBJ_SightGet())
	
	if ( ! ti_flag_zde_fight_already_on )
		COL_ColSetActivationSet(none, C_bit_zde_fight)	
}


procedure_local int PNJ_Raptor_Check_Death()
{
	if (raptor_type != C_ID_Tyranosaure)
		return(faux)

	if ( SND_M_GetGameMode == SND_Cte_ModeDying )
		return(vrai)
		
	return(faux)		
}