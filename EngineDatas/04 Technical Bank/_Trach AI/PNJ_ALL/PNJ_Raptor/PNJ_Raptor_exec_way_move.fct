#include "PNJ_Raptor_defines.var"

int				ti_flag_ok
int				ti_i

float			tf_move_length
float			tf_dot_product

vector		tv_move_dir

message	tmsg_m

vector		tv_X
vector		tv_Y

object		to_head
object		to_father

switch(ACT_ActionGet())
{
	case Action_Demi_Tour_D_deb :
	case Action_Demi_Tour_G_deb :
	case Action_Demi_Tour_Rapide :
		if ( ! ACT_ActionFinished() )
		{
			i_way_moving = vrai
			f_joy_norm = 0.0
			return
			break
		}
		
	default:
		if (i_way_status & Ci_WAY_STATUS_USE_NETWORK && i_way_status & Ci_WAY_STATUS_NO_NET_WAY)
		{
			// Pas de chemin
			i_way_moving = faux
		}
//		else if (o_current_wp && @o_current_wp OBJ_CapaTest(Ci_Capa_Stop))
//		{
//			// Ce WP Force l'arret
//			i_way_moving = faux
//		}
		else
		{
//			ti_flag_ok = vrai
//		
//			if (i_way_computation_mode == Ci_WAY_MODE_FIGHT && i_perceived_best_actor_index != -1 && (i_way_status & Ci_WAY_STATUS_NO_WALL_BETWEEN_ME_AND_POS))
//			{
//				to_father = @ao_perceived_actor[i_perceived_best_actor_index] OBJ_HierarchyGet()
//				if (to_father && @to_father AI_IsModel("Interactive_Objects/Interactive_Raft"))
//				{
////					tv_Y = @"Interactive_Objects/Interactive_Raft" to_father v_speed
////					tv_Y.z = 0.0
////					MATH_VecSetHorzNormalize(tv_Y)
////					
////					tv_X.x = tv_Y.y
////					tv_X.y = - tv_Y.x
////					tv_X.z = 0.0
////				
////					v_way_destpos = PNJ_Raptor_Circumvent_Wp_If_Bad_Sight(OBJ_PosGet(), v_way_destpos, tv_Y, tv_X, 2.5)
//		
//					if (MATH_VecDotProduct(@"Interactive_Objects/Interactive_Raft" to_father v_speed, OBJ_PosGet() - @to_father OBJ_PosGet()) > 0.0)
//					{
//						ti_flag_ok = faux
//						i_way_moving = faux
//					}
//				}
//			}
//		
//			if (ti_flag_ok)
			{
				if (o_current_wp && @o_current_wp OBJ_CapaTest(Ci_Capa_Stop))
					v_way_destpos = @o_current_wp OBJ_PosGet()
			
//				if (raptor_type != C_ID_Tyranosaure && ! i_flag_dont_use_grid && ! i_flag_saut )
				if (raptor_type == C_ID_Raptor && ! i_flag_dont_use_grid && ! i_flag_saut )
				{
					tv_move_dir	 = v_way_destpos
					tv_move_dir -= OBJ_PosGet()
					tv_move_dir.z = 0.0
				
					tf_move_length = MATH_VecNorm(tv_move_dir)
					if (tf_move_length > 0.01)
					{
						tv_move_dir	/= tf_move_length
		
						for (ti_i = 0; ti_i < i_budy_nb; ti_i++)
						{
							if (ao_budy[ti_i] == OBJ_Me())
								continue

							if (i_perceived_best_actor_index != -1 && ao_budy[ti_i] == ao_perceived_actor[i_perceived_best_actor_index])
								continue
						
							tf_dot_product = MATH_AbsFloat(MATH_VecDotProduct(OBJ_SightGet(), @ao_budy[ti_i] OBJ_SightGet()))
							tf_dot_product = 2.0 - tf_dot_product
							tf_dot_product *= OBJ_ZoomGet()
				
							if (WAY_LIB_Collide_Sphere(OBJ_PosGet(), tv_move_dir, tf_move_length, 0.0, @ao_budy[ti_i] OBJ_PosGet(), tf_dot_product, tv_X))
							{
								@get_global WAY_LIB_TEST_GRID = vrai
								i_way_status |= Ci_WAY_STATUS_OCCLUDER_USED
								v_way_destpos = WAY_LIB_Get_Sphere_Pos(OBJ_PosGet(), v_way_destpos, OBJ_SightGet(), 0.0, @ao_budy[ti_i] OBJ_PosGet(), tf_dot_product, OBJ_SightGet(), OBJ_HorizonGet(), faux)
								@get_global WAY_LIB_TEST_GRID = faux
							}
						}
					}
				}
	
				AI_Execute("PNJ_Raptor_exec_way_compute")

				AI_Execute("PNJ_Raptor_DBG_Trace_Way")
			}
		}
}

tv_Y = v_way_case_dest
tv_Y -= OBJ_PosGet()
tv_Y.z = 0.0

f_joy_norm = MATH_VecNorm(tv_Y)

if (i_way_moving && f_joy_norm)
	f_joy_norm = MATH_FloatLimit(f_joy_norm, 0.0, 1.0)
else
	f_joy_norm = 0.0


