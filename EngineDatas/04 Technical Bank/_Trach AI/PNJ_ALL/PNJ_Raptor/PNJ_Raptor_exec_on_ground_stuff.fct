#include "PNJ_Raptor_defines.var"

int				ti_i
int				ti_rank
int				ti_flag_collision

float			tf_dot_product
float			tf_bras_de_levier

vector		tv_pos
vector		tv_traction
vector		tv_temp
vector		tv_temp2

object		to_collide_object

if (OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Dyna))
{
	ti_flag_collision = faux
	
	if (f_neck_col_duration)
	{
		tf_dot_product = MATH_VecDotProduct(MATH_VecNormalize(v_look_head_pos - @ao_head_bones[i_head_bone_nb - 1] OBJ_PosGet()), MATH_VecNormalize(@ao_head_bones[0] OBJ_PosGet() - @ao_head_bones[i_head_bone_nb - 1] OBJ_PosGet()))
		tf_dot_product = 1.0 - tf_dot_product
	
		if (tf_dot_product > 0.2)
		{
			ti_flag_collision = vrai
		
			tv_traction = v_neck_col_normale
			tv_traction *= tf_dot_product * 10.0
			tv_traction.z = 0.0
			tv_traction += DYN_TractionVectorGet()
				
			DYN_TractionSet(tv_traction)
	
			tv_temp = v_look_head_pos
	//		tv_temp += MATH_VecDotProduct(OBJ_PosGet() - tv_temp, v_neck_col_normale) * v_neck_col_normale
			tv_temp += MATH_VecDotProduct(@ao_head_bones[i_head_bone_nb] OBJ_PosGet() - tv_temp, v_neck_col_normale) * v_neck_col_normale
			tv_temp.z = OBJ_PosGet().z		
			
	//		tv_temp2 = MATH_VecCrossProduct(-v_neck_col_normale, tv_temp - OBJ_PosGet())
			tv_temp2 = MATH_VecCrossProduct(-v_neck_col_normale, tv_temp - @ao_head_bones[i_head_bone_nb] OBJ_PosGet())
	
			f_body_rot_speed = MATH_FloatBlend(f_body_rot_speed, tv_temp2.z, TIME_GetDt())
		}
	}
	
	if (f_body_rot_speed)
	{
		if (!ti_flag_collision)
			f_body_rot_speed = MATH_FloatBlend(f_body_rot_speed, 0.0, 6.0 * TIME_GetDt())
	
		tv_pos = @ao_head_bones[i_head_bone_nb] OBJ_PosGet()
		tv_temp = MATH_VecGlobalToLocal(OBJ_PosGet() - tv_pos)
		OBJ_RotateLocalZ(f_body_rot_speed * TIME_GetDt())
		tv_temp = MATH_VecLocalToGlobal(tv_temp)
		tv_temp += tv_pos
		tv_temp.z = OBJ_PosGet().z
		OBJ_PosSet(tv_temp)
	}
}