#include "PNJ_Raptor_defines.var"

int				ti_i
int				ti_flag_orientation
int				ti_freq
int				ti_action
int				ti_flag_reception

float			tf_coef
float			tf_friction
float			tf_amplitude
float			tf_action_duration
float			tf_delay

vector		tv_temp

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux

	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_saut)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_saut

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()

	tf_friction = Cf_Raptor_jump_friction
	tf_amplitude = 0.0 // 1.5

	// CALCUL DE L'IMPULSION MIN
	f_jump_duration = 0.0
	tv_temp = GST_Climb_ImpulsionGet_Friction(OBJ_PosGet(), v_jump_pos, DYN_GravityVectorGet(), tf_friction, f_jump_duration, faux, tf_amplitude)
	
	// CALCUL DE L'IMPULSION TENDUE
	f_jump_duration *= 0.8
	tv_temp = GST_Climb_ImpulsionGet_Friction(OBJ_PosGet(), v_jump_pos, DYN_GravityVectorGet(), tf_friction, f_jump_duration, faux, tf_amplitude)

	DYN_SpeedSetVector(tv_temp)
	DYN_FrictionVectorSet(cvector( tf_friction, tf_friction, 0.0))

	COL_ColSetActivationSet(none, C_bit_zdm_pied)
	COL_ColMapActivationSet(none, all)

	f_time_start_etat = 0.0
}
else
{
	DYN_SpeedSetVector(v_dyn_speed)
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE =======================================================================================================
AI_Execute("PNJ_Raptor_exec_check_sound")

AI_Execute("PNJ_Raptor_exec_check_vision")

AI_Execute("PNJ_Raptor_exec_check_collision")

AI_Execute("PNJ_Raptor_exec_check_paf")

AI_Execute("PNJ_Raptor_exec_get_best_interet")

// COMPORTEMENT =================================================================================================
ti_flag_orientation = vrai

if (MSG_GlobalIsValid(mid_best_interet))
{
	i_flag_look = vrai
	i_flag_look_best_interet = vrai

	tf_delay	= TIME_Get() - EVENT_InteretSeenTimeGet(mid_best_interet)
	if (tf_delay < 1.5)
		EVENT_InteretStatusSet(mid_best_interet, C_EVENT_InteretStatusLock)
}
else if (o_next_next_wp)
{
	i_flag_look = vrai
	v_look_pos = @o_next_next_wp OBJ_PosGet()
	v_look_pos.z += 1.0
}

f_jump_duration -= TIME_GetDt()

if (f_jump_duration - (2.0 * TIME_GetDt()) <= 0.0)
{
	COL_ColSetActivationSet(C_bit_zdm_pied, none)
	COL_ColMapActivationSet(all, none)
}

ti_flag_reception = faux

if (f_time_start_etat && COL_CollideType(COL_C_Ground))
{
	ti_flag_reception = vrai
}
else if (f_jump_duration <= 0.0)
{
	ti_flag_reception = vrai
	OBJ_PosSet(v_jump_pos)
}

if (ti_flag_reception)
{
	DYN_FrictionVectorSet(Cv_Raptor_friction)	

	if (i_flag_dont_use_grid)
	{
		OBJ_PosSet(v_jump_pos)
		DYN_SpeedSetVector(Cv_NullVector)
	}

	macro_change_etat(fct_main_etat)
}

if (ti_flag_orientation)
	OBJ_BankingGeneralSet(MATH_VecBlendRotate(OBJ_SightGet(), v_jump_pos - OBJ_PosGet(), 8.0 * TIME_GetDt()), Cv_VerticalVector)

