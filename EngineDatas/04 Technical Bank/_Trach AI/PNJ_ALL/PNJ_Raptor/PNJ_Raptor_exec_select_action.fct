#include "PNJ_Raptor_defines.var"

float		tf_dot_product
float		tf_computed_speed_coef
float		tf_time
float		tf_cine_speed
float		tf_sqr_dist
float		tf_max_speed
float		tf_chase_speed
float		tf_acceleration

vector	tv_new_sight
vector	tv_new_banking
vector	tv_temp
vector	tv_speed
vector	tv_hor_dyn_speed

int			ti_index
int			ti_action_num
int			ti_ani_frame_num
int			ti_shout_action
int			ti_flag_could_run
int			ti_flag_will_jump
int			ti_flag_should_slide

object	to_main_actor
object	to_torse
object	to_gao

#define Cf_TREX_Acceleration					5.0
#define Cf_TREX_Decceleration					20.0

#ifdef SHOW_RASTER
DBG_StartRaster(4, "Bezier Move et Anims")
#endif

i_flag_select_action_done = vrai

ti_action_num = ACT_ActionGet()

ti_flag_should_slide = faux

// ACTION DETERMINEE PAR UN WP DU RESEAU
if (f_use_current_wp_action_duration)
{
	ti_action_num = o_current_wp.des_int1
	switch(ti_action_num)
	{
		case Action_Cri :
		case Action_Cri_Haut :	

			// CRI
			switch(ACT_ActionGet())
			{
				case Action_Cri :
				case Action_Cri_Haut :
					if (ACT_ActionFinished())
						f_use_current_wp_action_duration = 0.0
					break
					
				default:
					i_SND_roar_index = Ci_SND_Choose_Jack
					i_flag_cri = vrai
			}
			
			break

		default:

			i_flag_dont_change_action = vrai	
	
			if (f_use_current_wp_action_duration > 0.0)
			{
				// LOOP ACTION
				f_use_current_wp_action_duration -= MATH_FloatMin(f_use_current_wp_action_duration, TIME_GetDt())
				PNJ_Raptor_ActionSet(ti_action_num)
			}
			else
			{
				// ONE SHOT ACTION
				if (ACT_ActionGet() != ti_action_num)
				{
					PNJ_Raptor_ActionSet(ti_action_num)
				}
				else if (ACT_ActionFinished())
				{
					i_flag_dont_change_action = faux
					f_use_current_wp_action_duration = 0.0
				}
			}	
	}
}

// ACTIONS A NE PAS INTERROMPRE =====================================
switch(ACT_ActionGet())
{
	case Action_Attaque_Colonne :
	case Action_Attaque_Colonne_Rex :

		if ( ! ACT_ActionFinished()	)
		{
			i_flag_look = faux
			i_flag_look_best_interet = faux
			i_flag_dont_change_action = vrai
		}
		
		break

	case Action_Saut_Pied_G :
	case Action_Saut_Pied_D :

		if (i_flag_alien_move)
		{
			v_jump_bassin_reception_speed.z = 0.0
			f_wanted_speed = MATH_VecNorm(v_jump_bassin_reception_speed)

			PNJ_Raptor_Bezier_Move(f_wanted_speed)
		}
		else
		{
			DYN_SpeedSetVector(v_jump_bassin_reception_speed)
			f_wanted_speed = DYN_SpeedGet()
		}

		i_flag_dont_change_action = vrai
		PNJ_Raptor_ActionSet(i_jump_reception_action)
		break

	case Action_Demi_Tour_G_deb :
	case Action_Demi_Tour_G_deb_tr_att :
	case Action_Demi_Tour_D_deb :
	case Action_Demi_Tour_D_deb_tr_att :
	case Action_Demi_Tour_Rapide :
	case Action_Demi_Tour_Rapide_tr_course :

	case Action_Rex_Cri_G :
	case Action_Rex_Cri_D :
	case Action_Coup_Mur_G : 
	case Action_Coup_Mur_D : 

		if ( ! ACT_ActionFinished() )
		{
			f_wanted_speed = 0.0
			i_flag_dont_change_action = vrai
		}
		break


	case Action_Saut_fin :
	case Action_Saut_fin_surplace :
	case Action_Grosse_Reception :		

		if (!ACT_ActionFinished())
		{
			f_wanted_speed = DYN_SpeedGet()
			PNJ_Raptor_Bezier_Move(f_wanted_speed)
			i_flag_dont_change_action = vrai
		}
		
		break

	case Action_Agonie_fin_lent :
	case Action_Agonie_fin_lent_tr_att :
	case Action_Agonie_fin_rapide :
	case Action_Agonie_fin_rapide_tr_att :

		f_wanted_speed = DYN_SpeedGet()

		if (!ACT_ActionFinished())
		{
			i_flag_dont_change_action = vrai
			if (i_flag_alien_move)
				PNJ_Raptor_Bezier_Move(f_wanted_speed)
		}
		break

	case Action_Stop :
	case Action_Stop_tr_att :
	case Action_Stop_Rapide :
	case Action_Stop_Rapide_tr_att :

		f_wanted_speed = DYN_SpeedGet()

		if (!ACT_ActionFinished())
		{
			i_flag_dont_change_action = vrai
			PNJ_Raptor_Bezier_Move(f_wanted_speed)
		}
		break

	case Action_Rex_Enjambe :
	case Action_Rex_Enjambe_tr_att :
	case Action_Rex_Enjambe_tr_marche :

		f_wanted_speed = DYN_SpeedGet()

		if (!ACT_ActionFinished())
		{
			i_flag_dont_change_action = vrai
			ACT_LIB_ActionFrequencyMultiply(1.0)
		}
		break

	case Action_Paf_Petit_Sol_G :
	case Action_Paf_Petit_Sol_D :
	case Action_Paf_Petit_Sol_Dos :
	case Action_Paf_Petit_Sol_Face :

		if ( ! ACT_ActionFinished() )
		{
			f_wanted_speed = 0.0
			i_flag_dont_change_action = vrai
		}
		break
}

if ( i_flag_cri && ! i_flag_dont_change_action )
{
	f_wanted_speed = 0.0

	i_flag_perfect_look = vrai

	if (raptor_type == C_ID_Tyranosaure)
	{
		PNJ_Raptor_Check_Head_Col()
		
		if (i_flag_head_search)
			ti_shout_action = Action_Cri
		else
			ti_shout_action = Action_Cri_Haut
	}
	else
	{
		ti_shout_action = Action_Cri
	}

	switch(ACT_ActionGet())
	{
		case Action_Cri :
		case Action_Cri_Haut :
			if (ACT_ActionFinished())
			{
				i_flag_cri = faux
			}
			else
			{
				i_flag_dont_change_action = vrai

				PNJ_Raptor_ActionSet(ti_shout_action)
				ACT_LIB_ActionFrequencyMultiply(f_anim_speed_coef)
		
				if (raptor_type == C_ID_Tyranosaure)
				{
					ti_ani_frame_num = ANI_CurrentFrameGet(0)
					if (ti_ani_frame_num > 10 && ti_ani_frame_num < 160)
					{
						if (f_me_to_main_dist < 25.0)
						{
							LIBGFX_RambleCam(0.01)
							i_flag_zoom_smooth = vrai
						}
						
//						if (f_me_to_main_dist < Cf_SND_Groupe_2_shout_fade_dist)
//						{
//							if ( ! i_SND_flag_fade_group_2 )
//								SND_M_FadeGroup(SND_Cte_GrpMusic, Cf_SND_Groupe_2_shout_vol, Cf_SND_Groupe_2_shout_fade_delay)
//							i_SND_flag_fade_group_2 = 2
//						}
					}
				}
			}
			break

		default:
		
			if (raptor_type == C_ID_Raptor)
				@get_global f_time_last_raptor_roar = TIME_Get()	

			if (i_SND_roar_index == -1)
			{
				if (i_perceived_best_actor_index != -1 && ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Joueur)
					i_SND_roar_index = Ci_SND_Choose_Jack
				else
					i_SND_roar_index = Ci_SND_Choose_Another
			}
	
			PNJ_Raptor_ActionSet(ti_shout_action)
			i_flag_dont_change_action = vrai
			
			f_anim_speed_coef = MATH_RandFloat(0.8, 1.2)
			ACT_LIB_ActionFrequencyMultiply(f_anim_speed_coef)
	
			ACT_PartialActionOnOff(faux)
			break
	}
}

if (i_flag_dont_change_action)
{
	// ON NE CHANGE PAS L'ACTION !!!
}
else
{
	ti_flag_could_run = vrai
	
	if (i_way_status & (Ci_WAY_STATUS_GRID_USED | Ci_WAY_STATUS_BEZIER_BIG_TURN) )
		ti_flag_could_run = faux

	switch(raptor_type)
	{
		case C_ID_Tyranosaure :

			tf_acceleration = 1.5

			if (f_force_dont_move_duration)
			{
				f_wanted_speed = 0.0
			}
			else if (!f_joy_norm)
			{
				f_wanted_speed = 0.0
			}
//			else if (1)
//			{
//				if (IO_KeyPressed(VK_DOWN))
//					f_wanted_speed -= MATH_FloatMin(f_wanted_speed, 4.0 * TIME_GetDt())
//				else if (IO_KeyPressed(VK_UP))
//					f_wanted_speed += MATH_FloatMin(af_action_speed[i_normal_action_last_index] - f_wanted_speed, 4.0 * TIME_GetDt())
//			}
			else if (i_etat_courant == ETAT_CINE_VALA)	
			{
				tv_temp = am_CineStack[0].msg_vec1
				tf_cine_speed = tv_temp.x
				if (tf_cine_speed)
				{
					if (f_wanted_speed > tf_cine_speed)
						f_wanted_speed = MATH_FloatBlend(f_wanted_speed, tf_cine_speed, 4.0 * TIME_GetDt())
					else
						f_wanted_speed += MATH_FloatMin(tf_cine_speed - f_wanted_speed, Cf_TREX_Acceleration * TIME_GetDt())
				}
				else
				{
					f_wanted_speed = MATH_FloatBlend(f_wanted_speed, af_action_speed[i_normal_action_first_index], 4.0 * TIME_GetDt())
				}
			}
			else if (i_flag_chase_target && i_perceived_best_actor_index != -1)
			{
				// CHASE MODE !!! =======================================	
				i_flag_chase_target = faux
				
				tf_acceleration	 = f_chase_dist_min
		
				if (@o_main_actor OBJ_HierarchyGet())
//					tf_max_speed	= af_action_speed[i_normal_action_last_index]
					tf_max_speed = af_action_speed[i_normal_action_first_index + 2]
				else
					tf_max_speed = af_action_speed[i_normal_action_first_index + 1]
			
				if (f_wanted_speed > tf_max_speed)
					f_wanted_speed = MATH_FloatBlend(f_wanted_speed, tf_max_speed, 4.0 * TIME_GetDt())
				else
					f_wanted_speed += MATH_FloatMin(tf_max_speed - f_wanted_speed, tf_acceleration * TIME_GetDt())
				// CHASE MODE =========================================
			}
			else if ( ti_flag_could_run && (i_flag_run || f_force_run_duration))
			{
				if (@o_main_actor OBJ_HierarchyGet())
//					tf_max_speed	= af_action_speed[i_normal_action_last_index]
					tf_max_speed = af_action_speed[i_normal_action_first_index + 2]
				else
					tf_max_speed = af_action_speed[i_normal_action_first_index + 1]
			
				if (f_wanted_speed > tf_max_speed)
					f_wanted_speed = MATH_FloatBlend(f_wanted_speed, tf_max_speed, 4.0 * TIME_GetDt())
				else
					f_wanted_speed += MATH_FloatMin(tf_max_speed - f_wanted_speed, tf_acceleration * TIME_GetDt())
			}
			else
			{
				if (f_wanted_speed > af_action_speed[i_normal_action_first_index])
					f_wanted_speed = MATH_FloatBlend(f_wanted_speed, af_action_speed[i_normal_action_first_index], 4.0 * TIME_GetDt())
				else
					f_wanted_speed += MATH_FloatMin(af_action_speed[i_normal_action_first_index] - f_wanted_speed, tf_acceleration * TIME_GetDt())
			}
		
			PNJ_Raptor_Check_Head_Col()

			if (f_joy_norm && (i_way_wp_nb || i_way_status & Ci_WAY_STATUS_UNREACHABLE_POSITION) && DYN_SpeedGet() > 2.0)
			{
				if (i_way_wp_nb <= 1)
					ti_flag_should_slide = vrai
				else if (o_next_wp && @o_next_wp OBJ_CapaTest(Ci_Capa_Stop))
					ti_flag_should_slide = vrai
				else if (o_next_wp && o_next_next_wp && (WAY_LinkCapaGet(n_net, o_next_wp, o_next_next_wp) & Ci_Capa_Link_Jump) )
					ti_flag_should_slide = vrai

				if (ti_flag_should_slide)
				{
					// ON CHERCHE A DETECTER SI UN DERAPAGE NOUS AMENE AU DELA DE NOTRE POINT DEST	
				
					tv_hor_dyn_speed = v_dyn_speed
					tv_hor_dyn_speed.z = 0.0
					tf_time = DYN_LIB_Time_To_Reach_Speed(tv_hor_dyn_speed, Cf_Raptor_friction, Cv_NullVector, 0.05)
					if (tf_time != Cf_Infinit)
					{
						tv_temp = v_way_case_dest
						tv_temp -= OBJ_PosGet()
						tv_temp.z = 0.0
						
						tf_sqr_dist = MATH_VecDotProduct(tv_temp, tv_temp)
					
						tv_speed = tv_hor_dyn_speed
						tv_temp = DYN_LIB_Position_After_N_Seconds(OBJ_PosGet(), tv_speed, cvector(f_friction, f_friction, 0.0), Cv_NullVector, tf_time, 0.0)
						tv_temp -= OBJ_PosGet()

						tf_dot_product = MATH_VecDotProduct(tv_temp, tv_temp) 

//						DBG_RenderVector(OBJ_PosGet() + cvector(0.0, 0.0, 0.5), tv_temp, color_cyan)	
					
//						ti_index = STR_CreateText("Vitesse ", cvector(0.1, 0.1, 0.0), 0.0)
//						STR_AppendFloat(ti_index, MATH_VecNorm(tv_hor_dyn_speed), 2)
//						STR_AppendText(ti_index, " => ")
//						STR_AppendFloat(ti_index, tf_time, 2)
//						STR_AppendText(ti_index, " secondes soit ")
//						STR_AppendFloat(ti_index, MATH_VecNorm(tv_temp), 2)
//						STR_AppendText(ti_index, " metres")

						if (tf_dot_product < tf_sqr_dist)
						{
							ti_flag_should_slide = faux
						}
						else
						{
							// DERAPAGE
							ti_flag_should_slide = vrai
							f_wanted_speed = MATH_VecNorm(tv_hor_dyn_speed)
							DYN_FlagsSet(none, DYN_C_SkipFrictionWhenSpeedFromAnim)
						}
					}
				}
			}

			// DIFFICULTE DYNAMIQUE
		 	if (i_etat_courant == ETAT_FIGHT && @"univ" STATS[ @"univ" STATS_WorldID][ STATS_NbMortJoueur ] > 1 && ! @o_main_actor OBJ_HierarchyGet() )
		 	{
		 		if (AI_TriggerIsValid(trigger_DD))
		 		{
			 		if (call_trigger(trigger_DD))
			 			f_wanted_speed = MATH_FloatMin(f_wanted_speed, 3.0)
			 	}
			 	else if (difficulte_dynamique)
			 	{
					f_wanted_speed = MATH_FloatMin(f_wanted_speed, 3.0)
				}
			}

			break	
	
		default:

			if (raptor_type == C_ID_Galiminus && f_force_requin_mode_duration)
			{
				f_wanted_boost_duration = 0.0
				f_wanted_boost_delay = MATH_RandFloat(3.0, 5.0)
				
				tf_computed_speed_coef = 1.0
			}
			else if (f_wanted_boost_duration)
			{
				f_wanted_boost_duration -= MATH_FloatMin(f_wanted_boost_duration, TIME_GetDt())
				if ( ! f_wanted_boost_duration ) 
					f_wanted_boost_delay = MATH_RandFloat(3.0, 5.0)

				tf_computed_speed_coef = 1.5
			}
			else
			{
				if (raptor_type == C_ID_Galiminus)
				{	
					f_wanted_boost_delay -= MATH_FloatMin(f_wanted_boost_delay, TIME_GetDt())
					if ( ! f_wanted_boost_delay )
						f_wanted_boost_duration = MATH_RandFloat(1.0, 2.0)
				}

				tf_computed_speed_coef = 1.0
			}

			switch(ACT_ActionGet())
			{
				case Action_Normal_Course :
				case Action_Normal_Marche_Rapide :
				case Action_Stop_Rapide :
				
					switch(i_way_computation_mode)
					{
						case Ci_WAY_MODE_BALADE :
						case Ci_WAY_MODE_REQUIN :
							break
							
						default:
						
							if ( ! f_force_requin_mode_duration && ! (i_way_status & (Ci_WAY_STATUS_OCCLUDER_USED | Ci_WAY_STATUS_LOCAL_RES_USED) ) )
							{
								if (o_next_wp && o_next_next_wp && (WAY_LinkCapaGet(n_net, o_next_wp, o_next_next_wp) & Ci_Capa_Link_Jump) )
									ti_flag_will_jump = vrai
								else
									ti_flag_will_jump = faux
					
								if ( ACT_ActionItemGet() )
								{
									if ( i_way_wp_nb <= 1 || ti_flag_will_jump )
									{
										f_way_tolerance_sqr_dist = 7.0
										f_way_tolerance_sqr_dist *= OBJ_ZoomGet()
										f_way_tolerance_sqr_dist *= f_way_tolerance_sqr_dist
										
										tv_temp = v_way_destpos
										tv_temp -= OBJ_PosGet()
										tv_temp.z = 0.0
										
										tf_sqr_dist = MATH_VecDotProduct(tv_temp, tv_temp)
										if (tf_sqr_dist < f_way_tolerance_sqr_dist)
											f_joy_norm = 0.0
									}
								}
								else if (i_way_wp_nb <= 1)
								{
									f_way_tolerance_sqr_dist = 4.0
									f_way_tolerance_sqr_dist *= OBJ_ZoomGet()
									f_way_tolerance_sqr_dist *= f_way_tolerance_sqr_dist
									
									tv_temp = v_way_destpos
									tv_temp -= OBJ_PosGet()
									tv_temp.z = 0.0
									
									tf_sqr_dist = MATH_VecDotProduct(tv_temp, tv_temp)
									if (tf_sqr_dist < f_way_tolerance_sqr_dist)
										ti_flag_could_run = faux
								}
							}
					}
					
					break
			}


			if (!f_joy_norm)
			{
				f_wanted_speed = 0.0
			}
//			else if (1.0)
//			{
////				if (IO_KeyPressed(VK_DOWN))
////					f_wanted_speed -= MATH_FloatMin(f_wanted_speed, 4.0 * TIME_GetDt())
////				else if (IO_KeyPressed(VK_UP))
////					f_wanted_speed += MATH_FloatMin(af_action_speed[i_normal_action_last_index] - f_wanted_speed, 4.0 * TIME_GetDt())
//
//				f_wanted_speed = af_action_speed[i_normal_action_last_index]
//			}
			else if (i_etat_courant == ETAT_CINE_VALA)	
			{
				tv_temp = am_CineStack[0].msg_vec1
				tf_cine_speed = tv_temp.x
				if (tf_cine_speed)
				{
					if (f_wanted_speed > tf_cine_speed)
						f_wanted_speed = MATH_FloatBlend(f_wanted_speed, tf_cine_speed, 4.0 * TIME_GetDt())
					else
						f_wanted_speed += MATH_FloatMin(tf_cine_speed - f_wanted_speed, Cf_TREX_Acceleration * TIME_GetDt())
				}
				else
				{
					f_wanted_speed = MATH_FloatBlend(f_wanted_speed, af_action_speed[i_normal_action_first_index], 4.0 * TIME_GetDt())
				}
			}
			else if (i_etat_courant == ETAT_GRAB)
			{
				PNJ_Raptor_ActionSet(Action_Fight_Secoue)
				if (o_grab_actor == o_main_actor)
					tf_computed_speed_coef = 0.33
				else
					tf_computed_speed_coef = 1.0

				f_wanted_speed = 1.3 / f_wanted_speed_modifier * tf_computed_speed_coef
			}
			else if ( ti_flag_could_run && (i_flag_run || f_force_run_duration) )
			{
				if (i_flag_blesse)
					f_wanted_speed = MATH_FloatBlend(f_wanted_speed, af_action_speed[i_blesse_action_last_index], 6.0 * TIME_GetDt())
				else if (f_force_requin_mode_duration && ! TIME_Elapsed(f_time_near_shot, 0.5) )
					f_wanted_speed = MATH_FloatBlend(f_wanted_speed, af_action_speed[i_normal_action_last_index] * (1.4 / f_wanted_speed_modifier), 20.0 * TIME_GetDt())
				else if (f_wanted_speed > af_action_speed[i_normal_action_last_index] * tf_computed_speed_coef)
					f_wanted_speed = MATH_FloatBlend(f_wanted_speed, af_action_speed[i_normal_action_last_index] * tf_computed_speed_coef, 6.0 * TIME_GetDt())
				else
					f_wanted_speed += MATH_FloatMin((af_action_speed[i_normal_action_last_index] * tf_computed_speed_coef) - f_wanted_speed, 10.0 * TIME_GetDt())
			}
			else if (i_etat_courant == ETAT_SEARCH)
			{
				f_wanted_speed = MATH_FloatBlend(f_wanted_speed, af_action_speed[i_renifle_action_first_index], 6.0 * TIME_GetDt())
			}
			else
			{
				if (i_flag_blesse)
					f_wanted_speed = MATH_FloatBlend(f_wanted_speed, af_action_speed[i_blesse_action_first_index], 6.0 * TIME_GetDt())
				else
					f_wanted_speed = MATH_FloatBlend(f_wanted_speed, af_action_speed[i_normal_action_first_index] * tf_computed_speed_coef, 6.0 * TIME_GetDt())
			}
	}
	
	if (f_current_wp_speed)
		f_wanted_speed = MATH_FloatMin(f_wanted_speed, f_current_wp_speed)

	if (f_wanted_speed && PNJ_Raptor_Bezier_Move(f_wanted_speed * f_wanted_speed_modifier) )
	{
		tv_new_sight = OBJ_SightGet()

		if (ti_flag_should_slide)
		{
			// DERAPAGE
			if (i_flag_blesse)
				PNJ_Raptor_ActionSet(Action_Blesse_Attente)
			else if (i_flag_head_search)
				PNJ_Raptor_ActionSet(Action_Renifle_Attente)
			else
				PNJ_Raptor_ActionSet(Action_Normal_Attente)
		}
		else if (i_flag_recul)
		{
			PNJ_Raptor_ActionSet(Action_Recul)
		}
		else
		{
			switch(ACT_ActionGet())
			{
				case Action_Fight_Secoue :
					ACT_LIB_ActionFrequencyMultiply(tf_computed_speed_coef)
					break
	
				case Action_Demi_Tour_D_deb :
				case Action_Demi_Tour_D_deb_tr_att :
				case Action_Demi_Tour_G_deb :
				case Action_Demi_Tour_G_deb_tr_att :
				case Action_Demi_Tour_Rapide :
				case Action_Demi_Tour_Rapide_tr_course :
					if (!ACT_ActionFinished())
						break
	
				default:
				
					if (f_wanted_speed >= af_action_speed[i_normal_action_first_index])
						i_flag_paf_can_reduce_speed = vrai
			
					tf_computed_speed_coef = PNJ_Raptor_Choose_Best_Action(f_wanted_speed * f_wanted_speed_modifier)
	//				tf_computed_speed_coef *= 1.1
			
					switch(raptor_type)
					{
						case C_ID_Tyranosaure :
						case C_ID_Raptor :
							tf_dot_product = MATH_VecDotProduct(v_ground_normal, Cv_VerticalVector)
							tf_computed_speed_coef /= tf_dot_product
							break
					}
	
					ACT_LIB_ActionFrequencyMultiply(tf_computed_speed_coef)
			}
		}
	}
	else
	{
		// PAS DE DEPLACEMENT
		f_wanted_speed = 0.0
		
		i_flag_paf_can_reduce_speed = faux
		
		if (i_flag_blesse)
			PNJ_Raptor_ActionSet(Action_Blesse_Attente)
		else if (i_flag_head_search)
			PNJ_Raptor_ActionSet(Action_Renifle_Attente)
		else
			PNJ_Raptor_ActionSet(Action_Normal_Attente)
	}
}				

PNJ_Raptor_Shout_Mix()

#ifdef SHOW_RASTER
DBG_StopRaster(4)
#endif
