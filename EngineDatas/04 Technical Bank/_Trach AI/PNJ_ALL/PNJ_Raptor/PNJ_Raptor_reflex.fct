#include "PNJ_Raptor_defines.var"

Proto_CameraGet

int					ti_i
int					ti_flag_ok
int					ti_my_territory_ID

float				tf_norm
float				tf_life_ratio
float				tf_time
float				tf_size_coef

vector			tv_me_to_main
vector			tv_temp
vector			tv_speed

messageid		EVT_ID

object			to_me
object			to_ground_object
object			to_bone

#ifdef SHOW_RASTER
DBG_StartRaster(7, "Reflex")
#endif

//f_lifecur = f_life

// LIFE DISPLAY ==================================
#ifndef _FINAL_
if( f_lifecur && raptor_type != C_ID_Tyranosaure && @"univ" i_cheat_page == 3 )
	Str_DisplayFloatOnce(f_lifecur, VIEW_3dWorldTo2d(0, OBJ_PosGet()))
#endif
// LIFE DISPLAY ==================================

i_frame_nb++

to_me = OBJ_Me()

//if (f_paf_jauge_requin)
//{
//	ti_i = STR_CreateText("\h.07\Jauge Requin : ", cvector(0.1, 0.1, 0.0), 0.0)
//	STR_AppendFloat(ti_i, f_paf_jauge_requin, 2)
//}

//ti_i = STR_CreateText("\h.07\Speed : ", cvector(0.1, 0.1, 0.0), 0.0)
//STR_AppendFloat(ti_i, DYN_SpeedGet(), 2)

//tv_speed = DYN_SpeedGetVector()
//tv_speed.z = 0.0
//tf_time = DYN_LIB_Time_To_Reach_Speed(tv_speed, Cf_Raptor_friction, Cv_NullVector, 0.01)
//if (tf_time != Cf_Infinit)
//{
////	DYN_LIB_Position_After_N_Seconds(vector tv_init_pos, byref vector tv_init_speed, vector tv_friction, vector tv_gravity, float tf_time, float tf_exp)
//	tv_temp = DYN_LIB_Position_After_N_Seconds(OBJ_PosGet(), tv_speed, cvector(f_friction, f_friction, 0.0), Cv_NullVector, tf_time, 0.0)
//	tv_speed = tv_speed
//}

f_joy_norm = 0.0

f_activation_duration += TIME_GetDt()

// GRID & TAG
AI_Execute("PNJ_Raptor_exec_way_ponderation_set")
PNJ_Raptor_Hyper_Tag_Compute(OBJ_PosGet(), 5)

// BACKUP RECHERCHE DE CHEMIN
v_way_last_case_dest = v_way_case_dest
if ( ! (i_way_status & Ci_WAY_STATUS_BEZIER_MOVE) )
	f_way_bezier_sight_weight = 0.0
i_way_last_status = i_way_status
i_way_status &= Ci_WAY_STATUS_CLEAN
i_way_occluder_status = 0

// ACTION
ACT_LIB_ActionFrequencyMultiply(1.0)

// GRAB
if (f_grab_main_hysteresis)
{
	f_grab_main_hysteresis -= TIME_GetDt()
	if (f_grab_main_hysteresis <= 0.0)
	{
		f_grab_main_hysteresis = 0.0

		tf_size_coef = 1.0
	
		to_bone = ANI_CanalObjectGet(Anim_Canal_Machoire)
		@to_bone BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.1 * tf_size_coef, -0.1))
		@to_bone BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.1 * tf_size_coef, 0.8))
		
		@ao_head_bones[0] BV_OBBoxMinSet(cvector(-0.15 * tf_size_coef, -0.3 * tf_size_coef, -0.1))
		@ao_head_bones[0] BV_OBBoxMaxSet(cvector(0.15 * tf_size_coef, 0.2 * tf_size_coef, 0.8))
	}
}


// DYNAMIQUE
if (OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Dyna))
{
	DYN_FlagsSet(DYN_C_OptimizeColDisable | DYN_C_SkipFrictionWhenSpeedFromAnim, none)
	DYN_TractionSet(Cv_NullVector)
	
	tv_speed = DYN_SpeedGetVector()
	tv_speed.z = v_dyn_speed.z
	DYN_SpeedSetVector(tv_speed)

	if (COL_CollideType(COL_C_Ground))
	{
#ifndef _FINAL_
		to_ground_object = COL_ObjectGet(COL_C_Ground)
		if (to_ground_object && @to_ground_object OBJ_FlagsControlGet() & OBJ_C_ControlFlag_RayInsensitive)
		{
			DBG_TraceObject(to_ground_object)
			DBG_TraceString(" est ray insenstive alors que ")
			DBG_TraceObject(OBJ_Me())
			DBG_TraceString(" se déplace dessus")
			DBG_TraceEOL()
			DBG_Warning("Colmap ray insensitive => See the log")
		}
#endif
	
		if (i_SND_flag_play_bodyfall)
		{
			i_SND_flag_play_bodyfall = faux
			SND_RequestPlayOnObjCanal(Ci_SND_BodyFall, Anim_Canal_Bassin)
		}	

		if (@get_global i_nbr_de_feux_en_cours && raptor_type != C_ID_Tyranosaure)
		{
			// ON BRULE ????			
			GRID_CurrentSet(1)
			if (GRID_CapaGet(OBJ_PosGet()) & Ci_Grid2_EnFeu)
			{
				to_me = OBJ_Me()
				OBJ_CapaSet(Capa_Burning, none)
				f_burning_duration = 1.0

				if (f_lifecur)
					EVENT_AddEventPaf(C_EVENT_FILTER_All, C_PAF_KK_Fire | C_PAF_KK_KiTue, o_main_actor, Cf_EVENT_Duree_1Trame, to_me, 1000.0, cvector(MATH_RandFloat(-0.5, 0.5), MATH_RandFloat(-0.5, 0.5), 1.0))
			}
			GRID_CurrentSet(0)
		}

		tv_temp = COL_ZonePosGet(C_zdm_pied)
		tv_temp -= COL_CollidedPointGet(COL_C_Ground)
		
		tf_norm = MATH_VecNorm(tv_temp)
		if (tf_norm)
		{
			tv_temp /= tf_norm
			tv_temp = MATH_VecInCone(tv_temp, Cv_VerticalVector, Cf_PiBy6, 1)
			v_ground_normal = MATH_VecBlendRotate(v_ground_normal, tv_temp, 6.0 * TIME_GetDt())
		}
		
		f_ground_col_time = 0.0
	}
	else
	{
		f_ground_col_time += TIME_GetDt()
	}
}

// FEU
f_burning_duration -= MATH_FloatMin(f_burning_duration, TIME_GetDt())

// SI ON N'EST PAS PASSE DANS SELECT ACTION
if (!i_flag_select_action_done && !i_flag_saut)
{
	i_flag_cri = faux
	f_wanted_speed = 0.0
}

// TEST TARGET REACHABLE
i_flag_reachable_test_done		= faux

// ZOOM SMOOTH
i_flag_zoom_smooth				= faux

// TELEPORT
i_flag_teleport							= faux

// CLAP MACHOIRE
f_machoire_clap_duration += MATH_FloatMin(10.0 - f_machoire_clap_duration, TIME_GetDt())

// ANALYSE
i_flag_audio_check_done			= faux
i_flag_visual_check_done			= faux
i_flag_paf_check_done				= faux
i_flag_collision_check_done		= faux
i_flag_shoot_check_done			= faux
i_flag_budies_check_done			= faux
i_flag_vala_check_done				= faux
i_flag_check_best_interet_done	= faux

i_flag_select_action_done					= faux

i_budy_nb = 0

if (i_flag_soft_collision)
{
	f_soft_collision_duration += TIME_GetDt()
	i_flag_soft_collision = faux
}
else
{
	f_soft_collision_duration = 0.0
}

// JAUGE PAF
if (i_flag_del_paf_sender)
{
	for (ti_i = 0; ti_i < i_paf_sender_nb; ti_i++)
	{
		af_paf_sender_dommage[ti_i] = 0.0
		ao_paf_sender[ti_i] = nobody
	}

	i_paf_sender_nb = 0
	i_flag_del_paf_sender = faux
}
else
{
	for (ti_i = 0; ti_i < i_paf_sender_nb; ti_i++)
	{
		af_paf_sender_dommage[ti_i] -= MATH_FloatMin(af_paf_sender_dommage[ti_i], TIME_GetDt())
		if (!af_paf_sender_dommage[ti_i])
		{
			i_paf_sender_nb--
			af_paf_sender_dommage[ti_i] = af_paf_sender_dommage[i_paf_sender_nb]
			ao_paf_sender[ti_i] = ao_paf_sender[i_paf_sender_nb]
		}
	}
}

// IK LEGS
switch(raptor_type)
{
	case C_ID_Raptor :
	case C_ID_Tyranosaure :

		i_mord_action_index = -1

		for (ti_i = 0; ti_i < 2; ti_i++)
		{
			f_IK_speed[ti_i]		= TIME_GetDt() * 6.0
			i_flag_leg_IK[ti_i]		= faux
		
			switch(ti_i)
			{
				case Ci_IK_pied_gauche :
					i_flag_leg_IK[ti_i] = ACT_CustomBitTest(0b10000000)
					break
				case Ci_IK_pied_droit :
					i_flag_leg_IK[ti_i] = ACT_CustomBitTest(0b01000000)
					break
				case Ci_IK_main_gauche :
					i_flag_leg_IK[ti_i] = ACT_CustomBitTest(0b00100000)
					break
				case Ci_IK_main_droite :
					i_flag_leg_IK[ti_i] = ACT_CustomBitTest(0b00010000)
					break
			}
		}
		
		break
}

// IK COU
i_flag_look = faux
i_flag_perfect_look = faux
i_flag_look_best_interet = faux

v_look_head_pos = OBJ_PosGet() + MATH_VecLocalToGlobal(v_look_head_pos)
v_look_banking = MATH_VecLocalToGlobal(v_look_banking)

v_look_virtual_sight = v_look_banking
MATH_VecSetHorzNormalize(v_look_virtual_sight)

f_look_angle_blend_speed += MATH_FloatMin(8.0 - f_look_angle_blend_speed, 8.0 * TIME_GetDt())

// ORIENTATION
switch(i_etat_courant)
{
	case ETAT_BURN :
	case ETAT_A_TERRE :
	case ETAT_MORT :
	case ETAT_FADE :
		break	

	default:

		if (raptor_type == C_ID_Galiminus)
			v_virtual_banking = MATH_VecBlendRotate(v_virtual_banking, v_ground_normal, 8.0 * TIME_GetDt())
		else if ( ! i_flag_stalk )
			v_virtual_banking = MATH_VecBlendRotate(v_virtual_banking, Cv_VerticalVector, 8.0 * TIME_GetDt())
//		OBJ_BankingGeneralSet(OBJ_SightGet(), v_virtual_banking)
}

if (f_on_screen_pourcent > 0.5)
	f_on_screen_duration += TIME_GetDt()
else
	f_on_screen_duration = 0.0

i_flag_change_target			= faux
i_flag_1st_detection				= faux

//i_perceived_actor_nb = 0
i_perceived_bit_field = 0
i_perceived_main_actor_index = -1
//i_perceived_best_actor_index = -1

switch(ACT_ActionGet())
{
	case Action_Normal_Trot :
		f_trot_duration += TIME_GetDt()
		f_course_duration = 0.0
		break
		
	case Action_Normal_Course :
		f_course_duration += TIME_GetDt()
		f_trot_duration = 0.0
		break
	
	default:
		f_trot_duration = 0.0
		f_course_duration = 0.0
}

i_flag_zde_fight_enable = faux
i_flag_bite = faux
i_flag_bite_leg = faux
i_flag_dont_change_action = faux
i_flag_recul = faux
i_flag_force_cri_haut = faux

f_paf_jauge -= MATH_FloatMin(f_paf_jauge, TIME_GetDt())
f_fuite_jauge -= MATH_FloatMin(f_fuite_jauge, 4.0 * TIME_GetDt())
f_paf_jauge_requin -= MATH_FloatMin(f_paf_jauge_requin, TIME_GetDt())

f_force_requin_mode_duration -= MATH_FloatMin(f_force_requin_mode_duration, TIME_GetDt())
f_force_run_duration -= MATH_FloatMin(f_force_run_duration, TIME_GetDt())
f_force_slide_duration -= MATH_FloatMin(f_force_slide_duration, TIME_GetDt())
f_force_slow_duration -= MATH_FloatMin(f_force_slow_duration, TIME_GetDt())
f_force_dont_move_duration -= MATH_FloatMin(f_force_dont_move_duration, TIME_GetDt())

f_way_bezier_sight_weight += MATH_FloatMin(1.0 - f_way_bezier_sight_weight, 4.0 * TIME_GetDt())

f_head_search_hyteresis -= MATH_FloatMin(f_head_search_hyteresis, TIME_GetDt())

if (i_way_computation_mode == Ci_WAY_MODE_REQUIN)
	f_requin_mode_duration += TIME_GetDt()
else
	f_requin_mode_duration = 0.0

// MAIN ACTOR ==========================================================
o_main_actor = AI_MainActorGet(C_ID_Joueur)
tv_me_to_main = @o_main_actor OBJ_PosGet()
tv_me_to_main -= OBJ_PosGet()
f_me_to_main_dist = MATH_VecNorm(tv_me_to_main)

// CAMERA ===============================================================
o_camera = @get_global Proc_CameraGet()

// CHECK BEST INTERET
if (MSG_GlobalIsValid(mid_best_interet))
	EVENT_InteretStatusSet(mid_best_interet, C_EVENT_InteretStatusNone)

//if (IO_KeyJustPressed(65))
//{
//	if (f_lifecur > f_life * Cf_Life_Blesse)
//		f_lifecur = f_life * Cf_Life_Blesse
//	else
//		f_lifecur = 0.0
//}


AI_Execute("PNJ_Raptor_exec_check_javelin")

// SOUND
PNJ_Raptor_Play_JackAttack_Sound()
PNJ_Raptor_Play_Breath_Sound()
PNJ_Raptor_Play_Move_Sound()

// ROAR
if (OBJ_CapaTest(Ci_Capa_Roar) && i_SND_roar_index != -1)
{
	SND_RequestPlayOnObjCanal(i_SND_roar_index, Anim_Canal_Tete)
	i_SND_roar_index = -1
}
OBJ_CapaSet(none, Ci_Capa_Roar)

PNJ_Raptor_Shake_Cam()

tf_life_ratio = f_lifecur / f_life

if (raptor_type == C_ID_Raptor &&  tf_life_ratio <= Cf_Life_Blesse && ! i_flag_dont_use_grid)
	i_flag_blesse = vrai

if (i_etat_courant == ETAT_FADE || f_point_de_viande <= 0.0 )
{
#ifdef SHOW_RASTER
DBG_StopRaster(7)
DBG_StartRaster(8, "Comportement")
#endif
	returntrack
}

// EVENT VISION
EVT_ID = EVENT_AddEventVision(raptor_type, C_EVENT_FILTER_Enemy, 	OBJ_Me(), 	Cf_EVENT_Duree_1Trame, OBJ_PosGet() + cvector( 0.0, 0.0, 1.0), C_EVENT_Visibility_Full_Mvt, 0.4, 150.0, 	C_EVENT_CONTEXT_STANDARD, 0, tf_life_ratio)

// OK, NOTRE TERRITOIRE EST ?
if (i_flag_dont_use_grid && (o_next_wp && @o_next_wp OBJ_CapaTest(Ci_Capa_LD_Territory)) )
	ti_my_territory_ID = o_next_wp.des_int2
else
	ti_my_territory_ID = EVENT_VisionTerritoryGet(EVT_ID)

if (ti_my_territory_ID != -1)
	i_my_territory_ID = ti_my_territory_ID

#ifdef SHOW_RASTER
DBG_StartRaster(5, "Refresh Territory")
#endif

// ON RAFRAICHIT L'ENSEMBLE DES TERRITOIRES ACCESSIBLES
PNJ_Raptor_Refresh_Territory_List()

#ifdef SHOW_RASTER
DBG_StopRaster(5)
#endif

// EST-CE QU'ON EST SUR LE BON TERRITOIRE ?
i_flag_in_my_territory = PNJ_Raptor_Territory_ID_Allowed(i_my_territory_ID)

#ifdef SHOW_RASTER
DBG_StopRaster(7)
DBG_StartRaster(8, "Comportement")
#endif

