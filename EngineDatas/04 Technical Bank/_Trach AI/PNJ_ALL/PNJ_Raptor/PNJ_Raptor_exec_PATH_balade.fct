int					ti_flag_recompute_path
int					ti_flag_skip_next_wp

object			to_nearest_wp
object			to_start_wp
object			to_dest_wp

#define macro_clean_way																																\
{																																								\
	o_next_wp = nobody																																\
	o_path_start_wp = nobody																															\
	o_path_dest_wp = nobody																															\
	 while(i_way_wp_nb)																																	\
	{																																							\
		i_way_wp_nb--																																	\
		ao_way_wp[i_way_wp_nb] = nobody																										\
	}																																							\
}

// A == ma position
// B == le wp le plus proche de moi
// C == le wp destination
// A -----> B chemin entre A et B ok
// A --X--> B chemin entre A et B bloqué par la grille
// A --?--> B chemin entre A et dépendant du reseau 
	
if (i_way_computation_mode != i_way_computation_old_mode)
{
	// INITIALISATION
	i_way_computation_old_mode = i_way_computation_mode

	// Si je suis sur le reseau, je cherche n'importe quel wp capa_3, sinon ceux qui ne sont pas inaccessibles via la grille...
	if (i_flag_dont_use_grid)
		to_dest_wp = WAY_WPNearestOfOBJ(n_net, OBJ_Capa_3, none, Ci_Filter_CapaFlag)
	else
		to_dest_wp = WAY_WPNearestOfOBJ(n_net, OBJ_Capa_3, OBJ_Capa_2, Ci_Filter_CapaFlag)

	if (to_dest_wp)
		i_flag_follow_capa_3 = vrai
	else
		to_dest_wp = WAY_WPNearestOfPos(OBJ_PosInitGet(), n_net, all, OBJ_Capa_2, Ci_Filter_CapaFlag)
	
	if (i_flag_dont_use_grid)
	{
		// JE SUIS DEJA SUR LE RESEAU, JE DOIS CHERCHER UNE SORTIE POUR ATTEINDRE MA CIBLE
		
		// A -----> B --?--> C
		to_start_wp = o_next_wp
	}
	else
	{
		// A --X--> C -----> D
		to_start_wp = GST_Climb_NearestSightReachableWaypoint(&ao_net_wp[0], i_net_wp_nb, OBJ_PosGet(), i_my_territory_ID, OBJ_SightGet(), 0.0, all, OBJ_Capa_2, to_nearest_wp)
		if (to_start_wp)
		{
			// A -----> B --?--> C -----> D
		}
		else
		{
			// A --X--> B --?--> C -----> D
			to_start_wp = to_nearest_wp
		}
	}
			
	// RECHERCHE DE CHEMIN
	macro_clean_way

	f_way_rot_speed = 0.0

	o_path_start_wp = to_start_wp
	o_path_dest_wp = to_dest_wp
	i_way_wp_nb = WAY_ShortWay(n_net, &ao_way_wp[0], to_start_wp, to_dest_wp, -1, 0)
	
	if (i_way_wp_nb)
	{
		// On a un chemin
		o_next_wp = ao_way_wp[i_way_wp_nb - 1]
	}
	else
	{
		// Echec, on n'a pas de chemin
		o_next_wp = nobody
	}

	if (i_way_wp_nb > 1)
		o_next_next_wp = ao_way_wp[i_way_wp_nb - 2]
	else
		o_next_next_wp = nobody
}

