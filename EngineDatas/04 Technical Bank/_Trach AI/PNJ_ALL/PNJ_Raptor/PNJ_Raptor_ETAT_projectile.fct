#include "PNJ_Raptor_defines.var"

int			ti_i

vector	tv_dest_pos

object	to_collide_object

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux

	COL_UnCollidableDel(o_snap_actor)
	o_snap_actor = nobody

	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_projectile)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_projectile

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()


	COL_ColSetActivationSet(C_bit_zdm_pied, none)
	COL_UnCollidableAdd(o_snap_actor)

//	ACT_ActionSet(Action_Fight_Saut_cycl)

	v_jump_pos = @o_snap_actor OBJ_PosGet()
	v_jump_pos += @o_snap_actor OBJ_SightGet() * 30.0
	i_jump_etat = 5														// Saut sans impulsion
	v_joy_dir = @o_snap_actor OBJ_PosGet()
	v_joy_dir -= @o_snap_actor OBJ_SightGet() * 30.0
	v_joy_dir -= OBJ_PosGet()					// Axe de l'orientation
	COL_ColSetActivationSet(C_bit_zdm_pied, none)
	DYN_GravitySet( Cv_Raptor_Gravity)	

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE =======================================================================================================
to_collide_object = nobody

//if (COL_CollideType(COL_C_Ground))
//	to_collide_object = COL_ObjectGet(COL_C_Ground)
//else if (COL_CollideType(COL_C_Wall))
//	to_collide_object = COL_ObjectGet(COL_C_Wall)
if ( f_time_start_etat > 6.0)
	OBJ_Destroy()


// COMPORTEMENT =======================================================================================================
AI_Execute("PNJ_Raptor_exec_select_action")	


if (!i_jump_etat)
	macro_change_etat("PNJ_Raptor_ETAT_attente")

