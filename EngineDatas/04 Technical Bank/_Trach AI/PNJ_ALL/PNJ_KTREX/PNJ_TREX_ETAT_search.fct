#include "KT_defines.var"

object	to_collide_object
object	to_camera

float		tf_sqr_hor_dist
float		tf_interet
float		tf_imprecision
float		tf_delay_since_last_update
float		tf_dist

int			ti_i
int			ti_flag_go_to_grid_center
int			ti_followed_ground_ID
int			ti_flag_try_to_move

vector	tv_offset
vector	tv_temp

object	to_interet_gao

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux

	if (i_etat_courant != ETAT_rided)
	{
		for (ti_i = 0; ti_i < Ci_Ride_Client_Nb; ti_i++)
			ao_bone_rider[ti_i] = LNK_ServeurGet(Ci_LNK_RIDE_DINO, amid_bone_rider_LNK_ID[ti_i], faux, nofunc, nofunc)
	}

	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_search)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_search

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()

	i_flag_way_ok = faux
	i_flag_head_search = faux

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE =======================================================================================================

AI_Execute("KT_exec_check_sound")

AI_Execute("KT_exec_check_vision")

AI_Execute("KT_exec_check_collision")

AI_Execute("KT_exec_check_paf")
if (o_paf_actor)
	macro_change_etat("KT_ETAT_paf")

// Détection d'un envoi de projectile de Kong
//AI_Execute("KT_exec_check_KK_projectile")
//if( o_KK_projectile )
//	macro_change_etat("KT_ETAT_KK_choppe_projectile")

// RIDE SERVEUR ?
for (ti_i = 0; ti_i < Ci_Ride_Client_Nb; ti_i++)
{
	if (ao_bone_rider[ti_i])
		macro_change_etat("KT_ETAT_rided")
	else
		ao_bone_rider[ti_i] = LNK_ServeurGet(Ci_LNK_RIDE_DINO, amid_bone_rider_LNK_ID[ti_i], vrai, nofunc, nofunc)
}

AI_Execute("KT_exec_check_interet")
if (MSG_GlobalIsValid(mid_new_interet) || (MSG_GlobalIsValid(mid_best_interet) && mid_best_interet != mid_last_interet))
	macro_change_etat("KT_ETAT_hesite")

if (! MSG_GlobalIsValid(mid_best_interet))
	macro_change_etat(fct_main_etat)

EVENT_InteretStatusSet(mid_best_interet, C_EVENT_InteretStatusLock)

// TEST POUR MORDRE
if (i_flag_head_contact)
	macro_change_etat("KT_ETAT_mord")

tf_delay_since_last_update = TIME_Get() - EVENT_InteretUpdateTimeGet(mid_best_interet)

if (! tf_delay_since_last_update)
{
	// VU CETTE TRAME
	if (EVENT_FilterGet(mid_best_interet)	& C_EVENT_FILTER_KingKong)
	{
		// KING KONG
		macro_change_etat("KT_ETAT_KK_fight")
	}
	else if (EVENT_InteretPrecisionGet(mid_best_interet) > 0.0)
	{
		// POSITION IMPRECISE
		macro_change_etat("KT_ETAT_watch")
	}
	else
	{
		// POSITION PRECISE
		macro_change_etat("KT_ETAT_fight")
	}
}

v_way_destpos = EVENT_InteretPositionGet(mid_best_interet)
v_way_destpos.z += 1.0

if (tf_delay_since_last_update < 2.0 && EVENT_InteretGet(mid_best_interet) > 0.0)
{
	// On avait vu quelque chose mais il n'est plus là
	i_flag_look = vrai
	v_look_pos = v_way_destpos
	
	ACT_ActionSet(Action_Observe)
	returntrack
}

// SUIVI REGARD =========================
i_flag_look = vrai

if (i_flag_head_search)
{
	tv_temp = OBJ_PosGet()
	tv_temp += OBJ_SightGet() * 3.0
	tv_temp += OBJ_HorizonGet() * (MATH_Sin(2.0 * TIME_Get()) * 3.0)
	
	if (tf_delay_since_last_update < 1.0)
		v_look_pos = MATH_VecBlend(v_way_destpos, tv_temp, tf_delay_since_last_update)
	else
		v_look_pos = tv_temp
}
else
{
	v_look_pos = v_way_destpos
	EVENT_LifeSet(mid_best_interet, 5.0)
}

tf_imprecision = EVENT_InteretPrecisionGet(mid_best_interet)
DBG_RenderCircle(v_way_destpos + Cv_VerticalVector, tf_imprecision, Cv_VerticalVector, color_rouge)

tv_temp = v_way_destpos - OBJ_PosGet()
tv_temp.z = 0.0

if (!i_flag_head_search && MATH_VecDotProduct(tv_temp, tv_temp) < tf_imprecision * tf_imprecision)
	i_flag_head_search = vrai

tv_temp = MATH_VecCrossProduct(tv_temp, Cv_VerticalVector)
MATH_VecSetNormalize(tv_temp)
tv_temp *= tf_imprecision
v_way_destpos += tv_temp

tv_temp = v_way_destpos
tv_temp -= OBJ_PosGet()
tv_temp.z = 0.0

tf_sqr_hor_dist = MATH_VecDotProduct(tv_temp, tv_temp)

// COMPORTEMENT ==================================================================================================	
ti_flag_go_to_grid_center = vrai

DBG_RenderVector(v_way_destpos, cvector(0.0, 0.0, 5.0), color_bleu)

ti_flag_try_to_move = faux

if (tf_sqr_hor_dist > 4.0)
	ti_flag_try_to_move = vrai

if (ti_flag_try_to_move)
{
	AI_Execute("KT_exec_way_find")

	v_joy_dir = v_way_case_dest
	v_joy_dir -= OBJ_PosGet()
	v_joy_dir.z = 0.0

	f_joy_norm = MATH_VecNorm(v_joy_dir)

	if (i_way_moving && f_joy_norm)
	{
		v_joy_dir /= f_joy_norm
		
		f_joy_norm = MATH_FloatLimit(f_joy_norm, 0.0, 1.0)
		
		ti_flag_go_to_grid_center = faux
	}
}

if (i_way_moving)
{
	if (!i_flag_run && i_way_case_nbr > 8)
		i_flag_run = vrai
	else if (i_flag_run && i_way_case_nbr < 5)
		i_flag_run = faux
}
else
{
	if (!i_flag_run && tf_sqr_hor_dist > 64.0)
		i_flag_run = vrai
	else if (i_flag_run && tf_sqr_hor_dist < 25.0)
		i_flag_run = faux
}
			
DBG_RenderVector(v_way_case_dest, cvector(0.0, 0.0, 10.0), color_bleu)
	
if (ti_flag_go_to_grid_center)
{
	i_flag_run = faux

//	if (i_flag_way_ok)
//	{
//		// On est arrivé, on se centre sur la case
//		v_joy_dir = v_way_case_dest
//		v_joy_dir -= OBJ_PosGet()
//		v_joy_dir.z = 0.0
//		
//		f_joy_norm = MATH_VecNorm(v_joy_dir)
//	
//		if (f_joy_norm)
//			v_joy_dir /= f_joy_norm
//		else
//			v_joy_dir = OBJ_SightGet()
//	
//		if (f_joy_norm > 0.25)
//			f_joy_norm = MATH_FloatLimit(f_joy_norm, 0.0, 1.0)
//		else
//			f_joy_norm = 0.0
//	}
//	else
	{
		f_joy_norm = 0.0
		v_joy_dir	 = OBJ_SightGet()
	}
}

AI_Execute("KT_exec_select_action")

