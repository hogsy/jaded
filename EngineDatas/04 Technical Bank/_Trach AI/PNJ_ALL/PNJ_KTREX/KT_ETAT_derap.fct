
//===============================================================================
// DERAPAGE, APRES UNE PROJECTION GRAB OU APRES UNE CHARGE
//===============================================================================

#include "KT_defines.var"

float		tf_dot_proj_axis
float		tf_dot_fight_actor

object	to_col_actor
object	to_bone

vector	tv_sens_collision
vector	tv_sens_paf

int			ti_change_etat


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_derap_mode = 0
	i_derap_detect_fury = faux
	ai_grabbed_availibility[ Ci_LNK_GRAB_KONG] = vrai
	
	i_sort_etat = faux
	return
}


// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_derap)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_derap

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	ai_grabbed_availibility[Ci_LNK_GRAB_KONG] = vrai
	
	// init param dérapage
	i_derap_proj_pas_blesse = faux
	
	if( i_dernier_etat == ETAT_projectile && ! i_blesse_on )
	{
		// REX projeté en forme : anim projectile conservée pendant l'orientation
		v_grab_grav_speed.z = 0.0
		if ( MATH_VecNullEpsilon( v_grab_grav_speed))
			v_grab_grav_speed = OBJ_SightGet()
		else
			MATH_VecSetNormalize(v_grab_grav_speed)
		DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, v_grab_grav_speed * 5, color_vert)
		i_derap_proj_pas_blesse = vrai
	}
	else
	{
		KT_Derap_Mode_Select()
	}
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE =============================================================================

o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, vrai, nofunc, nofunc)
if (o_grabbed_actor_KK)
{
	macro_change_etat("KT_ETAT_Grabbed_by_Kong")		
}


// COMPORTEMENT =======================================================================

KT_Interet_Update(o_fight_actor, C_EVENT_InteretStatusAttack)


// ORIENTATION EN PROJECTION PAS BLESSE ==========================================
if( i_derap_proj_pas_blesse )
{
	OBJ_BankingGeneralSet(
		MATH_VecBlendRotate(OBJ_SightGet(), v_grab_grav_speed, 6.0 * TIME_GetDt()),
		Cv_VerticalVector)
	// test mur
	to_col_actor = KT_Test_collision_Mur_LRAY_COL( vrai, vrai, OBJ_SightGet(), tv_sens_collision, v_collision_point)
	if( to_col_actor && to_col_actor != o_Kong )
	{
		// VERIF que le paf a été bien envoyé
		tv_sens_paf = DYN_SpeedGetVector()
		tv_sens_paf.z = 0.0
		if ( MATH_VecNullEpsilon( tv_sens_paf))
			tv_sens_paf = OBJ_SightGet()		// Le moins pire
		else
			MATH_VecSetNormalize( tv_sens_paf)				
		if( ARR_ObjSearch( &ao_paf_list[0], i_paf_nb, to_col_actor) == -1 )
		{
			EVENT_AddEventPafCanal( C_EVENT_FILTER_Object, C_PAF_KK_Moyen + C_PAF_KK_Projection, OBJ_Me(), Cf_EVENT_Duree_1Trame, to_col_actor, -1, Cf_DMG_Projection, tv_sens_paf, COL_ZonePosGet( C_zde_fight))
//			DBG_TraceObject(OBJ_Me())
//			DBG_TraceString(" projeté dans ")
//			DBG_TraceObject(to_col_actor)
//			DBG_TraceString(" et le paffe")
//			DBG_TraceEOL()
		}
		if( KT_Test_collision_Mur_Prend_Paf(to_col_actor) && KT_Paf_Mur_Allowed() )
		{
			KT_GFX_Impact(v_collision_point)
			f_delay_last_paf_mur = 0.0
			// CHANGER LA VIE DU TREX
			EVENT_LIFE_LifeChange(ID_LIFE, Cf_PAF_Projectile_Mur)
			KT_Timer_KONG_Init()
			
			f_coef_recul = 0.0
			GST_PAF_Trans_Rotate( OBJ_PosGet(), OBJ_SightGet(), Cv_NullVector, tv_sens_collision, 15.0, v_add_speed, f_add_rotation)
			v_add_speed *= 0.6
	
			if ( MATH_VecDotProduct( OBJ_SightGet(), tv_sens_collision) < 0)
				i_ko_face_mur = vrai		// Jouer l anim d explosion sur les mur
			
//			to_bone = ANI_CanalObjectGet(Anim_Canal_Tete)
//			KT_GFX_Particules(@to_bone OBJ_PosGet(), - OBJ_SightGet())
			
			
//			f_time_gfx_particules = Cf_time_gfx_particules
			if ( EVENT_LIFE_CurLifeGet( ID_LIFE) <= 0.0 )
			{
				i_paf_mur_align = vrai
				f_fatigue_time = 5.0
				o_paf_actor = o_fight_actor
				o_paf_actor_memo = o_fight_actor
				macro_change_etat("KT_ETAT_KO_au_sol")
			}
			else
			{
				i_paf_mur_leger = vrai
				v_paf_sens = tv_sens_collision
				DBG_RenderVector(OBJ_PosGet() + cvector(0.0,0.0,3.0), v_paf_sens, color_rouge)
				o_paf_actor = o_fight_actor
				macro_change_etat("KT_ETAT_paf")
			}
		}
		else
		{
			KT_Derap_Mode_Select()
			i_derap_proj_pas_blesse = faux
		}
	}
	else 
	{
		// test orientation
		tf_dot_proj_axis = MATH_VecDotProduct(OBJ_SightGet(), v_grab_grav_speed)
		tf_dot_fight_actor = MATH_VecDotProduct(OBJ_SightGet(), MATH_VecNormalize(@o_fight_actor OBJ_PosGet() - OBJ_PosGet()))
		if( tf_dot_proj_axis > Cf_Cos10 && tf_dot_fight_actor < 0 ) // - Cf_Cos70)
		{
			// orientation terminée (ou paf mur) : choix des anims
			KT_Derap_Mode_Select()
			i_derap_proj_pas_blesse = faux
		}
	}
}
else
{
	// ENCHAINEMENT DES ANIMS ======================================================
	ti_change_etat = faux
	switch( ACT_ActionGet() )
	{
		case Action_StopRapideDdeb :
		case Action_StopRapideGdeb :
			if( ANI_CurrentFrameGet(0) > 5 )
			{
				if( i_derap_mode == Ci_derap_stop_rapide_deb_only && ACT_ActionFinished() )
					ti_change_etat = vrai			// déb terminé -> FIGHT
				else if( i_derap_mode == Ci_derap_demi_tour )
				{
					// déb coupé -> 1/2 tour
					if( MATH_VecDotProduct(OBJ_HorizonGet(), @o_fight_actor OBJ_PosGet() - OBJ_PosGet()) > 0 )
						ACT_ActionSet(Action_DemiTourRapideG)
					else
						ACT_ActionSet(Action_DemiTourRapideD)
					if( i_derap_detect_fury )
						ANI_FrequencySet(0, MATH_FloatLimit(ANI_FrequencyGet(0) * MATH_RandFloat(1.5, 2.0), 48, 200))
				}
				else if( ACT_ActionFinished() )
				{
					// déb terminé -> fin
					if( ACT_ActionGet() == Action_StopRapideDdeb )
						ACT_ActionSet(Action_StopRapideDfin)
					else
						ACT_ActionSet(Action_StopRapideGfin)
					if( i_derap_detect_fury )
						ANI_FrequencySet(0, MATH_FloatLimit(ANI_FrequencyGet(0) * MATH_RandFloat(1.5, 2.0), 48, 200))
				}
			}
			break

		default:
			if( ACT_ActionFinished() )
				ti_change_etat = vrai
			break
	}
	
	if( ti_change_etat )
	{
		if( KT_Rage_en_cours() )
		{
			o_fury_actor = nobody
			o_fight_actor = o_Kong
			macro_change_etat("KT_ETAT_fight_KONG")
		}
		else if( o_fury_actor )
		{
//			i_cri_apres_un_paf = vrai
//			i_cri_apres_un_paf_type = 1	// cri haut
			i_cri_filtre |= Ci_CRI_A_PAFFE_KONG
			i_cri_filtre |= Ci_CRI_FORCE_HAUT_SI_PAF
			macro_change_etat("KT_ETAT_cri")
		}
		else if( i_Stunned_enabled && ! KT_Rage_en_cours() && i_blesse_on && i_dernier_etat == ETAT_charge )
		{
			o_fury_actor = o_fight_actor
			i_stunned_flag = vrai
			macro_change_etat("KT_ETAT_cri")
		}
		else
			macro_change_etat("KT_ETAT_fight_KONG")
	}
	
	// ORIENTATION ==============================================================
	switch( ACT_ActionGet() )
	{
		case Action_StopRapideDfin :
		case Action_StopRapideGfin :
			// orientation vers KONG
			OBJ_BankingGeneralSet(
				MATH_VecBlendRotate(OBJ_SightGet(), @o_fight_actor OBJ_PosGet() - OBJ_PosGet() , 1.0 * TIME_GetDt()),
				Cv_VerticalVector)
			break
			
		case Action_StopRapideDdeb :
		case Action_StopRapideGdeb :
			if( i_derap_mode == Ci_derap_demi_tour )
			{
				// stop rapide avant un demi-tour : orientation forcée
				OBJ_BankingGeneralSet(
					MATH_VecBlendRotate(OBJ_SightGet(), v_derap_tout_droit_axis, 10.0 * TIME_GetDt()),
					Cv_VerticalVector)
			}
			break
			
		case Action_DemiTourRapideD :
		case Action_DemiTourRapideG :
			if( ANI_CurrentFrameGet(0) > 55 )
			{
				// fin du demi-tour : orientation vers KONG
				OBJ_BankingGeneralSet(
					MATH_VecBlendRotate(OBJ_SightGet(), @o_fight_actor OBJ_PosGet() - OBJ_PosGet(), 4.0 * TIME_GetDt()),
					Cv_VerticalVector)
			}
			break
	}
}

