#include "KT_defines.var"

float		tf_sqr_hor_dist
float		tf_dist
float		tf_delay_since_last_update

int			ti_i
int			ti_flag_go_to_grid_center
int			ti_flag_try_to_move
int			ti_ground_id
int			ti_followed_ground_ID

vector	tv_offset
vector	tv_temp

object	to_collide_object

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux

	if (i_etat_courant != ETAT_rided)
	{
		for (ti_i = 0; ti_i < Ci_Ride_Client_Nb; ti_i++)
			ao_bone_rider[ti_i] = LNK_ServeurGet(Ci_LNK_RIDE_DINO, amid_bone_rider_LNK_ID[ti_i], faux, nofunc, nofunc)
	}

	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_watch)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_watch

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_main_etat = AI_TrackCurGet()
	fct_last_etat = AI_TrackCurGet()

	i_flag_way_ok = faux
	i_flag_allow_block = faux

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE =======================================================================================================

AI_Execute("KT_exec_check_sound")

AI_Execute("KT_exec_check_vision")

AI_Execute("KT_exec_check_collision")

AI_Execute("KT_exec_check_paf")
if (o_paf_actor)
{
	macro_change_etat("KT_ETAT_paf")
}


// RIDE SERVEUR ?
for (ti_i = 0; ti_i < Ci_Ride_Client_Nb; ti_i++)
{
	if (ao_bone_rider[ti_i])
		macro_change_etat("KT_ETAT_rided")
	else
		ao_bone_rider[ti_i] = LNK_ServeurGet(Ci_LNK_RIDE_DINO, amid_bone_rider_LNK_ID[ti_i], vrai, nofunc, nofunc)
}

AI_Execute("KT_exec_check_interet")

// J'ai une nouvelle cible qui se manifeste
if (MSG_GlobalIsValid(mid_new_interet))
	macro_change_etat("KT_ETAT_hesite")

// La cible la plus interessante n'est plus la même
if (MSG_GlobalIsValid(mid_best_interet) && mid_best_interet != mid_last_interet)
{
	mid_new_interet = mid_best_interet
	macro_change_etat("KT_ETAT_hesite")
}

// J'ai perdu toute mes cibles
if (! MSG_GlobalIsValid(mid_best_interet))
	macro_change_etat("KT_ETAT_attente")

EVENT_InteretStatusSet(mid_best_interet, C_EVENT_InteretStatusLock)

v_way_destpos = EVENT_PositionGet(mid_best_interet)

// TEST POUR MORDRE
if (f_time_start_etat > 0.5)
{
	tv_temp = v_way_destpos
	tv_temp -= v_look_head_pos
	tv_temp.z = 0.0	
	
	tf_dist = MATH_VecDotProduct(tv_temp, tv_temp)
	
	if (!tf_dist)
	{
		macro_change_etat("KT_ETAT_mord")
	}
	else if (tf_dist < 3.0)
	{
		tf_dist = MATH_FloatSqrt(tf_dist)
		tv_temp /= tf_dist	
		
		if (MATH_VecDotProduct(tv_temp, v_look_virtual_sight) > Cf_Cos60)
			macro_change_etat("KT_ETAT_mord")
	}
}

if (MSG_GlobalIsValid(mid_best_interet))
{
	tf_delay_since_last_update = TIME_Get() - EVENT_InteretUpdateTimeGet(mid_best_interet)

	if (tf_delay_since_last_update > 0.5)
	{
		// PAS VU CETTE TRAME
		macro_change_etat("KT_ETAT_search")
	}
	else
	{
		// VU CETTE TRAME
		if (EVENT_FilterGet(mid_best_interet)	& C_EVENT_FILTER_KingKong)
		{
			// KING KONG
			macro_change_etat("KT_ETAT_KK_fight")
		}
		else if (EVENT_InteretPrecisionGet(mid_best_interet) == 0.0)
		{
			// POSITION PRECISE
			macro_change_etat("KT_ETAT_fight")
		}
	}
}

i_flag_look = vrai
v_look_pos = v_way_destpos
v_look_pos.z += 1.0

//tf_interet = EVENT_InteretReelGet(mid_best_interet)
//if (tf_interet <= 50.0)
//{
//	// C'est pas assez interessant
//	i_flag_clean_memory = vrai
//	macro_change_etat("KT_ETAT_attente")
//}

// COMPORTEMENT ==================================================================================================	

ti_flag_go_to_grid_center = vrai

//DBG_RenderVector(v_way_destpos, cvector(0.0, 0.0, 5.0), color_bleu)

tv_temp = v_way_destpos
tv_temp -= OBJ_PosGet()
tv_temp.z = 0.0

tf_sqr_hor_dist = MATH_VecDotProduct(tv_temp, tv_temp)

ti_flag_try_to_move = faux

ti_ground_id = GRID_CapaGet(OBJ_PosGet())
ti_ground_id &= ~tag_grid_occupe

ti_followed_ground_ID = GRID_CapaGet(v_way_destpos)
ti_followed_ground_ID &= ~tag_grid_occupe

if (ti_ground_id != ti_followed_ground_ID || i_flag_allow_block)
	ti_flag_try_to_move = vrai

if (tf_sqr_hor_dist > 100.0)
{
	i_flag_allow_block = vrai
}
else if (i_flag_allow_block && tf_sqr_hor_dist < 64.0)
{
	if (tf_delay_since_last_update)
	{
		i_flag_allow_block = faux
	}
	else
	{
		// TEST POUR TERRASSER	
		tv_temp /= MATH_FloatSqrt(tf_sqr_hor_dist)
	
//		if (MATH_VecDotProduct(OBJ_SightGet(), tv_temp) > Cf_Cos60)
//		{
//			to_collide_object = COL_RayObject_Dist(COL_ZonePosGet(C_zdm_pied), tv_temp, tf_dist, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
//			if (!to_collide_object || to_collide_object == o_fight_actor)
//			{
//				DBG_RenderVector(COL_ZonePosGet(C_zdm_pied), tv_temp * tf_dist, color_vert)
//				macro_change_etat("KT_ETAT_terrasse")
//			}
//			else
//			{
//				DBG_RenderVector(COL_ZonePosGet(C_zdm_pied), COL_RayObject_PosGet() - COL_ZonePosGet(C_zdm_pied), color_rouge)
//			}
//		}
	}
}

if (ti_flag_try_to_move)
{
	AI_Execute("KT_exec_way_find")

	v_joy_dir = v_way_case_dest
	v_joy_dir -= OBJ_PosGet()
	v_joy_dir.z = 0.0

	f_joy_norm = MATH_VecNorm(v_joy_dir)

	if (i_way_moving && f_joy_norm)
	{
		v_joy_dir /= f_joy_norm
		
		f_joy_norm = MATH_FloatLimit(f_joy_norm, 0.0, 1.0)
		
		ti_flag_go_to_grid_center = faux
	}
}

if (i_flag_way_ok && i_way_moving)
{
	if (i_flag_run)
	{
		if (i_way_case_nbr < 2)
			i_flag_run = faux
	}
	else
	{
		if (i_way_case_nbr > 3)
			i_flag_run = vrai
	}
}
else
{
	if (i_flag_run)
	{
		if (tf_sqr_hor_dist < 4.0)
			i_flag_run = faux
	}
	else
	{
		if (tf_sqr_hor_dist > 9.0)
			i_flag_run = vrai
	}
}	
			
DBG_RenderVector(v_way_case_dest, cvector(0.0, 0.0, 10.0), color_bleu)
	
if (ti_flag_go_to_grid_center)
{
	i_flag_run = faux

//	if (i_flag_way_ok)
//	{
//		// On est arrivé, on se centre sur la case
//		v_joy_dir = v_way_case_dest
//		v_joy_dir -= OBJ_PosGet()
//		v_joy_dir.z = 0.0
//		
//		f_joy_norm = MATH_VecNorm(v_joy_dir)
//	
//		if (f_joy_norm)
//			v_joy_dir /= f_joy_norm
//		else
//			v_joy_dir = OBJ_SightGet()
//	
//		if (f_joy_norm > 0.25)
//			f_joy_norm = MATH_FloatLimit(f_joy_norm, 0.0, 1.0)
//		else
//			f_joy_norm = 0.0
//	}
//	else
//	{
		v_joy_dir = OBJ_SightGet()
		f_joy_norm = 0.0
//	}
}

AI_Execute("KT_exec_select_action")

