#include "KT_defines.var"

// Define at least one function in a track
// function track0 = "name" 
// function track1 = "name"
function track2 = "KT_TRACK_init"
// function track3 = "name"
// function track4 = "name"

separator "INIT"
int							i_actif					= faux_vrai
int							i_debut_force = enum( "0 - Default" 0 "1 - Fracasse" 1) 		// faites chier qd meme
int							i_Init_glande = enum ("0 - Default" 0 "1 - Manger" 1 "2 - Crier" 2 "3 - Dormir" 3)

separator "LIFE & FOODCHAIN"
int							i_life_init = enum("0 - full life" 0 "1 - blesse" 1 "2 - mort" 2)
float						f_life_max = 80.0
float						f_life_seuil_blesse = 50.0
private	int				i_SND_instance_devore = -1
private	int				i_foodchain_step
private	object		o_cadavre
private	object		o_cadavre_bone
private	int				i_cadavre_nb = 0
private	object		ao_cadavre[Ci_cadavre_max_nb]
private	int				ai_cadavre_nouveau[Ci_cadavre_max_nb]
private	int				i_flag_cadavres_check_done
private	int				i_foodchain_eat_slots_nb = 5
private	int				i_foodchain_eat_slots_free
float						f_foodchain_pts_viande_par_sec = 4
private	float			f_foodchain_mange_paf_delay
private	object		o_grab_actor
private	messageid	mid_grab_actor_LNK_ID
private	int				i_foodchain_cri_fini_de_manger

separator "CONFIG"
object					o_perimetre 		= nobody	// WP dont la BV définit le périmètre de détection du TRex
object					ao_blind_zone[Ci_blind_zone_max_nb]		// Zones inconnues pour REX
object					o_ignore_target
trigger					trig_cible_hauteur					// trigger pour comportement fight cible en hauteur
object					o_occluder							// occluders pour les autres REX (si plusieurs REX...)
object					o_degagement_wp				// wp pour se débloquer devant la branche de ANN (si plusieurs REX...)
int							i_Reward_for_KONG = vrai_faux	// si vrai, KONG joue l'anim de Reward quand REX meurt (s'il ne reste pas d'autre REX) 
int							i_Rage_enabled = faux_vrai
int							i_Stunned_enabled = vrai_faux

separator "DEBUG"
int							i_TEST_Anim = -1
int							i_DBG_track_TEST = vrai_faux
int							i_DBG_Display_Pilotage = vrai_faux		// active le visuel du pilotage de tête
private 	int				i_DBG_lock_cam = vrai_faux					// cam fight / std
int							i_DBG_I_finish_disabled = vrai_faux
private	int				i_DBG_contre_attaque_mode = enum( "coups de tete" 0 "anims defense" 1 )
int							i_DBG_charge = enum( "default" 0 "toujours" 1 "jamais" 2 )
int							i_DBG_trace_propose_grab = vrai_faux
private	int				i_test_cpt
int							i_DBG_refuse_grab = enum( "default" 0 "toujours" 1 "jamais" 2 )
int							i_DBG_display_fight_actor = vrai_faux
vector					v_DBG_display_fight_actor_pos
int							i_DBG_force_grab_cote = vrai_faux
int							i_DBG_display_interaction = vrai_faux
int							i_DBG_interaction_off = vrai_faux
object					o_DBG_pilotage_tete
trigger					trig_DBG
int							i_DBG_VINCE

// FIGHT
separator "FIGHT"
private 	object		o_fight_actor							// proie
private 	int				i_fight_actor_init_done				// flag qui indique que l'init des vars en fct du fight actor a déjà été fait cette trame
private 	int				i_fight_actor_select_done			// flag qui indique que le choix ud fight actor a déjà été fait cette trame
private 	float			f_fight_delai_attak					// délai entre 2 attaques
private 	int				i_fight_paf								// flag passe à vrai quand REX a envoyé un paf
private 	float			f_fight_delai_anim					// délai pour ne pas changer successivement d'anim en mode fight
private 	object		o_fury_check_actor					// acteur qui génère actuellement des events fury
private 	object		o_fury_actor							// acteur vers lequel REX hurle
private 	object		o_fury_force_actor					// acteur vers lequel REX va hurler (forcé)
private	float			f_fury_last_time_hurlement		// heure du dernier hurlement de REX
private	int				i_fury_type = 0						// type d'intimidation
private	int				i_fury_force_hurlement = faux		// flag qui indique que REX doit se retourner pour hurler vers son o_fury_actor
private	int				i_fight_action							// action courante en mode fight
private 	int				i_fight_action_old						// ancienne action en mode fight
private 	float			f_fight_sens_contourne = 0.0				// sens de contournement de KONG : -1.0 / 0.0 / 1.0
private	int				i_KK_attaque_action = 0				// N° d'action à jouer pour attaquer (dents, tete G/D, queue G/D)
private	int				i_paf_exit_colmap_mode = faux		// mémorise que REX doit repousser KONG hors de sa colmap
private	int				i_flag_paf_exit_colmap = faux		// flag qui indique que le paf à envoyer actuellement est un paf qui doit repousser KONG hors de sa colmap
private	vector		v_paf_exit_colmap_sens = Cv_NullVector			// sens de recalage de KONG
private 	messageid	mid_best_interet							// intérêt sur ma proie
private	int				i_flag_zde_fight_type					// type de la zde fight
private	int				i_fight_just_paf
private	int				i_fight_must_dodge
private	int				i_cible_en_hauteur_cycle = 0			// cycle d'actions a effectuer qd trigger cible en hauteur
private	int				i_cible_en_hauteur_flag					// flag pour le mode attaque
private	float			f_dot_tete_ou_queue = Cf_Cos75

// DEFENSE
private	int				i_contre_attaque_mode
private	int				i_contre_attaque_action
private	float			f_time_contre_attaque = 0.0
private	float			f_jauge_contre_attaque = 0.0
private	float			f_jauge_contre_repousse = 0.0
private	float			f_time_contre_repousse = 0.0
private	float			f_jauge_contre_dash_attack = 0.0
private	float			f_time_contre_dash_attack = 0.0

// PAF
separator "PAF"
private 	int				i_flag_paf_check_done		// flag qui indique que la détection des pafs a déjà été faite cette trame
private object			o_paf_actor						// acteur qui m'a paffé
private object			o_paf_actor_memo			// backup paf actor
private vector			v_paf_sens						// vecteur sens du paf
private int				i_paf_force						// force du paf
private vector			v_paf_position 					// position du paf
private float				f_coef_recul					// coef de recul suite à un paf
private int				i_paf_va_se_vautrer			// flag : paf qui met REX à terre
private int				i_paf_type						// type de paf (filtre)
private int				i_paf_try_to_paf				// Passe a vrai des que le TREX tente de paffer Kong( test ZDE ZDE)
private float				f_ko_delay						// délai pendant REX reste KO au sol
private int				i_ko_face_mur = vrai_faux	// flag qui indique de jouer l'anim de paf dans un mur
private float				f_fatigue_time					// délai ou REX reste au sol
private float				f_jauge_croutage				// jauge de pafs pour faire tomber REX
private	float			f_time_o_sol
private	int				i_paf_mur_leger = faux
private	vector		v_fight_actor_pos_backup
private	messageid	mid_paf_EVENT_Send		// Dernier message de paf a détruire en cas de finish

separator "Choppe Projectile"
private	object				o_KK_projectile = nobody			// acteur à attrapper (raptor)
private	object				o_msg_projectile						// acteur (raptor) qui a envoyé un message "attrappe-moi"
private	messageid			mid_GRABKONG					// message de l'objet grabbé
private	object				o_Grab_Attak_Target = nobody	// acteur grabbé (raptor)
private	vector				v_grab_object_pos					// position de l'objet grabbé
private   vector                  v_grab_vector							// sens du vecteur de grab pour la demande d'un client
private   int						i_grab_type								// sous-type de liaison demandé

// PAFS 
private 	object		ao_paf_list[Ci_paf_nb_max]				// tableau des acteurs paffés dans cette action
private 	int				i_paf_nb											// nb d'acteurs paffés dans cette action

// CHARGE
private 	object		o_charge_actor								// acteur à charger
private 	int				i_charge_mode								// sous-mode de la charge
private 	vector		v_charge_stop_vector						// axe dans lequel REX arrête sa charge
private	int				i_charge_paf_KONG							// flag qui indique que REX a paffé KONG en charge
private	float			f_time_last_charge							// date de la dernière charge de REX


//separator "TAG"
//#include "ROOT\EngineDatas\04 Technical Bank\AI Models\Global Library\exec_deplacements.var"

//separator "Detection"
//float	Cf_devant_TTpos			=	1.0
//float	Cf_devant_TTlong			=	15.5
//float	Cf_devant_TTangle		=	0.88
//float	Cf_devant_VTRpos		=	1.0
//float	Cf_devant_VTRlong		=	15.5
//float	Cf_devant_VTRangle		=	0.90
//float	Cf_devant_CTDpos		=	1.0
//float	Cf_devant_CTDlong		=	12.0
//float	Cf_devant_CTDangle		=	0.707
//float	Cf_devant_CTGpos		=	 1.0
//float	Cf_devant_CTGlong		=	12.0
//float	Cf_devant_CTGangle	=	0.707

// ETAT
separator "ETATS"
private 	int				i_etat_courant				= -1
private 	int				i_dernier_etat				= -1
private 	int				i_sort_etat
private 	float			f_time_start_etat
private 	function		fct_main_etat
private 	function		fct_last_etat
private	function		fct_track_change

// SUIVI REGARD
separator "SUIVI REGARD"
private int				i_flag_look					// flag qui indique que REX regarde qqchose/qq'un
private int				i_flag_perfect_look
private float				f_look_blend_coef
private float				f_look_main_actor_coef
private float				f_neck_length
private float				f_look_angle_blend_speed
private float				af_neck_bone_length[4]
private float				f_neck_vert_coef
private float				f_head_col_ray_Z_offset
private float				f_head_col_ray_Z_speed			= 1.0
private float				f_neck_col_duration
private float				f_time_head_col
private float				f_neck_B_weight
private float				f_neck_C_weight
private float				f_neck_bezier_coef					= 1.0
private float				af_neck_bone_bezier_coef[5]		= (1.0, 0.8, 0.6, 0.4, 0.2)
private float				f_look_head_coef
private vector			v_look_pos
private vector			v_look_head_pos
private vector			v_look_banking
private vector			v_look_virtual_sight
private vector			v_look_axis
private vector			v_neck_head_anti_col_pos
private vector			v_neck_col_normale
private vector			v_neck_head_anti_col_sight

// GRABBED
private object			o_grabbed_actor_KK 					// acteur courant qui me grabbe
private object			o_grabbed_actor_KK_ref				// acteur de référence qui me grabbe
private messageid	mid_grabbed_by_Kong_LNK_ID		// id du message de grab
private vector			v_grabbed_KK_sight						// vecteur d'orientation qd je suis grabbé
private int				i_exit_mode								// flag qui indique qu'on doit sortir du mode de grab
private int				ai_grabbed_availibility[ Ci_LNK_TYPE_NB]		// tableau de validité des liens
private int				i_grabbed_finish = vrai_faux
private int				i_grabbed_special = vrai_faux
private int				i_grabbed_tete
private int				i_grabbed_pos_mode
private vector			v_grabbed_my_pos_before_rec
private vector			v_grabbed_my_speed_before_rec
private vector			v_grabbed_orient_init
private int				i_grabbed_ref_set
private float				f_grabbed_last_time
private int				i_grabbed_nb
private float				f_grabbed_jauge_last_time = Cf_grabbed_delai_chain		// à l'init, le temps du dernier grab est écoulé
private float				f_grabbed_jauge_refuse_delay

private	vector		v_grab_grav_speed				// vitesse en étant grabbé
private	float			f_grab_grav_speed_norm		// norme de la vitesse en étant grabbé
private	float			f_grab_blend_pos					// position en étant grabbé
private	vector		v_grab_sight_init

// PROJECTILE
private	float		f_proj_rotate
private	int			i_proj_croutage					// Se croute ou pas en mode projectile
private	float		f_proj_freq
private	int			i_proj_KK_anim
private	int			i_derap_mode
private	int			i_derap_detect_fury
private	vector	v_derap_tout_droit_axis
private	int			i_derap_proj_pas_blesse
private	object	o_proj_target
private	int			i_proj_target_index
private	vector	v_proj_target_pos

// GROUND & CHUTE
private	float		f_non_collide_ground_time	 = 0.0	// !=0 : l acteur ne touche plus le sol
private	float		f_collide_ground_time = 0.0			// !=0 : l acteur touche le sol
private	vector	v_ground_normale = Cv_VerticalVector
private	vector	v_last_banking
private	vector	v_last_sight


// GFX==========================
private int 		GFX_Marche_smock[4] 
private int 		GFX_Marche_herbe[4] 
private int		i_index_membre    = 0
private vector 	v_vitesse_membre
private float		f_speed_membre
private int		i_Last_GroundId[4]
private int		GFX_Croutage = -1						// génération de GFX pour un croûtage

// ADD
private	vector	v_add_speed			// vitesse ajoutée
private	float		f_add_rotation			// rotation ajoutée

// ACTEURS
private	object		o_Kong			// KONG
private	object		o_Jack				// Jack
//private	object		o_ANN				// ANN


// IK =================================================================
private float			f_bassin_rotation_angle
private float			f_bassin_Z_offset
private	object	o_ventre

private int			i_flag_climb_IK[2]
private int			i_flag_walk_IK[2]

private int			i_flag_leg_IK[2]
private float			f_IK_Z_offset[2]
private float			f_IK_tenseur[2]
private float			f_IK_bassin_look_rot_coef
private float			f_IK_snap_coef[2]
private float			f_walk_offset[2]
private float			f_IK_coef[2]
private float			f_IK_speed[2]
private float			af_IK_bones_length[2][3]
private float			f_IK_ground_coef[2]
private float			f_feet_contact_duration[2]

private float			f_IK_bassin_rot_angle

private vector		v_bassin_pos
private vector		v_ground_normal = Cv_VerticalVector
private vector		v_virtual_banking = Cv_VerticalVector
private vector		v_IK_bassin_paf_offset
private vector		v_IK_ref_ground_pos
private vector		v_IK_bassin_pos
private float			f_body_rot_coef

private vector		v_IK_dest_pos[2]
private vector		v_IK_local_offset[2]
private vector		v_IK_ground_normale[2]
private vector		v_IK_bone_local_pos[2]
private vector		v_IK_bone_last_valid_sight[2]
private vector		v_IK_bone_last_valid_banking[2]

private object		ao_IK_bones[2][4]
private int				raptor_type = C_ID_Tyranosaure 	// Tyranosaure
private int				i_flag_back_jump

// IK LEGS
private int				i_flag_IK_ground_index
private float				f_IK_offset[2][2]
private int				i_head_bone_nb
private float				f_visual_paf_coef
private float				f_visual_paf_last_time
private float				f_visual_paf_Z_offset
private float				f_visual_paf_rot_coef
private vector			v_visual_paf_quaternion
private vector			v_visual_paf_dir
private float				f_visual_paf_time


// KONG JUMP ATTAK
private object			o_jumpattak_actor						// acteur courant qui réalise une jump attack
private object			o_jumpattak_actor_msg				// acteur qui a envoyé le msg de jump attack
private vector			v_jumpattak_sight						// axe d'orientation pour une jump attack

// UNCOL
private int				i_uncol = vrai_faux						// flag qui indique que je suis en uncol avec KONG
private object			ao_uncol_list[10]							// tableau des acteurs en uncol
private int				ai_uncol_done[10]						// 
private int				i_nb_uncol									// nb d'acteurs en uncol
private int				i_uncol_antibug = vrai_faux						// flag qui indique que je suis en uncol avec KONG
private	int				i_KONG_virtual_collision = faux

// DEPLACEMENT RESOLUTION LOCALE
separator "DEPLACEMENT"
private vector			v_orientation_sens						// vecteur d'orientation (vers ma proie)
private float				f_orientation_coef							// coef de rotation
//private int				i_res_loc_flag = faux						// flag qui indique si la résolution locale est active ou non
//private float				f_res_loc_contourne_sens = 0.0		// sens de contournement forcé (-1.0/0.0/1.0)
//private vector			v_res_loc_normale_choisie			// meilleure normale choisie par la résolution locale

// HOTSPOT
private int				i_hotspot_set	= vrai_faux				// indique si le TREX est un hotspot ou non (dynamique, évolue dans l'IA)

// FINISH
private float				f_finish_frame								// N° de frame courant de l'anim finish bras de fer
private int				i_finish_end									// flag fin du bras de fer (gagné ou perdu)
private float				f_finish_force_kong						// force de KONG pendant le bras de fer
private float				f_finish_force_rex							// force de REX pendant le bras de fer
private int				i_finish_init									// Permet de jouer la 1ere partie de l anim de cycl sans challenge
private vector			v_finish_pos_init							// Position a l init de l action
private	int				i_already_finished_flag

// GFX BLOOD
//private int			GFX_Blood[10] = (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
//private int			ai_blood_bone_index[10]
//private float			af_blood_delay[10]
//private vector		av_blood_bone_offset[10]
//private vector		av_blood_bone_normale[10]
//private int			ai_blood_finish[10]


// BLESSE
private	int				i_blesse_on							// Blessé ?
private	messageid	ID_LIFE
private	int				i_Anim_attente
private	int				i_Anim_marche

// I FINISH
private	messageid	mid_I_finish_LNK_ID
private	object		o_I_finish_actor
private	object		o_I_finish_actor_ref
//private	float			f_I_finish_hardness	= 1.0				// Difficulté de la résistance au Finish
private	float			f_I_finish_frequency	= 0.25			// Frequence de la tentative( enter 0.0 et 1.0)
private	int				i_I_finish_allowed							// Pour permettre 1 seule tentative de finish par attack
private	int				i_I_finish_try_cycle = 1

// GFX BAVE
private int					GFX_Bave_ID[10] // = (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
private float					GFX_Bave_Time[10]
private vector				GFX_Bave_Pos[10]
private float					GXF_Bave_Length[10]

private float					f_bave_elapse = 5.0
private float					f_bave_duration

// INTERET KONG OU ANN
private	float			f_time_KONG_not_on_me
private	float			f_time_KONG						// compte à rebourd pendant lequel le TREX ne s'intéresse qu'à KONG

private	int				i_force_change_anim

// OCCLUDERS
private	int				i_occluder_cette_trame = faux
private	float			no_occluder_duration = 0.0
private	vector		v_dest_pos_sans_occluder
private	vector		v_dest_pos_avec_occluder
private	vector		v_sight_sans_occluder
private	vector		v_sight_avec_occluder
private	int				i_charge_interdite
private	float			f_move_dist


// INTERACTION FIGHT ANN
private	object			o_interaction_target
private	messageid		mid_interaction
private	float				f_interaction_delay_dont_ask
private	int					i_interaction_cpt
//private	int					i_interaction_fin_cri
private	float				f_time_on_Jack
private	int					i_interaction_well_positionned

// DEGAGEMENT
private	vector		v_degagement_pos
private	int				i_degagement_flag
private	float			f_degagement_needed		// compteur temps qui indique depuis combien de temps on a besoin de se dégager

// STUNNED
private	int				i_stunned_flag
private	float			f_stunned_last_delay
private	int				i_stunned_paf_ecrase_flag

// PAFS MURS ANTICHAIN
private	float			f_delay_last_paf_mur


// IK NECK
private 	float			f_look_axis_length
private 	object		ao_head_bones[6]
private 	float			f_head_bite_angle
private 	float			f_look_dot_product
private	vector		v_last_look_pos
private	vector		v_look_pivot_pos
private	vector		v_backup_look_pos
private	float			f_look_in_dead_cone_sign
private	float			f_look_axis_norm
private	vector		v_bezier_head_look_pos
private	float			f_vision_close_to_head_sqr_dist
private	float			f_vision_close_to_feet_sqr_dist
private	float			f_vision_near_in_move_dist
private	vector		v_IK_bassin_banking
private	float			f_head_Z_min
private	vector		v_neck_col_pos
private	int				i_flag_head_search

// CRI
private	int				i_cri_filtre
private	int				i_flag_crie_au_lieu_de_charger

// PAF MUR ALIGN
private	vector		v_paf_mur_align
private	int				i_paf_mur_align

// GFX PARTICULES
private	float			f_time_gfx_particules = 0.0
private	float			f_time_gfx_particules_init = 0.0
private	int				i_gfx_particules_finish
private	vector		v_gfx_particules_pos = Cv_NullVector

separator "RAGE"
private	int				i_rage_cpt
private	float			f_rage_jauge

private	vector		v_zde_corps_size = cvector(3.5,3.5,3.5)

// secto...
private	int				i_frame_nb

//ADDED SURESH
separator "WALL EFFECT AI  FOR GFX"
object				o_Wall_Effect
private	int			i_Trex_ID
private	float		f_global_time 
private	float		f_throwTime = 0.0
private	float		f_throw_delay = 2.0
private	float		f_Trex_LeftfootRunGFX_time = 0.0
private	float		f_Trex_RightfootRunGFX_time = 0.0
private	float		f_Trex_LeftfootWalkGFX_time = 0.0
private	float		f_Trex_RightfootWalkGFX_time = 0.0
private	float		f_Trex_RunGFX_delay = 0.1
private	float		f_Trex_WalkGFX_delay = 0.6
private	vector	v_collision_point

// UNCOL POWA
private	object		ao_uncol[10]
private	object		ao_uncol_old[10]
private	int				i_uncol_nb
private	int				i_uncol_old_nb

// TEST KONG MODE
private	int				i_Kong_Mashing
private	int				i_Kong_Gladiator
private	int				i_Kong_Paf
private	int				i_Kong_Swing

// FUCKING SFX
private	int				ai_walling_SFX[2] 
private	vector		v_IK_ground_pos[2]

// AFX
//private	int				i_afx_eclair_phase
//private	float			f_afx_eclair_time
//private	float			f_afx_eclair_brightness
//private	float			f_afx_eclair_contraste
//private	float			f_afx_eclair_bw
//private	float			f_afx_slow_motion_time
//private	float			f_afx_slow_motion_speed = 1.0

// STATS
private	int				i_stats_nmi_killed_done

private	int				i_attente_init			= faux_vrai

private	float			f_contact_kong_delay

private	int				i_cible_haut_cancel_mur

private	vector		v_particules_paf_dir

private	int				i_Trig_Exec_Charge_Forced
private	object		o_Trig_Exec_Charge_Target

private	int				i_fight_Jack_cri_cpt


private	float			f_zoom_smooth_coef


private	object		o_mort_paf_actor_backup


// TEST QUATERNION
private int					i_quat_index
private float					f_quat_last_time
private float					af_quat_time[10] = (-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0)
private float					af_quat_coef[10] 
private vector				av_quat_start[10]
private vector				av_quat_end[10]
// TREX BITE QUATERNION
private int				ai_bite_action_num[4]
private vector			av_bassin_bite_quat[4]
private vector			av_gao_bite_quat[4]
// IK LEGS
private	float		f_IK_leg_length[2]
private	int			i_flag_bite_leg
private vector		v_IK_bassin_eat_pos
private float			f_IK_bassin_eat_rot_coef
private float			f_IK_bassin_ground_rot_coef
private	int			i_flag_bite_ok
private float			f_IK_bassin_bite_rot_coef
private vector		v_IK_bassin_bite_pos
private vector		v_IK_bassin_bite_start_quat
private object		o_IK_bassin_bite_actor
private int			i_flag_bite_no_wall
private vector		v_IK_feet_Z_axis[2]


// BITE ANIM IA
private float			f_machoire_rot_coef
private float			f_machoire_clap_duration
private float			f_SND_between_growl_duration
private int			i_SND_flag_play_growl

private	float		f_Jack_paf_jauge

private	int			i_finish_repousse_flag

