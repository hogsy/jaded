#include "KT_defines.var"

#define		Cf_ralenti_fixe_duree			0.2	// 0.3		// durée où le jeu reste avec la valeur de ralenti initiale
#define		Cf_ralenti_annule_duree		1.0	// 0.3		// durée que le jeu met à revenir à la vraie vitesse


// BANKING GROUND =========================================================================
//v_last_banking = OBJ_BankingGet()
//v_last_sight = OBJ_SightGet()
//switch( i_etat_courant )
//{
//	case ETAT_KK_grabbedTT :
//	case ETAT_KK_grabbedFinish :
//	case ETAT_Finish_sur_Kong :
//	case ETAT_JumpAttak :
//		break
//	default:
//		OBJ_BankingGeneralSet(v_last_sight, v_ground_normale)
//		break
//}


// GESTION DES FACES =======================================================================
if( i_etat_courant != ETAT_projectile && (COL_CrossableGet() & Gmat_KK_Cross_All_But_Kong_And_TREX) )
{
	if (COL_GMatReportGet(Gmat_KK_Cross_All_But_Kong_And_TREX) == -1)
		COL_CrossableSet(none, Gmat_KK_Cross_All_But_Kong_And_TREX)
}

// KAMERA =================================================================================
if ( IO_ButtonJustPressed( joy_button_StickL))
{
	i_DBG_lock_cam = vrai - i_DBG_lock_cam
}
if( i_etat_courant != ETAT_mort && i_etat_courant != ETAT_attente)
{
	if( ! o_cadavre )
	{
		// TREX en combat
		if ( i_DBG_lock_cam )
			EVENT_AddEventLockCam(OBJ_Me(), C_EVENT_LockCamStatus_Fight, Cv_Offset_Cam_TREX)
		else
			EVENT_AddEventLockCam(OBJ_Me(), C_EVENT_LockCamStatus_Normal, Cv_Offset_Cam_TREX)
	}
}


// VITESSE ET ROTATION AJOUTEE PAR LES PAFS =================================================
if( OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Dyna) )
{
	if( ! MATH_FloatNullToler(1 - f_coef_recul, 0.1) )
	{
	//	DBG_RenderVector(OBJ_PosGet(), v_add_speed * 10, color_cyan)
		DYN_SpeedSetVector( MATH_VecBlend(v_add_speed, DYN_SpeedGetVector(), f_coef_recul ) )
		OBJ_RotateLocalZ( ( f_add_rotation * (1 - f_coef_recul) ) * 3.0 * TIME_GetDt())
		f_coef_recul = MATH_FloatBlend(f_coef_recul, 1.0, 3.0 * TIME_GetDt())
	}
	else if( ! MATH_VecNullEpsilon(v_add_speed) )
	{
		v_add_speed = Cv_NullVector
	}
}


// PAF POUR REPOUSSER KONG HORS DE MA COLMAP ============================================
KT_Uncol_Check( )


// PAF POUR REPOUSSER KONG HORS DE MA COLMAP ============================================
if( i_paf_exit_colmap_mode )
{
	if( ! i_uncol_old_nb && ! i_uncol_antibug )
		i_paf_exit_colmap_mode = faux		// KONG n'est plus en collision avec moi
	else if( KT_AntiBug_Col_KONG_Autorise() )		// restester car l'état a pu changer / on a pu déjà paffer KONG
		AI_Execute("KT_exec_paf_exit_colmap")
}


// raz sens de paf recalage
if( ! i_paf_exit_colmap_mode && ! MATH_VecNullEpsilon(v_paf_exit_colmap_sens) )
	v_paf_exit_colmap_sens = Cv_NullVector


v_grabbed_my_pos_before_rec = OBJ_PosGet()
v_grabbed_my_speed_before_rec = DYN_SpeedGetVector()

// RAZ Capas Anims
OBJ_CapaSet(none, Capa_Paffe)


// REACTIVER MON PROPRE OCCLUDER
if( o_occluder )
{
	@o_occluder OBJ_FlagInactiveSet(faux)
}


// KAMERA RUMBLE ======================================================================
if( OBJ_CapaTest(Capa_KAMERA_Rumble) )
{
	OBJ_CapaSet(none, Capa_KAMERA_Rumble)
	@get_Kamera Proc_Kam_RumbleSet(1.0 / Cf_Rumble_Amplitude, 6.0)
}


i_Trig_Exec_Charge_Forced = faux


// CADAVRES ===============================================================
KT_Cadavre_Check()
KT_Cadavre_Check_New()


// Game Speed : Proche de Jack ? ----------
//if( i_etat_courant == ETAT_Finish_sur_Kong )
//	if( o_Jack )
//		@o_Jack Proc_KIndigene_CheckNearOfBigPerso(OBJ_Me(), 8.0)
// Game Speed : Proche de Jack ? ----------



// DEBUG ====================================================================
AI_Execute("KT_exec_DEBUG")
