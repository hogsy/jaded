#include "KT_defines.var"

vector	tv_temp

object	to_bone
object	to_head

int			ti_i
int			ti_k
int			ti_membre_index

float		tf_life_init

// DEBUG FOR VINCE ========================================
i_DBG_VINCE = 0
// DEBUG FOR VINCE ========================================

if ( ! i_actif )
{
	OBJ_CapaSet(Capa_Mort, none)		// pour les mashing pilier qui testent la capa 15 de REX
	if( o_occluder )
		@o_occluder OBJ_FlagInactiveSet(vrai)
	OBJ_Destroy()
}

OBJ_ZoomSet(Cf_Kong_Zoom_coef_default)

AI_RunContext(CTX_Normal)

// MAIN ACTORS ===================================
AI_Execute("KT_exec_check_main_actors")

// PUT@#!!!µ£$  DE SECTO !!!
i_frame_nb = 0
if( ! OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Generated) )
{
	OBJ_FlagInvisibleSet(vrai)
	meta( i_frame_nb < 2 )
	{
		i_frame_nb++
	}
}
OBJ_FlagInvisibleSet(faux)
// PUT@#!!!µ£$  DE SECTO !!!


tv_temp = cvector(7.0, 7.0, 7.0)													// Ajuste la BV
BV_MinSet(-tv_temp)
BV_MaxSet(tv_temp)
OBJ_FlagsTypeSet(OBJ_C_TypeFlag_DodgeCamera,none) 		// Place le FLAG


//macro_change_tag_size(cvector(-0.5, -1.0, 0.0), cvector(0.5, 1.0, 0.0))

COL_ColSetActivationSet(all, none)
COL_ColSetActivationSet(none, C_bit_zde_fight + C_bit_zdm_recalagespecial)

COL_SwapToSpecific(C_zdm_pied)
COL_ZoneSizeSet(C_zdm_pied, cvector(2.5, 2.5, 2.5))
COL_ZonePosSet(C_zdm_pied, cvector(0.0, 0.0, 2.5))
DYN_MaxStepSet( 1.0)

COL_SwapToSpecific(C_zdm_recalagespecial)
COL_ZoneSizeSet(C_zdm_recalagespecial, cvector(0.75, 0.75, 0.75))


COL_SwapToSpecific(C_zde_corps)
COL_ZoneSizeSet(C_zde_corps, v_zde_corps_size)
COL_ZonePosSet(C_zde_corps, cvector(0.0, 0.0, 3.0))

COL_SwapToSpecific(C_zde_tete)
COL_ZoneSizeSet(C_zde_tete, cvector(1.5, 1.5, 1.5))
COL_ZonePosSet(C_zde_tete, cvector(0.0, -4.0, 4.0))

COL_SwapToSpecific(C_zde_fight)
COL_ZoneSizeSet(C_zde_fight, Cv_zde_fight_machoire_size)
COL_ZonePosSet(C_zde_fight, cvector(0.0, -4.0, 3.5))

i_flag_zde_fight_type = Ci_zde_fight_type_machoire			// zdf positionnée sur la machoire

DYN_On()
DYN_FlagsSet(DYN_C_GlobalFriction + DYN_C_BasicForces + DYN_C_NeverDynamicFather + DYN_C_VectorFriction + DYN_C_Col + DYN_C_SkipFrictionWhenSpeedFromAnim, none)
DYN_GravitySet(Cv_NormalGravity)
DYN_FrictionVectorSet(Cv_TREX_friction_marche)
DYN_SlideHorizCosAngleSet( Cf_Cos45)

AI_CBAdd(OBJ_Me(), CallBack_WhenDestroy, "KT_CALLBACK_when_destroy")
AI_CBAdd(OBJ_Me(), CallBack_After_Blend, "KT_CALLBACK_afterblend")
AI_CBAdd(OBJ_Me(), CallBack_Client, "KT_CALLBACK_client")

// Hot spot d'attaque
OBJ_CustomBitsSet( CBit_Hot_Spot, 0)

// Traverse la colmap "tous sauf ANN"
COL_CrossableSet(Gmat_KK_Crossable_Default, none)
COL_CrossableSet(none, Gmat_KK_Cross_All_But_Kong_And_TREX + Gmat_KK_Cross_All_But_TREX)

// IK NECK INIT ================================================================================================
i_head_bone_nb = 4
for (ti_i = 0; ti_i < i_head_bone_nb; ti_i++)
{
	ao_head_bones[ti_i] = ANI_CanalObjectGet(Anim_Canal_Tete + ti_i)
	if (ti_i)	
	{
		af_neck_bone_length[ti_i - 1] = MATH_VecNorm(@ao_head_bones[ti_i - 1] OBJ_PosGet() - @ao_head_bones[ti_i] OBJ_PosGet())
		f_neck_length += af_neck_bone_length[ti_i - 1]
	}
}
o_ventre = ao_head_bones[i_head_bone_nb - 1]
ao_head_bones[i_head_bone_nb] = ANI_CanalObjectGet(Anim_Canal_Bassin)





f_look_axis_length = 20.0		// 10.0
to_head = ANI_CanalObjectGet(Anim_Canal_Tete)
v_look_head_pos = MATH_VecGlobalToLocal(@to_head OBJ_PosGet() - OBJ_PosGet())
v_look_banking = MATH_VecGlobalToLocal(@to_head OBJ_BankingGet())
v_look_axis = OBJ_SightGet() * f_look_axis_length

f_vision_close_to_head_sqr_dist = 9.0
f_vision_close_to_feet_sqr_dist = 9.0
f_vision_near_in_move_dist = 8.0


// IK LEGS INIT ============================================================================

f_visual_paf_last_time = -Cf_Infinit

for (ti_i = 0; ti_i < 2; ti_i++)
{
	switch(ti_i)
	{
		case Ci_IK_pied_gauche :
			ti_membre_index = Anim_Canal_PiedGauche
			break
		case Ci_IK_pied_droit :
			ti_membre_index = Anim_Canal_PiedDroit
			break
	}
	
	for (ti_k = 0; ti_k < 3; ti_k++)
		ao_IK_bones[ti_i][ti_k] = ANI_CanalObjectGet(ti_membre_index + (2 - ti_k))
	
	switch(ti_i)
	{
		case Ci_IK_pied_gauche :
			ti_membre_index = Anim_Canal_OrteilGauche
			break
		case Ci_IK_pied_droit :
			ti_membre_index = Anim_Canal_OrteilDroit
			break
	}	

	ao_IK_bones[ti_i][3] = ANI_CanalObjectGet(ti_membre_index)
		
	af_IK_bones_length[ti_i][0] = MATH_VecNorm(@ao_IK_bones[ti_i][1] OBJ_PosGet() - @ao_IK_bones[ti_i][0] OBJ_PosGet())
	af_IK_bones_length[ti_i][1] = MATH_VecNorm(@ao_IK_bones[ti_i][2] OBJ_PosGet() - @ao_IK_bones[ti_i][1] OBJ_PosGet())
	af_IK_bones_length[ti_i][2] = MATH_VecNorm(@ao_IK_bones[ti_i][3] OBJ_PosGet() - @ao_IK_bones[ti_i][2] OBJ_PosGet())

	f_IK_leg_length[ti_i] = af_IK_bones_length[ti_i][0]
	f_IK_leg_length[ti_i] += af_IK_bones_length[ti_i][1]
	f_IK_leg_length[ti_i] += af_IK_bones_length[ti_i][2]
	f_IK_leg_length[ti_i] *= 1.75

	v_IK_bone_last_valid_sight[ti_i] = @ao_IK_bones[ti_i][2] OBJ_SightGet()
	v_IK_bone_last_valid_banking[ti_i] = @ao_IK_bones[ti_i][2] OBJ_BankingGet()
	
	if (ti_i < 2)
		v_IK_feet_Z_axis[ti_i] = @ao_IK_bones[ti_i][3] MATH_VecGlobalToLocal(Cv_VerticalVector)	

	
}



f_coef_recul = 1.0

//i_DBG_charge = enum( "default" 0 "toujours" 1 "jamais" 2 )
if( i_DBG_charge == 1)
	f_time_last_charge = TIME_Get() - Cf_charge_delai_recup		// pour charger dès le début :)
else
	f_time_last_charge = TIME_Get()		// pour ne pas charger dès le début


ACT_ActionSet(i_Anim_attente + 0x80000000)				// KER BUG 5 ANS OLD !!!

OBJ_FlagsIdentitySet(OBJ_C_IdentityFlag_Msg, 0)			// structure message (pour chopper un projectile lancé par Kong)

ODE_Enable(vrai)				

// LIFE & FOODCHAIN
switch( i_life_init )
{
	case Ci_life_init_normal :
		tf_life_init = f_life_max
		break
	case Ci_life_init_blesse :
		tf_life_init = f_life_seuil_blesse
		break
	case Ci_life_init_mort :
		tf_life_init = 0.0
		break
}
ID_LIFE = EVENT_AddEventLife(tf_life_init, f_life_max, f_life_seuil_blesse)
i_foodchain_eat_slots_free = i_foodchain_eat_slots_nb


TREX_Add_Obj(OBJ_Me())

f_time_KONG = MATH_RandFloat(Cf_delay_on_KONG - 5.0, Cf_delay_on_KONG + 5.0)
//f_time_KONG = 1.0
f_stunned_last_delay = 10.0
f_delay_last_paf_mur = Cf_paf_mur_delay
f_time_gfx_particules = 0.0

//i_fight_Jack_cri_cpt = 1		// la 1ère fois on crie

//ADDED SURESH
o_Wall_Effect = get_Impact_GFX_path   //MUST HAVE /06 levels/_Kanada/_basic/_basic_SFX_light_and_smoke_KK  included in all maps!!!  If not, comment the default value out

AI_Execute("KT_exec_set_obbox")

to_bone = ANI_CanalObjectGet(210)		// snap bassin
@to_bone OBJ_FlagsIdentitySet( OBJ_C_IdentityFlag_ExtendedObject, none)
@to_bone OBJ_FlagsExtraSet( OBJ_C_ExtraFlag_NoNBlendBone, none)

v_last_banking = Cv_VerticalVector
v_last_sight = OBJ_SightGet()

macro_add_callback_after_cam("KT_CALLBACK_aftercam")
AI_TrackChange(Ci_Track_TagOff, "KT_TRACK_tagoff")
AI_TrackChange(Ci_Track_Reflex, "KT_TRACK_reflex")
AI_TrackChange(Ci_Track_TagOn, "KT_TRACK_tagon")

if( i_DBG_track_TEST || i_TEST_Anim != -1 )
	AI_TrackChange(Ci_Track_Etat, "KT_ETAT_TEST")
else if( i_life_init == Ci_life_init_mort )
	AI_TrackChange(Ci_Track_Etat, "KT_ETAT_mort")
else if ( i_debut_force == 1)
	AI_TrackChange(Ci_Track_Etat, "KT_ETAT_JumpAttak")
else
	AI_TrackChange(Ci_Track_Etat, "KT_ETAT_attente")

