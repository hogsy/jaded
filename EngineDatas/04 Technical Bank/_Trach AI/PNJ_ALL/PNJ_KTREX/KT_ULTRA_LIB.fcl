#include "KT_defines.var"

procedure_ultra int KT_Proc_Dodges()
{
	if ( i_fight_must_dodge)
		return vrai
	else
		return faux
}

procedure_ultra int KT_AwareOfKong()
{
	if ( ( o_fight_actor != o_Kong && o_fury_actor	!= o_Kong)	// Not Aware of Kong
	|| i_etat_courant == ETAT_KK_choppe_projectile		// Aware of Raptor
	|| EVENT_LIFE_Est_Blesse( ID_LIFE))						// bleeding : not aware
		return faux
	else
		return vrai
}

//procedure_ultra int KT_Proc_IsLockedOnAnn()
//{
//	if( o_interaction_target )
//		return vrai
//	
//	if( i_etat_courant == ETAT_cri && o_fury_actor == o_ANN )
//		return vrai
//	
//	return faux
//}

procedure_ultra int KT_Proc_FightAnnWellPositionned()
{
	return i_interaction_well_positionned
}

procedure_ultra int KT_Proc_IsRewardForKONG()
{
	return i_Reward_for_KONG
}

procedure_ultra int KT_Proc_canBeDodged()
{
	switch ( i_etat_courant)
	{
		case ETAT_KO_au_sol :
		case ETAT_mort : 
			return faux
			break
		default:
			return vrai
	}
}

procedure_ultra int KT_Throw_Choose_Anim( int pi_anim, vector pv_vector)
{
	switch ( pi_anim)
	{
		case 111 :
			// Jeté en Arriere
			 return 54 // Action_Fight_GrabTT_Projectile_Arr
			break
		case 241 :
			// Jeté sur le cote
			return 66 // Action_Fight_GrabTT_Projectile_G
			break
		case 242 :
			// Jeté sur le cote
			return 67 // Action_Fight_GrabTT_Projectile_G + 1
			break
		default:
			if ( MATH_VecDotProduct(pv_vector, OBJ_HorizonGet()) < 0.0)
				return 72 // Action_Fight_Projectile_D
			else
				return 73 // Action_Fight_Projectile_G
	}
}

procedure_ultra int KT_Proc_Uncol_Check( object	po_gao)
{
	return ARR_ObjSearch(&ao_uncol_old[0] , i_uncol_old_nb, po_gao)	
}

procedure_ultra int KT_Proc_RefusePaf()
{
	return i_contre_attaque_mode
}

procedure_ultra void KT_Proc_ChangeTerritory( object	o_zone)
{
	 o_perimetre = o_zone
}



procedure_ultra void KT_Proc_Charge( object po_target)
{
	i_Trig_Exec_Charge_Forced = vrai
	o_Trig_Exec_Charge_Target = po_target
}


// Retourne vrai si le TREX est dans cet état, faux sinon
// 1 : état foodchain (depl & mange)
// 2 : en train de manger
procedure_ultra int KT_Proc_Test_Mode(int ti_mode)
{
	switch( ti_mode )
	{
		case 1 : 
//			if( i_etat_courant == ETAT_FoodChain )
			if( o_cadavre )
				return vrai
			break
		case 2 :
			if( ACT_ActionGet() == Action_Mange )
				return vrai
			break
	}
	return faux
}


