#include "KT_defines.var"

//procedure_ultra int	LIb_Kong_Attack( object po_object);
//#define Cf_time_grab 	5.0

int				ti_i
int				ti_action
int				ti_freq
int				ti_eject
int				ti_valide
int				ti_col
int				ti_grab_action
int				ti_detect_col

float			tf_angle
float			tf_norm
float			tf_dot
float			tf_time_grab

vector		tv_sight
vector		tv_last_pos
vector		tv_dest_pos
vector		tv_head_pos
vector		tv_temp
vector		tv_temp2
vector		tv_temp3
vector		tv_pos
vector		tv_add_speed
vector		tv_pos_ancrage
vector		tv_speed
vector		tv_sens_collision

object		to_col_actor
object		to_tete
object		to_hand
object		to_bone 
object		to_target

#define		Cf_grab_speed_paf_norm		13.0		// Norme du vecteur de vitesse de grab minimum pour considérer 
																	// que le corps du TREX peut paffer les autres acteurs


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux
	i_exit_mode = faux
	i_uncol = vrai		// DAns ce cas la on ne peux pas réactiver la collision sinon on risque de pas reusssir a éjecter : recalage...
	o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, faux, nofunc, nofunc)		// Fin de la liaison
	return
}


// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_KK_grabbedTT)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_KK_grabbedTT
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	o_grabbed_actor_KK_ref = o_grabbed_actor_KK
	fct_last_etat = AI_TrackCurGet()
	
//	for (ti_i = 0; ti_i < 4 ; ti_i++)
//	{
//		ao_grabbed_bone_head[ti_i] = ANI_CanalObjectGet( Anim_Canal_Tete + ti_i)
//		if ( ti_i > 0)
//			af_grabbed_bone_length[ti_i] = MATH_VecDistance( @ao_grabbed_bone_head[ ti_i] OBJ_PosGet(), @ao_grabbed_bone_head[ ti_i-1] OBJ_PosGet())
//	}
	ai_grabbed_availibility[ Ci_LNK_GRAB_KONG] = faux
//	ACT_ActionSet( Action_Fight_GrabTT_cycl)
	v_grab_grav_speed = DYN_SpeedGetVector()
	v_grabbed_KK_sight = Cv_NullVector
	f_grab_blend_pos = 0.0 
	f_time_start_etat = 0.0
	v_finish_pos_init = Cv_NullVector
	
	// SUPPRESSION DE L'INTERET (POUR L'ARRET DU TIMER DE MORT ANN)
//	if( MSG_GlobalIsValid(mid_best_interet) )
//		MSG_GlobalDelete(mid_best_interet, C_EVENT_EOFDEL)

	if( i_DBG_trace_propose_grab )
	{
		DBG_TraceString("=> ")
		DBG_TraceObject(OBJ_Me())
		DBG_TraceString(" grabbed")
		DBG_TraceEOL()
	}

	// TEST DE CHAIN GRAB
//	if (  !TIME_Elapsed( f_grabbed_last_time, Cf_grabbed_delai_chain))
//		i_grabbed_nb++
//	else
//		i_grabbed_nb = 1

	KT_Timer_KONG_Init()
	o_fight_actor = o_grabbed_actor_KK
	o_proj_target = nobody
	i_proj_target_index = -1
	f_coef_recul = 1.0		// SUPPR DES ADD SPEED
}
else
{
	f_time_start_etat += TIME_GetDt()
}


// ANALYSE  =======================================================================================================


// Detection du vide
if ( KT_CheckChute())
{
	LNK_GrabKong_ActionSet(mid_grabbed_by_Kong_LNK_ID, Ci_GrabKong_ChuteVide)
	DYN_FrictionVectorSet(Cv_NullVector)
	AI_TrackCurChange("KT_ETAT_chute")
}

KT_Interet_Update( o_fight_actor, C_EVENT_InteretStatusGrab)

// Detection de PAF
AI_Execute("KT_exec_check_paf")
if (o_paf_actor)
{
//	f_time_gfx_particules = 2.0 * Cf_time_gfx_particules		// pour cumuler
	if( o_paf_actor == o_Kong )
	{
		KT_Grabbed_Jauge_Update()
	}
	macro_change_etat("KT_ETAT_paf")
}


if ( ! i_exit_mode )
	ti_valide = vrai
else
	ti_valide = faux

if( i_blesse_on )
	tf_time_grab = 5.0
else
	tf_time_grab = 1.0

o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, ti_valide, nofunc, nofunc)
if ( ! o_grabbed_actor_KK)
{
	// La Fin de mode est demandé, attendre la fin d anim spéciale
//	i_exit_mode = vrai						// Liaison brisée(PAF sur KONG)
	ti_action = ACT_ActionGet()
	if (ACT_CustomBitGet() & CBit_GrabbedKK_Anim_Speciale)
	{
		// anim particulières qui doivent se termienr avant de changer de mode
		switch( ti_action)
		{
			case Action_Fight_GrabTT_JeteD :
			case Action_Fight_GrabTT_JeteG :
				i_grabbed_nb = 0							// REX jete KONG REINIT du chain
			case Action_Fight_GrabTT_Paf :
//			case Action_FlancG_Coup :
//			case Action_FlancD_Coup :
//				f_grabbed_last_time = TIME_Get()	// CAS ou KONG FRAPPE preparer l anti chain coup
				i_grabbed_special = vrai				// Grab special possible
				i_exit_mode = vrai						// On est pas dans le cas de lancé : retour en fight
				if ( !ACT_ActionFinished())
					return
				break
//				ACT_ActionSet( Action_Fight_GrabTT_Projectile_Arr)
//				DYN_SpeedSetVector(Cv_NullVector)				
//				if ( !ACT_ActionFinished())
//					return
//				break
			case Action_Fight_GrabTT_Projectile_D :
			case Action_Fight_GrabTT_Projectile_G :
				i_exit_mode = faux						// Projection coté
				if ( ANI_CurrentFrameGet( 0) < 60)
					i_exit_mode = vrai						// Projection coté interrompue
				else
					i_exit_mode = faux						// Projection coté a finir				
//					return
				break				
			case Action_Grabbed_Bited_Lose :
				if ( !ACT_ActionFinished())
					return
				i_exit_mode = vrai							// Fight ensuite
				break				
			default:
				i_exit_mode = faux						// A tracer si cas possible
				if ( !ACT_ActionFinished())
					return
				break
		}
//		if ( !ACT_ActionFinished())
//			return
	}
	else
	{
		// cas général
		switch( ti_action)
		{
			case Action_Fight_Projectile_D :
			case Action_Fight_Projectile_G :
			case Action_Normal_Projectile :
				i_exit_mode = faux						// On est dans le cas de lancé : projectile
				break		
			default:
				i_exit_mode = vrai	
		}		
	}

	if( i_exit_mode )
	{
		// KONG ATTIRE LE TREX
		if( EVENT_LIFE_CurLifeGet(ID_LIFE) <= 0.0 )
		{
			i_paf_va_se_vautrer = faux
			macro_change_etat( "KT_ETAT_KO_au_sol")
		}
		else
			macro_change_etat( "KT_ETAT_fight_KONG")
	}
	else
	{
		// Kong a rompuy la liaison ca ne peuyx etre qu'un projection( pour l instant)
		
		// KONG ATTIRE LE TREX
		switch ( ACT_ActionGet())
		{
			case Action_FlancG_Crash :
			case Action_FlancD_Crash :
				if (  EVENT_LIFE_CurLifeGet(ID_LIFE))
					macro_change_etat("KT_ETAT_fight_KONG")
				else
				{
					i_already_finished_flag = vrai	// Le Souleve est un finish mais pas la Morsure
					KT_STATS_NMI_Killed(o_grabbed_actor_KK)
					macro_change_etat("KT_ETAT_mort")
				}
				break
			case Action_Grabbed_Bited_Win :		
				if (  EVENT_LIFE_CurLifeGet(ID_LIFE))
					macro_change_etat("KT_ETAT_fight_KONG")
				else
				{
					f_fatigue_time = 2.0
					o_paf_actor = o_fight_actor
					o_paf_actor_memo = o_fight_actor
					macro_change_etat("KT_ETAT_KO_au_sol")
				}
				break
			default:
				macro_change_etat( "KT_ETAT_projectile")
		}
	}
}
 
KT_Uncol_Add( o_grabbed_actor_KK)

// Quel mode est en cours :
ti_eject = faux		// On ne s'ejecte que si Kong en donne l'ordre

ti_grab_action = LNK_GrabKong_ActionGet(mid_grabbed_by_Kong_LNK_ID)

switch ( ti_grab_action)
{
	case Ci_GrabKong_Attrape :
		// Positionnement et orientation initial
		// La vitesse est imposée par Kong qui Freine le mouvement
		i_grabbed_pos_mode = 1											// Le TREX charge
		i_grabbed_ref_set = faux

		switch (LNK_GrabKong_AnimJeteGet( mid_grabbed_by_Kong_LNK_ID))		// Choix de l anim en Fct de celle de Kong
		{
			case 1:
//				ACT_ActionSet(Action_Fight_GrabTT_cycl)
				break
			case 246 :
				i_grabbed_ref_set = vrai
				ACT_ActionSet( Action_Fight_GrabTT_Proj_Att_G)
				tv_dest_pos = @o_grabbed_actor_KK OBJ_PosGet() + ( @o_grabbed_actor_KK OBJ_SightGet() * LNK_GrabKong_ArmSizeGet( mid_grabbed_by_Kong_LNK_ID))
				LNK_GrabKong_NeckSizeSet( mid_grabbed_by_Kong_LNK_ID, MATH_VecNorm(tv_dest_pos - OBJ_PosGet()))
				LNK_GrabKong_AncrageVectorSet( mid_grabbed_by_Kong_LNK_ID, MATH_VecNormalize(tv_dest_pos - OBJ_PosGet()))
				break
			case 245 :
				i_grabbed_ref_set = vrai
				ACT_ActionSet( Action_Fight_GrabTT_Proj_Att_D)
				tv_dest_pos = @o_grabbed_actor_KK OBJ_PosGet() + ( @o_grabbed_actor_KK OBJ_SightGet() * LNK_GrabKong_ArmSizeGet( mid_grabbed_by_Kong_LNK_ID))
				LNK_GrabKong_NeckSizeSet( mid_grabbed_by_Kong_LNK_ID, MATH_VecNorm(tv_dest_pos - OBJ_PosGet()))
				LNK_GrabKong_AncrageVectorSet( mid_grabbed_by_Kong_LNK_ID, MATH_VecNormalize(tv_dest_pos - OBJ_PosGet()))
				break
//			case 279 :
//				i_grabbed_tete = 0		// cote
//				v_grabbed_KK_sight = Cv_NullVector	// A reinitialiser car on peux passer de Sweep a lift
//				ACT_ActionSet(Action_FlancG_Cycl)
//				ANI_CurrentFrameSet(0,0)
//				break
//			case 289 :
//				i_grabbed_tete = 0		// cote
//				v_grabbed_KK_sight = Cv_NullVector	// A reinitialiser car on peux passer de Sweep a lift
//				ACT_ActionSet(Action_FlancD_Cycl)
//				ANI_CurrentFrameSet(0,0)
//				break
			case 0:
				ACT_ActionSet(Action_Fight_GrabTT_cycl)
				break	
			case 100: 
				ACT_ActionSet(Action_Fight_GrabTT_cycl)
				break
			case 103 : // Ci_Kanim_GrabTT_tireD_Att
				ACT_ActionSet( Action_Fight_GrabTT_TireD_Att)
				break
			case 104 : // Ci_Kanim_GrabTT_tireG_Att
				ACT_ActionSet( Action_Fight_GrabTT_TireG_Att)
				break

		}
		f_time_start_etat = 0.0
		break

	case Ci_GrabKong_Repousse :
		// LE Grab viens d'être interrompu : Stop & attak
		// NB: Kong nous a tenu trop longtemps
		i_grabbed_pos_mode = 0
		ti_action = ACT_ActionGet()
		if ( ti_action != Action_Fight_GrabTT_JeteG && ti_action != Action_Fight_GrabTT_JeteD )
		{
			tf_dot = MATH_VecDotProduct( @o_fight_actor OBJ_PosGet() - OBJ_PosGet(), OBJ_HorizonGet())
			if ( tf_dot > 0)
				ACT_ActionSet( Action_Fight_GrabTT_JeteG)
			else
				ACT_ActionSet( Action_Fight_GrabTT_JeteD)
		}
		if ( ANI_CurrentFrameGet(0) > 20.0)
		{
			i_exit_mode = vrai
			o_fight_actor = o_grabbed_actor_KK		// L'acteur a mordre
			o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, faux, nofunc, nofunc)
		}
		return
		break

	case Ci_GrabKong_Lance :
		// LE Grab viens d'être interrompu : Recul
		// NB: Kong nous a Lancé
		v_grab_grav_speed = LNK_GrabKong_LanceVectorGet( mid_grabbed_by_Kong_LNK_ID)	// Vitesse de Lancé de Kong
		DBG_RenderVector( OBJ_PosGet(), v_grab_grav_speed, color_bleu)
		LNK_GrabKong_SpeedVectorSet( mid_grabbed_by_Kong_LNK_ID, v_grab_grav_speed)
		i_proj_KK_anim = LNK_GrabKong_AnimJeteGet( mid_grabbed_by_Kong_LNK_ID)		// Anim choisi par Kong
		i_proj_croutage = faux
		f_grab_grav_speed_norm = MATH_VecNorm( v_grab_grav_speed)
		switch ( i_proj_KK_anim)
		{
			case 111 :
				// Jeté en Arriere
				ACT_ActionSet( Action_Fight_GrabTT_Projectile_Arr)
				DYN_SpeedSetVector(Cv_NullVector)				
				ti_eject = vrai
				break
			case 241 :
				// Jeté sur le cote
				ACT_ActionSet( Action_Fight_GrabTT_Projectile_G)
				if ( ANI_CurrentFrameGet(0) > 60)
					ti_eject = vrai
				i_grabbed_pos_mode = 3
				break
			case 242 :
				// Jeté sur le cote
				ACT_ActionSet( Action_Fight_GrabTT_Projectile_G+1)
				if ( ANI_CurrentFrameGet(0) > 60)
					ti_eject = vrai
				i_grabbed_pos_mode = 3
				break
			default:
				if ( MATH_VecDotProduct(v_grab_grav_speed, OBJ_HorizonGet()) < 0.0)
					ACT_ActionSet( Action_Fight_Projectile_D)
				else
					ACT_ActionSet( Action_Fight_Projectile_G)
//				ACT_ActionSet( Action_Normal_Projectile)	
				f_proj_freq = 96
				ti_eject = vrai
		}
//				ti_eject = vrai
		break

	case Ci_GrabKong_Relache :
		// LE Grab viens d'être interrompu : Recul
		// NB: Kong nous a Laché
		i_proj_croutage = faux
		if ( MATH_VecDotProduct(v_grab_grav_speed, OBJ_HorizonGet()) < 0.0)
			ACT_ActionSet( Action_Fight_Projectile_D)
		else
			ACT_ActionSet( Action_Fight_Projectile_G)
//		ACT_ActionSet( Action_Normal_Projectile)
		ti_eject = vrai		// La vitesse d eject reste celle de déplacemetn car kong n'expulse pas.
		break

	case Ci_GrabKong_Pousse_Sweep:
		ACT_ActionSet(Action_Fight_GrabTT_cycl)
		break

	case Ci_GrabKong_Frappe :
//		i_grabbed_pos_mode = 2
		i_grabbed_special = vrai				// Grab special possible
//		switch (LNK_GrabKong_AnimJeteGet( mid_grabbed_by_Kong_LNK_ID))		// Choix de l anim en Fct de celle de Kong
//		{
//			case 285 :
//				ACT_ActionSet(Action_FlancG_Coup)
//				break
//			case 295 :
//				ACT_ActionSet(Action_FlancG_Coup + 20)
//				break
//			case 162:
				ACT_ActionSet(Action_Fight_GrabTT_Paf)
//				f_time_gfx_particules = 0.475
//				break	
//		}
		break		
//		o_paf_actor = o_grabbed_actor_KK
//		v_paf_position = @o_paf_actor OBJ_PosGet()
//		v_paf_sens = @o_paf_actor OBJ_SightGet()
//		macro_change_etat("KT_ETAT_paf")		
//		SND_RequestPlay( 3)
		break	

	case Ci_GrabKong_Lance_SePositionne :
		i_grabbed_pos_mode = 3
		if ( ACT_ActionFinished())
			LNK_GrabKong_AnimJeteSet( mid_grabbed_by_Kong_LNK_ID, 0)			// Pour ne pas faire cycler une anim qui ne cycle pas car désormais on a un positionnement long :(
		switch (LNK_GrabKong_AnimJeteGet( mid_grabbed_by_Kong_LNK_ID))		// Choix de l anim en Fct de celle de Kong
		{
			case 241 :
				ACT_ActionSet(Action_Fight_GrabTT_Projectile_SePlace)
				break
			case 242 :
				ACT_ActionSet(Action_Fight_GrabTT_Projectile_SePlace+3)
				break
			case 111 :
				ACT_ActionSet(Action_Fight_GrabTT_Projectile_SePlaceDvt)
				break
			case 0:
				ACT_ActionSet(Action_Fight_GrabTT_cycl)
				break	
		}
		break

// *************** MORSURE *****************************
// *************** FLANC *****************************
	case Ci_GrabKong_FinishSePlace  :
	case Ci_GrabKong_Flanc_MashSePlace :  
		switch (LNK_GrabKong_AnimJeteGet( mid_grabbed_by_Kong_LNK_ID))		// Choix de l anim en Fct de celle de Kong
		{
			case 281:
				ACT_ActionSet( Action_FlancG_Deb)
				i_grabbed_pos_mode = 3
				break
			case 291:
				ACT_ActionSet( Action_FlancG_Deb + 20)
				i_grabbed_pos_mode = 3
				break
			default: 
				ACT_ActionSet( Action_Grabbed_Bited_Deb)
				i_grabbed_pos_mode = 4
		}
		break 
	case Ci_GrabKong_FinishDeb  :
	case Ci_GrabKong_Flanc_MashDeb :
		switch (LNK_GrabKong_AnimJeteGet( mid_grabbed_by_Kong_LNK_ID))		// Choix de l anim en Fct de celle de Kong
		{
			case 282:
				ACT_ActionSet( Action_FlancG_Chall)
				i_grabbed_pos_mode = 3
				break
			case 292:
				ACT_ActionSet( Action_FlancG_Chall + 20)
				i_grabbed_pos_mode = 3
				break
			default:
				ACT_ActionSet( Action_Grabbed_Bited_Chall)
				i_grabbed_pos_mode = 4
		}
		break 
	case Ci_GrabKong_FinishGagne  :
		ti_detect_col = faux
	case Ci_GrabKong_Flanc_MashGagne :
//		switch (LNK_GrabKong_AnimJeteGet( mid_grabbed_by_Kong_LNK_ID))		// Choix de l anim en Fct de celle de Kong
//		{
//			case 283:
//				ti_detect_col = vrai
//				if ( ACT_ActionGet() != Action_FlancG_Win)
//					ACT_ActionSet( Action_FlancG_Win)
//				if ( ANI_CurrentFrameGet(0) > 70)
//				{
//					ACT_ActionSet(142)
//					o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, faux, nofunc, nofunc)		// Fin de la liaison
//					i_exit_mode = vrai
//		
//					f_fatigue_time = 2.0
//					o_paf_actor = o_fight_actor
//					o_paf_actor_memo = o_fight_actor
//					macro_change_etat("KT_ETAT_KO_au_sol")
//				}
//			break
//			case 293:
//				ti_detect_col = vrai
//				if ( ACT_ActionGet() != Action_FlancG_Win + 20)
//					ACT_ActionSet( Action_FlancG_Win + 20)
//				if ( ANI_CurrentFrameGet(0) > 70)
//				{
//					ACT_ActionSet(142)
//					o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, faux, nofunc, nofunc)		// Fin de la liaison
//					i_exit_mode = vrai
//					f_fatigue_time = 2.0
//					o_paf_actor = o_fight_actor
//					o_paf_actor_memo = o_fight_actor
//					macro_change_etat("KT_ETAT_KO_au_sol")
//				}
//				break
//			default:
				if ( ACT_ActionGet() != Action_Grabbed_Bited_Win)
					ACT_ActionSet( Action_Grabbed_Bited_Win)
//		}


		tv_speed = DYN_SpeedGetVector()
		tv_speed.z = 0.0
		if ( ti_detect_col)
			to_col_actor = KT_Test_collision_Mur_LRAY_COL( vrai, vrai, tv_speed, tv_sens_collision, v_collision_point)
		else
			to_col_actor = nobody
		if ( to_col_actor && to_col_actor != o_Kong )
		{
			KT_GFX_Impact(v_collision_point)
			f_delay_last_paf_mur = 0.0
			// CHANGER LA VIE DU TREX
			EVENT_LIFE_LifeChange(ID_LIFE, Cf_PAF_Projectile_Mur)
			KT_Timer_KONG_Init()
			
			f_coef_recul = 0.0
			GST_PAF_Trans_Rotate( OBJ_PosGet(), OBJ_SightGet(), Cv_NullVector, tv_sens_collision, 15.0, v_add_speed, f_add_rotation)
			v_add_speed *= 0.6
	
			if ( MATH_VecDotProduct( OBJ_SightGet(), tv_sens_collision) < 0)
				i_ko_face_mur = vrai		// Jouer l anim d explosion sur les mur
				
			// LIAISON
			o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, faux, nofunc, nofunc)		// Fin de la liaison
			i_exit_mode = vrai

			if ( EVENT_LIFE_CurLifeGet( ID_LIFE) <= 0.0 )
			{
				f_fatigue_time = 5.0
				o_paf_actor = o_fight_actor
				o_paf_actor_memo = o_fight_actor
				macro_change_etat("KT_ETAT_KO_au_sol")
			}
			else
			{
				i_paf_mur_leger = vrai
				v_paf_sens = tv_sens_collision
				DBG_RenderVector(OBJ_PosGet() + cvector(0.0,0.0,3.0), v_paf_sens, color_rouge)
				o_paf_actor = o_fight_actor
				macro_change_etat("KT_ETAT_paf")
			}			
		}
		
		if ( MATH_VecNull( v_add_speed) && ACT_ActionItemGet() == 1)
		{
			v_add_speed = -OBJ_SightGet() * 10.0
			f_coef_recul = 0.0
		}
		i_grabbed_pos_mode = 3
		if ( ACT_ActionFinished())
		{
			o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, faux, nofunc, nofunc)		// Fin de la liaison
			EVENT_LIFE_LifeChange(ID_LIFE, Cf_PAF_GrabMashing)
			i_exit_mode = vrai
		}
		break 
	case Ci_GrabKong_Flanc_MashCoup :
	case Ci_GrabKong_FinishFin  :	
	case Ci_GrabKong_FinishPerdu  :	
	case Ci_GrabKong_Flanc_MashPerdu :	
		switch (LNK_GrabKong_AnimJeteGet( mid_grabbed_by_Kong_LNK_ID))		// Choix de l anim en Fct de celle de Kong
		{
			case 284:
				if ( ACT_ActionGet() != Action_FlancG_Lose)
					ACT_ActionSet( Action_FlancG_Lose)
			break
			case 294:
				if ( ACT_ActionGet() != Action_FlancG_Lose + 20)
					ACT_ActionSet( Action_FlancG_Lose + 20)
				break
			case 286:
				if ( ACT_ActionGet() != Action_FlancG_Crash)
					ACT_ActionSet( Action_FlancG_Crash)
			break
			case 296:
				if ( ACT_ActionGet() != Action_FlancG_Crash + 20)
					ACT_ActionSet( Action_FlancG_Crash + 20)
				break
			default:
				if ( ACT_ActionGet() != Action_Grabbed_Bited_Lose)
					ACT_ActionSet( Action_Grabbed_Bited_Lose)
		}
		i_grabbed_pos_mode = 3
		if ( ACT_ActionFinished())
			ti_eject = vrai
		break
// *************** FIN MORSURE *****************************
// *************** FIN FLANC *****************************

// *************** SWEEP *****************************
	case Ci_GrabKong_SweepLastSecond :
		ANI_FrequencySet(0, 110)
		if ( f_time_start_etat > tf_time_grab)
		{
			LNK_GrabKong_ActionSet(mid_grabbed_by_Kong_LNK_ID, Ci_GrabKong_Repousse)
			break
		}
	case Ci_GrabKong_SweepLance :
		if( ti_grab_action == Ci_GrabKong_SweepLance )
		{
			tf_time_grab = 100.0
		}
	case Ci_GrabKong_Sweep :
	default:		
		// SWEEP GENERIQUE
		i_grabbed_pos_mode = 0
		switch (LNK_GrabKong_AnimJeteGet( mid_grabbed_by_Kong_LNK_ID))		// Choix de l anim en Fct de celle de Kong
		{		
		
			case 101 : // Ci_Kanim_GrabTT_tireD
				ACT_ActionSet( Action_Fight_GrabTT_TireD)
				break
			case 102 : // Ci_Kanim_GrabTT_tireG
				ACT_ActionSet( Action_Fight_GrabTT_TireG)
				break
			case 103 : // Ci_Kanim_GrabTT_tireD_Att
				ACT_ActionSet( Action_Fight_GrabTT_TireD_Att)
				break
			case 104 : // Ci_Kanim_GrabTT_tireG_Att
				ACT_ActionSet( Action_Fight_GrabTT_TireG_Att)
				break
			case 100 :	// Ci_Kanim_GrabTT_att
				ACT_ActionSet( Action_Fight_GrabTT_cycl)	
				break			
//			case 280 : // Ci_Kanim_Flanc_Cycl ( G )
//				i_grabbed_pos_mode = 3
//				ACT_ActionSet(Action_FlancG_Cycl)
//				break
//			case 290 : // Ci_Kanim_Flanc_Cycl + 10 ( D )
//				i_grabbed_pos_mode = 3
//				ACT_ActionSet(Action_FlancD_Cycl)
//				break
			case 246 :
				if ( !i_grabbed_ref_set)
				{
					i_grabbed_ref_set = vrai
					ACT_ActionSet( Action_Fight_GrabTT_Proj_Att_G)
					tv_dest_pos = @o_grabbed_actor_KK OBJ_PosGet() + ( @o_grabbed_actor_KK OBJ_SightGet() * LNK_GrabKong_ArmSizeGet( mid_grabbed_by_Kong_LNK_ID))
					LNK_GrabKong_NeckSizeSet( mid_grabbed_by_Kong_LNK_ID, MATH_VecNorm(tv_dest_pos - OBJ_PosGet()))
					LNK_GrabKong_AncrageVectorSet( mid_grabbed_by_Kong_LNK_ID, MATH_VecNormalize(tv_dest_pos - OBJ_PosGet()))
				}
				break
			case 245 :
				if ( !i_grabbed_ref_set)
				{
					i_grabbed_ref_set = vrai
					ACT_ActionSet( Action_Fight_GrabTT_Proj_Att_D)
					tv_dest_pos = @o_grabbed_actor_KK OBJ_PosGet() + ( @o_grabbed_actor_KK OBJ_SightGet() * LNK_GrabKong_ArmSizeGet( mid_grabbed_by_Kong_LNK_ID))
					LNK_GrabKong_NeckSizeSet( mid_grabbed_by_Kong_LNK_ID, MATH_VecNorm(tv_dest_pos - OBJ_PosGet()))
					LNK_GrabKong_AncrageVectorSet( mid_grabbed_by_Kong_LNK_ID, MATH_VecNormalize(tv_dest_pos - OBJ_PosGet()))
				}
				break
			case 0:
				ACT_ActionSet(Action_Fight_GrabTT_cycl)
				break	
		}


		
//		if ( f_time_start_etat > (Cf_time_grab - 1.0))
//		{
//			if ( ACT_ActionGet() == Action_Fight_GrabTT_cycl)
//				LNK_GrabKong_ActionSet(mid_grabbed_by_Kong_LNK_ID, Ci_GrabKong_Debat)
//			else	if ( f_time_start_etat > 5.0)
//				LNK_GrabKong_ActionSet(mid_grabbed_by_Kong_LNK_ID, Ci_GrabKong_Repousse)
//		}
		if ( f_time_start_etat > (tf_time_grab - 1.0) )
		{
//			LNK_GrabKong_ActionSet(mid_grabbed_by_Kong_LNK_ID, Ci_GrabKong_Debat)
			LNK_GrabKong_ActionSet(mid_grabbed_by_Kong_LNK_ID, Ci_GrabKong_SweepLastSecond)
		}
		else
		{
			ti_action = ACT_ActionGet()
			if ( ti_action == Action_Fight_GrabTT_cycl || ti_action == Action_Normal_ChargeFrein)
				ACT_ActionSet(Action_Fight_GrabTT_cycl)
//			ANI_FrequencySet( 0, 60)
		}

}

//if ( !i_blesse_on &&  f_time_start_etat > 0.5)
//	LNK_GrabKong_ActionSet(mid_grabbed_by_Kong_LNK_ID, Ci_GrabKong_Repousse)


// Detection de l'ejection
if ( ti_eject )
{
	o_proj_target = LNK_GrabKong_LanceObjectGet(mid_grabbed_by_Kong_LNK_ID)
	i_proj_target_index = LNK_GrabKong_LanceTargetGet(mid_grabbed_by_Kong_LNK_ID)
	v_proj_target_pos = @get_global v_KongFight_TargetAddPos[i_proj_target_index]                    // Position de la target a cette trame.
	v_grab_grav_speed = KT_Proj_Vector_Get()
	
	i_grabbed_pos_mode = 0
	o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, faux, nofunc, nofunc)
	if ( !MATH_VecNullEpsilon(v_grab_grav_speed))
		MATH_VecSetNormalize(v_grab_grav_speed)
	DYN_SpeedSetVector(v_grab_grav_speed)				// Vitesse de l'éjection
	return
//	macro_change_etat( "KT_ETAT_projectile")		
}

// COMPORTEMENT =======================================================================================================

DBG_RenderVector(OBJ_PosGet(), v_grab_grav_speed, color_blanc)

if( f_grab_grav_speed_norm >= Cf_grab_speed_paf_norm )
{
	// Le TRex est grabbé avec une force de rotation importante : il peut paffer les monstres autour de lui
	COL_ZonePosSet(C_zde_fight, cvector(0.0, 0.0, 2.5) )
	COL_ColSetActivationSet(C_bit_zde_fight, none)	i_flag_zde_fight_type = Ci_zde_fight_type_corps
	AI_Execute("KT_exec_zdf_zdc")
	COL_ColSetActivationSet( none, C_bit_zde_fight)
	// ZDE recalée dans la callback afterblend
}


// DEPLACEMENT ET ORIENTATION
switch ( i_grabbed_pos_mode )
{
	case 1:
		// Le TREX charge
		tv_temp = LNK_GrabKong_SpeedVectorGet(mid_grabbed_by_Kong_LNK_ID)
		DYN_SpeedSetVector( tv_temp)									// Vitesse imposée
		if ( ACT_ActionGet() == Action_Normal_ChargeFrein)
		{
			ti_freq = (64.0 * (MATH_VecNorm( tv_temp)  / 24.82))	// Adaptation de la frequence de l anim // a la vitesse
			ti_freq = MATH_FloatLimit(ti_freq, 2.0, 254.0 )
			ANI_FrequencySet( 0, ti_freq)
		}
		OBJ_BankingGeneralSet( MATH_VecBlendRotate( OBJ_SightGet(),  v_grabbed_orient_init, 8.0 * TIME_GetDt()), Cv_VerticalVector)
		LNK_GrabKong_AncrageVectorSet(mid_grabbed_by_Kong_LNK_ID,v_grabbed_orient_init )

		return
		break
	case 2:
		f_grab_blend_pos = MATH_FloatMin( f_grab_blend_pos + ( 3.0 * TIME_GetDt()), 1.0)		// Blend de position et orientation idéale.	
		OBJ_BankingGeneralSet( MATH_VecBlendRotate( OBJ_SightGet(),  v_grabbed_orient_init, f_grab_blend_pos), Cv_VerticalVector)
		return
		break
	case 3:
		OBJ_BankingGeneralSet( OBJ_SightGet(), Cv_VerticalVector)
		return
		break
	case 4:
//		if ( MATH_VecNullEpsilon( v_finish_pos_init))
//		{
//			v_finish_pos_init = OBJ_PosGet()
//			f_time_start_etat = 0.0
//		}
//		tv_pos = @o_grabbed_actor_KK OBJ_PosGet()
//		OBJ_PosSet( MATH_VecBlend( v_finish_pos_init, tv_pos, f_time_start_etat/ 0.5))
//		OBJ_BankingGeneralSet( MATH_VecBlendRotate( OBJ_SightGet(), -@o_grabbed_actor_KK OBJ_SightGet(), 10.0 * TIME_GetDt()), 
//		MATH_VecBlend( OBJ_BankingGet(), @o_grabbed_actor_KK OBJ_BankingGet(), 10.0 * TIME_GetDt()))
		break

	case 5:
		if ( MATH_VecNullEpsilon( v_finish_pos_init))
		{
			v_finish_pos_init = OBJ_PosGet()
			f_time_start_etat = 0.0
		}
		tv_pos = @o_grabbed_actor_KK OBJ_PosGet()
//		tv_pos.z = OBJ_PosGet().z
		OBJ_PosSet( MATH_VecBlend( v_finish_pos_init, tv_pos, f_time_start_etat/ 0.5))
		OBJ_BankingGeneralSet( MATH_VecBlendRotate( OBJ_SightGet(), @o_grabbed_actor_KK OBJ_HorizonGet(), 10.0 * TIME_GetDt()), 
		MATH_VecBlend( OBJ_BankingGet(), @o_grabbed_actor_KK OBJ_BankingGet(), 10.0 * TIME_GetDt()))
		break

	default:
		// SWEEP
		to_hand	= LNK_GrabBoneGet( mid_grabbed_by_Kong_LNK_ID)
		to_bone = ANI_CanalObjectGet(Anim_Canal_Tete)
		tv_head_pos = @to_bone OBJ_PosGet()
		tv_dest_pos = @to_hand OBJ_PosGet()
		if ( MATH_VecNullEpsilon(v_grabbed_KK_sight ))
			v_grabbed_KK_sight = @o_grabbed_actor_KK OBJ_SightGet()	
	
		tv_head_pos = OBJ_PosGet() + (LNK_GrabKong_AncrageVectorGet( mid_grabbed_by_Kong_LNK_ID) * LNK_GrabKong_NeckSizeGet( mid_grabbed_by_Kong_LNK_ID))
		tv_dest_pos = @o_grabbed_actor_KK OBJ_PosGet() + ( @o_grabbed_actor_KK OBJ_SightGet() * LNK_GrabKong_ArmSizeGet( mid_grabbed_by_Kong_LNK_ID))
		tv_last_pos = OBJ_PosGet()
	
	
	//	// POSITIONEMENT ET MOUVEMENT
	//	tv_pos = OBJ_PosGet()
	//	tv_pos += v_grab_grav_speed * (TIME_GetDt() * 0.85)
	//	OBJ_PosSet(tv_pos)
	
		// Mouvement special que si grab par la tete
		if( !i_grabbed_tete)
			OBJ_Rotate_FromTo(MATH_VecGlobalToLocal(v_grabbed_KK_sight), MATH_VecGlobalToLocal(@o_grabbed_actor_KK OBJ_SightGet()))
		else
		{
			// FROM TO
			tv_temp = (LNK_GrabKong_AncrageVectorGet( mid_grabbed_by_Kong_LNK_ID)  * LNK_GrabKong_NeckSizeGet( mid_grabbed_by_Kong_LNK_ID))
			tv_temp.z = 0.0
			tv_temp2 = tv_dest_pos - OBJ_PosGet()
			tv_temp2.z = 0.0
			if ( MATH_VecDotProduct( MATH_VecNormalize(tv_temp2), @o_grabbed_actor_KK OBJ_SightGet()) > Cf_Cos45)
			{
				// LIMITER
				tv_temp2 = MATH_VecRotate( @o_grabbed_actor_KK OBJ_SightGet(), MATH_VecCrossProduct( @o_grabbed_actor_KK OBJ_SightGet(), @o_grabbed_actor_KK OBJ_PosGet() - OBJ_PosGet()), Cf_1Degre * 45.0)
				tv_temp2.z = 0.0
			}
			OBJ_Rotate_FromTo(MATH_VecGlobalToLocal(tv_temp), MATH_VecGlobalToLocal(tv_temp2))
	
	//		}
		}
	
		tv_temp = tv_dest_pos
	//	tv_temp -= OBJ_PosGet() + (LNK_GrabKong_AncrageVectorGet( mid_grabbed_by_Kong_LNK_ID)  * LNK_GrabKong_NeckSizeGet( mid_grabbed_by_Kong_LNK_ID))
		tv_temp -= OBJ_PosGet() + (OBJ_SightGet()  * LNK_GrabKong_NeckSizeGet( mid_grabbed_by_Kong_LNK_ID))
		tv_temp.z = 0.0
		
	
		tv_pos = OBJ_PosGet()
		tv_pos += tv_temp
		OBJ_PosSet(tv_pos)
	
		// Vitesse Actuelle Simulée en Posset
		v_grab_grav_speed = (OBJ_PosGet() - tv_last_pos) / TIME_GetDt()
		v_grab_grav_speed.z = 0.0
		f_grab_grav_speed_norm = MATH_VecNorm( v_grab_grav_speed)
	
		// Memo du sight de KK
		v_grabbed_KK_sight = @o_grabbed_actor_KK OBJ_SightGet()	
		
		// On essaye d'augmenter la composante de la vitesse qui correspond à la force centrifuge
		tv_temp = OBJ_PosGet() + (OBJ_SightGet() * LNK_GrabKong_ArmSizeGet( mid_grabbed_by_Kong_LNK_ID))
		tv_temp -= @o_grabbed_actor_KK OBJ_PosGet()
		MATH_VecSetHorzNormalize(tv_temp)
	
		tf_norm = f_grab_grav_speed_norm * 0.06
		tf_norm *= tf_norm
		v_grab_grav_speed += tf_norm * tv_temp
	
		f_grab_grav_speed_norm = MATH_VecNorm( v_grab_grav_speed)
	
	//	DBG_TraceFloat( f_grab_grav_speed_norm)
	//	DBG_TraceEOL()
		
		LNK_GrabKong_SpeedVectorSet( mid_grabbed_by_Kong_LNK_ID, v_grab_grav_speed)
}