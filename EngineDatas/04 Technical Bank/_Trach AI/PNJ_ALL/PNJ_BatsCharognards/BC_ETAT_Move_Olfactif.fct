#include "BC_defines.var"

vector			tv_old_cible_pos			// blend progressif de la position de la charogne
vector			tv_tmp_cible_pos			// blend progressif de la position de la charogne
vector			tv_decal_head				// vecteur de décalage entre le pivot et la tête de la cible

object			to_charogne_head		// tête de la charogne (pour positionner la bat)
object			to_pere
object			to_interet_pere

float				tf_life_coef						// coef de santé du perso courant
float				tf_short_dist

message		tmsg_int_filter					// filtre pour la recherche des messages d'intérêt
messageid		tmid_tmp					// event odeur de sang
messageid		tmid_vision
messageid 		tmid_int_ID						// message d'intérêt courant
messageid 		tmid_vis_ID						// message de vision courant
messageid		tmid_interet_vision_ID
messageid		tmid_best_vision

int					ti_flag_interet_present		// flag qui indique que quelqu'un a déjà un intérêt pour ma cible 
int					ti_int_rank						// rang du msg d'intérêt
int					ti_i
int					ti_ID


// SORTIE ETAT ============================================================
if (i_sort_etat)
{
	i_flag_reseau_array = faux
	if( i_etat_courant != ETAT_Observe_Charogne 
		&& i_etat_courant != ETAT_Move_Visuel 
		&& i_etat_courant != ETAT_Observe_Trace )
		BC_Charognard_Mode_Reset()
	
	i_sort_etat = faux
	return
}


// ENTREE ETAT ============================================================
if( (i_etat_courant != ETAT_Move_Olfactif) ) // || i_force_reinit )
{
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Move_Olfactif
//	i_force_reinit = faux
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	
	CALC_POS_OLFACTIF:
	
	AI_Execute("BC_exec_calc_pos_suivi_olfactif")

	// o_cible_depl
	@o_tmp_obj_next OBJ_PosSet(v_dest_pos)
	@o_tmp_obj_next OBJ_BankingGeneralSet(v_dest_sight, Cv_VerticalVector)
	o_cible_depl = o_tmp_obj_next
	
	// CALCUL DU RESEAU et du next_wp
	i_mode_depl = Ci_mode_depl_charogne_olfactif
	
	if( ! n_attaque )
	{
		i_reseau_wp_count = 0		// pas de réseau
		i_flag_reseau_array = faux
		i_flag_reseau_oneway = faux
		o_next_wp = o_tmp_obj_next
	}
	else
	{
		n_reseau = n_attaque
		i_reseau_wp_count = 10				// pour bien spécifier qu'on a pas terminé de parcourir le réseau (mais qu'on veut commencer)
	}
	
	BC_ref_speed_set(Cf_speed_vol)
	i_flag_reseau_array = vrai
	i_force_test_inclinaison = vrai			// test d'inclinaison
	i_flag_depl_wp_apres_reseau = faux
	BC_Next_WP_Get()
//	f_time_check_charogne = 0.0		// forcer un check sang
	
	f_obstacle_duration = 0.0		// check obstacle pour aller chopper de la bouffe
	
	BC_DBG_Trace_Etat("etat move olfactif")
}
else
{
	f_time_start_etat += TIME_GetDt()
	AI_Execute("BC_exec_calc_pos_suivi_olfactif")
}

if( f_time_start_etat > 0.0 || i_etat_ancien != ETAT_Wait_Perche )
	BC_select_action()		// après un départ perché, l'action est déjà mise et il y a un random sur la frame de départ

// INTERET ====================================
if( ! MSG_GlobalIsValid(mid_sang) )
{
	BC_DBG_Trace_Etat("plus de message sang, je repars...")
	AI_Execute("BC_exec_init_attente")
}	
else
{
	to_pere = EVENT_PereGet(mid_sang)
	if( ! BC_Seen_Actor_Test(to_pere, tmid_vision) )
	{
		BC_DBG_Trace_Etat("plus de message vision de la part du pere du message sang, je repars...")
		MSG_GlobalDelete(mid_sang, C_EVENT_EOFDEL)
		AI_Execute("BC_exec_init_attente")
	}
	else
		BC_Interet_Update(mid_interet_charogne, C_EVENT_InteretStatusAttack, EVENT_PereGet(mid_sang), tmid_vision)
}


// Obstacle ----------------------------------------------------------------------------------
AI_Execute("BC_exec_check_obstacle")
if( i_flag_obstacle )
{
	if( i_DBG_trace_etat )
	{
		DBG_TraceObject(OBJ_Me())
		DBG_TraceString(" : un obstacle l'empeche d'atteindre ")
		DBG_TraceObject(EVENT_PereGet(mid_sang))
		DBG_TraceEOL()
	}
	AI_Execute("BC_exec_init_attente")
}

// suivi du regard
i_flag_neck = vrai
v_look_pos = v_cible_pos

if( TIME_Elapsed(f_time_check_charogne, Cf_freq_check_sang) )
{
	// temps écoulé
	f_time_check_charogne = TIME_Get()
	tf_short_dist = Cf_Infinit
	// ==== RECHERCHE DES PERSOS BLESSES =====
	if( i_seen_actor_nb )
	{
		// le bat voit des acteurs
		f_cible_life_coef = 1.0
		for( ti_i = 0; ti_i < i_seen_actor_nb; ti_i++)
		{
			// test de tous les persos vus
			tmid_vis_ID = amid_seen_actor[ti_i]
			tf_life_coef = EVENT_VisionLifeStateGet(tmid_vis_ID)
			if( tf_life_coef <= Cf_Life_Blesse )
			{
				// ce perso est blessé
				to_pere = EVENT_PereGet(tmid_vis_ID)
				if( tf_life_coef <= f_cible_life_coef && OBJ_SqrDist(to_pere) < tf_short_dist )
				{
					ti_flag_interet_present = faux
					// recherche d'un message d'intérêt d'une autre bat sur la charogne
					MSG_SetNull(tmsg_int_filter)
					tmsg_int_filter.msg_gao1 = to_pere
					ti_int_rank = -1
					
					for (	tmid_int_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_int_rank, tmsg_int_filter);
							MSG_GlobalIsValid(tmid_int_ID);
							tmid_int_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_int_rank, tmsg_int_filter) )
					{
						to_interet_pere = EVENT_PereGet(tmid_int_ID)
						if( to_interet_pere != OBJ_Me() )
						{
							// l'acteur est déjà attaqué par quelqu'un
							tmid_interet_vision_ID = EVENT_FindEventPereTarget( C_EVENT_TYPE_Visibility, to_interet_pere, nobody)
							if( MSG_GlobalIsValid(tmid_interet_vision_ID) )
							{
								if( EVENT_VisionIDGet(tmid_interet_vision_ID) == C_ID_BatCharognard )
								{
									if( EVENT_InteretStatusGet(tmid_int_ID) == C_EVENT_InteretStatusFoodchainLocked )
									{
										ti_flag_interet_present = vrai
									}
									break
								}
							}
						}
					}
					
					if( ! ti_flag_interet_present )
					{
						// pas d'intérêt sur ce perso par quelqu'un d'autre => il devient ma meilleure cible
						ti_ID = EVENT_VisionIDGet(tmid_vis_ID)
						if( ti_ID != C_ID_BatCharognard && ! IsThis_ID_Humain(ti_ID) )		// ne pas targetter une autre bat ni un humain
						{
							i_charogne_ID = ti_ID
							o_cible = to_pere
							f_cible_life_coef = tf_life_coef
							f_cible_poids = @"univ" Enemy_af_Poids[i_charogne_ID]		// poids de la cible
							tf_short_dist = OBJ_SqrDist(to_pere)
							tmid_best_vision = tmid_vis_ID
						}
					}
				}
			}
		}
		
		if( f_cible_life_coef < 1.0 )
		{
			// la bat a vu quelqu'un de blessé ou mort
			BC_Interet_Update(mid_interet_charogne, C_EVENT_InteretStatusFoodchain, o_cible, tmid_best_vision)
			i_flag_depl_wp_apres_reseau = faux
			macro_change_etat("BC_ETAT_Move_Visuel")
		}
	}
}


// ======== DEPLACEMENT ==========

if( i_reseau_wp_count == 1 )
	i_flag_frein = vrai
else
	i_flag_frein = faux
AI_Execute("BC_exec_MOVE_beziers")
if( i_flag_depl_fini && ( ! i_reseau_wp_count ) )
	macro_change_etat("BC_ETAT_Observe_Trace")		// trace atteinte -> la bat observe la trace de sang

