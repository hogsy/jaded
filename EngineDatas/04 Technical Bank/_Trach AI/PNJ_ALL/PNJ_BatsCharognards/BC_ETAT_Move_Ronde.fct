#include "BC_defines.var"

object			to_next_next_wp
object			to_actor

messageid		tmid_vision


// SORTIE ETAT
if (i_sort_etat)
{
	i_flag_reseau_oneway = faux
	i_sort_etat = faux
	return
}

// ENTREE ETAT
if (i_etat_courant != ETAT_Move_Ronde)
{
	i_etat_ancien_ancien = i_etat_ancien
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Move_Ronde
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	BC_DBG_Trace_Etat("etat move ronde")
	
	// next WP
	if( i_etat_ancien != ETAT_Move_Decolle )
	{
		o_ronde_next_wp = WAY_WPNearestOfPos( OBJ_PosGet(), n_net , all, none, Ci_Filter_CBitsFlag)
		@o_tmp_obj_next OBJ_PosSet(@o_ronde_next_wp OBJ_PosGet())
		o_next_wp = o_tmp_obj_next
	}
	
	// suivi du réseau (exec_vol_courbe)
	i_flag_reseau_oneway = vrai
	n_reseau = n_net
	
	// destination
	v_dest_pos = @o_next_wp OBJ_PosGet()
	v_cible_pos = Cv_NullVector
	
	// suivi du regard
	to_next_next_wp = WAY_NetNextWP(n_net, o_ronde_next_wp, 0, 0)
	v_look_pos = @to_next_next_wp OBJ_PosGet()
	
	// orientation wp arrivée ronde
	@o_tmp_obj_next OBJ_BankingGeneralSet(@to_next_next_wp OBJ_PosGet() - @o_ronde_next_wp OBJ_PosGet(), Cv_VerticalVector)
	
	// vitesse
	if( MSG_GlobalIsValid(mid_grab_charogne) )
		BC_ref_speed_set(f_vitesse_grab)
	else
		BC_ref_speed_set(f_vitesse_move_ronde)
	
	i_force_test_inclinaison = vrai
	
	i_pause_mode = Ci_pause_mode_aucun		// raz mode pause
}
else
{
	f_time_start_etat += TIME_GetDt()
}


//==================== ANALYSE ======================

o_predateur = LNK_ServeurGet(Ci_LNK_GRAB_RAPTOR, mid_predateur, vrai, nofunc, nofunc)
if( o_predateur )
	macro_change_etat("BC_ETAT_Grabbed")

if( ! BC_ForceInactive() )
{
	// TEST CADAVRES
	to_actor = BC_Cadavre_Nearest(faux)
	if( to_actor )
	{
		o_cadavre = to_actor		// NEW CADAVRE
		BC_Cadavre_Nouveau_Select(to_actor)		// marqué comme "visité"
		BC_Interet_Update(mid_interet_charogne, C_EVENT_InteretStatusFoodchain, to_actor, tmid_vision)
		BC_Charognard_Mode_Force()
		macro_change_etat("BC_ETAT_Move_Cadavre")		// NEW CADAVRE
	}
	
	if( i_agressive )
	{
		//================== BAT AGRESSIVE ====================
		
		if( ! MSG_GlobalIsValid(mid_grab_charogne) 
			&& BC_Test_Attaque() 
			&& f_time_since_last_obstacle >= Cf_delai_since_last_obstacle_pour_attaque )
		{
			if( ! i_attaque_a_partir_de_la_ronde )
				AI_Execute("BC_exec_init_attaque")		// la bat va se positionner pour attaquer
		}
		else if( o_cible_attaque )
		{
			// la bat reste en ronde jusqu'à prendre l'intérêt sur la proie
			if( BC_Get_Interet_Status_Model_Nb(o_cible_attaque, -1, vrai) < i_nb_attaques_simultanees )
			{
				i_flag_reserve_interet = vrai
				AI_Execute("BC_exec_init_attaque")
			}
		}
	}
//	else
//	{
//		//================= BAT CHAROGNARD ==================
//		
//		if( ! MSG_GlobalIsValid(mid_grab_charogne) )
//		{
//			if( BC_Check_Sang() )
//			{
//				macro_change_etat("BC_ETAT_Move_Olfactif")
//			}
//			else
//			{
//				if( i_check_sang_already_done && f_charognard_forced_duration > Cf_charognard_forced_duration_min )
//					BC_Charognard_Mode_Reset()
//			}
//		}
//	}
}

if( i_flag_reserve_interet )
{
	BC_Interet_Update(mid_interet_attaque, C_EVENT_InteretStatusLock, o_cible_attaque, tmid_vision)
}


// ======== DEPLACEMENT ==========


// Action et fréquence
if( BC_select_action() )
	BC_action_frequency_set(Cf_freq_standard)


// Cri
if( ! f_time_cri_presence )
{
	BC_Sound_Cri_Presence_Play()
}

i_flag_neck = vrai

// Déplacement
i_flag_frein = faux
AI_Execute("BC_exec_MOVE_beziers")
if( i_flag_depl_fini )
{
	if( i_pause_mode == Ci_pause_mode_atterrissage )
	{
		// La bat vient d'atteindre un wp ou elle doit faire une pause
		i_atterrissage_mode = Ci_atterrissage_nid_pause
		macro_change_etat("BC_ETAT_Move_Atterrit")	//_Dans_Nid")
	}
	else if( i_pause_mode == Ci_pause_mode_on_y_va )
	{
		// c'est bientôt la pause : init suivi de regard
		v_look_pos = @o_wp_pause OBJ_PosGet()
	}
	else if( i_pause_mode == Ci_pause_mode_aucun )
	{
		// c'est pas encore la pause : init suivi de regard
		to_next_next_wp = WAY_NetNextWP(n_reseau, o_next_wp, 0, 0)
		v_look_pos = @to_next_next_wp OBJ_PosGet()
	}
	else
	{
		DBG_Error("attente ronde : mode pause non prévu")
	}
}

