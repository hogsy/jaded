
#include "BC_defines.var"

//=============================================================================
// CALCUL D'UN WP INTERMEDIAIRE POUR FAIRE UN DEMI-TOUR
//=============================================================================


vector			tv_wp_pos			// position du wp intermédiaire
vector			tv_wp_sight			// sight du wp intermédiaire


if (MATH_VecDotProduct(OBJ_SightGet(), @o_tmp_obj_next OBJ_SightGet()) < 0.0)
{
	// le sight du bat et le sight du next_wp sont opposés => demi-tour => positionnement d'1 wp intermédaire
	i_flag_use_inter_wp	= vrai
	
	f_ref_speed = Cf_speed_demi_tour

	// calcul de la position du wp intermédiaire
	tv_wp_pos = OBJ_SightGet()
	MATH_VecSetHorzNormalize(tv_wp_pos)		// horizontal puis normalizé
	
	tv_wp_sight = MATH_VecCrossProduct(tv_wp_pos, Cv_VerticalVector)
	tv_wp_sight *= - MATH_FloatSign(MATH_VecDotProduct(@o_tmp_obj_next OBJ_PosGet() - OBJ_PosGet(), OBJ_HorizonGet()))
	
	// point de demi-tour : 3m devant et 2m sur le côté
	tv_wp_pos *= 3.0
	tv_wp_pos += tv_wp_sight * 2.0
	tv_wp_pos += OBJ_PosGet()
	
	// position et sight du wp intermédiaire
	@o_tmp_obj_next OBJ_PosSet(tv_wp_pos)
	@o_tmp_obj_next OBJ_BankingGeneralSet(tv_wp_sight, Cv_VerticalVector)
	
	i_flag_frein = faux		// la bat ne s'arrête pas au wp de demi-tour
}

