#include 		"BC_defines.var"

messageid		tmid_paf_ID	
messageid		tmid_vis_ID

message		tmsg_paf_filter			// Message filtre pour la lecture de la liste
message		tmsg_vis_filter			// Message filtre pour la lecture de la liste

int					ti_paf_rank				// Rang du paf dans la liste
int					ti_cur_paf_canal		// localisation du paf
int					ti_cur_paf_type
int					ti_vis_rank				// Rang du paf dans la liste
int					ti_dbg
int					ti_javelot_duree_std
int					ti_flag_ok
int					ti_cpt

float				tf_cur_paf_force_init			// dégats du paf courant (valeur init)
float				tf_cur_paf_force_modif		// dégats du paf courant (valeur modifiée)
float				tf_best_paf_force		// dégats du + gros paf
float				tf_cur_paf_life_coef
float				tf_recul_coef
float				tf_HP_init
float				tf_duree_javelot

vector			tv_cur_paf_dir			// recul du paf

object			to_tmp
object			to_cur_paf_pere		// père du paf
object			to_bidoche
object			to_enemy_killed_sender


i_paf_type = 0			// init des filtres de tous les pafs de la trame

o_best_paf_pere = nobody
tf_best_paf_force = 0.0

i_paf_faible_flag = faux
i_paf_moyen_flag = faux
i_paf_important_flag = faux
i_paf_explose_flag = faux

tf_HP_init = f_HP
ti_cpt = 0
ti_dbg = faux
to_enemy_killed_sender = nobody

MSG_SetNull( tmsg_paf_filter)
tmsg_paf_filter.msg_gao1 = OBJ_Me()

ti_paf_rank = -1
for (	tmid_paf_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Paf, &ti_paf_rank, tmsg_paf_filter);
		MSG_GlobalIsValid(tmid_paf_ID);
		tmid_paf_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Paf, &ti_paf_rank, tmsg_paf_filter) )
{
	ti_cur_paf_type = EVENT_PafTypeGet(tmid_paf_ID)				// cumul des filtres de tous les pafs de la trame
	to_cur_paf_pere = EVENT_PereGet(tmid_paf_ID)
	ti_cur_paf_canal = EVENT_PafCanalGet(tmid_paf_ID)
	
	tf_cur_paf_force_init = EVENT_PafPuisGet(tmid_paf_ID) * PAF_Unit
	
	// HACK : un os lancé de loin sur la bat noire : dmg passent de 3 à 7 (comme distance courte)
	if( i_modele == Ci_MODELE_Bat_Noire && (ti_cur_paf_type & C_PAF_KK_Javelin) && tf_cur_paf_force_init == 3 )
		tf_cur_paf_force_init = 7
	
	// GESTION HEADSHOT SNIPER ==================================================
	if( tf_cur_paf_force_init > 100.0 && i_modele == Ci_MODELE_Bat_Noire )
		tf_cur_paf_force_init = 20.0		// pas de head shot sniper pour la bat noire !!!!
	
	// GESTION PAF REPOUSSE =====================================================
	if( ti_cur_paf_type & C_PAF_KK_Repousse )
	{
		// BIDOCHE -------------------------------------------------------------
		if( i_modele == Ci_MODELE_Bat_Mini && ti_cur_paf_type & C_PAF_KK_GetBidoche )
		{
			ti_flag_ok = vrai
			to_bidoche = @get_global o_bidoche_bat
			if ( ! to_bidoche)
				ti_flag_ok = faux
			else if (to_cur_paf_pere != o_jack)
				ti_flag_ok = faux
	 		else if (@get_global o_bidoche_gao)
				ti_flag_ok = faux
	 		else if (@"univ" i_jack_cpt_plug >= PLUG_CASSE)
				ti_flag_ok = faux
	 		
			if( ti_flag_ok )
	 		{
				to_bidoche = @to_bidoche OBJ_Duplicate(@ao_head_bones[0] OBJ_PosGet())
				@to_bidoche OBJ_BankingGeneralSet(OBJ_SightGet(), OBJ_BankingGet())
				@to_bidoche OBJ_ZoomSet(OBJ_ZoomGet() / f_zoom )
				@get_global o_bidoche_gao = to_bidoche
				@get_PNJ_Bidoche_path to_bidoche i_modules_pafed_index = MATH_RandInt(1, 4)
				@get_PNJ_Bidoche_path to_bidoche f_size_coef = @to_bidoche OBJ_ZoomGet()
				OBJ_Destroy()
			}
		}
		// BIDOCHE -------------------------------------------------------
		
		if( i_modele == Ci_MODELE_Bat_Noire || to_cur_paf_pere != o_jack )
			tf_cur_paf_force_init = 0.0			// BLINDAGE BAT NOIRE et COMPAGNONS
//		else if( ti_cur_paf_type & C_EVENT_PAF_Feu )
//			tf_cur_paf_force_init = 3.0			// BLINDAGE FEU
		else
		{
			// BLINDAGE AUTRES
			if( ti_cur_paf_type & C_PAF_KK_Jacks_Punch )		// Poing
			{
				tf_cur_paf_force_init = 0
			}
			else if( tf_cur_paf_force_init == 1 )		// Crosse
			{
				tf_cur_paf_force_init = 0
			}
			else if( tf_cur_paf_force_init == 2 )		// Os
			{
				tf_cur_paf_force_init = 1
			}
			else if( tf_cur_paf_force_init == 3 )		// Lance
			{
				tf_cur_paf_force_init = 1
			}
			else
			{
				tf_cur_paf_force_init = 3		// Feu
				
//				#ifndef _FINAL_
//				DBG_Error("paf repousse avec des dmg incorrects !!!")
//				DBG_TraceString("paf repousse avec des dmg incorrects : ")
//				DBG_TraceInt(tf_cur_paf_force_init)
//				DBG_TraceEOL()
//				#endif
			}
		}
		tf_cur_paf_force_modif = tf_cur_paf_force_init
	}
	// MULTIPLICATEUR PAF DMG =====================================================
	else
	{
		// MULTIPLICATEUR ------------------------------------------------------
		tf_cur_paf_force_modif = tf_cur_paf_force_init
		if( to_cur_paf_pere == o_jack && ti_cur_paf_canal == Anim_Canal_Tete )
		{
			// seul Jack a le droit de faire des coups critiques
			tf_cur_paf_force_modif *= f_paf_head_multiplicateur
		}
		else if( ti_cur_paf_canal == Ci_bat_canal_aileD || ti_cur_paf_canal == Ci_bat_canal_aileG )
		{
			tf_cur_paf_force_modif *= f_paf_wing_multiplicateur
		}
	}
	
	// la big bat ne meurt que de la main du joueur
	if( BC_Boss() && tf_HP_init <= tf_cur_paf_force_init && to_cur_paf_pere != o_jack )
		continue
	
	if( BC_Take_Paf() )
	{
		i_CineStack = 0		// quitte la ciné
		OBJ_CapaSet(CAPA_CINE_Terminee, none)
	}
	
	// JAVELOT
	ti_javelot_duree_std = vrai
	if( ti_cur_paf_type & C_PAF_KK_Javelin )
	{
		if( BC_Boss() )
		{
			i_boss_delai_paf_perforant_init = vrai
			if( o_attaque_finale_decor )
			{
				// big bat avec une mort en cinématique
				if( i_etat_courant == ETAT_Mort )
				{
					// javelot qd la bat noire est morte, au sol
					if( to_cur_paf_pere == o_denham )
					{
						// javelot de Denham dans l'oeil de la bat noire
						ti_javelot_duree_std = faux
						i_attaque_finale_cine_paf = vrai
						tf_duree_javelot = 99.0
					}
				}
				else
				{
					// javelot pendant l'attaque de fin de la bat noire				
					if( to_cur_paf_pere == o_jack )
						i_attaque_finale_paf = vrai		// un javelot doit pouvoir tuer la bat, même s'il ne fait pas suffisamment de dmg
				}
			}
		}
				
		if( ti_javelot_duree_std )
		{
			if( BC_Javelot_Reste_Plante(ti_cur_paf_canal) )
				tf_duree_javelot = 2.5
			else
				tf_duree_javelot = 0.0
		}
		
		to_tmp = EVENT_Gao2Get(tmid_paf_ID)						// dans le cas d'un paf par lance, l'objet lance est stocké dans le gao2 du message correspondant
		macro_set_javelin_plug_timer(to_tmp, tf_duree_javelot)
	}
	
	tv_cur_paf_dir = EVENT_PafDirGet(tmid_paf_ID)
	if( tv_cur_paf_dir.z < 0.0 )
		tv_cur_paf_dir.z = 0.0	// interdit les pafs qui font tomber	
	
	// sens de paf
	if( ! MATH_VecNullEpsilon(tv_cur_paf_dir) )
		MATH_VecSetNormalize(tv_cur_paf_dir)
	else
		tv_cur_paf_dir = - OBJ_SightGet()		// blindage, le - pire...
	
	// DOMMAGES =============================================================
	if( BC_Take_Paf() )
	{
		// PAF VIANDE ---------------------------------------------------------------------------------------
		if( ti_cur_paf_type & C_PAF_KK_FoodChain )
		{
			// Paf viande : la bat perd des "points de viande" si elle est morte, sinon elle meurt
			f_time_meat_bite += 0.25
			if( f_HP )
				BC_Degats(0.0, Cf_Life_Dead)
			else
			{
				if( BC_Ready_to_be_Eaten() )
					f_point_de_viande -= MATH_FloatMin(f_point_de_viande, tf_cur_paf_force_init)
				goto PAF_FEEDBACK
			}
		}
		else
		{
			// PAF REPOUSSE -------------------------------------------------------------------------------------
			if( ti_cur_paf_type & C_PAF_KK_Repousse )
			{
				if( f_paf_repousse_recul_coef )
				{
					i_paf_send = vrai			// mon attaque courante ne paffera plus car je me suis fais repousser
					if( i_modele == Ci_MODELE_Bat_Rouge && to_cur_paf_pere != o_jack )
						f_wait_sinus_duration = 0.3		// sinus sur les repousse des compagnons sur les bats rouges
				}
			}
			
			// PAF DEGATS -------------------------------------------------------------------------------------------
			if( ti_cur_paf_type & C_PAF_KK_KiTue )
				tf_cur_paf_life_coef = Cf_Life_Dead
//			else if( ti_cur_paf_type & C_EVENT_PAF_Fort )		// FOUT LA MARDE !!!!
//				tf_cur_paf_life_coef = Cf_Life_Dead
//			else if( ti_cur_paf_type & C_EVENT_PAF_Blessant )
//				tf_cur_paf_life_coef = Cf_Life_Blesse
//			else if( ti_cur_paf_type & C_EVENT_PAF_Agonisant )
//				tf_cur_paf_life_coef = Cf_Life_Agonisant
			else
				tf_cur_paf_life_coef = Cf_Life_Full_Life
			
			BC_Degats(tf_cur_paf_force_modif, tf_cur_paf_life_coef)
			
			// STATS ==========================================================
			if( tf_HP_init && ! f_HP && ! to_enemy_killed_sender )
			{
				to_enemy_killed_sender = to_cur_paf_pere
			}
		}
	}
	
	i_paf_type |= ti_cur_paf_type				// cumul des filtres de tous les pafs de la trame
	
	if( tf_cur_paf_force_init >= Cf_shotgun_paf_pointblank && tf_cur_paf_force_init < 1000 && ! ( ti_cur_paf_type & C_PAF_KK_Javelin ) )
	{
		// shotgun ( + blindage sniper headshot + blindage lance enflammée )
		i_paf_explose_flag = vrai
		i_paf_explose_type = Ci_paf_explose_type_shotgun
		tf_recul_coef = f_paf_explose_recul_coef_shotgun
	}
	else if( ( tf_HP_init && ! f_HP ) || ( tf_cur_paf_force_modif >= f_paf_important_dmg ) )
	{
		i_paf_important_flag = vrai
		tf_recul_coef = f_paf_important_recul_coef
	}
	else if( ti_cur_paf_type & C_PAF_KK_Repousse )
	{
		// repousse
		if( BC_Boss() && o_attaque_finale_decor && ! f_HP )
			tf_recul_coef = 0.0		// la bat noire ciné ne doit pas mourir ailleurs que sur son point ciné donc pas de recul
		else
			tf_recul_coef = f_paf_repousse_recul_coef
	}
	else if( tf_cur_paf_force_modif >= f_paf_moyen_dmg ) // || ti_dbg )
	{
		i_paf_moyen_flag = vrai
		tf_recul_coef = f_paf_moyen_recul_coef
	}
	else
	{
		i_paf_faible_flag = vrai
		tf_recul_coef = f_paf_faible_recul_coef
		BC_Paf_Cumul_Add(tf_cur_paf_force_modif)		// TOMMYGUN
	}
	
	if( tf_best_paf_force <= tf_cur_paf_force_modif )//&& BC_Pos_in_BV(@to_cur_paf_pere OBJ_PosGet(), o_zone_activite) )
	{
		tf_best_paf_force = tf_cur_paf_force_modif
		o_best_paf_pere = to_cur_paf_pere
		ti_vis_rank = -1
		MSG_SetNull( tmsg_vis_filter)
		tmsg_vis_filter.msg_sender = to_cur_paf_pere
		tmid_vis_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Visibility, &ti_vis_rank, tmsg_vis_filter)
	}
	
	// cumul des pafs
	f_sum_pafs_force += tf_cur_paf_force_modif
	v_sum_pafs_dir += tv_cur_paf_dir * tf_recul_coef
	DBG_RenderVector(OBJ_PosGet(), v_sum_pafs_dir, color_rouge)
	
	// QUATERNION POUR CHAQUE PAF
	PAF_FEEDBACK:
	if( TIME_Elapsed(f_quat_last_time, 0.15) )
	{
		if( ti_cur_paf_type & C_PAF_KK_FoodChain )
			af_quat_coef[i_quat_index] = 0.1
		else if( i_modele == Ci_MODELE_Bat_Noire && f_HP == 0.0 )
			af_quat_coef[i_quat_index] = 0.0		// plus de feedback sur les bats noires mortes
		else if (TIME_Elapsed(f_quat_last_time, 0.5))
			af_quat_coef[i_quat_index] = 0.5
		else
			af_quat_coef[i_quat_index] = 0.3
		
		f_quat_last_time = TIME_Get()
		af_quat_time[i_quat_index] = f_quat_last_time
		
		av_quat_start[i_quat_index] = EVENT_PafPositionGet(tmid_paf_ID)
		av_quat_start[i_quat_index] -= @o_torse OBJ_PosGet()
		MATH_VecSetNormalize(av_quat_start[i_quat_index])
		
		av_quat_end[i_quat_index] = MATH_VecCrossProduct(tv_cur_paf_dir, av_quat_start[i_quat_index])
		av_quat_end[i_quat_index] = MATH_VecCrossProduct(av_quat_start[i_quat_index], av_quat_end[i_quat_index])
		
		MATH_VecSetNormalize(av_quat_end[i_quat_index])
		
		i_quat_index = MATH_Modulo(i_quat_index + 1, 10)
	}
}


// insensible aux paf ? ils ont été pris (pour les feedback) mais sont ensuite annulés
if( ! BC_Take_Paf() && o_best_paf_pere )
{
	i_paf_faible_flag = faux
	i_paf_moyen_flag = faux
	i_paf_important_flag = faux
	i_paf_explose_flag = faux
	f_sum_pafs_force = 0.0
	o_best_paf_pere = nobody
	SND_RequestPlay(Ci_SND_Paf_Petit)
}

// Une bat pendue paffée réveille les autres bats pendue si elle ne meurt pas sur le coup
if( f_sum_pafs_force && i_etat_courant == ETAT_Wait_Perche )
{
	if( f_sum_pafs_force < tf_HP_init )
	{
		EVENT_AddEventSound(C_EVENT_FILTER_BatCharognard, OBJ_Me(), Cf_EVENT_Duree_1Trame, OBJ_PosGet(), Cf_distance_perchee_son_hurle)
		i_flag_hurle = vrai
	}
	else
		i_flag_silent_kill = vrai
}


// PAF QUI TUE ==========================================================================
if( tf_HP_init && ! f_HP )
{
	i_paf_important_flag = vrai		// new new new !!! paf repousse de merde
	
	BC_STATS_NMI_Killed(to_enemy_killed_sender)
	
	BC_Lieutenant_Del()
	
	if( BC_Boss() )
		OBJ_CapaSet(CAPA_CINE_BatNoire_Finish, none)
	
	if( i_modele != Ci_MODELE_Bat_Noire )
	{
		@o_jack COL_UnCollidableAdd(OBJ_Me())		// les petites bats ne doivent pas bloquer jack
		i_obbox_on = faux
		AI_Execute("BC_exec_set_obbox")
	}
	
	f_sum_pafs_force = MATH_FloatMax(f_sum_pafs_force, 1.0)		// considérer qu'il y a eu au moins 1 dmg (les pafs tuant & co peuvent etre envoyés avec 0 dmg)
}


// ON NE MEMORISE QUE LE + FORT NIVEAU DE PAF =============================================
if( i_paf_explose_flag )
{
	BC_Paf_Cumul_Clear()
	i_paf_important_flag = faux
	i_paf_moyen_flag = faux
	i_paf_faible_flag = faux
}

if( i_paf_important_flag )
{
	BC_Paf_Cumul_Clear()
	i_paf_moyen_flag = faux
	i_paf_faible_flag = faux
}

if( i_paf_moyen_flag )
{
	BC_Paf_Cumul_Clear()
	i_paf_faible_flag = faux
}

// CUMUL DES PETIS PAFS ==========================================================
if( i_paf_faible_flag )
{
	if( BC_Paf_Cumul_Check_Cumul() )
	{
		i_paf_moyen_flag = vrai
		i_paf_faible_flag = faux
	}
}

