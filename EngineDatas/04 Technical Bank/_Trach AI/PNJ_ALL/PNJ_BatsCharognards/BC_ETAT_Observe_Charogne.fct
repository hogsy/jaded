#include "BC_defines.var"

int					ti_i
int					ti_perso_ID
int					ti_test_charogne_ID_sante_ok
int					ti_charogne_pas_libre
int					ti_rank

object			to_pere
object			to_actor

float				tf_cible_life_coef
float				tf_max_danger_level
float				tf_dot

messageid 		tmid_tmp
messageid		tmid_vision

message		tm_msg_filter

vector			tv_pos
vector			tv_me_to_charogne
vector			tv_sight1
vector			tv_sight2


// SORTIE ETAT
if (i_sort_etat)
{
	v_decalage = Cv_NullVector
	f_cible_life_coef = 0
	f_speed = 0.0
	
	i_sort_etat = faux
	return
}

// ENTREE ETAT
if (i_etat_courant != ETAT_Observe_Charogne)
{
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Observe_Charogne
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	
	f_time_action = TIME_Get()			// init durée d'observation
	
	// vitesse
	BC_ref_speed_set(Cf_speed_observe)
	f_speed = 0.0		// bat à l'arrêt
	
	ACT_ActionSet(i_ACTION_Vol_Standard)
	BC_action_frequency_set(Cf_freq_sur_place)
	
	BC_DBG_Trace_Etat("etat observe charogne ")
}
else
{
	f_time_start_etat += TIME_GetDt()
}


// EMERGENCY ABORT =============================
if( o_cible && ! BC_TargetActive(o_cible) )
{
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" : EMERGENCY ABORT : Target non active (")
	DBG_TraceObject(o_cible )	
	DBG_TraceString(")")
	DBG_TraceEOL()	
	o_cible = nobody
	AI_Execute("BC_exec_init_attente")
}


if( o_cible && @o_cible AI_IsModel(get_PNJ_Bidoche_path) && @o_cible OBJ_CapaTest(CAPA_Bidoche_Snappee) )
{
	BC_DBG_Trace_Etat("ma proie était une bidoche qui vient d'être ramassée")
	AI_Execute("BC_exec_init_attente")
}

v_cible_pos = @o_cible OBJ_PosGet()
v_dest_pos = v_cible_pos + v_decalage

i_flag_neck = vrai
v_look_pos = v_cible_pos

// test de la zone d'activité
if( ! BC_Pos_in_BV(v_cible_pos, o_zone_activite) )
	AI_Execute("BC_exec_init_attente")	


// ========== OBSERVATION =============


tv_me_to_charogne = @o_cible OBJ_PosGet() - OBJ_PosGet()
if( ! MATH_VecNullEpsilon(tv_me_to_charogne) )
	MATH_VecSetNormalize(tv_me_to_charogne)

tv_sight1 = OBJ_SightGet()
tv_sight1.z = 0.0
if( ! MATH_VecNullEpsilon(tv_sight1) )
	MATH_VecSetNormalize(tv_sight1)
tv_sight2 = tv_me_to_charogne
tv_sight2.z = 0.0
if( ! MATH_VecNullEpsilon(tv_sight2) )
	MATH_VecSetNormalize(tv_sight2)

if( TIME_Elapsed(f_time_action, Cf_observ_charogne) )
{
	// temps d'observation écoulé : le bat regarde les persos autour de la charogne

	// ========= STIMULUS VISION ===========

	tf_max_danger_level = 0.0
	ti_test_charogne_ID_sante_ok = faux
	
	// TEST ID / ETAT DE LA CHAROGNE
	switch( i_charogne_ID )
	{
		case C_ID_BatCharognard :
		case C_ID_Raptor :
		case C_ID_Tyranosaure :
		case C_ID_Scolo :
		case C_ID_SwampCrawler :
		case C_ID_SwampCrawlerSmall :
			if( f_cible_life_coef == Cf_Life_Dead )
				ti_test_charogne_ID_sante_ok = vrai
			break
			
		case C_ID_Galiminus :
			if( f_cible_life_coef <= Cf_Life_Agonisant )
				ti_test_charogne_ID_sante_ok = vrai
			break
			
		default:
			if( IsThis_ID_Humain(i_charogne_ID) )
			{
				if( f_cible_life_coef <= Cf_Life_Agonisant )
					ti_test_charogne_ID_sante_ok = vrai
			}
			else
			{
				if( f_cible_life_coef == Cf_Life_Dead )
					ti_test_charogne_ID_sante_ok = vrai
			}
			break
	}
	
	// TEST DU NIVEAU DE DANGER
	if( ! ti_test_charogne_ID_sante_ok )
	{
		DBG_TraceObject(OBJ_Me())
		DBG_TraceString(" : niveau de santé de ")
		DBG_TraceObject(o_cible)
		DBG_TraceString(" pas ok...")
		DBG_TraceEOL()
	}
	else
	{
		for( ti_i = 0; ti_i < i_seen_actor_nb; ti_i++)
		{
			// analyse des persos visibles
			tmid_tmp = amid_seen_actor[ti_i]
			
			to_pere = EVENT_PereGet(tmid_tmp)
			if( to_pere != o_cible )
			{
				// ce n'est pas l'event de visibilité de la cible
				if( EVENT_VisionLifeStateGet(tmid_tmp) > Cf_Life_Dead )
				{
					// cet acteur est vivant
					tv_pos = EVENT_PositionGet(tmid_tmp)
					DBG_RenderVector(@o_cible OBJ_PosGet(), tv_pos - @o_cible OBJ_PosGet(), color_rouge)
					if( MATH_VecNorm(tv_pos - @o_cible OBJ_PosGet()) <= Cf_distance_check_predateurs )
					{
						// ce perso est proche de la charogne
						ti_perso_ID = EVENT_VisionIDGet(tmid_tmp)
						tf_max_danger_level = MATH_FloatMax( tf_max_danger_level, @"univ" Enemy_af_Danger[ti_perso_ID] )	// test nv danger
						DBG_TraceObject(OBJ_Me())
						DBG_TraceString(" : ")
						DBG_TraceObject(to_pere)
						DBG_TraceString(" est proche de ")
						DBG_TraceObject(o_cible)
						DBG_TraceEOL()
					}
				}
			}
		}
	}
	
	// TESTE SI QUELQU'UN D'AUTRE S'INTERESSE A LA CHAROGNE
	ti_charogne_pas_libre = faux
	MSG_SetNull(tm_msg_filter)
	tm_msg_filter.msg_gao1 = o_cible		// rech des msg d'intéret sur o_cible
	ti_rank = -1
	for(	tmid_tmp = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_rank, tm_msg_filter);
			MSG_GlobalIsValid(tmid_tmp);
			tmid_tmp = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_rank, tm_msg_filter) )
	{
		if( MSG_GlobalGetSender(tmid_tmp) != OBJ_Me() )
		{
			ti_charogne_pas_libre = vrai
			DBG_TraceObject(OBJ_Me())
			DBG_TraceString(" : ")
			DBG_TraceObject(MSG_GlobalGetSender(tmid_tmp))
			DBG_TraceString(" a déjà un intéret sur ")
			DBG_TraceObject(o_cible)
			DBG_TraceEOL()
			break
		}
	}
	
	if( ( ! ti_test_charogne_ID_sante_ok ) || (tf_max_danger_level > @"univ" Enemy_af_Danger[C_ID_BatCharognard]) || ti_charogne_pas_libre )
	{
		// prédateurs de danger supérieur au bat OU cible pas morte => le bat repart
		i_flag_check_sang = faux
		f_time_flags_check_sang = TIME_Get()
		
		if( MSG_GlobalIsValid(mid_interet_charogne) )
			EVENT_Delete(mid_interet_charogne, C_EVENT_EOFDEL )			// perte de l'intérêt pour la charogne
		
		DBG_TraceObject(OBJ_Me())
		DBG_TraceString(" : abandonne la charogne ")
		DBG_TraceObject(o_cible)
		DBG_TraceEOL()
		
		BC_Charognard_Mode_Reset()
		AI_Execute("BC_exec_init_attente")
	}
	else
	{
		DBG_RenderVector(OBJ_PosGet(), tv_sight1, color_vert)
		DBG_RenderVector(OBJ_PosGet(), tv_sight2, color_jaune)
		tf_dot = MATH_VecDotProduct(tv_sight1, tv_sight2)
		if( tf_dot > Cf_Cos5 )
		{
			i_atterrissage_mode = Ci_atterrissage_sur_charogne
			macro_change_etat("BC_ETAT_Move_Atterrit")			// pas de prédateurs => atterrissage (mange / emporte)
		}
	}
}


BC_Interet_Update(mid_interet_charogne, C_EVENT_InteretStatusFoodchain, o_cible, tmid_vision)

OBJ_BankingGeneralSet(MATH_VecBlendRotate(OBJ_SightGet(), tv_sight2, 5 * TIME_GetDt()), Cv_VerticalVector)
