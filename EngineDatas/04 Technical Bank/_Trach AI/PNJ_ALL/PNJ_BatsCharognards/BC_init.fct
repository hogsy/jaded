#include "BC_defines.var"

vector		tv_temp

object		to_head
object		to_wp
object		tao_tab_wp[Ci_max_reseau_wp]

int				ti_i
int				ti_tab_wp_count
int				ti_crossable

i_DBG_trace_beziers_ON = faux
i_DBG_trace_etat = faux

// VINCE DEBUG !!!!!!!!!!!!! =================================================
//i_DBG_VINCE = vrai
//i_DBG_trace_etat = vrai
//i_DBG_trace_beziers_ON = vrai
//i_DBG_mode = vrai
//i_DBG_trace_etat = faux
//i_DBG_render_fight_position = vrai
//f_LD_PointsViande = 100
//i_points_de_chute = vrai
//i_DBG_cine_mort_bat_noire = vrai
//if( ! i_nobody_but_me )	OBJ_Destroy()
//i_DBG_look_pos = vrai
//i_etat_init = Ci_etat_init_vol_ronde
//i_DBG_trace_etat_paf = vrai
//i_trace_paf = vrai
//i_DBG_no_fade_out = vrai
//i_modele = Ci_MODELE_Bat_Mini
// VINCE DEBUG !!!!!!!!!!!!! =================================================

if( ! i_actif )
	OBJ_Destroy()

i_attaque_infinie = vrai			// NEW : les bats ne doivent pas partir sans raison apparente

// SPECIAL FLAGS
if (!OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Generated))
{
	if (i_SF_NePasSeRejouerSiMort)
	{
		int		ti_SF_AlreadyDead
		i_SF_AlreadyDead = AI_SFDynGet(0, SF_MinById, SF_MaxById)		// Alloc
		Super_SpecialFlag_get(i_SF_AlreadyDead, ti_SF_AlreadyDead)			// Test SF
		if (ti_SF_AlreadyDead)																	// Si SF = 1 alors DESTROY
			OBJ_Destroy()
	}
}

//if( i_modele == Ci_MODELE_Bat_Noire )
//{
//	i_DBG_trace_etat = vrai
//	i_trace_paf = vrai
//}

if( AI_GetCurSystem() != Ci_CurSystem_Editeur )
{
	// SI PAS EN EDITEUR
	i_DBG_mode = faux
	i_DBG_trace_beziers_ON = faux
	i_DBG_render_fight_position = faux
	f_DBG_freq_speed_coef = 1.0
	i_DBG_look_pos = faux
	i_DBG_look_all = faux
	i_trace_paf = faux
	i_DBG_trace_etat = faux
	i_DBG_trace_etat_paf = faux
	i_DBG_track_test = 0
	o_track_test_wp = nobody
	i_nobody_but_me = faux
	i_DBG_boss_display_infos = faux
	i_DBG_no_fade_out = faux
	i_DBG_music = faux
	i_DBG_cine_mort_bat_noire = faux
	i_DBG_YOAN = faux
	i_DBG_VINCE = faux
}

if( i_config_boss != Ci_config_boss_default && ! i_mode_agressif_ON )
{
	DBG_Error("ne bat charognard avec une config boss ???")
	OBJ_Destroy()
}

// MAIN ACTORS
o_jack = @"univ" ao_AllHumains[ C_ID_Joueur ]
//o_ann = @"univ" ao_AllHumains[ C_ID_Ann ]
//o_jimmy = @"univ" ao_AllHumains[ C_ID_Jimmy ]
//o_denham = @"univ" ao_AllHumains[ C_ID_Denham ]
//
// QUATERNION
o_bassin = ANI_CanalObjectGet(Anim_Canal_Bassin)
o_torse = ANI_CanalObjectGet(BAT_canal_torse)

switch( i_modele )
{
//===================================================================	
	case Ci_MODELE_Bat_Mini :
//===================================================================	
		// SEB ------------------------
		f_HP_max = 5.0
		f_paf_head_multiplicateur = 1.0
		f_paf_wing_multiplicateur = 0.5
		f_point_de_viande = 5.0
		f_paf_mange_delai = 2.0
		i_paf_to_send_type = C_PAF_KK_Faible
		// SEB ------------------------
		f_zoom = 0.1
		f_attaque_pos_horiz_wait = 0.6		// 1.0
		f_attaque_pos_vert_wait = MATH_RandFloat(-0.2, 0.2)
		f_attaque_pos_horiz = 0.6
		f_attaque_pos_vert = MATH_RandFloat(-0.3, -0.4)
		f_attaque_pos_horiz_anim = f_attaque_pos_horiz
		f_attaque_pos_vert_anim = f_attaque_pos_vert
		f_attaque_pos_delta = 0.3
		f_attaque_dist_stoppe_poursuite = 30.0
		f_attaque_duree_poursuite = 15.0
		f_paf_moyen_dmg = 2.0
		f_paf_cumul_dmg = 2.0
		f_paf_important_dmg = 4.0
		f_attaque_delai = 0.25		// 0.0
		f_delay_humain_last_paf_time = 0.0
		i_model_grab_on = faux
		i_nb_attaques_simultanees = 100			// se fout du nb de bats
		f_attaque_delai_change_wp = 2.5
		f_duree_min_dans_champ = 0.5
		f_duree_wait_hors_champ = 3.0
		f_paf_faible_recul_coef = 0.5			// 1.0
		f_paf_moyen_recul_coef = 1.0		// 1.5
		f_paf_important_recul_coef = 1.5	// 2.0
		f_paf_explose_recul_coef_shotgun = 1.5
		f_paf_explose_recul_coef_sniper = 1.25
		f_paf_repousse_recul_coef = 0.5		// 1.0
		f_paf_moyen_pause_time = 0.5
		f_paf_important_pause_time = 1.0
		f_time_attaque_fin_desynchro_delai_min = 0.1
		f_time_attaque_fin_desynchro_min = 0.1
		f_time_attaque_fin_desynchro_max = 0.2
		f_plongeon_abort_dist = 8.0		// specifique mini bats !!!!
		f_plongeon_cos_min = Cf_Cos45
		f_plongeon_desynchro_time = MATH_RandFloat(0.2, 0.4)
		if( ! f_freq_speed_coef )
			f_freq_speed_coef = MATH_RandFloat(0.85, 1.15)
		f_freq_action_coef = f_freq_speed_coef
		f_vitesse_fight_network = 6.0
		f_vitesse_fight_approche = 8.0
		f_vitesse_fight_approche_fake = 4.0
		f_vitesse_fight_contact = 3.0
		f_vitesse_fight_contact_horschamp = 3.0
		f_vitesse_move_ronde = 6.0
		f_vitesse_move_network = 6.0
		f_vitesse_grab = 0.0
		f_vitesse_fight_remonte = 0.0
		i_repousse_pendant_attaque = vrai
		break
//===================================================================	
	case Ci_MODELE_Bat_Rouge :
//===================================================================	
		// SEB ------------------------
		f_HP_max = 5.0
		f_paf_head_multiplicateur = 1.0
		f_paf_wing_multiplicateur = 0.5
		f_point_de_viande = 5.0
		f_paf_mange_delai = 2.0
		i_paf_to_send_type = C_PAF_KK_Faible
		// SEB ------------------------
		if( ! f_zoom )
			f_zoom = MATH_RandFloat(0.2, 0.3)
		f_attaque_pos_horiz_wait = 0.6		// 1.0
		f_attaque_pos_vert_wait = MATH_RandFloat(-0.2, 0.2)
		f_attaque_pos_horiz = 0.6
		f_attaque_pos_vert = MATH_RandFloat(-0.3, -0.4)
		f_attaque_pos_horiz_anim = f_attaque_pos_horiz
		f_attaque_pos_vert_anim = f_attaque_pos_vert
		f_attaque_pos_delta = 0.3
		f_attaque_dist_stoppe_poursuite = 30.0
		f_attaque_duree_poursuite = 15.0
		f_paf_moyen_dmg = 2.0
		f_paf_cumul_dmg = 2.0
		f_paf_important_dmg = 4.0
		f_attaque_delai = 0.25		// 0.0
		f_delay_humain_last_paf_time = 0.0
		i_model_grab_on = faux
		i_nb_attaques_simultanees = 100			// se fout du nb de bats
		f_attaque_delai_change_wp = 2.5
		f_duree_min_dans_champ = 0.5
		f_duree_wait_hors_champ = 3.0
		f_paf_faible_recul_coef = 1.0
		f_paf_moyen_recul_coef = 1.5
		f_paf_important_recul_coef = 2.0
		f_paf_explose_recul_coef_shotgun = 2.0
		f_paf_explose_recul_coef_sniper = 1.75
		f_paf_repousse_recul_coef = 0.5 // 1.0
		f_paf_moyen_pause_time = 0.5
		f_paf_important_pause_time = 1.0
		f_time_attaque_fin_desynchro_delai_min = 0.1
		f_time_attaque_fin_desynchro_min = 0.1
		f_time_attaque_fin_desynchro_max = 0.2
		f_plongeon_abort_dist = 5.0
		f_plongeon_cos_min = Cf_Cos45
		f_plongeon_desynchro_time = MATH_RandFloat(0.2, 0.4)
		if( ! f_freq_speed_coef )
			f_freq_speed_coef = MATH_RandFloat(0.85, 1.15)
		f_freq_action_coef = f_freq_speed_coef
		f_vitesse_fight_network = 6.0
		f_vitesse_fight_approche = 8.0
		f_vitesse_fight_approche_fake = 4.0
		f_vitesse_fight_contact = 3.0
		f_vitesse_fight_contact_horschamp = 3.0
		f_vitesse_move_ronde = 6.0
		f_vitesse_move_network = 6.0
		f_vitesse_grab = 0.0
		f_vitesse_fight_remonte = 0.0
		i_repousse_pendant_attaque = vrai
		break
//===================================================================
	case Ci_MODELE_Bat_Grise :
//===================================================================	
		// SEB ------------------------
		f_HP_max = 10.0
		f_paf_head_multiplicateur = 2.0
		f_paf_wing_multiplicateur = 0.5
		f_point_de_viande = 10.0
		f_paf_mange_delai = 1.0
		i_paf_to_send_type = C_PAF_KK_Moyen
		// SEB ------------------------
		if( ! f_zoom )
			f_zoom = MATH_RandFloat(0.8, 1.2)
		f_attaque_pos_horiz_wait = 6.0
		f_attaque_pos_vert_wait = 0.0
		f_attaque_pos_horiz = 3.5
		f_attaque_pos_vert = 0.0		// -0.25
		f_attaque_pos_horiz_anim = 1.6
		f_attaque_pos_vert_anim = 0.0		// -0.25
		f_attaque_pos_delta = 0.3
		f_attaque_dist_stoppe_poursuite = 30.0
		f_attaque_duree_poursuite = 15.0
		f_paf_moyen_dmg = 4.0
		f_paf_cumul_dmg = 4.0
		f_paf_important_dmg = 8.0
		f_attaque_delai = 0.75		// 0.5
		f_delay_humain_last_paf_time = 0.5
		i_model_grab_on = vrai
		i_grab_all_but_jack = faux
		if( o_ann )
		{
			ao_grab_target[i_grab_target_nb] = o_ann
			i_grab_target_nb++
		}
		if( o_jimmy )
		{
			ao_grab_target[i_grab_target_nb] = o_jimmy
			i_grab_target_nb++
		}
		i_nb_attaques_simultanees = 2
		f_attaque_delai_change_wp = 2.5
		f_duree_min_dans_champ = 0.5
		f_duree_wait_hors_champ = 3.0
		f_paf_faible_recul_coef = 1.0
		f_paf_moyen_recul_coef = 1.5
		f_paf_important_recul_coef = 2.0
		f_paf_explose_recul_coef_shotgun = 2.0
		f_paf_explose_recul_coef_sniper = 1.65
		f_paf_repousse_recul_coef = 2.0
		f_paf_moyen_pause_time = 1.0
		f_paf_important_pause_time = 2.0
		f_time_attaque_fin_desynchro_delai_min = 0.5
		f_time_attaque_fin_desynchro_min = 0.25
		f_time_attaque_fin_desynchro_max = 0.75
		f_plongeon_abort_dist = 5.0
		f_plongeon_cos_min = Cf_Cos45
		f_plongeon_desynchro_time = 1.0
		if( ! f_freq_speed_coef )
			f_freq_speed_coef = MATH_RandFloat(0.85, 1.15)
		f_freq_action_coef = f_freq_speed_coef
		f_vitesse_fight_network = 6.0
		f_vitesse_fight_approche = 12.0
		f_vitesse_fight_contact = 3.0
		f_vitesse_fight_contact_horschamp = 3.0
		f_vitesse_move_ronde = 5.0
		f_vitesse_move_network = 5.0
		f_vitesse_grab = 4.0
		f_vitesse_fight_remonte = 0.0
		i_repousse_pendant_attaque = vrai
		break
//===================================================================		
	case Ci_MODELE_Bat_Noire :
//===================================================================	
		// SEB ------------------------
		f_HP_max = 60.0
		f_paf_head_multiplicateur = 1.0
		f_paf_wing_multiplicateur = 0.5
		f_point_de_viande = 0.0
		f_paf_mange_delai = 1.0
		i_paf_to_send_type = C_PAF_KK_Fort
		// SEB ------------------------
		f_attaque_pos_horiz_wait = 8.0		// 12.0		// 2.0
		f_attaque_pos_vert_wait = 2.5		// 4.0			// 1.0
		f_zoom = 2.0
		f_attaque_pos_horiz = 2.0
		f_attaque_pos_vert = 1.0
		f_attaque_pos_horiz_anim = f_attaque_pos_horiz
		f_attaque_pos_vert_anim = f_attaque_pos_vert
		f_attaque_pos_delta = 0.5		// 2.0
		f_attaque_dist_stoppe_poursuite = Cf_Infinit
		f_attaque_duree_poursuite = Cf_Infinit
		f_paf_moyen_dmg = 8.0
		f_paf_cumul_dmg = 8.0		// 10.0			// modifié qd elle passe en état attaque finale
		f_paf_important_dmg = 15.0
		f_attaque_delai = 3.0			// 3.0
		f_delay_humain_last_paf_time = 0.5		// 1.0
		i_model_grab_on = vrai
		i_grab_all_but_jack = vrai
		i_grab_target_nb = 0
		i_nb_attaques_simultanees = 100			// ne se soucie pas des autres bats
		f_attaque_delai_change_wp = 2.5
		f_duree_min_dans_champ = 0.5
		f_duree_wait_hors_champ = 3.0
		f_paf_faible_recul_coef = 1.0
		f_paf_moyen_recul_coef = 3.0
		f_paf_important_recul_coef = 5.0
		f_paf_explose_recul_coef_shotgun = 5.0
		f_paf_explose_recul_coef_sniper = 4.0
		f_paf_repousse_recul_coef = 0.0
		f_paf_moyen_pause_time = 1.5
		f_paf_important_pause_time = 3.0
		f_time_attaque_fin_desynchro_delai_min = 0.0		// 1 bat noire à la fois
		f_time_attaque_fin_desynchro_min = 0.25
		f_time_attaque_fin_desynchro_max = 0.75
		f_plongeon_abort_dist = 5.0
		f_plongeon_cos_min = Cf_Cos10
		f_plongeon_desynchro_time = 0.0
		if( ! f_freq_speed_coef )
			f_freq_speed_coef = 1.0
		f_freq_action_coef = 0.65		// anims ralenties pour la noire
		f_vitesse_fight_network = 13.0		// 15.0				// 15.0
		f_vitesse_fight_approche = 30.0				// 20.0
		f_vitesse_fight_contact = 5.0					// 6.0
		f_vitesse_fight_contact_horschamp = 5.0	// 6.0
		f_vitesse_move_ronde = 13.0					// 15.0
		f_vitesse_move_network = 13.0				// 15.0
		f_vitesse_grab = 12.0							// 15.0
		f_vitesse_fight_remonte = 15.0
		i_repousse_pendant_attaque = faux
		break
}


// AGRESSIVE
i_agressive = i_mode_agressif_ON
if( ! i_agressive )
	f_HP_max = MATH_FloatMin(f_HP_max, 5.0)		// tomber les points des bats charognards


// GRAB ATTACK
if( i_modele == Ci_MODELE_Bat_Grise )
{
	if( o_grab_target_1 )
	{
		if( o_grab_target_1 == o_jack )
			DBG_Error("o_grab_target_1 == Jack !!!")
		else
		{
			ao_grab_target[i_grab_target_nb] = o_grab_target_1
			i_grab_target_nb++
		}
	}
	if( o_grab_target_2 )
	{
		if( o_grab_target_1 == o_jack )
			DBG_Error("o_grab_target_2 == Jack !!!")
		else
		{
			ao_grab_target[i_grab_target_nb] = o_grab_target_2
			i_grab_target_nb++
		}
	}
	if( o_grab_target_3 )
	{
		if( o_grab_target_1 == o_jack )
			DBG_Error("o_grab_target_3 == Jack !!!")
		else
		{
			ao_grab_target[i_grab_target_nb] = o_grab_target_3
			i_grab_target_nb++
		}
	}
}

if( f_LD_attaque_delai != 0.0 )
	f_attaque_delai = f_LD_attaque_delai

// Points de Vie
if( f_LD_HP_max > 0.0 )
	f_HP_max = f_LD_HP_max
if( i_modele == Ci_MODELE_Bat_Noire && @"univ" STATS[ @"univ" STATS_WorldID][ STATS_NbMortJoueur ] >= 3 )
	f_HP_max = ( f_HP_max * 2 / 3 )
f_HP_max *= PAF_Unit
f_HP = f_HP_max

// points de viande
if( f_LD_PointsViande != 0.0 && i_modele != Ci_MODELE_Bat_Noire )
	f_point_de_viande = f_LD_PointsViande

// Zone choix de target
if( ! o_zone_choix_target )
	o_zone_choix_target = o_zone_activite

// création des wp temporaires positionnés devant le bat à l'init
o_tmp_obj_last = @get_WP OBJ_Duplicate(OBJ_PosGet() + MATH_VecLocalToGlobal(cvector(0,-5,0)))
o_tmp_obj_next = @get_WP OBJ_Duplicate(OBJ_PosGet() + MATH_VecLocalToGlobal(cvector(0,-5,0)))

@o_tmp_obj_last OBJ_BankingGeneralSet(OBJ_SightGet(), OBJ_BankingGet())
@o_tmp_obj_next OBJ_BankingGeneralSet(OBJ_SightGet(), OBJ_BankingGet())

// suppression du flag waypoint => obj invisibles
@o_tmp_obj_last OBJ_FlagsIdentitySet(none,OBJ_C_IdentityFlag_Waypoints)
@o_tmp_obj_next OBJ_FlagsIdentitySet(none,OBJ_C_IdentityFlag_Waypoints)


// ZOOM
if( i_config_boss == Ci_config_boss_Follower )
{
	f_zoom = MATH_RandFloat(0.4, 0.8)
}
OBJ_ZoomSet(f_zoom)

// mission, info, bone bone lod min lod max frame min radius
if( ! OBJ_ModifierType(MDF_C_Modifier_InfoPhoto) )
	OBJ_InfoPhotoParamSet( 0, 0, 3, 3, 0.0, 0.0, 0.0, 2.5 * OBJ_ZoomGet())

// BV
tv_temp = cvector(3.0, 3.0, 3.0) * f_zoom
BV_MinSet(-tv_temp) 
BV_MaxSet(tv_temp)

// Os de la tête : canaux 0 à Ci_head_bones_count
for (ti_i = 0; ti_i < Ci_head_bones_count; ti_i++)
	ao_head_bones[ti_i] = ANI_CanalObjectGet(Anim_Canal_Tete + ti_i)

ANI_ShapeSelect(Anim_Canal_Tete,ShapeSelect_Visible)			// Tête de la bat visible

OBJ_FlagsControlSet(none, OBJ_C_ControlFlag_RayInsensitive)
i_obbox_on = vrai		// active les obbox des ailes
AI_Execute("BC_exec_set_obbox")		// Positionnement des OBBox

// ZDE Fight
COL_SwapToSpecific(C_zde_fight)
//COL_ZoneSizeSet(C_zde_fight, Cv_zde_fight_size)

// ZDE Corps
COL_SwapToSpecific(C_zde_corps)
COL_ZoneSizeSet(C_zde_corps, cvector(Cf_rayon_corps_bat, Cf_rayon_corps_bat, Cf_rayon_corps_bat))
//COL_ZonePosSet(C_zde_corps, cvector(0.0, 0.0, 0.5))

// ZDM Pied
v_zdm_cur_offset = Cv_NullVector
COL_SwapToSpecific(C_zdm_pied)
COL_ZoneSizeSet(C_zdm_pied, Cv_ZDM_Air)
COL_ZonePosSet(C_zdm_pied, cvector(0.0, 0.0, Cv_ZDM_Air.x))
COL_ColSetActivationSet(C_bit_zdm_pied, none)			// active zdm pied

// Suivi du Regard
i_flag_neck = vrai		
to_head = ANI_CanalObjectGet(Anim_Canal_Tete)
v_look_head_pos = @to_head OBJ_PosGet()
v_look_axis = @to_head OBJ_BankingGet()
v_cur_look_pos = @to_head OBJ_BankingGet() + @to_head OBJ_PosGet()		// par défaut le bat regarde devant lui

// structure design (pour les intéractions)
OBJ_FlagsIdentitySet(OBJ_C_IdentityFlag_DesignStruct, none)
if( OBJ_Me().des_int1 == 0 )
{
	// pas spécifié par un spawner
	if( i_LD_HumanDontShootOnMe )
		OBJ_Me().des_int1 = Ci_DISPLAY_FIGHTBLOQUE
	else
		OBJ_Me().des_int1 = Ci_DISPLAY_FIGHT
}

macro_change_tag_size(Cv_NullVector, Cv_NullVector)					// TAG


// RESEAUX ====================================================================

if( n_net )
{
	AI_Execute("BC_exec_init_net_ronde")

	// WP DE PAUSE ----------------------------------------------------------------------------------------
	i_tab_wp_pause_count = 0
	ti_tab_wp_count = WAY_NetFill(n_net, WAY_RootGet(n_net), &tao_tab_wp[0])
	for( ti_i = 0; ti_i < ti_tab_wp_count; ti_i ++)
	{
		if( @tao_tab_wp[ti_i] OBJ_CapaTest(CAPA_pause) )
		{
			ao_tab_wp_pause[i_tab_wp_pause_count] = tao_tab_wp[ti_i]
			i_tab_wp_pause_count++
		}
	}
}

if( n_attaque )
{
	AI_Execute("BC_exec_init_net_depl")
	
	// WP DE NID ----------------------------------------------------------------------------------------------
	ti_tab_wp_count = WAY_NetFill(n_attaque, WAY_RootGet(n_attaque), &tao_tab_wp[0])
	for( ti_i = 0; ti_i < ti_tab_wp_count; ti_i ++)
	{
		if( @tao_tab_wp[ti_i] OBJ_CapaTest(CAPA_mange_charogne) )
		{
			ao_tab_wp_pause[i_tab_wp_pause_count] = tao_tab_wp[ti_i]
			i_tab_wp_pause_count++
		}
	}
}


if( i_etat_init == Ci_etat_init_perchee && i_bat_perchee_retour == Ci_bat_perchee_retour_se_percher )
{
	// bat perchée à l'init et qui retourne se percher
}
else
{
	// Reseaux obligatoires
	if( ! n_net )
	{
		DBG_Error("n_net : réseau de ronde obligatoire")
		OBJ_Destroy()
	}
	else if( ! n_attaque )
	{
		DBG_Error("n_attaque : réseau de déplacement obligatoire")
		OBJ_Destroy()
	}
	else
	{
		to_wp = WAY_WPNearestOfPos( OBJ_PosGet(), n_attaque, CAPA_deplacement, none, Ci_Filter_CapaFlag)
		if( ! to_wp )
		{
			DBG_Error("n_attaque : pas de WP de déplacement (capa 0)")
			OBJ_Destroy()
		}
		else
		{
			to_wp = WAY_WPNearestOfPos( OBJ_PosGet(), n_attaque, CAPA_mange_charogne, none, Ci_Filter_CapaFlag)
			if( ! to_wp && ( ! i_agressive || ( i_agressive && i_model_grab_on ) ) )
			{
				// bat charognard ou bat agressive qui grabbe 
				DBG_Error("n_attaque : pas de WP pour le nid de la bat (capa 2) : (c une bat charognard ou une bat agressive qui peut grabber les persos...)")
				OBJ_Destroy()
			}
			else
			{
				if( i_agressive )
				{
					to_wp = WAY_WPNearestOfPos( OBJ_PosGet(), n_attaque, CAPA_point_d_attaque, none, Ci_Filter_CapaFlag)
					if( ! to_wp )
					{
						DBG_Error("n_attaque : pas de WP d'attaque (capa 1)")
						OBJ_Destroy()
					}
				}
			}
		}
	}
}


if( ! o_attaque_gao_specifique )
	o_attaque_gao_specifique = o_jack

// BOSS
if( BC_Boss() )
{
	if( o_attaque_finale_decor )
	{
		if( ! @o_attaque_finale_decor ACT_HasActionKit() )
			DBG_Warning("ATTENTION : o_attaque_finale_decor n'a pas d'action kit !!!")
		else
			@o_attaque_finale_decor ACT_ActionSet(ACTION_CINE_PIEUX_Intact_Fixe)
		o_attaque_finale_wp_chute = o_attaque_finale_decor		// c'est le gao du décor qui donne la position et l'orientation de la bat pour la synchro des anims
	}
	if( ! ao_boss_attack_wp[0] )
		DBG_Error("Attention il manque les wp de début d'attaque pour la bat noire !!!")
	if( ! ao_boss_retreat_wp[0] )
		DBG_Error("Attention il manque les wp de fin d'attaque pour la bat noire !!!")
}

// SON
//i_sound_fly_request = SND_Request(Ci_SND_Fly, C_SND_Request_3DSound )
f_time_cri_presence = MATH_RandFloat(2.5, 5.0)

// VARIANTE POUR LE CYCLE DE L'ACTION DE VOL
//ti_i = @get_global i_bat_vol_cycle_variante_nb		// récup du N° de cycle que je dois utiliser
//if( ! ti_i )
//	i_ACTION_Vol_Standard = ACTION_Vol_Standard1
//else if( ti_i == 1 )
//	i_ACTION_Vol_Standard = ACTION_Vol_Standard2
//else
//	i_ACTION_Vol_Standard = ACTION_Vol_Standard3
//ti_i++
//if( ti_i == 3 )
//	ti_i = 0
//@get_global i_bat_vol_cycle_variante_nb = ti_i		// backup du N° de cycle à utiliser pour la prochaine bat
i_ACTION_Vol_Standard = ACTION_Vol_cycle

AI_Execute("BC_exec_dyn_on")

OBJ_FlagsIdentitySet(OBJ_C_IdentityFlag_Msg, 0)			// structure message (CINE)

// DEPLACEMENT
v_beziers_sight = OBJ_SightGet()
v_beziers_banking = OBJ_BankingGet()
v_softcol_pos_backup = OBJ_PosGet()

// VISIBLE A L'INIT
OBJ_FlagInvisibleSet(faux)

// COLMAP
COL_ColMapActivationSet(none,all)		// on éteind les colmaps

// cross face d'eau pour la bat noire grabbée par le monstre marin !!!
//COL_CrossableSet(Gmat_Jack_Face_de_Bord + Gmat_Jack_BordHumain_TraversableNMI + Gmat_Jack_DefaultCrossable + Gmat_Jack_Face_eau, none)

//COL_CrossableSet(none, all)
//ti_crossable = Gmat_Jack_DefaultCrossable
//ti_crossable |= Gmat_Jack_Face_eau
//ti_crossable |= Gmat_Jack_Face_de_Bord
//ti_crossable |= Gmat_Jack_BordHumain_TraversableNMI
//ti_crossable |= Gmat_Jack_Crossable_All_But_TREX
//ti_crossable |= Gmat_Jack_Crossable_All_But_RAPTORS
//COL_CrossableSet(ti_crossable, none)

COL_ColMapActivationSet(Gmat_KK_Crossable_Default, none)

// BOSS et LIEUTENANTS et FOLLOWERS
BC_Lieutenant_Add()
if( BC_Boss() )
{
//	o_attaque_finale_wp = nobody
	i_attaque_a_partir_des_wp = vrai
	i_attaque_a_partir_de_la_ronde = faux
//	i_trace_paf = vrai
//	i_DBG_trace_etat = vrai
}


// CALLBACKS
AI_CBAdd(OBJ_Me(), CallBack_Info, "BC_cb_info")
AI_CBAdd(OBJ_Me(), CallBack_After_Blend, "BC_cb_afterblend")
AI_CBAdd(OBJ_Me(), CallBack_WhenDestroy, "BC_cb_when_destroy")
AI_CBAdd(OBJ_Me(), CallBack_SectoActOn, "BC_cb_when_secto")
AI_CBAdd(OBJ_Me(), CallBack_Client, "BC_cb_client")
macro_add_callback_after_cam("BC_cb_aftercam")

// TRACKS
if( ! i_DBG_track_test || i_DBG_track_test == 2 )
{
	// pas de test ou test + autres tracks
	AI_TrackChange(Ci_Track_TagOff, "BC_TAG_Off")
	AI_TrackChange(Ci_Track_Reflex, "BC_reflex")
	AI_TrackChange(Ci_Track_TagOn, "BC_TAG_On")
}

// init position balancier
v_balancier_pos = OBJ_PosGet()
v_balancier_pos.z -= (Cf_bras_de_levier * f_zoom)

f_anim_frequency_ref = 1.0
f_anim_frequency_cur = 1.0

// NUMERO GLOBAL DE LA BAT =================
i_global_bat_number = @get_global i_bats_count
@get_global i_bats_count++


f_wait_sinus_frequence = MATH_RandFloat(1.0, 3.0)
//f_wait_sinus_ampleur = MATH_RandFloat(1.0, 2.0)


if( i_DBG_track_test == 1 || i_DBG_track_test == 2 )
{
	// track test only ou test + autres tracks
	macro_change_etat("BC_ETAT_TEST")
}
else if( BC_Follower() )
{
//	i_trace_paf = vrai
//	i_DBG_trace_etat = vrai
	f_attaque_pos_delta = 1.0		// les bat rouges follower sont + grosses que les bats rouges standards!!!!
	i_attaque_a_partir_des_wp = faux
	if( ! o_follow_gao )
	{
		DBG_Error("follower configuré sans o_follow_gao !!!")
		OBJ_Destroy()
	}
	else
	{
		macro_change_etat("BC_ETAT_Fight_Follower")
	}
}
else
{
	// pas de track test
	switch( i_etat_init )
	{
		case Ci_etat_init_vol_ronde : 
			ACT_ActionSet(i_ACTION_Vol_Standard)
			BC_action_frequency_set(Cf_freq_standard)
			macro_change_etat("BC_exec_init_attente")
			break
		
		case Ci_etat_init_perchee : 
			// init balancier bat position perchée
			v_balancier_pos = OBJ_PosGet()
			v_balancier_pos.z += (Cf_bras_de_levier * f_zoom)
			
			OBJ_SightGeneralSet(- Cv_VerticalVector, OBJ_BankingGet())
			v_perchee_init_pos = OBJ_PosGet()
			v_perchee_init_sight = OBJ_SightGet()
			v_perchee_init_banking = OBJ_BankingGet()
			macro_change_etat("BC_ETAT_Wait_Perchee")
			break
		
		case Ci_etat_init_dans_trou :
			macro_change_etat("BC_ETAT_Wait_Grotte")
			break
	}
}

