#include "BC_defines.var"

int			ti_rank
int			ti_test_cadavre
int			ti_test_nb_global
int			ti_test_nb_bat

object	to_pere

messageid		tmid_visibility_ID
messageid		EVT_InfoSeen_ID

vector	tv_pos

#define Cf_angle_vision				Cf_PiBy3		// angle total vision = x2
#define Cf_cos_angle_vision		Cf_Cos60


if( i_flag_check_vision_done )
	return

i_flag_check_vision_done = vrai

BC_Fill_Fire_Array()

// CHECK CADAVRES ??? -------------------------------------------------------------------------------------------
ti_test_cadavre = faux
if( i_modele != Ci_MODELE_Bat_Noire )
{
	switch( i_etat_courant )
	{
		case ETAT_Move_Ronde :
		case ETAT_Move_Network :
		case ETAT_Wait_Perche :
			// bat en attente : délai pour les tests de cadavre
			ti_test_nb_global = MATH_Modulo(@get_global i_frame_nbr, 10)
			ti_test_nb_bat = MATH_Modulo(i_global_bat_number, 10)
			if( ti_test_nb_bat == ti_test_nb_global )
				ti_test_cadavre = vrai
			else
				ti_test_cadavre = faux
			break
		case ETAT_Paf_Air :
		case ETAT_Paf_Ecrase :
		case ETAT_Paf_Explose :
		case ETAT_Paf_Sol :
			ti_test_cadavre = faux
			break
		default:
			ti_test_cadavre = vrai		// interrompre les attaques et autres comportements
			break
	}
}


// CHECK EVENTS VISION -------------------------------------------------------------------------------------------
ti_rank = -1
for (	tmid_visibility_ID = MSG_GlobalScan(C_EVENT_TYPE_Visibility, &ti_rank);
		MSG_GlobalIsValid(tmid_visibility_ID);
		tmid_visibility_ID = MSG_GlobalScan(C_EVENT_TYPE_Visibility, &ti_rank)	)
{
	to_pere = EVENT_PereGet(tmid_visibility_ID)
	if( to_pere && to_pere != OBJ_Me() )
	{
		// COLLISIONS MOLLES ========================================
		if( EVENT_VisionIDGet(tmid_visibility_ID) == C_ID_BatCharognard 
			&& @to_pere OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_AI)
			&& @to_pere AI_IsModel(get_PNJ_Bats_path) )
		{
			// tests multiples pour sécurité envers les cadavres fake de bats
			if( EVENT_VisionLifeStateGet(tmid_visibility_ID) > Cf_Life_Dead && (OBJ_SqrDist(to_pere) <= (Cf_dist_detect_budies * Cf_dist_detect_budies)) )
			{
				// bat vivante et dans mon entourage
				if( ARR_ObjSearch(&ao_budy[0], i_budy_nb, to_pere) == -1 && i_budy_nb < Ci_budy_nb_max)
				{
					// bat pas déjà mémorisée = je la mémorise
					ao_budy[i_budy_nb] = to_pere
					i_budy_nb++
				}
			}
		}
		
		// HUMAINS, CADAVRES & ENNEMIS =======================================
		tv_pos = EVENT_PositionGet(tmid_visibility_ID)
		if( BC_Pos_in_Territory(tv_pos, faux) )
		{
			BC_Seen_Actor_Add(tmid_visibility_ID)
			if( @to_pere OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_AI) && @to_pere AI_IsModel(get_Humain_path) )
			{
				EVT_InfoSeen_ID = EVENT_AddEventInfo(OBJ_Me(), to_pere, C_EVENT_INFOTYPE_SEEN)
				EVENT_Info_OutsideGridSet(EVT_InfoSeen_ID, faux)
			}
			if( ti_test_cadavre )
			{
				if( BC_Pos_in_Territory(tv_pos, vrai) )		// pour la foodchain tester le feu !!!
				{
					if( BC_Cadavre_Test(to_pere, tmid_visibility_ID) )
					{
						BC_Cadavre_Add(to_pere)
					}
				}
			}
		}
	}
}

