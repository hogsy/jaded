#include "BC_defines.var"

messageid		tmid_vision

object			to_head

vector			tv_sight
vector			tv_pos
vector			tv_sens_paf

float				tf_dist


// SORTIE ETAT =========================================================================
if (i_sort_etat)
{
	i_paf_send = faux
	f_angle_rotation_max = Cf_angle_rotation_max_default
	i_sort_etat = faux
	return
}

// ENTREE ETAT =========================================================================
if (i_etat_courant != ETAT_Fight_Approche)
{
	i_etat_ancien_ancien = i_etat_ancien
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Fight_Approche
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	BC_DBG_Trace_Etat_Gao("etat fight approche", o_cible_attaque)
	
	// INIT MODE D'ATTAQUE ----------------------------------------------------
	if( o_cible_attaque == o_jack )
		i_attack_mode = Ci_attack_mode_paf
	else if( ! i_flag_cine )
	{
		// choix du mode d'attaque si cas générique (sinon le mode d'attaque & déjà initialisé par le msg ciné)
		if( i_model_grab_on && i_LD_grab_on )
		{
			// grab autorisé par le type de bat et aussi en LD (contrôle supplémentaire)
			if( i_grab_all_but_jack )
				i_attack_mode = Ci_attack_mode_grab_lent		// autorisée à grabber tout le monde
			else if( ARR_ObjSearch(&ao_grab_target[0], i_grab_target_nb, o_cible_attaque) != -1 )
				i_attack_mode = Ci_attack_mode_grab_lent		// autorisée à grabber cette cible
			else
				i_attack_mode = Ci_attack_mode_paf				// pas autorisée à grabber cette cible
		}
		else
			i_attack_mode = Ci_attack_mode_paf					// autorisée à grabber
	}
	
	// INIT DEPLACEMENT --------------------------------------------------------
	v_cible_pos = @o_cible_attaque OBJ_PosGet()
	
//	BC_Attaque_Calc_Deplacement(Ci_attaque_positionnement_retrait)

	f_speed = 0.0

	AI_Execute("BC_exec_dyn_on")

	BC_Update_Global_Last_Plongeon_Time()
	BC_Update_Global_Plongeon_Delay()

	o_backup_wp_depl_utilise	= o_backup_nearest_cible_wp
	BC_WP_Reservation_Del(o_backup_wp_depl_utilise)
	
	if( ! MATH_VecNullEpsilon(v_softcol_decal_current) )
	{
		// soft col en cours
		if( i_perchee_fake_attaque )
			tv_pos = v_fight_fake_position
		else
			tv_pos = @o_cible_attaque OBJ_PosGet()
		
		f_softcol_link_length = MATH_VecNorm(tv_pos - OBJ_PosGet())
	}
	
	i_flag_depl_horiz = faux
	
	f_angle_rotation_max = Cf_angle_rotation_max_contact			// les bats rouges ne sont pas limitées dans la rotation
		
	if( i_modele == Ci_MODELE_Bat_Noire )
		f_boss_attack_speed_pct = MATH_FloatMin(f_boss_attack_speed_pct + 0.1, 1.1)
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// EMERGENCY ABORT =============================
if( o_cible_attaque && ! BC_TargetActive(o_cible_attaque) )
{
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" : EMERGENCY ABORT : Target non active (")
	DBG_TraceObject(o_cible_attaque)	
	DBG_TraceString(")")
	DBG_TraceEOL()	
	
	BC_Cadavre_Del(o_cible_attaque)
	o_cible_attaque = nobody
	AI_Execute("BC_exec_init_attente")
}


// ANALYSE =================================================================
if( 0 )
{
	ANNULE_ATTAQUE:
	AI_Execute("BC_exec_init_attente")
}

AI_Execute("BC_exec_check_fight_exit")
if( i_fight_fake_wait )
{
	if( ACT_ActionGet() != ACTION_Falaise_Vol )
		ACT_ActionSet(ACTION_Falaise_Vol)
	
	AI_Execute("BC_exec_MOVE_fight_wait")
	returntrack
}
else if( i_fight_exit_flag )
{
	goto ANNULE_ATTAQUE
}

if( BC_Boss() )
{
	// GIANT BAT SWEEP ATTACK ------------------------------------------------------------------------------------------------------------------
	if( ! i_paf_send && ! i_attaque_fin_desynchro_flag 
		&& COL_ZDE_ZDECollide(o_cible_attaque, C_zde_fight, C_zde_corps) )
	{
		// le délai entre 2 pafs dépassé, la ZDE Fight touche la ZDE Corps, le n° de la frame autorise le paf (MODIF : en ciné touche toujours)
		@o_cible_attaque COL_UnCollidableAdd(OBJ_Me())
		f_time_last_attaque = TIME_Get()
		SND_RequestPlay(Ci_SND_Envoie_Paf)		// son si paf ou ride
		tv_sens_paf = OBJ_PosGet() - @o_boss_retreat_wp OBJ_PosGet()
		tv_sens_paf.z = 0.0
		if( ! MATH_VecNullEpsilon(tv_sens_paf) )
			MATH_VecSetNormalize(tv_sens_paf)
		else
			tv_sens_paf = - OBJ_SightGet()
		DBG_RenderVector( @o_cible_attaque OBJ_PosGet(), tv_sens_paf, color_rouge)
		i_paf_send = vrai
		EVENT_AddEventPaf( C_EVENT_FILTER_Enemy, i_paf_to_send_type, OBJ_Me(), Cf_EVENT_Duree_1Trame, o_cible_attaque, Ci_dmg_attaque_air, tv_sens_paf )
		
//		DBG_TraceObject(OBJ_Me())
//		DBG_TraceString(" paffe ")
//		DBG_TraceObject(o_cible_attaque)
//		DBG_TraceEOL()
		
		BC_Boss_Attack_Compute_Pos()
		macro_change_etat("BC_ETAT_Fight_Remonte")
	}
}
else
{
	// SMALL BATS CLAW ATTACK ----------------------------------------------------------------------------------------
	if( ! i_perchee_fake_attaque )
	{
		tf_dist = OBJ_SqrDist(o_cible_attaque)
		if( tf_dist <= ( f_plongeon_abort_dist * f_plongeon_abort_dist * f_zoom) )
		{
			if( f_time_start_etat > 0.25 )
				SND_RequestPlay(Ci_SND_Parachute)
			macro_change_etat("BC_ETAT_Fight_Contact")
		}
	}
}

// COMPORTEMENT ===========================================================
if( ! i_perchee_fake_attaque )
	BC_Interet_Update(mid_interet_attaque, C_EVENT_InteretStatusAttack, o_cible_attaque, tmid_vision)

if( BC_Boss() )
{
	to_head = @o_cible_attaque ANI_CanalObjectGet(Anim_Canal_Tete)
	if( ! to_head )
		to_head = o_cible_attaque
	v_look_pos = @to_head OBJ_PosGet()
}
else
{
	if( i_perchee_fake_attaque )
	{
		i_flag_neck = faux
		v_cible_pos = v_fight_fake_position
		tv_sight = v_fight_fake_position - OBJ_PosGet()
		i_flag_frein = vrai
	}
	else
	{
		i_flag_neck = vrai
		to_head = @o_cible_attaque ANI_CanalObjectGet(Anim_Canal_Tete)
		if( ! to_head )
			to_head = o_cible_attaque
		v_look_pos = @to_head OBJ_PosGet()
		i_flag_frein = faux
		if( BC_AttackHorsChampSurJackPositionnement() )
		{
			tv_sight = - @to_head OBJ_SightGet()		// face au sight de la caméra
			v_cible_pos = @to_head OBJ_PosGet() - (3.0 * tv_sight )
		}
		else
		{
			v_cible_pos = v_look_pos
			tv_sight = @to_head OBJ_PosGet() - OBJ_PosGet()
		}
	}
	v_dest_pos = v_cible_pos
	@o_tmp_obj_next OBJ_PosSet(v_dest_pos)
	@o_tmp_obj_next OBJ_BankingGeneralSet( tv_sight, Cv_VerticalVector)
	o_next_wp = o_tmp_obj_next
}


// DEPLACEMENT --------------------------------------------------------------------------------------------------------------
if( BC_Boss() )
	f_speed_blend_coef = 2.5
AI_Execute("BC_exec_MOVE_beziers")
if( BC_Boss() && i_flag_depl_fini )
{
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" : attaque ratée")
	DBG_TraceEOL()
	
	f_paf_pause_time = 1.5
	ACT_ActionSet(ACTION_Falaise_Vol)
	BC_action_frequency_set(2.0)
	i_vitesse_derapage_init = vrai
	macro_change_etat("BC_ETAT_Fight_Pause")
}


// ACTION ET VITESSE MAX ? ----------------------------
if( i_modele == Ci_MODELE_Bat_Noire )
{
	tf_dist = 15.0
	if( OBJ_SqrDist(o_cible_attaque) > (tf_dist * tf_dist) )
	{
		ACT_ActionSet(i_ACTION_Vol_Standard)
		BC_action_frequency_set(2.0)
	}
	else
	{
		ACT_ActionSet(ACTION_Vol_Plane)
		BC_action_frequency_set(1.0)
	}
	BC_ref_speed_set(f_vitesse_fight_approche * f_boss_attack_speed_pct)
}
else
{
	tf_dist = 40.0
	if( OBJ_SqrDist(o_cible_attaque) > (tf_dist * tf_dist) )
	{
		ACT_ActionSet(i_ACTION_Vol_Standard)
		BC_action_frequency_set(2.0)
		BC_ref_speed_set(f_vitesse_fight_approche)
	}
	else
	{
		tv_pos = OBJ_PosGet()
		if( v_dest_pos.z > tv_pos.z )
		{
			if( ACT_ActionGet() != i_ACTION_Vol_Standard )
				ACT_ActionSet(i_ACTION_Vol_Standard)
			BC_ref_speed_set(f_vitesse_fight_approche * 0.6)
		}
		else
		{
			if( f_approche_plane_countdown )
			{
				if( ACT_ActionGet() != ACTION_Vol_Plane )
					ACT_ActionSet(ACTION_Vol_Plane)
				f_approche_plane_countdown -= MATH_FloatMin(f_approche_plane_countdown, TIME_GetDt())
				if( ! f_approche_falaise_countdown )
					f_approche_falaise_countdown = 1.0	// 1 cycle de battement d'ailes
			}
			else
			{
				if( ACT_ActionGet() != i_ACTION_Vol_Standard )
					ACT_ActionSet(i_ACTION_Vol_Standard)
				f_approche_falaise_countdown -= MATH_FloatMin(f_approche_falaise_countdown, TIME_GetDt())
				if( ! f_approche_falaise_countdown )
					f_approche_plane_countdown = MATH_RandFloat(0.75, 1.0)
			}
			
			if( i_perchee_fake_attaque )
				BC_ref_speed_set(f_vitesse_fight_approche_fake)
			else
				BC_ref_speed_set(f_vitesse_fight_approche)
		}
		BC_action_frequency_set(1.0)
	}
}

