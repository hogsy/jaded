#include "KR_defines.var"

vector		tv_orientation
vector		tv_temp
vector		tv_normale

int				ti_i, ti_freq 
int				ti_paf_4_sens
int				ti_recul
int				ti_animDirOffset	// see Ci_Action_Paf_4Dir_xxx

float			tf_dot
float 			tf_reculFactor

#define			Ci_mode_paf_before_action_paf_reception				0
#define			Ci_mode_paf_action_paf										1
#define			Ci_mode_paf_detect_ground									2
#define			Ci_mode_paf_action_agonie									3
#define			Ci_mode_paf_action_releve									4
#define			Ci_mode_paf_action_releve_tr_attente						5
#define			Ci_mode_paf_action_apres_paf								6


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	KR_ResetRide()		// au cas où j'ia été expulsé par le finish
	v_projection_dir = Cv_NullVector
	// SI repousse : ne pas rester en attente
	if( i_paf_type & C_PAF_KK_Repousse)
		f_time_start_etat = 1.0	
	i_sort_etat = faux
	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_paf )
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_paf
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	i_jump_etat = Ci_Jump_notJumping 	// RAZ saut si paf pendant un saut
	
	o_grab_actor = LNK_ClientGet(Ci_LNK_GRAB_RAPTOR, mid_grab_actor_LNK_ID, faux, nofunc, nofunc, nofunc)
	
	KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, OBJ_PosGet(), v_paf_dir * 5, color_vert)
	
	i_mode_paf_action = Ci_mode_paf_action_paf
	ti_paf_4_sens = vrai
	ti_recul = vrai
	tf_reculFactor = 1.0
	
	if( ! i_snd_mort_done && ! i_paf_mortel )
	{
		// je n'ai pas encore fais mon cri de mort et je n'ai pas prévu de faire mon cri de mort la trame d'après
		if( i_paf_type & C_PAF_KK_Fort )
	 		SND_RequestPlay(Ci_SND_Paf)
	 	else
			SND_RequestPlay(Ci_SND_Paf_Small)
	}
	
	if( i_dernier_etat == ETAT_Finish_on_KONG )
	{
//		ACT_ActionSet(Action_Paf_Air_cycle)
		ACT_ActionSet(Action_Paf_Revol)
		ti_paf_4_sens = faux
		tf_reculFactor = 20.0
	}
	else if( i_dernier_etat == ETAT_mort )
	{
		ACT_ActionSet(Action_Paf_Sol_sur_place)
		ti_paf_4_sens = faux
		ti_recul = faux
	}
	else if( i_dernier_etat == ETAT_projectile || i_dernier_etat == ETAT_chute )
	{
		// arrive au sol
		ti_paf_4_sens = faux
		ti_recul = faux
		i_mode_paf_action = Ci_mode_paf_action_agonie
		if (ACT_ActionGet() != Action_Paf_mur_chute)
		{		
			if (EVENT_LIFE_CurLifeGet(ID_LIFE))
			{
				ACT_ActionSet(Action_Paf_Reception)
			}
			else
			{
				ACT_ActionSet(Action_Paf_Sol_sur_place)
			}
		}
		else
		{
			// passe en agonie en jouant la transition de retournement
			if ( EVENT_LIFE_CurLifeGet(ID_LIFE))
				ACT_ActionSet(Action_Agonie_Fin_Lente)
			else
			{
				ACT_ActionSet(Action_Mort)
				macro_change_etat("KR_ETAT_mort")
				//ACT_ActionSet(Action_Paf_Sol_sur_place)
			}
		}
	}
	else if ( i_paf_type & C_PAF_KK_Ecrasement )
	{
	//	ACT_ActionSet(Action_Paf_Sol_sur_place | Ci_ActionSet_Force_SameAction | Ci_ActionSet_Force_FrameZero)
		ACT_ActionSet(Action_Paf_Ecrase | Ci_ActionSet_Force_SameAction | Ci_ActionSet_Force_FrameZero)
		ti_paf_4_sens = faux
		ti_recul = faux
	}
	else if( i_paf_type & C_PAF_KK_Fort )	//was C_EVENT_PAF_Fort
	{
		DBG_Warning("le raptor a pris un paf fort mais ne vient pas de l'état projectile ???")
	}
	
	if( ti_paf_4_sens )
	{
		ti_animDirOffset = KR_GetPaf4DirOffset(v_paf_dir)
//MG:fait dans projectile
//		if (i_paf_projete)
//			ACT_ActionSet( (Action_Paf_Revol+ti_animDirOffset) | Ci_ActionSet_Force_SameAction | Ci_ActionSet_Force_FrameZero )
//		else
		{
			if ( i_paf_type & ( C_PAF_KK_Moyen | C_PAF_KK_Javelin ) )
			{
				tf_reculFactor = Ci_PAF_MOYEN_Recul
				ACT_ActionSet( (Action_Paf_Sol+ti_animDirOffset) | Ci_ActionSet_Force_SameAction | Ci_ActionSet_Force_FrameZero )
			}
			else
			{
				if ( o_ANN && o_paf_actor == o_ANN)
					tf_reculFactor = Ci_PAF_FAIBLE_Recul * 0.5
				else
					tf_reculFactor = Ci_PAF_FAIBLE_Recul
				ACT_ActionSet( (Ci_Action_Paf_PetitSol+ti_animDirOffset) | Ci_ActionSet_Force_SameAction | Ci_ActionSet_Force_FrameZero )
			}
		}
	}
	
	if( ti_recul )
	{
		// add a little random so they don't fly like synchronised swimmers
		tf_reculFactor *= MATH_RandFloat(0.75,1.25)
		v_paf_dir.x *= MATH_RandFloat(0.9,1.1)
		v_paf_dir.y *= MATH_RandFloat(0.9,1.1)
		v_paf_dir.z *= MATH_RandFloat(0.9,1.1)
		DYN_SpeedSetVector( v_paf_dir * tf_reculFactor )		// Vitesse initiale du paf de Kong

		DBG_TraceString("raptor - paf recul : ")
		DBG_TraceVector(v_paf_dir * tf_reculFactor)
		DBG_TraceEOL()
	}

	f_time_start_etat = 0.0
	
	o_fight_actor = nobody
	o_proie_groupe = nobody
	
	DYN_FrictionVectorSet(Cv_Raptor_friction)
	if ( ! ( i_paf_type & C_PAF_KK_Repousse))
		KR_SetCrossableBlownaway()
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE =======================================================================================================

o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, vrai, nofunc, nofunc)
if (o_grabbed_actor_KK)
	macro_change_etat("KR_ETAT_grabbed")


AI_Execute("KR_exec_check_paf")
if( o_paf_actor )
{
	KR_Select_Paf_Etat(fct_track_change)
	if( fct_track_change != nofunc )
	{
		if( fct_track_change != AI_TrackCurGet() )
			macro_change_etat(fct_track_change)
		else
			macro_change_etat("KR_ETAT_track_change")
	}
}	

// COMPORTEMENT =================================================================================================

if (o_last_paf_actor == o_KONG)
	i_iam_a_kam_target = vrai

//if( MSG_GlobalIsValid(mid_best_interet) )
//{
//	KR_SetInterestType(C_EVENT_InteretStatusInFightZone)
//}

KR_INTERET_Update(o_last_paf_actor, C_EVENT_InteretStatusInFightZone)


i_flag_look = faux

switch ( i_mode_paf_action )
{
	//==================================
	case Ci_mode_paf_action_paf :
	//==================================
		if( ACT_ActionFinished() )
			i_mode_paf_action = Ci_mode_paf_detect_ground
		break
		
	//==================================
	case Ci_mode_paf_detect_ground :
	//==================================
		if( COL_CollideType(COL_C_Ground) )
		{
			// il faut checker le sol car on a pu passer en mode paf après un check mur en mode projectile
			if ( EVENT_LIFE_CurLifeGet(ID_LIFE) )
			{
				if (i_paf_type & ( C_PAF_KK_Faible | C_PAF_KK_Repousse ))
				{
					i_mode_paf_action = Ci_mode_paf_action_apres_paf
					ACT_ActionSet(Action_Normal_Attente)
				}
				else
				{
					//MG: todo avoir une agonie non finale
					i_mode_paf_action = Ci_mode_paf_action_agonie
					ACT_ActionSet(Action_Agonie)
					if( ! i_snd_mort_done )
						SND_RequestPlay(Ci_SND_Injured)
//					i_mode_paf_action = Ci_mode_paf_action_releve
//					ACT_ActionSet(Action_Agonie_Fin_Lente)
				}
			}
			else
			{
				i_mode_paf_action = Ci_mode_paf_action_agonie
				switch ( ACT_ActionGet())
				{
					case Action_Paf_Ecrase :
						ACT_ActionSet( Action_Paf_Ecrase_mort)
						break
					case Action_Paf_Sol_sur_place :
						ACT_ActionSet(Action_Mort)
						break
					default:
						ACT_ActionSet(Action_Agonie)
				}

				if( ! i_snd_mort_done )
					SND_RequestPlay(Ci_SND_Injured)
				macro_change_etat("KR_ETAT_mort")
			}
		}
		break

	//==================================
	case Ci_mode_paf_action_agonie :
	//==================================
	
		// if still alive, play agony halfway (otherwise it's too long)
		if ( ( ! EVENT_LIFE_CurLifeGet(ID_LIFE) && ACT_ActionFinished()) 
		|| (EVENT_LIFE_CurLifeGet(ID_LIFE) && ANI_CurrentFrameGet(0) > 50 ) )
		{
			if ( EVENT_LIFE_CurLifeGet(ID_LIFE))
			{
				ACT_ActionSet(Action_Agonie_Fin_Lente)
				ti_freq = 64 * MATH_RandFloat( 0.95, 1.2)
				ANI_FrequencySet( 0,ti_freq )
				i_mode_paf_action = Ci_mode_paf_action_releve
			}
			else
				macro_change_etat("KR_ETAT_mort")
		}

//		if( f_time_start_etat > 1.0 )
//		{
//			macro_change_etat("KR_ETAT_attente")
//		}
		break

	//==================================
	case Ci_mode_paf_action_releve :
	//==================================
		if( ACT_ActionFinished() )
			i_mode_paf_action = Ci_mode_paf_action_apres_paf
		break
		
	//==================================
	case Ci_mode_paf_action_apres_paf :
	//==================================
	
		// resume following the network
//MG: dont resume network: its messy in 5C
//		if (o_net_nextNode)
//		{
//			macro_change_etat("KR_ETAT_FollowNetwork")
//		}
//		else
		{
			// if Kong paffed, make him flee for a while
			if (o_last_paf_actor == o_KONG)
			{
				if ( i_KK_blesse)
					f_use_safe_orbit_timer = Cf_FLEE_TIME_MODE_WAR
				else
					f_use_safe_orbit_timer = Cf_FLEE_TIME_AFTER_BITE
				f_use_safe_orbit_timer = MATH_RandFloat( f_use_safe_orbit_timer - 0.5, f_use_safe_orbit_timer + 0.5)
				macro_change_etat("KR_ETAT_attente")
			}
			else
			{
				o_flee_actor = nobody
				macro_change_etat("KR_ETAT_attente")
			}
		}

		break
}

if( i_dernier_etat == ETAT_Finish_on_KONG )
	tv_temp = - v_paf_dir
else
	tv_temp = OBJ_SightGet()

OBJ_BankingGeneralSet(
	MATH_VecBlendRotate(OBJ_SightGet(), tv_temp, 6.0 * TIME_GetDt()),
	MATH_VecBlendRotate( OBJ_BankingGet(), Cv_VerticalVector, 6.0 * TIME_GetDt()))
