#include "KR_defines.var"

vector			tv_pos

messageid		tmid_vision
messageid		tmid_LNK

object			to_bone

float				tf_percent


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	KR_Finish_Reset(i_I_finish_leader)
	if( i_etat_courant != ETAT_paf )
		KR_ResetRide()		// sinon conserver l'uncol et tout et tout
	i_sort_etat = faux
	return
}


// BONE ET ACTION ==============================================================
if( ! i_I_finish_init_done )
{
	if( MSG_GlobalIsValid(mid_bone_ride_KK_LNK_ID) && o_I_finish_actor )
	{
		i_I_finish_init_done = vrai
		
		// liaison de ride et pas de finish pour le bone, car 4 bats sur 5 sont en ride et pas en finish !!!
		to_bone = LNK_GrabBoneGet(mid_bone_ride_KK_LNK_ID)
		if( to_bone == @o_I_finish_actor ANI_CanalObjectGet(Raptor_Finish_on_KONG_Canal_Fake_01) )
		{
			i_I_finish_synchronized_nmi = faux
			i_I_finish_start_frame = 0		// désynchroniser les raptors IA
			f_I_finish_fake_attitude_timer = 0.75
		}
		else if( to_bone == @o_I_finish_actor ANI_CanalObjectGet(Raptor_Finish_on_KONG_Canal_Fake_02) )
		{
			i_I_finish_synchronized_nmi = faux
			i_I_finish_start_frame = 20		// désynchroniser les raptors IA
			f_I_finish_fake_attitude_timer = 1.25
		}
		else if( to_bone == @o_I_finish_actor ANI_CanalObjectGet(Raptor_Finish_on_KONG_Canal_Fake_03) )
		{
			i_I_finish_synchronized_nmi = faux
			i_I_finish_start_frame = 40		// désynchroniser les raptors IA
			f_I_finish_fake_attitude_timer = 1.75
		}
		else if( to_bone == @o_I_finish_actor ANI_CanalObjectGet(Raptor_Finish_on_KONG_Canal_Anim_01) )
		{
			i_I_finish_synchronized_nmi = vrai
			i_I_finish_start_frame = 0
			i_I_finish_action_seplace = ACTION_Finish_on_KONG_01_deb
			i_I_finish_action_challenge = ACTION_Finish_on_KONG_01_challenge
			i_I_finish_action_kong_gagne = ACTION_Finish_on_KONG_01_KK_a_gagne
			i_I_finish_action_kong_perd = ACTION_Finish_on_KONG_01_KK_a_perdu
		}
		else if( to_bone == @o_I_finish_actor ANI_CanalObjectGet(Raptor_Finish_on_KONG_Canal_Anim_02) )
		{
			i_I_finish_synchronized_nmi = vrai
			i_I_finish_start_frame = 0
			i_I_finish_action_seplace = ACTION_Finish_on_KONG_02_deb
			i_I_finish_action_challenge = ACTION_Finish_on_KONG_02_challenge
			i_I_finish_action_kong_gagne = ACTION_Finish_on_KONG_02_KK_a_gagne
			i_I_finish_action_kong_perd = ACTION_Finish_on_KONG_02_KK_a_perdu
		}
		else
		{
			DBG_TraceString("KRAPTOR FINISH SUR KONG: bone non reconnu = ")
			DBG_TraceObject(to_bone)
			DBG_TraceEOL()
			DBG_Error("KRAPTOR FINISH SUR KONG: bone non reconnu (cf. log)")
		}
	}
}


// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_Finish_on_KONG )
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Finish_on_KONG
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	KR_DBG_Trace_Gao(i_DBG_trace_finish, "passe en finish sur Kong / bone = ", LNK_GrabBoneGet(mid_bone_ride_KK_LNK_ID))
	
	if( i_I_finish_synchronized_nmi )
		ACT_ActionSet(i_I_finish_action_seplace)
	else
		ACT_ActionSet(Action_Ride_Attente)
	
	ANI_CurrentFrameSet(0, i_I_finish_start_frame)		// désynchro des raptors pas animés
	
	o_I_finish_actor_ref = o_I_finish_actor
	v_I_finish_pos_init = OBJ_PosGet()
	
	COL_UnCollidableAdd(o_I_finish_actor)
	f_I_finish_pos_coef = 1.0		// perfect pos
}
else
{
	f_time_start_etat += TIME_GetDt()
//	f_I_finish_pos_coef += MATH_FloatMin(1.0 - f_I_finish_pos_coef, 5 * TIME_GetDt())
}

// ANALYSE ==============================================================

if( i_I_finish_leader )
{
	// c'est moi qui suit en challenge avec KONG
	o_I_finish_actor = LNK_ThisClientGet(o_I_finish_actor,Ci_LNK_KKFINISH_ON_KONG, mid_I_finish_LNK_ID, vrai, nofunc, nofunc, nofunc)
	if( ! MSG_GlobalIsValid(mid_I_finish_LNK_ID) )
		macro_change_etat("KR_ETAT_attente")
	else
		i_I_finish_action_liaison = LNK_Finish_ActionGet(mid_I_finish_LNK_ID)
}
else
{
	// je suis en support :)
	if( @get_global o_KNMI_finish_leader )
	{
		tmid_LNK = EVENT_FindEventPereTarget(Ci_LNK_EVENT_OFFSET + Ci_LNK_KKFINISH_ON_KONG, o_I_finish_actor, @get_global o_KNMI_finish_leader)
		if( MSG_GlobalIsValid(tmid_LNK) )
		{
			i_I_finish_action_liaison = LNK_Finish_ActionGet(tmid_LNK)
			tf_percent = @o_I_finish_actor Proc_KK_Mashing_Pct()
		}
		else
			macro_change_etat("KR_ETAT_attente")		// la liaison a été coupée et il n'y a plus de leader
	}
	else
		macro_change_etat("KR_ETAT_attente")		// la liaison a été coupée et il n'y a plus de leader
}

// COMPORTEMENT ==============================================================

KR_INTERET_Update(o_I_finish_actor, C_EVENT_InteretStatusGrab)

switch( i_I_finish_action_liaison )
{
	//----------------------------------------------------------------------------------------------------------------
	case Ci_GrabKong_FinishSePlace :		// positionnement
	//----------------------------------------------------------------------------------------------------------------
		switch( i_I_finish_role )
		{
			case Finish_on_KONG_Role_Anim_01 :
			case Finish_on_KONG_Role_Anim_02 :
				break
				
			default:
				AI_Execute("KR_exec_finish_fake_attitude")
				break
		}
		break
		
	//----------------------------------------------------------------------------------------------------------------
	case Ci_GrabKong_FinishDeb :		// Challenge en cours
	//----------------------------------------------------------------------------------------------------------------
		switch( i_I_finish_role )
		{
			case Finish_on_KONG_Role_Anim_01 :
			case Finish_on_KONG_Role_Anim_02 :
				if( ACT_ActionGet() != i_I_finish_action_challenge )
					ACT_ActionSet(i_I_finish_action_challenge)
				if( ! i_I_finish_leader )
					ANI_RatioSet(0, tf_percent)		// je ne suis pas le leader : je dois m'adapter au pourcentage...
				tv_pos = @o_I_finish_actor OBJ_PosGet()
				tv_pos.z = OBJ_PosGet().z
				break
				
			default:
				AI_Execute("KR_exec_finish_fake_attitude")
				break
		}
		break
		
	//----------------------------------------------------------------------------------------------------------------
	case Ci_GrabKong_FinishPerdu :		// KONG a perdu
	//----------------------------------------------------------------------------------------------------------------
		switch( i_I_finish_role )
		{
			case Finish_on_KONG_Role_Anim_01 :
			case Finish_on_KONG_Role_Anim_02 :
				if(ACT_ActionGet() != i_I_finish_action_kong_perd )
				{
					ACT_ActionSet(i_I_finish_action_kong_perd)
					if( i_I_finish_leader )
						SIG_Send(SIG_C_TYPE_MORT, OBJ_Me())
				}
				break
				
			default:
				// les raptors décrochent
				if( i_ride_mode == Ci_ride_finish_on_KONG )
				{
					i_ride_mode = Ci_ride_grab_impulsion
					i_jump_exit = vrai				// Kong Coupe la LIAISON
					v_ride_end_jump_pos = @o_I_finish_actor_ref OBJ_PosGet() 
					v_ride_end_jump_pos -= @o_I_finish_actor_ref OBJ_SightGet() * MATH_RandFloat( 7.0,10.0)
					v_ride_end_jump_pos -= @o_I_finish_actor_ref OBJ_HorizonGet() * MATH_RandFloat( -3.0, 3.0)		
					AI_CBDel(o_bone_ride_KK, CallBack_After_Blend, "KR_CALLBACK_set_pos")
					o_bone_ride_KK = LNK_ClientGet(Ci_LNK_RIDE_DINO, mid_bone_ride_KK_LNK_ID, faux, nofunc, nofunc, nofunc)
				}
				AI_Execute("KR_exec_ride_exit")
				break
		}
		break
		
	//----------------------------------------------------------------------------------------------------------------
	case Ci_GrabKong_FinishGagne :		// KONG a gagné
	//----------------------------------------------------------------------------------------------------------------
	case	Ci_GrabKong_FinishFin :
	//----------------------------------------------------------------------------------------------------------------		
		switch( i_I_finish_role )
		{
			case Finish_on_KONG_Role_Anim_01 :	// [leader] écrasé au sol
				if( ACT_ActionGet() != i_I_finish_action_kong_gagne )
				{
					EVENT_LIFE_CurLifeSet(ID_LIFE, 0.0)
					KR_STATS_NMI_Killed(o_KONG)
					ACT_ActionSet(i_I_finish_action_kong_gagne)
					i_I_finish_synchronized_nmi = faux		// j'arrête le snap sur KONG
					DYN_GravitySet(Cv_Raptor_Gravity)
					COL_ColSetActivationSet(C_bit_zdm_pied, none)
				}
				else if( ACT_ActionFinished() )
				{
					KR_ResetRide()
					macro_change_etat("KR_ETAT_mort")
				}
				break
				
			case Finish_on_KONG_Role_Anim_02 :	// projeté en arrière
				if( ACT_ActionGet() != i_I_finish_action_kong_gagne )
				{
					EVENT_LIFE_CurLifeSet(ID_LIFE, 0.0)
					KR_STATS_NMI_Killed(o_KONG)
					ACT_ActionSet(i_I_finish_action_kong_gagne)
					i_I_finish_synchronized_nmi = faux		// j'arrête le snap sur KONG
					DYN_GravitySet(Cv_Raptor_Gravity)
					COL_ColSetActivationSet(C_bit_zdm_pied, none)
				}
				else if( ACT_ActionFinished() )
				{
					KR_ResetRide()
					o_snap_actor = o_I_finish_actor
					i_projectile_mode = Ci_projectile_lance_aveugle
					macro_change_etat("KR_ETAT_projectile")
				}
				break
			
			default:
				// les raptors décrochent
//				if( i_ride_mode == Ci_ride_finish_on_KONG )
//				{
//					i_ride_mode = Ci_ride_grab_impulsion
//					i_jump_exit = vrai				// Kong Coupe la LIAISON
//					v_ride_end_jump_pos = @o_I_finish_actor_ref OBJ_PosGet() 
//					v_ride_end_jump_pos -= @o_I_finish_actor_ref OBJ_SightGet() * MATH_RandFloat( 7.0,10.0)
//					v_ride_end_jump_pos -= @o_I_finish_actor_ref OBJ_HorizonGet() * MATH_RandFloat( -3.0, 3.0)		
//					AI_CBDel(o_bone_ride_KK, CallBack_After_Blend, "KR_CALLBACK_set_pos")
//					o_bone_ride_KK = LNK_ClientGet(Ci_LNK_RIDE_DINO, mid_bone_ride_KK_LNK_ID, faux, nofunc, nofunc, nofunc)
//				}
//				AI_Execute("KR_exec_ride_exit")

				// les raptors sont paffés
				DYN_GravitySet(Cv_Raptor_Gravity)
				COL_ColSetActivationSet(C_bit_zdm_pied, none)
				EVENT_LIFE_CurLifeSet(ID_LIFE, 0.0)
				KR_STATS_NMI_Killed(o_KONG)
				i_paf_type = C_PAF_KK_Fort
				v_paf_dir = - @o_I_finish_actor_ref OBJ_SightGet()
				if( i_I_finish_role == Finish_on_KONG_Role_Fake_01 )
					v_paf_dir = MATH_VecRotate(v_paf_dir, Cv_VerticalVector, Cf_PiBy4)
				else
					v_paf_dir = MATH_VecRotate(v_paf_dir, Cv_VerticalVector, - Cf_PiBy4)
				DBG_RenderVector(OBJ_PosGet(), v_paf_dir * 10, color_rouge)
				macro_change_etat("KR_ETAT_paf")
				break
		}
		break
}

if( i_I_finish_synchronized_nmi && o_I_finish_actor )
{
	OBJ_PosSet(MATH_VecBlend(v_I_finish_pos_init, @o_I_finish_actor OBJ_PosGet(), f_I_finish_pos_coef))
	OBJ_BankingGeneralSet(
		MATH_VecBlendRotate(OBJ_SightGet(), @o_I_finish_actor OBJ_SightGet(), f_I_finish_pos_coef), 
		MATH_VecBlendRotate(OBJ_BankingGet(), @o_I_finish_actor OBJ_BankingGet(), f_I_finish_pos_coef))
}

