#include "KR_defines.var"

int			ti_i
int			ti_actionAtStart
int			ti_blendToProjDir

vector	tv_dest_pos
vector	tv_sens
vector	tv_pos_mur
vector	tv_temp
vector	tv_projDir
vector	tv_projGravity

object	to_target			// acteur vers lequel le raptor a été lancé ou vers lequel il a sauté (aide au tir)
object	to_target_tete		// tête de l'acteur

float		tf_dist


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_projectile_mode = 0
	o_aide_tir_actor = nobody
	if( o_snap_actor )
	{
		KR_UncollideableDel(o_snap_actor)
		o_snap_actor = nobody
	}
	i_sort_etat = faux
	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_projectile)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_projectile

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()
	
	tv_sens = Cv_NullVector
	v_jump_pos = Cv_NullVector
	to_target = nobody
	
	// GESTION DES DIFFERENTS MODES DE PROJECTILE
	if( i_projectile_mode == Ci_projectile_lance_unknown )
	{
		to_target = LNK_GrabKong_LanceObjectGet(mid_grabbed_by_Kong_LNK_ID)
		if( to_target )
			i_projectile_mode = Ci_projectile_lance_target
		else
			i_projectile_mode = Ci_projectile_lance_aveugle
	}
	
	ti_actionAtStart = Action_Paf_Air_cycle	// default
	tv_projGravity = Cv_Raptor_Gravity			// default
	
	switch(i_projectile_mode)
	{
		//========================
		case Ci_projectile_lache :
		//========================
			// Raptor laché car l'acteur qui le grabbait a été paffé
			tv_sens = OBJ_PosGet() - @o_snap_actor OBJ_PosGet()
			MATH_VecSetHorzNormalize(tv_sens)		// ne part pas en hauteur
			KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, OBJ_PosGet(), tv_sens * 3, color_bleu)
			v_jump_pos = OBJ_PosGet() 
//			v_jump_pos.z = @o_snap_actor OBJ_PosGet().z		// tombe au niveau du sol
			v_jump_pos += @o_snap_actor OBJ_SightGet() * 2.0
			v_jump_pos -= @o_snap_actor OBJ_HorizonGet() * 3.5 
			ti_actionAtStart = Action_Fight_Saut_cycl
//			if ( EVENT_TL_LifeGet(ID_LIFE))		
//				ti_actionAtStart = Action_Normal_Attente
//			else
//				ti_actionAtStart = Action_Paf_Sol_sur_place
			break
			
		//========================
		case Ci_projectile_lance_target :
		//========================
			// Raptor lancé par l'acteur qui le grabbait sur une cible
			KR_UncollideableAdd(o_snap_actor)
			to_target_tete = @to_target ANI_CanalObjectGet(Anim_Canal_Tete)
			if ( to_target_tete )
				v_jump_pos = @to_target_tete OBJ_PosGet()
			else
				v_jump_pos = @to_target OBJ_PosGet()
			tv_sens = MATH_VecNormalize(v_jump_pos - OBJ_PosGet())
			ti_actionAtStart = Action_Paf_Air_cycle		// default
			tv_projGravity = Cv_NullVector
			break
			
		//========================
		case Ci_projectile_lance_aveugle :
		//========================
			// Raptor lancé par l'acteur qui le grabbait (pas de cible)
			KR_UncollideableAdd(o_snap_actor)
			if( i_dernier_etat == ETAT_Finish_on_KONG )
			{
				// je pars dans le dos de kong, et j'étais positionné / orienté comme lui...
				tv_sens = - OBJ_SightGet()
				tf_dist = 5.0
			}
			else
			{
				// vient d'un grabbed
				tv_sens = MATH_VecNormalize(LNK_GrabKong_LanceVectorGet(mid_grabbed_by_Kong_LNK_ID))
				tf_dist = Cf_DST_LANCE_AVEUGLE
			}
			KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, OBJ_PosGet(), tv_sens * 5, color_bleu)
			v_jump_pos = OBJ_PosGet() + (tv_sens * tf_dist)
			ti_actionAtStart = Action_Paf_Air_cycle	// default
			break
			
		//========================
		case Ci_projectile_paffe_target :
		//========================
			// Raptor paffé et projeté sur une cible
			to_target = o_aide_tir_actor
			to_target_tete = @to_target ANI_CanalObjectGet(Anim_Canal_Tete)
			if( to_target_tete )
				v_jump_pos = @to_target_tete OBJ_PosGet()
			else
				v_jump_pos = @to_target OBJ_PosGet()
			tv_sens = MATH_VecNormalize(v_jump_pos - OBJ_PosGet())
 			ti_actionAtStart = Action_Paf_Air_cycle
			tv_projGravity = Cv_NullVector
			break
			
		//========================
		case Ci_projectile_paffe_aveugle :
		//========================
			// Raptor paffé et projeté (pas de cible)
			tv_sens = MATH_VecNormalize(v_paf_dir)
			tv_sens = MATH_VecRotate( tv_sens, Cv_VerticalVector, (0.5 - MATH_RandFloat( 0.0, 1.0)) * Cf_PiBy4 )
			KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, OBJ_PosGet(), tv_sens * Ci_PAF_FORT_TravelDist, color_bleu)
			v_jump_pos = OBJ_PosGet() + (tv_sens * Ci_PAF_FORT_TravelDist * MATH_RandFloat( 0.8, 1.4))
			ti_actionAtStart = Action_Paf_Air_cycle	// default
			break
			
		//========================
		default:
		//========================
			DBG_Error("i_projectile_mode inconnu")
			break
	}
	
	KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, v_jump_pos, Cv_VerticalVector * 10, color_cyan)
	KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, OBJ_PosGet(), v_jump_pos - OBJ_PosGet(), color_jaune)
	
	KR_send_msg( to_target, msg_id_KK_send_projectile)
	o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, faux, nofunc, nofunc)
	
	v_projection_dir = tv_sens

	KR_SetCrossableBlownaway()
	
	COL_ColSetActivationSet(C_bit_zdm_pied, none)
	DYN_GravitySet( tv_projGravity )
	f_time_start_etat = 0.0
	
	if (MATH_VecNull(tv_projGravity))
	{
		//*** make trajectory more straight line ***
		v_jump_computedSpd = tv_sens
		MATH_VecSetNorm(v_jump_computedSpd, 75.0)
		DYN_FrictionVectorSet(Cv_NullVector)
		//DYN_FrictionVectorSet(cvector(1.0, 1.0, 0.0))
	}
	else if ( ti_actionAtStart != Action_Thrown_In_the_Air)
		v_jump_computedSpd = KR_Compute_Impulsion(faux)
	else
	{
		v_jump_computedSpd = tv_sens
		MATH_VecSetNorm(v_jump_computedSpd, 55.0)		DYN_FrictionVectorSet(Cv_NullVector)
	}
	DYN_SpeedSetVector(v_jump_computedSpd)
	
	ACT_ActionSet(ti_actionAtStart)
	SND_RequestPlay(Ci_SND_Woosh)
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE =======================================================================================================

o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, vrai, nofunc, nofunc)
if( o_grabbed_actor_KK )
	macro_change_etat("KR_ETAT_grabbed")

// test collision with another ennemy
if( i_projectile_mode == Ci_projectile_lance_aveugle ||  i_projectile_mode == Ci_projectile_lance_target )
{
	COL_ColSetActivationSet( C_bit_zde_fight, none)
	COL_ZoneSizeSet(C_zde_fight, cvector( 1.0, 1.0, 1.0))// * f_body_scale)
	if( KR_TestCollision_ZDE_ZDE(C_zde_corps, C_zde_corps, o_KONG) )
	{
		// slow down
		DYN_SpeedSetVector(DYN_SpeedGetVector()/2.0)//Cv_NullVector)
		DYN_GravitySet(Cv_Raptor_Gravity)
		DYN_FrictionVectorSet(Cv_Raptor_friction_chute)
	}
	COL_ZoneSizeSet(C_zde_fight, cvector(0.5, 0.5, 0.5))// * f_body_scale)
	COL_ColSetActivationSet( none, C_bit_zde_fight)
}

if ( f_time_start_etat > 0.25 )	
{
	// 0.25 sinon c trop tôt et le raptor peut paffer Kong quand Kong gagne un finish...
	// ne pas décecter tout de suite (sinon le raptor ne va même pas être projeté)
	
	// if we're beyond destination go down faster	
	if (MATH_VecDotProduct( DYN_SpeedGetVector(), v_jump_pos - OBJ_PosGet()) < 0.0)
	{
		DYN_GravitySet(Cv_Raptor_Gravity * 2.0)
	}	
	
	// check pafs
	AI_Execute("KR_exec_check_paf")
	if( o_paf_actor )
	{
		KR_Select_Paf_Etat(fct_track_change)
		if( fct_track_change != nofunc )
			macro_change_etat(fct_track_change)
	}
	
	// check mur
	if ( COL_CollideType(COL_C_Wall) && (ACT_ActionGet() == Action_Thrown_In_the_Air) )
	{
		SND_RequestPlay(Ci_SND_ChocMur)
//		KR_GFX_Impact(COL_CollidedPointGet(COL_C_Wall))
		
		if( i_projectile_mode != Ci_projectile_lache )
			EVENT_LIFE_LifeChange(ID_LIFE, Ci_PAF_LIFEPOINTS_Fall) // perd points de vie en tombant s'il a été lancé, mais pas s'il a été laché (KONG paffé)
		
		tv_pos_mur = COL_CollidedPointGet(COL_C_Wall)
		KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, tv_pos_mur, Cv_VerticalVector, color_jaune)
		v_paf_dir = COL_RayObject_NormalGet()
		if( v_paf_dir.z >= 0.0 )
			v_paf_dir.z = 0.0
		//DYN_SpeedSetVector(Cv_NullVector)
		// get away from the wall while falling right away (to avoid stand-still)
		tv_temp = -v_paf_dir
		tv_temp.z = -2.0
		
		v_paf_add_speed = Cv_NullVector
		
		//MG: sont capable de se prendre un mur quand meme     //i_paf_mortel = vrai
		KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, OBJ_PosGet(),v_paf_dir,color_bleu)
		DBG_TraceString("le raptor a été jeté contre un mur - normale(z=0) = ")
		DBG_TraceVector(v_paf_dir)
		DBG_TraceEOL()
		
		ACT_ActionSet(Action_Paf_mur)
		
//		DYN_SpeedSetVector(Cv_NullVector)
		DYN_GravitySet(Cv_Raptor_Gravity)
		DYN_FrictionVectorSet(Cv_Raptor_friction_chute)

//		macro_change_etat("KR_ETAT_paf")	
	}
	
	// check sol
	if( COL_CollideType(COL_C_Ground))
	{
		SND_RequestPlay(Ci_SND_ChocMur)
//		KR_GFX_Impact(COL_CollidedPointGet(COL_C_Ground)) 		
		
		if( i_projectile_mode != Ci_projectile_lache )
			EVENT_LIFE_LifeChange(ID_LIFE, Ci_PAF_LIFEPOINTS_Fall)			// perd 1 pv en tombant s'il a été lancé, mais pas s'il a été laché (KONG paffé
		i_jump_etat = Ci_Jump_notJumping
		
		v_paf_dir = v_projection_dir
		if( v_paf_dir.z >= 0.0 )
			v_paf_dir.z = 0.0
		//MG:let him slide a little DYN_SpeedSetVector(Cv_NullVector)
		v_paf_add_speed = Cv_NullVector
		
		KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, OBJ_PosGet(), v_paf_dir, color_bleu)
		
		if ( i_projectile_mode == Ci_projectile_lache && EVENT_LIFE_CurLifeGet(ID_LIFE) )
		{
			// get away from kong
			if ( i_KK_blesse)
				f_use_safe_orbit_timer = Cf_FLEE_TIME_MODE_WAR
			else
				f_use_safe_orbit_timer = Cf_FLEE_TIME_AFTER_BITE
			f_use_safe_orbit_timer = MATH_RandFloat( f_use_safe_orbit_timer - 0.5, f_use_safe_orbit_timer + 0.5)
			macro_change_etat("KR_ETAT_fight_KONG")
		}
		else
			macro_change_etat("KR_ETAT_paf")
	}
}

// COMPORTEMENT =======================================================================================================

i_iam_a_kong_target = vrai

switch (ACT_ActionGet())
{
	case Action_Paf_mur :
		ti_blendToProjDir = vrai
		tv_projDir = -v_paf_dir
		if (ACT_ActionFinished())
		{
			DYN_SpeedSetVector(cvector(0.0,0.0,-10.0))		// value comes from last key's z variation over time
			ACT_ActionSet(Action_Paf_mur_chute)
		}
		break
		
	case Action_Paf_mur_chute :
		ti_blendToProjDir = faux
		break
		
	default:
		ti_blendToProjDir = vrai
		tv_projDir = v_projection_dir
		break
}

if (ti_blendToProjDir)
{
//	tv_temp = MATH_VecRotate(v_projection_dir, Cv_VerticalVector, - Cf_1Degre * 90)
//	KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, OBJ_PosGet(), tv_temp * 10, color_jaune)
	OBJ_BankingGeneralSet(
		MATH_VecBlendRotate(OBJ_SightGet(), tv_projDir, 15 * TIME_GetDt()), 
		MATH_VecBlendRotate(OBJ_BankingGet(), Cv_VerticalVector, 15 * TIME_GetDt()))
}

	
//if (ACT_ActionFinished())
//	ACT_ActionSet(Action)


KR_INTERET_Update(o_KONG, C_EVENT_InteretStatusGrabbed)

