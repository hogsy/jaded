#include "KR_defines.var"
int					ti_i
int					ti_k
int					ti_membre_index

vector			tv_temp

object			to_head
object			to_clone
object			to_target

message		tm_msg

messageid		EVT_Interet_ID

float				tf_tmp1,tf_tmp2

if( ! i_actif )
	OBJ_Destroy()

AI_RunContext(CTX_Normal)


// VINCE ==================================================
//i_DBG_trace_interaction = vrai
//i_DBG_trace_finish = vrai
//i_DBG_trace_send_paf = vrai
//i_DBG_test_finish_sur_KONG = vrai
//i_DBG_Demo_PS2 = faux
//i_DBG_Finish_on_Kong_Forbidden = vrai
// VINCE ==================================================

// SI PAS EN EDITEUR : raz vars debug ============================
if( AI_GetCurSystem() != Ci_CurSystem_Editeur )
{
	i_DBG_immortal_ON = faux
	i_DBG_Display_Pilotage = faux
	o_DBG_pilotage_tete = nobody
	i_DBG_drawVectorOption = 0
	i_DBG_Demo_PS2 = faux
	i_DBG_test_finish_sur_KONG = faux
	i_DBG_trace_finish = faux
	i_DBG_Finish_on_Kong_Forbidden = faux
	i_DBG_trace_send_paf = faux
	i_DBG_trace_interaction = faux
}

//========================================
// Setup body scale according to size chosen
switch (i_body_size)
{
	case Ci_BODYSIZE_NormalRaptor :
		OBJ_ZoomSet(1.0)
		break
	
	case Ci_BODYSIZE_SmallGaliminus :
		OBJ_ZoomSet(0.5)
		break
}

//========================================
// Set position in the middle of a cell grid
//v_way_case_dest = GRID_PosGet(OBJ_PosGet())
//v_way_case_dest.z = OBJ_PosGet().z
//OBJ_PosSet(v_way_case_dest)

tv_temp = cvector(4.5, 4.5, 1.0) * OBJ_ZoomGet()
BV_MinSet(-tv_temp)
tv_temp = cvector(4.5, 4.5, 3.0) * OBJ_ZoomGet()
BV_MaxSet(tv_temp)

COL_ColSetActivationSet(all, none)
COL_ColSetActivationSet(none, C_bit_zde_fight + C_bit_zdm_recalagespecial)

COL_SwapToSpecific(C_zdm_pied)
COL_ZoneSizeSet(C_zdm_pied, cvector(0.75, 0.75, 0.75))// * f_body_scale )
COL_ZonePosSet(C_zdm_pied, cvector(0.0, 0.0, 0.75))// * f_body_scale)

COL_SwapToSpecific(C_zdm_recalagespecial)
COL_ZoneSizeSet(C_zdm_recalagespecial, cvector(0.75, 0.75, 0.75))// * f_body_scale)

COL_SwapToSpecific(C_zde_corps)
COL_ZoneSizeSet(C_zde_corps, cvector(2.5, 2.5, 2.5))// * f_body_scale)
//COL_ZoneSizeSet(C_zde_corps, cvector(1.7, 1.7, 1.7))// * f_body_scale)
COL_ZonePosSet(C_zde_corps, cvector(0.0, -0.8, 1.7))// * f_body_scale)
COL_ZoneFlagSet( C_zde_corps, COL_C_Zone_ZDE, COL_C_Zone_ZDM)



COL_SwapToSpecific(C_zde_fight)
COL_ZoneSizeSet(C_zde_fight, cvector(0.5, 0.5, 0.5))// * f_body_scale)

DYN_On()
DYN_FlagsSet(DYN_C_BasicForces | DYN_C_NeverDynamicFather | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_SkipFrictionWhenSpeedFromAnim | DYN_C_HorizontalGrounds, none)
DYN_GravitySet( Cv_Raptor_Gravity)
DYN_FrictionVectorSet(Cv_Raptor_friction)

AI_CBAdd(OBJ_Me(), CallBack_WhenDestroy, "KR_CALLBACK_when_destroy")
AI_CBAdd(OBJ_Me(), CallBack_After_Blend, "KR_CALLBACK_afterblend")
AI_CBAdd(OBJ_Me(), CallBack_Client, "KR_CALLBACK_client")

// Acteurs
//o_KONG = @"univ" ao_AllHumains[ C_ID_Kong ]
//o_ANN = @"univ" ao_AllHumains[ C_ID_Ann ]
o_KONG = AI_MainActorGet(C_ID_Kong)
o_ANN = AI_MainActorGet(C_ID_Joueur)

to_head = ANI_CanalObjectGet(Anim_Canal_Tete)
v_look_head_pos = MATH_VecGlobalToLocal(@to_head OBJ_PosGet() - OBJ_PosGet())
v_look_banking = MATH_VecGlobalToLocal(@to_head OBJ_BankingGet())

f_look_axis_length = 5.0

v_look_axis = OBJ_SightGet() * f_look_axis_length

i_life_max *= PAF_Unit
ID_LIFE = EVENT_AddEventLife(i_life_max, i_life_max, 0.0)

f_time_before_desintegration = MATH_RandFloat(Cf_delai_avantDesintegration - 1.0, Cf_delai_avantDesintegration + 1.0)

f_visual_paf_last_time = -Cf_Infinit

// IK NECK INIT ================================================================================================
i_head_bone_nb = 4
for (ti_i = 0; ti_i < i_head_bone_nb; ti_i++)
{
	ao_head_bones[ti_i] = ANI_CanalObjectGet(Anim_Canal_Tete + ti_i)

	if (ti_i)	
	{
		af_neck_bone_length[ti_i - 1] = MATH_VecNorm(@ao_head_bones[ti_i - 1] OBJ_PosGet() - @ao_head_bones[ti_i] OBJ_PosGet())
		f_neck_length += af_neck_bone_length[ti_i - 1]
	}
}

ao_head_bones[i_head_bone_nb] = ANI_CanalObjectGet(Anim_Canal_Bassin)

// IK LEGS INIT ================================================================================================
for (ti_i = 0; ti_i < 2; ti_i++)
{
	switch(ti_i)
	{
		case Ci_IKRaptor_pied_gauche :
			ti_membre_index = Anim_Canal_PiedGauche
			break
		case Ci_IKRaptor_pied_droit :
			ti_membre_index = Anim_Canal_PiedDroit
			break
	}	

	for (ti_k = 0; ti_k < 3; ti_k++)
		ao_IK_bones[ti_i][ti_k] = ANI_CanalObjectGet(ti_membre_index + (2 - ti_k))

	switch(ti_i)
	{
		case Ci_IKRaptor_pied_gauche :
			ti_membre_index = Anim_Canal_OrteilGauche
			break
		case Ci_IKRaptor_pied_droit :
			ti_membre_index = Anim_Canal_OrteilDroit
			break
	}	

	f_IK_offset[ti_i][0] = -Cf_Infinit
	f_IK_offset[ti_i][1] = -Cf_Infinit

	ao_IK_bones[ti_i][3] = ANI_CanalObjectGet(ti_membre_index)
		
	af_IK_bones_length[ti_i][0] = MATH_VecNorm(@ao_IK_bones[ti_i][1] OBJ_PosGet() - @ao_IK_bones[ti_i][0] OBJ_PosGet())
	af_IK_bones_length[ti_i][1] = MATH_VecNorm(@ao_IK_bones[ti_i][2] OBJ_PosGet() - @ao_IK_bones[ti_i][1] OBJ_PosGet())

	v_IK_bone_last_valid_sight[ti_i] = @ao_IK_bones[ti_i][2] OBJ_SightGet()
	v_IK_bone_last_valid_banking[ti_i] = @ao_IK_bones[ti_i][2] OBJ_BankingGet()
}


// Traverse les colmaps par defaut
KR_SetCrossableDefault()

// désactivation de la colmap (collisions molles)
COL_ColMapActivationSet(none,all)

KR_ComputeNewJumpDistances()

//i_group_finish_attack = Ci_FinishAttack_OFF

o_last_paf_actor = nobody

f_use_safe_orbit_timer = 0.0
f_locked_FA_timer = 0.0

o_force_target = nobody

// Durée aléatoires
f_proie_groupe_wait_delay = MATH_RandFloat(0.5, 1.3)
f_duree_champ_camera_min = MATH_RandFloat(1.5, 2.5)


// kong last attack : retreive only once
mid_lastKongAttack = EVENT_Info_LastAttackGetData( o_KONG )

// *** DEBUG ***
#ifndef _FINAL_
for (ti_i = 0; ti_i < DBG_NB_UNCOLLIDEABLE; ti_i++)
		DBG_ao_uncollideables[ti_i] = nobody
#endif


o_Wall_Effect = get_Impact_GFX_path   //MUST HAVE /06 levels/_Kanada/_basic/_basic_SFX_light_and_smoke_KK  included in all maps!!!  If not, comment the default value out


// SPECIAL FLAGS

// dont come back after reset if dead
if (i_SF_NePasSeRejouerSiMort)
{
	int		ti_SF_AlreadyDead
	i_SF_AlreadyDead_SFID = AI_SFDynGet(0, SF_MinById, SF_MaxById)		// Alloc
	Super_SpecialFlag_get(i_SF_AlreadyDead_SFID, ti_SF_AlreadyDead)			// Test SF
	if (ti_SF_AlreadyDead)																			// Si SF = 1 alors DESTROY
		OBJ_Destroy()
}


// TEST GATHERING OF KRAPTOR NETWORK HEADS
//if (@get_Klist_manager i_kraptor_netStart_nb)
//{
//	ti_k = @get_Klist_manager i_kraptor_netStart_nb
//	for (ti_i = 0; ti_i < ti_k; ti_i++)
//	{
//		to_head = @get_Klist_manager ao_kraptor_netStart[ti_i]
//	}
//}

i_foodchain_eat_slots_free = i_foodchain_eat_slots_nb

KR_OBBOX_Set(1.0)

ACT_DefaultTransition(15)

// AI TRACKS
AI_TrackChange(Ci_Track_TagOff, "KR_TRACK_tagoff")
AI_TrackChange(Ci_Track_Reflex, "KR_TRACK_reflex")

//ACT_ActionSet(ACTION_Finish_on_KONG_01_challenge)
//TIME_Wait(10)

if( i_action_init == Ci_action_init_Spawn_Finish )
{
	i_DBG_trace_finish = vrai
	KR_DBG_Trace(i_DBG_trace_finish, "***** JE SUIS UN RAPTOR SPAWNE !!!! *****")
	OBJ_FlagInvisibleSet(vrai)		// invisible tana que la liaison n'est pas établie
	i_spawned = 0
	AI_TrackChange(Ci_Track_Etat, "KR_exec_init_spawn_finish")
}
else if (i_wait_trigger_attack)
	AI_TrackChange(Ci_Track_Etat, "KR_ETAT_WaitActivation")
else
{
	if (i_net_mode == Ci_NETWORK_USE_AtStart)
	{
		KR_InitNetworkFollowing(o_net_head,i_net_preHeadLinkMove)	
		AI_TrackChange(Ci_Track_Etat, "KR_ETAT_FollowNetwork")
	}
	else if (i_net_mode == Ci_NETWORK_USE_Triggered)
	{
		if (!AI_TriggerIsValid(t_net_triggerNavigation))
		{
			DBG_Error("i_net_mode is Ci_NETWORK_USE_Triggered but t_net_triggerNavigation is invalid")
		}
		AI_TrackChange(Ci_Track_Etat, "KR_ETAT_WaitActivation")
	}
	else if ( i_action_init == Ci_action_init_Force_Jump)
	{
		AI_TrackChange(Ci_Track_Etat, "KR_ETAT_fight_KONG")
	}
	else
	{
		AI_TrackChange(Ci_Track_Etat, "KR_ETAT_attente")
	}
}
AI_TrackChange(Ci_Track_TagOn, "KR_TRACK_tagon")
AI_TrackChange(Ci_Track_Debug,"KR_TRACK_debug")
