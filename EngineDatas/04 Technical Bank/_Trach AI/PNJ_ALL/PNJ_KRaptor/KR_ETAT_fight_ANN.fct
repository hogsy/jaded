#include "KR_defines.var"

int					ti_grab
int					ti_visibility_context
int					ti_type_sol
int					ti_anneAvailability	// 0 : not visible, quit attack   1 : visible but don't attack just follow   2 : visible and attackable
int					ti_occl_result
int					ti_occl_nb
int					ti_change
int					ti_frame

float				tf_dist
float				taf_occl_extra[10]
float				tf_rotation_coef

messageid		tmid_link_ID
messageid		tmid_vision_ID

message		tm_link

vector			tv_FA_pos
vector			tv_occl_nextPos
vector			tv_temp

object			to_head
object			to_interactingWithAnn
object			to_occl_jump
object			tao_occl_extra[10]



// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux
	if( o_proie_groupe && ( i_etat_courant != ETAT_grab ) && ( i_etat_courant != ETAT_mord ) && ( i_etat_courant != ETAT_KK_ride ) )
	{
		// la proie de groupe est conservée uniquement quand le raptor mène une attaque
		if( EVENT_TargetGet(mid_best_interet) == o_proie_groupe )
			KR_DelInterestMsg(faux)
		
		o_proie_groupe = nobody
	}
	return
}

// INITIALISATION ETAT ==============================================================
if( i_etat_courant != ETAT_fight_ANN )
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_fight_ANN
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()
	fct_main_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	f_regard_fourbe_time = 0.0
	KK_i_fight_etat = Ci_fight_ANN_deplacement
	i_proie_groupe_grabbed = faux
	f_delai_change_anim_attente = 0.0
	f_time_last_bite_Jack = TIME_Get()
}
else
{
	f_time_start_etat += TIME_GetDt()
	f_regard_fourbe_time += TIME_GetDt()
}

// ANALYSE ====================================================================================
AI_Execute("KR_exec_check_vision")

if( ! o_ANN )
	macro_change_etat("KR_ETAT_attente")

// PAFS ------------------------------------------------------------------
AI_Execute("KR_exec_check_paf")
if( o_paf_actor )
{
	KR_Select_Paf_Etat(fct_track_change)
	if( fct_track_change != nofunc )
		macro_change_etat(fct_track_change)
}

// INTIMIDATION ------------------------------------------------------
if ( o_intimidator )
	macro_change_etat("KR_ETAT_intimide")

// GRABBED ----------------------------------------------------------
o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, vrai, nofunc, nofunc)
if (o_grabbed_actor_KK)
	macro_change_etat("KR_ETAT_grabbed")

// CHOOSE ATTACK TARGET -----------------------------------
AI_Execute("KR_exec_select_fight_actor")
if( ! o_fight_actor )
	macro_change_etat("KR_ETAT_attente")
else if (o_fight_actor == o_KONG )
	macro_change_etat("KR_ETAT_fight_KONG")

// ANN's AVAILABILITY ---------------------------------------------
ti_anneAvailability = KR_GetAnnAttackAvailability(tv_FA_pos)	// usefull for retreiving Ann's position as she provides
if (ti_anneAvailability == Ci_AnnAvailability_NotAvailable)
	macro_change_etat("KR_ETAT_attente")

// TEST DU FIGHT ACTOR --------------------------------------
if( ! KR_Check_Fight_Actor_Interet() )
	macro_change_etat("KR_ETAT_attente")
else
{
	KR_Check_KK_Grab_ANN()
	if( o_fight_actor == o_KONG )
		macro_change_etat("KR_ETAT_fight_KONG")
}

// COMPORTEMENT ==============================================================================

i_iam_a_kong_target = vrai
i_iam_a_kam_target = vrai
i_flag_zde_fight_enable = vrai

// DEPLACEMENT --------------------------------------------------------
ti_occl_nb = 1
tao_occl_extra[0] = o_KONG
taf_occl_extra[0] = @o_KONG COL_ZoneSizeGet(C_zdm_pied) + 0.1
// Ci_OCCLUDER_START_POS_IS_IN_OCCLUDER
// Ci_OCCLUDER_DEST_POS_IS_IN_OCCLUDER
// Ci_OCCLUDER_COLLISION
tv_temp = tv_FA_pos - OBJ_PosGet()
DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, tv_temp, color_vert)
ti_occl_result = WAY_LIB_Test_Occluder(OBJ_PosGet(), OBJ_SightGet(), COL_ZoneSizeGet(C_zdm_pied) + 0.1, tv_FA_pos, -1, tv_occl_nextPos, to_occl_jump, &tao_occl_extra[0], &taf_occl_extra[0], ti_occl_nb, C_Occl_Type_All)
tv_temp = tv_occl_nextPos - OBJ_PosGet()
DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, tv_temp, color_jaune)
tv_temp.z = 0.0
if( MATH_VecNullEpsilon(tv_temp) )
	tv_temp = OBJ_SightGet()
MATH_VecSetNormalize(tv_temp)
v_sens_deplacement = tv_temp
v_sens_orientation = tv_temp

// ATTITUDE ----------------------------------------------------------
//KR_SetInterestType(C_EVENT_InteretStatusLock)
KR_INTERET_Update(o_ANN, C_EVENT_InteretStatusLock)
tf_rotation_coef = 6.0
tf_dist = OBJ_SqrDist(o_ANN)
//if( @o_ANN KAnn_isEtatFollowNetwork() )
//{
//	Str_DisplayTextOnce("force marche", VIEW_3dWorldTo2d(0, OBJ_PosGet()))
//	ACT_ActionSet(Action_Normal_Marche)		// ne pas osciller en anim course / marche / cri car l'autre [BIIIIIIIIP] court moins vite que moi...
//}
//else 
if( tf_dist > 49.0 )
{
	ti_change = faux
	switch( ACT_ActionGet() )
	{
		case Action_Renifle_Attente :
			if( ANI_CurrentFrameGet(0) > 250 )
				ti_change = vrai
			break
		case Action_Cri :
			if( ANI_CurrentFrameGet(0) > 70 )
				ti_change = vrai
			break
		default:
			ti_change = vrai
			break
	}
	if( ti_change )
		ACT_ActionSet(Action_Normal_Course)
}
else if( tf_dist > 25 ) // && ! @o_ANN KAnn_isEtatFollowNetwork() )
	ACT_ActionSet(Action_Normal_Marche)
else if( tf_dist < 12 )
	ACT_ActionSet(Action_Recul_Intimide)
else
{
	// Raptor proche de ANN
	tf_rotation_coef = 0.0
	KR_SetInterestType(C_EVENT_InteretStatusAttack)
	
	////////////////////// KING KONG 2 /////////////////////////////
//	if( ! @get_global i_Player_is_Kong )
	{
		// c'est Jack qui est au sol
		if( ACT_ActionGet() != Action_Fight_Mord )
		{
			if( TIME_Elapsed(f_time_last_bite_Jack, 3.0) )
			{
				ACT_ActionSet(Action_Fight_Mord)
				i_flag_bite_ok = faux		// pas encore mordu
			}
			else
				ACT_ActionSet(Action_Renifle_Attente)
		}
		else
		{
			ti_frame = ANI_CurrentFrameGet(0)
			if( ! i_flag_bite_ok && ti_frame >= 9 ) // && ti_frame <= 20) )		// paf possible pendant cette durée
				i_flag_bite = vrai
		}
	}
	////////////////////// KING KONG 2 /////////////////////////////
//	else
//	{
//		// c'est KAnn (ce n'est pas le joueur)
//		o_interaction_target = LNK_ThisClientGet(o_ANN, Ci_LNK_INTERACTION, mid_interaction, ! KR_IsInteracting(o_ANN, to_interactingWithAnn), "KR_CALLBACK_interaction_add_data", nofunc, "KR_CALLBACK_interaction_init")
//		if( o_interaction_target )
//			macro_change_etat("KR_ETAT_interact_ANN")
//		
//		switch( ACT_ActionGet() )
//		{
//			case Action_Renifle_Attente :
//				if( ACT_ActionFinished() )
//					ACT_ActionSet(Action_Cri)
//				break
//				
//			case Action_Cri :
//				if( ACT_ActionFinished() )
//				{
//					ACT_ActionSet(Action_Normal_Attente)
//					f_delai_change_anim_attente = 1.5
//				}
//				break
//				
//			case Action_Normal_Attente :
//			default:		// anims déplacement
//				f_delai_change_anim_attente -= MATH_FloatMin(f_delai_change_anim_attente, TIME_GetDt())
//				if( ! f_delai_change_anim_attente )
//					ACT_ActionSet(Action_Renifle_Attente)		// nouveau cycle
//				break
//		}
//	}
}

// SUIVI REGARD ------------------------------------
i_flag_look = vrai
to_head = @o_fight_actor ANI_CanalObjectGet(Anim_Canal_Tete)
v_look_pos = @to_head OBJ_PosGet()

// ORIENTATION ---------------------------------------
f_way_rot_speed = MATH_FloatBlend(f_way_rot_speed, tf_rotation_coef, 2.0 * TIME_GetDt())
OBJ_BankingGeneralSet(
	MATH_VecBlendRotate(OBJ_SightGet(), v_sens_orientation, f_way_rot_speed * TIME_GetDt()),
	MATH_VecBlendRotate(OBJ_BankingGet(), KR_WorldBankingGet(), 6.0 * TIME_GetDt()))

