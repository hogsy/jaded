M_DeclareInteraction_Common
M_DeclareInteraction_Kong
#include "KR_defines.var"
//Include_UltraProcedure_Header

int					ti_jump_exit		// exit by jumping off board
//int					ti_ann_kkgrab

vector			tv_temp
tv_temp = Cv_NullVector	// get rid of c compile error
vector			tv_temp2
tv_temp2 = Cv_NullVector	// get rid of c compile error
vector			tv_lance_pos
tv_lance_pos = Cv_NullVector	// get rid of c compile error

//messageid		tmid_finish
int					ti_tmp
int					ti_total

float				tf_cote
object			to_finishClient	// fight actor (Kong)
object			to_finishServer	// one of the raptors (maybe me)

int					ti_nbRaptorsInRide
int					ti_nbParticipants

#define 		Finish_Debut_Controle		2.0

#define		Cf_FORCE_KONG		0.2//3.0
#define		Cf_FORCE_RAPTS		0.5//2.0

#define		Cf_FRAME_RAPTS_WIN		20
#define		Cf_FRAME_KONG_WIN		60



#define DEBUG_FINISHATTACK		// display what is going on while trying to fight the finish attack
#ifdef DEBUG_FINISHATTACK
int ti_DBG_str
#endif

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux
	
	i_jump_etat = Ci_Jump_notJumping 	// Paf possible pendant un saut

	KR_ResetRide()		// prepare to leave!

//	if( ( i_etat_courant != ETAT_mord ) && ( i_etat_courant != ETAT_lance ) && ( i_etat_courant != ETAT_grab ) )
//		KR_ResetRide()
	
	if (MSG_GlobalIsValid(mid_finish_LNK_ID))
	{
		i_DBG_lastCall = 1
		o_fight_actor = LNK_ThisClientGet(o_fight_actor,Ci_LNK_KKFINISH_ON_KONG, mid_finish_LNK_ID, faux, nofunc, nofunc, nofunc)
	}
	
	if (MSG_GlobalIsValid(mid_finishSynchro))
		EVENT_Info_FinishParticipantRemove(mid_finishSynchro,OBJ_Me())
		
	i_group_finish_attack = Ci_FinishAttack_OFF

	return
}


ti_jump_exit = faux		// avant l'init car l'init le modifie
//ti_ann_kkgrab = faux	// avant l'init car l'init le modifie


// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_FinishAttack)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_FinishAttack

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	// vient de sauter sur KONG
	// blend toward riding pos
//@@	f_pos_blend_coef_ride = 10.0
	f_pos_blend_coef_ride = 0.0
		
	DYN_GravitySet(Cv_NullVector)
	COL_ColSetActivationSet(none, C_bit_zdm_pied)
	o_bone_ride_KK_uncol = o_bone_ride_KK
	KR_UncollideableAdd(o_bone_ride_KK_uncol)
	AI_CBAdd(o_bone_ride_KK_uncol, CallBack_After_Blend, "KR_CALLBACK_set_pos")
		
	i_ride_mode = Ci_ride_paf_kong
	i_ride_attak = faux

	//MG: todo choisir l'anim en fonction du bone de ride
	//ACT_ActionSet(Action_Ride_Attente)//	ACT_ActionSet(Action_KO_au_sol)
	ACT_ActionSet(Action_Ride_LandingOnKong)
	
	// gather the finishsynchro
	KR_GetOrCreateFinishSynchroMsg( o_fight_actor, mid_finishSynchro )
	
	if (!MSG_GlobalIsValid(mid_finishSynchro) || !EVENT_Info_FinishParticipantAdd(mid_finishSynchro, OBJ_Me()))
	{
		i_group_finish_attack = Ci_FinishAttack_Aborting
		ti_jump_exit = vrai				// Kong Coupe la LIAISON
		i_ride_mode = Ci_ride_paf_kong_done
	}
	
	i_finish_end = faux
	f_finish_force_rex = 0
	f_finish_force_kong  = 0
	
	f_time_start_etat = 0.0
	f_timeSinceFinish = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
	if (i_group_finish_attack == Ci_FinishAttack_Finishing)
		f_timeSinceFinish += TIME_GetDt()
}

// ANALYSE =======================================================================================================




// GRAB ===========================================================
o_grabbed_actor_KK = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_grabbed_by_Kong_LNK_ID, vrai, nofunc, nofunc)
if (o_grabbed_actor_KK)
	macro_change_etat("KR_ETAT_grabbed")

// SORTIE DE RIDE ===================================================
o_bone_ride_KK = LNK_ClientGet(Ci_LNK_RIDE_DINO, mid_bone_ride_KK_LNK_ID, vrai, nofunc, nofunc, nofunc)
if ( ! o_bone_ride_KK && ! i_jump_etat)
{
	i_group_finish_attack = Ci_FinishAttack_Aborting
	ti_jump_exit = vrai				// Kong Coupe la LIAISON
	if ( i_ride_mode  < Ci_ride_grab_sur_kong_done)
	{
		i_ride_mode = Ci_ride_grab_impulsion
		v_ride_end_jump_pos = @o_fight_actor OBJ_PosGet() 
		v_ride_end_jump_pos -= @o_fight_actor OBJ_SightGet() * MATH_RandFloat( 7.0,10.0)
		v_ride_end_jump_pos -= @o_fight_actor OBJ_HorizonGet() * MATH_RandFloat( -2.0, 2.0)
	}	
}

// SORTIE DE FINISH PAR SYNCHRO ===================================================
if ( !MSG_GlobalIsValid(mid_finishSynchro) )
{
	if (i_group_finish_attack != Ci_FinishAttack_Aborting)
	{
		i_group_finish_attack = Ci_FinishAttack_Aborting
		if ( i_ride_mode  < Ci_ride_grab_sur_kong_done)
			i_ride_mode = Ci_ride_paf_kong_done		// prepare to jump off
	}
}
else
{
	switch (EVENT_Info_FinishStateGet(mid_finishSynchro))
	{
		case Ci_FINISHSYNCHRO_STATE_Done :
		case Ci_FINISHSYNCHRO_STATE_DoneWin :
			if (i_group_finish_attack != Ci_FinishAttack_Aborting)
			{
				i_group_finish_attack = Ci_FinishAttack_Aborting
				if ( i_ride_mode  < Ci_ride_grab_sur_kong_done)
					i_ride_mode = Ci_ride_paf_kong_done		// prepare to jump off
			}
			break
			
		case Ci_FINISHSYNCHRO_STATE_DoneLoose :
			{
				// Jai perdu : je suis cuit
				i_group_finish_attack = Ci_FinishAttack_OFF
				KR_ResetRide()		
				ACT_ActionSet(Action_Mort)
				macro_change_etat("KR_ETAT_mort")
			}
			break
	}
}


//// TEMP : sauter au bout d'un moment (sans paffer KONG) ========================
//if( i_ride_mode == Ci_ride_paf_kong && f_time_start_etat >= Cf_delay_ride_attack )
//{
//	EVENT_AddEventPafCanal(C_EVENT_FILTER_All, C_EVENT_PAF_Leger, OBJ_Me(), Cf_EVENT_Duree_1Trame, o_fight_actor, -1, Ci_RIDE_EXIT_PAF_PUISSANCE, -1.0*OBJ_BankingGet(), COL_ZonePosGet( C_zde_fight))		
//	i_ride_mode = Ci_ride_paf_kong_done
//}


//// TEST ACTIVATION SEQUENCE DE SORTIE DE RIDE =========================
//switch ( i_ride_mode )
//{
//	// CALCUL DE LA POSITION DE SAUT POUR PARTIR
//	case Ci_ride_paf_kong_done :
//	case Ci_ride_grab_sur_kong_init_jump :
//	// SEQUENCE SAUT POUR PARTIR
//	case Ci_ride_orientation_jump :
//	case Ci_ride_grab_sur_kong_done :
//	case Ci_ride_grab_descend  :
//	case Ci_ride_grab_impulsion :
//		ti_jump_exit = vrai				// Le Raptor descend après avoir jeté ANN au sol
//		break
//}


// RECEPTION AU SOL =================================================
if ( COL_CollideType( COL_C_Ground) )
{
	switch( i_ride_mode )
	{
		case Ci_ride_grab_descend :
			{
				i_ride_mode = Ci_ride_grab_au_sol
				ACT_ActionSet(Action_Fight_Saut_fin_surplace)
				DYN_SpeedSetVector(Cv_NullVector)
				DYN_FrictionVectorSet(Cv_Raptor_friction)
			}
			break
//		case Ci_ride_grab_au_sol :
//			if( ACT_ActionFinished() )
//				macro_change_etat("KR_ETAT_attente")
//			break
		default:
			{
				macro_change_etat("KR_ETAT_fight_KONG")
			}
			break
	}
}


// COMPORTEMENT =======================================================================================================

i_iam_a_kam_target = faux
to_finishClient = nobody
to_finishServer = nobody
ti_nbRaptorsInRide = 0
ti_nbParticipants = EVENT_Info_NbFinishParticipant(mid_finishSynchro)

i_DBG_lastCall = 0

// Update Kong's attack message
EVENT_Info_LastAttackSet( mid_lastKongAttack, Ci_LASTATTACK_TYPE_Finish, TIME_Get(), OBJ_Me() )


// abort because of participant lost ?
switch (i_group_finish_attack)
{
	case Ci_FinishAttack_AbortWindow :
	case Ci_FinishAttack_WaitForLink :
	case Ci_FinishAttack_Finishing :
	
		if (ti_nbParticipants != Ci_RAPTORS_FOR_FINISH_ATTACK)
		{
			i_group_finish_attack = Ci_FinishAttack_Aborting
			if ( i_ride_mode  < Ci_ride_grab_sur_kong_done)
				i_ride_mode = Ci_ride_paf_kong_done		// prepare to jump off
		}
		break
}

switch (i_group_finish_attack)
{
	//==================================================
	case Ci_FinishAttack_WaitForAllRiders :
	//==================================================
		{
			KR_SetInterestType(C_EVENT_InteretStatusAttack)

			ti_total = ti_nbParticipants
			if (ti_total == Ci_RAPTORS_FOR_FINISH_ATTACK)
				i_group_finish_attack = Ci_FinishAttack_AbortWindow
		}
		break

	//==================================================
	case Ci_FinishAttack_AbortWindow :
	//==================================================
		{
			KR_SetInterestType(C_EVENT_InteretStatusAttack)

		// bring back Kong inputs if not done already


			if ( (ti_nbParticipants == Ci_RAPTORS_FOR_FINISH_ATTACK) && (f_time_start_etat > Cf_delai_finishAbort) )
			{
				i_group_finish_attack = Ci_FinishAttack_WaitForLink
			}
		}
		break
		
	//==================================================
	case Ci_FinishAttack_WaitForLink :
	//==================================================
		{
			KR_SetInterestType(C_EVENT_InteretStatusRide)
			
			// first in ride creates the link with kong
			ti_nbRaptorsInRide = KR_Check_Presence_Interet_Statut_Model( o_fight_actor, C_EVENT_InteretStatusRide, vrai, vrai )
			if (ti_nbRaptorsInRide == 1)
			{
				i_DBG_lastCall = 2
				to_finishClient = LNK_ThisClientGet(o_fight_actor,Ci_LNK_KKFINISH_ON_KONG, mid_finish_LNK_ID, vrai, nofunc, nofunc, nofunc)
				if (MSG_GlobalIsValid(mid_finish_LNK_ID))
				{
					LNK_Finish_ActionSet( mid_finish_LNK_ID, Ci_GrabKong_FinishSePlace )
					LNK_Finish_FinisherTypeSet( mid_finish_LNK_ID, Ci_GrabKong_Finished_Raptors)
				}
				else
				{
					DBG_Error("Could not initiate finished link with kong : case was not suppose to happen")
				}
			}
			else
			{
				// we're not the first so link has been created
				ti_tmp = -1
				mid_finish_LNK_ID = MSG_GlobalScan(Ci_LNK_EVENT_OFFSET + Ci_LNK_KKFINISH_ON_KONG,&ti_tmp)
				if (MSG_GlobalIsValid(mid_finish_LNK_ID))
				{
					i_DBG_lastCall = 3
					to_finishClient = LNK_ThisClientGet(o_fight_actor,Ci_LNK_KKFINISH_ON_KONG, mid_finish_LNK_ID, vrai, nofunc, nofunc, nofunc)
				}
			}
			
			if (MSG_GlobalIsValid(mid_finish_LNK_ID))
			{
				i_group_finish_attack = Ci_FinishAttack_Finishing
				to_finishServer = LNK_ServeurGet(Ci_LNK_KKFINISH_ON_KONG, mid_finish_LNK_ID, vrai, nofunc, nofunc)
			}
		}
		break
		
	//==================================================
	case Ci_FinishAttack_Finishing :
	//==================================================
		{
			KR_SetInterestType(C_EVENT_InteretStatusRide)
			
			// Parametres pour le moment, le type de Finish et le perso de reference de ce finish (en principe KONG)
			@get_Kamera Proc_Kam_FinishMode_Set( Ci_Kamera_Finished_id_Raptor, o_KONG)
			
			if ( MSG_GlobalIsValid(	mid_finish_LNK_ID ) )
			{
				i_DBG_lastCall = 4
				to_finishClient = LNK_ThisClientGet(o_fight_actor,Ci_LNK_KKFINISH_ON_KONG, mid_finish_LNK_ID, vrai, nofunc, nofunc, nofunc)
				to_finishServer = LNK_ServeurGet(Ci_LNK_KKFINISH_ON_KONG, mid_finish_LNK_ID, vrai, nofunc, nofunc)
			}
		}
		break
		
	//==================================================
	case Ci_FinishAttack_Aborting :
	//==================================================
		{
			KR_SetInterestType(C_EVENT_InteretStatusRide)
			ti_jump_exit = vrai
		}
		break
	
}

// if we've been waiting for too long, something is wrong, abort!
if ( (i_group_finish_attack < Ci_FinishAttack_Finishing) && (f_time_start_etat > Cf_delai_finishAbort + 2.0) )
{
	i_group_finish_attack = Ci_FinishAttack_Aborting
	ti_jump_exit = vrai				// Kong Coupe la LIAISON
	i_ride_mode = Ci_ride_paf_kong_done
}





// SUIVI DE REGARD ================================================
i_flag_look = faux


// INTERET ========================================================
KR_Check_Fight_Actor_Interet()

EVENT_InteretUpdateTimeSet(mid_best_interet, TIME_Get())
EVENT_LifeSet(mid_best_interet, 5.0)

// raptors in ride are raptors that are in finishing state
ti_nbRaptorsInRide = KR_Check_Presence_Interet_Statut_Model( o_fight_actor, C_EVENT_InteretStatusRide, vrai, vrai )

if (i_group_finish_attack == Ci_FinishAttack_Finishing && ti_nbRaptorsInRide == Ci_RAPTORS_FOR_FINISH_ATTACK)
{
	if ( !to_finishClient || !to_finishServer)
	{
		// Kong has released the link	
		i_group_finish_attack = Ci_FinishAttack_OFF
		KR_ResetRide()		
		ACT_ActionSet(Action_Mort)
		macro_change_etat("KR_ETAT_mort")
	}

	switch ( LNK_Finish_ActionGet(mid_finish_LNK_ID))
	{
		case Ci_GrabKong_FinishSePlace :
			break

		case Ci_GrabKong_FinishDeb :
			{		
				if (to_finishServer == OBJ_Me())	
				{
					if ( !i_finish_end )
					{
						if ( f_timeSinceFinish < Finish_Debut_Controle)
						{
							f_finish_frame = @to_finishClient ANI_CurrentFrameGet(0)
						}
						else
						{
							// DEBUT du CONTOLE JOUEUR
			
							// TEST Frame FAILLED
							if ( f_finish_frame < Cf_FRAME_RAPTS_WIN)
							{
								i_finish_end = vrai					// TREX BAT KONG
								//i_flag_paf_exit_colmap = vrai		// RECALE KONG
								LNK_Finish_ActionSet(mid_finish_LNK_ID, Ci_GrabKong_FinishGagne)
								//###
							}
			
							// GESTION des FORCES -----------------------------------------------------------------------------------------
							if (f_finish_force_kong < 2.0)
								f_finish_force_rex = MATH_FloatMin(f_finish_force_rex + (Cf_FORCE_RAPTS*TIME_GetDt()), 10)
					
							f_finish_force_kong = MATH_FloatMax(0,f_finish_force_kong - (Cf_FORCE_KONG*TIME_GetDt()))
			
	//						if (f_time_start_etat < (Finish_Debut_Controle + ((f_I_finish_hardness - 0.25)*6)))
							{	
								if(  IO_ButtonJustPressed(K_Joy_Punch))
								{
									f_finish_force_kong = Cf_FORCE_KONG
									f_finish_force_rex = MATH_FloatMax(0,f_finish_force_rex - 0.5)
								}
							}
							
							f_finish_frame += f_finish_force_kong
							f_finish_frame -= f_finish_force_rex
							if ( f_finish_frame > Cf_FRAME_KONG_WIN)
							{
								// Fin du FInish Kong Gagne
								LNK_Finish_ActionSet( mid_finish_LNK_ID, Ci_GrabKong_FinishFin )
							}
							else
							{
								ANI_RatioSet(0, f_finish_frame / ANI_NbFrameGet(0) )		
								@to_finishClient ANI_RatioSet(0, f_finish_frame / @to_finishClient ANI_NbFrameGet(0) )		
							}
							// GESTION des FORCES -----------------------------------------------------------------------------------------
						}
						if ( !i_finish_end)
							ACT_ActionSet( Action_Agonie)		// continue finishing
						else
							ACT_ActionSet(Action_Fight_Secoue)		// we won over fight actor !
					}
					else
					{
						ACT_ActionSet( Action_Agonie)		// continue finishing
					}
				}
				else
				{
					ACT_ActionSet( Action_Agonie)		// continue finishing
				}
			}				
			break

		case	Ci_GrabKong_FinishFin :
			{
				// KONG A GAGNE
				if( ACT_ActionGet() != Action_Agonie_Fin_Rapide )
				{
					//KT_Add_GFX_Blood(Ci_GFX_Blood_Finish_Bras_de_Fer, nobody)
					ACT_ActionSet( Action_Agonie_Fin_Rapide)
				}
				else
				{
					if (ACT_ActionFinished())
					{
						LNK_Finish_ActionSet( mid_finish_LNK_ID, Ci_GrabKong_FinishPerdu )
					}
				}
			}
			break

		case Ci_GrabKong_FinishGagne :
			{
				// Jai gagne : reset violent (en attendant)
				if (to_finishServer == OBJ_Me())	
				{
//					TIME_Wait( 1.0 )
					EVENT_Info_FinishStateSet( mid_finishSynchro, Ci_FINISHSYNCHRO_STATE_DoneWin )
					WOR_Reinit()
					return
				}
			}
			break

		case Ci_GrabKong_FinishPerdu :
			{
				// Jai perdu : je suis cuit
				i_group_finish_attack = Ci_FinishAttack_OFF
				EVENT_Info_FinishStateSet( mid_finishSynchro, Ci_FINISHSYNCHRO_STATE_DoneLoose )
				KR_ResetRide()	
				ACT_ActionSet(Action_Mort)	
				macro_change_etat("KR_ETAT_mort")
			}
			break
	}	
}


#ifdef DEBUG_FINISHATTACK
if (MSG_GlobalIsValid(mid_finish_LNK_ID))
{
	switch ( LNK_Finish_ActionGet(mid_finish_LNK_ID))
	{
		case Ci_GrabKong_FinishSePlace :
			{
				ti_DBG_str = STR_CreateText("SePlace", cvector(0.0, 0.05, 2.0), 0)
			}
			break
			
		case Ci_GrabKong_FinishDeb :
			{
				STR_CreateText("FinishDeb", cvector(0.0, 0.05, 2.0), 0)
				ti_DBG_str = STR_CreateText("Frm=", cvector(0.0, 0.1, 2.0), 0)
				STR_AppendFloat(ti_DBG_str,f_finish_frame,2)
				STR_AppendText(ti_DBG_str,"K= ")
				STR_AppendFloat(ti_DBG_str,f_finish_force_kong,2)
				STR_AppendText(ti_DBG_str,"R= ")
				STR_AppendFloat(ti_DBG_str,f_finish_force_kong,2)
			}
			break
			
		case Ci_GrabKong_FinishFin :
			{
				STR_CreateText("FinishFin", cvector(0.0, 0.05, 2.0), 0)
			}
			break
			
		case Ci_GrabKong_FinishGagne :
			{
				STR_CreateText("FinishGagne", cvector(0.0, 0.05, 2.0), 0)
			}
			break
			
		case Ci_GrabKong_FinishPerdu :
			{
				STR_CreateText("FinishPerdu", cvector(0.0, 0.05, 2.0), 0)
			}
			break
	}
}
#endif




// SEQUENCE DE SORTIE DU RIDE ====================================
if ( ti_jump_exit && ( ! i_jump_etat ) )
{
	switch( i_ride_mode )
	{
		// CALCUL DE LA DESTINATION DU SAUT
		case Ci_ride_paf_kong_done :
			{
				// le raptor a paffé kong
				tf_cote = MATH_FloatSign(MATH_RandFloat(-1.0, 1.0))
				KR_Compute_Ride_Jump_Pos(tf_cote, v_ride_end_jump_pos, faux, tv_lance_pos)
				i_ride_mode = Ci_ride_grab_sur_kong_done
			}
			break

		// SAUT
		case Ci_ride_grab_sur_kong_done :
			{
				// le raptor vient de jeter une cible qu'il a grabbé en ride -> il se prépare à sauter
				ACT_ActionSet(Action_Fight_Saut_deb)
				i_ride_mode = Ci_ride_grab_impulsion
			}
			break
			
		case Ci_ride_grab_impulsion :
			{
				// le raptor se prépare à sauter
				tv_temp = OBJ_SightGet()
				MATH_VecSetHorzNormalize(tv_temp)
				tv_temp2 = v_ride_end_jump_pos - OBJ_PosGet()
				MATH_VecSetHorzNormalize(tv_temp2)
				OBJ_BankingGeneralSet(MATH_VecBlendRotate(OBJ_SightGet(), tv_temp2, 5 * TIME_GetDt()), OBJ_BankingGet())
				// passage en saut cycle
				if( ACT_ActionFinished()  || ! o_bone_ride_KK)
				{
					ACT_ActionSet(Action_Fight_Saut_cycl)
					DYN_GravitySet(Cv_Raptor_Gravity)
					DYN_Impulsion(v_ride_end_jump_pos, 4.0)
					KRDBG_DRAWVECTOR(Ci_DBG_DRAW_TMP, v_ride_end_jump_pos, Cv_VerticalVector * 5, color_rouge)
					AI_CBDel(o_bone_ride_KK_uncol, CallBack_After_Blend, "KR_CALLBACK_set_pos")
					f_time_start_etat = 0.0
					i_ride_mode = Ci_ride_grab_descend
				}
			}
			break
			
		case Ci_ride_grab_descend :
			{
				// saut cycle
				OBJ_BankingGeneralSet(OBJ_SightGet(), MATH_VecBlendRotate(OBJ_BankingGet(), Cv_VerticalVector, 10 * TIME_GetDt()))
				if( f_time_start_etat > 0.1 )
					COL_ColSetActivationSet(C_bit_zdm_pied, none)		// sinon le raptor va passer à travers kong et tomber 
			}
			break
	}
}

