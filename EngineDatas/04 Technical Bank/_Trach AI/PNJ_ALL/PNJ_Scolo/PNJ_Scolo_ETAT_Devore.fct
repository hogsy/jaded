#include "PNJ_Scolo_defines.var"

int			ti_i
int			ti_flag_collision
int			ti_flag_ok

float		tf_dist
float		tf_coef
float		tf_speed
float		tf_norm
float		tf_pow_coef
float		tf_delai_annonce
float		tf_jump_impulsion_max	
float		tf_jump_Z_offset
float		tf_Z		
float		tf_time
float		tf_dist_min
float		tf_dist_max

object	to_target
object	to_head_target
object	to_bassin
object	to_camera

vector	tv_head_pos
vector	tv_head_sight
vector	tv_impulsion
vector	tv_new_sight
vector	tv_horizon
vector	tv_start_pos
vector	tv_speed
vector	tv_me_to_target
vector	tv_collide_pos
vector	tv_ik_start_pos
vector	tv_ik_start_sight
vector	tv_IK_sight
vector	tv_pos
vector	tv_ray_start_pos
vector	tv_ray_dir
vector	tv_ray_col_normal
vector	tv_temp
vector	tv_temp2

#define Cf_phase_0_duration				0.5
#define Cf_phase_1_duration				1.0

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather, DYN_C_NeverDynamicHierarchy)
	DYN_GravitySet(v_Scolo_Gravity)

	COL_ColSetActivationSet(C_bit_zdm_pied, none)
	COL_ZoneSizeSet(C_zdm_pied, cvector(0.2, 0.2, 0.2))
	
	switch(i_etat_courant)
	{
		case ETAT_Snap :
		case ETAT_KKRide :
		case ETAT_KKFinish :
			break
			
		default:
			o_proie = LNK_ThisClientGet(o_proie, Ci_LNK_GRAB_RAPTOR, mid_proie_LNK, faux, nofunc, nofunc, nofunc)
	}

	return
}

if (i_etat_courant != ETAT_Devore)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Devore

	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = "PNJ_Scolo_ETAT_Devore"
	
	PNJ_Scolo_IK_Init(i_ik_modules_nb)

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather, DYN_C_NeverDynamicHierarchy)
	DYN_GravitySet(Cv_NullVector)
	DYN_FrictionVectorSet(cvector(6.0, 6.0, 6.0))	

	COL_ColSetActivationSet(C_bit_zdm_pied, none)
	COL_ZoneSizeSet(C_zdm_pied, cvector(0.5, 0.5, 0.5))

	i_etat_phase = 0
	f_etat_phase_duration = 0.0
	
	f_delay_until_last_ground_col = 0.0
	f_delay_until_last_wall_col = 0.0	

	PNJ_Scolo_Virtual_Net_Init(faux, nobody)

	f_move_speed = MATH_FloatMax(f_move_speed, 2.0)

	tf_time = 0.5
	f_decceleration = f_move_speed * f_move_speed
	f_decceleration /= 2.0 * dist_between_module * 10.0

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ==============================================================================
o_KK_Grabbed_actor = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_kong_LNK, vrai, nofunc, nofunc)
if (o_KK_Grabbed_actor)
	macro_change_etat("PNJ_Scolo_ETAT_Grabbed_By_Kong")

//// FINISH DE KONG 
if (o_kk_finish)
	macro_change_etat("PNJ_Scolo_ETAT_KK_I_Finish")
		
o_predateur = LNK_ServeurGet(Ci_LNK_GRAB_RAPTOR, mid_predateur_LNK, vrai, "PNJ_Scolo_exec_LNK_predateur", nofunc)
if (o_predateur)
{
	switch(LNK_GrabServeurVisionIDGet(mid_predateur_LNK))
	{
		case C_ID_Scolo :
			macro_change_etat("PNJ_Scolo_ETAT_Wait_For_Grab")
			break	
	
		default:
			macro_change_etat("PNJ_Scolo_ETAT_Grabbed_Predateur")
	}
}

AI_Execute("PNJ_Scolo_exec_check_vision")
if (i_perceived_best_actor_index == -1)
{
//	v_jump_dest_pos = OBJ_PosGet()
//	v_jump_dest_pos += OBJ_SightGet() * 1.0
//	macro_change_etat("PNJ_Scolo_ETAT_Jump")
	macro_change_etat("PNJ_Scolo_ETAT_Paf")
}
 
AI_Execute("PNJ_Scolo_exec_check_paf")
if (i_flag_paf  || ! f_lifecur)
	macro_change_etat("PNJ_Scolo_ETAT_Paf")

AI_Execute("PNJ_Scolo_exec_check_best_interet")
if ( i_flag_change_target || ! MSG_GlobalIsValid(mid_best_interet) || ! ( ai_perceived_status[i_perceived_best_actor_index] & Ci_PERCEIVED_IS_DEAD) )
	macro_change_etat("PNJ_Scolo_ETAT_Paf")
	
// COMPORTEMENT ========================================================================
EVENT_InteretStatusSet(mid_best_interet, C_EVENT_InteretStatusLock)

to_target = EVENT_InteretTargetGet(mid_best_interet)
if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Joueur)
	to_head_target = @get_global o_camera
else
	to_head_target = @to_target ANI_CanalObjectGet(Anim_Canal_Tete)

if (!to_head_target)
	to_head_target = to_target

tf_dist_min = 1.4 * f_size_coef
tf_dist_min *= tf_dist_min

tf_dist_max = 2.7 * f_size_coef
tf_dist_max *= tf_dist_max

tf_dist = MATH_VecSquareNorm(av_virtual_wp_pos[i_virtual_net_last_wp_index] - @to_head_target OBJ_PosGet())
if (tf_dist < tf_dist_min || tf_dist > tf_dist_max)
	macro_change_etat("PNJ_Scolo_ETAT_Paf")

to_bassin = @to_target ANI_CanalObjectGet(Anim_Canal_Bassin)

if (i_etat_phase < 3)
{
	f_move_speed -= f_decceleration * TIME_GetDt()
	if (f_move_speed < 0.0)
		f_move_speed = 0.0
	else
		f_virtual_net_offset += f_move_speed * TIME_GetDt()
	
	PNJ_Scolo_Modules_Update(i_ik_modules_nb, nobody)
}

if (ao_virtual_wp_father[i_virtual_net_last_wp_index])
{
	tv_ik_start_pos = @ao_virtual_wp_father[i_virtual_net_last_wp_index] MATH_VecLocalToGlobal(v_IK_pos)
	tv_ik_start_pos += @ao_virtual_wp_father[i_virtual_net_last_wp_index] OBJ_PosGet()
	
	tv_ik_start_sight = @ao_virtual_wp_father[i_virtual_net_last_wp_index] MATH_VecLocalToGlobal(v_IK_sight)
}
else
{
	tv_ik_start_pos = v_IK_pos
	
	tv_ik_start_sight = v_IK_sight
}

v_IK_banking = @ao_modules[i_ik_modules_nb] OBJ_BankingGet()
if (MATH_VecDotProduct(v_IK_banking, Cv_VerticalVector) > -Cf_Cos60)
	v_IK_banking = MATH_VecBlendRotate(v_IK_banking, Cv_VerticalVector, 0.5)
else
	v_IK_banking = MATH_VecBlendRotate(v_IK_banking, -Cv_VerticalVector, 0.5)

tv_horizon = MATH_VecCrossProduct(@ao_modules[i_ik_modules_nb] OBJ_SightGet(), v_IK_banking)
tv_IK_sight = MATH_VecCrossProduct(v_IK_banking, tv_horizon)
MATH_VecSetNormalize(tv_IK_sight)

// On redresse le point virtuel final si besoin est	
if (MATH_VecDotProduct(@to_head_target OBJ_PosGet() - av_virtual_wp_pos[i_virtual_net_last_wp_index], av_virtual_wp_sight[i_virtual_net_last_wp_index]) < 0.0)
{
	tv_temp = MATH_VecCrossProduct(@to_head_target OBJ_PosGet() - av_virtual_wp_pos[i_virtual_net_last_wp_index], av_virtual_wp_banking[i_virtual_net_last_wp_index] )
	tv_temp *= MATH_FloatSign(MATH_VecDotProduct(tv_temp, av_virtual_wp_sight[i_virtual_net_last_wp_index]))
	tf_norm = MATH_VecSquareNorm(tv_temp)
	if (tf_norm > 0.01)
	{
		tv_temp /= MATH_FloatSqrt(tf_norm)
//		DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), tv_temp * 10.0, color_cyan)
		av_virtual_wp_sight[i_virtual_net_last_wp_index] = tv_temp
	}
}

DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), tv_horizon * 10.0, color_rouge)
DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), -tv_IK_sight * 10.0, color_vert)
DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), v_IK_banking * 10.0, color_bleu)

switch(i_etat_phase)
{
	case 0 :
		// Je me relève
		f_etat_phase_duration += TIME_GetDt()

		tf_coef = MATH_FloatMin(f_etat_phase_duration / Cf_phase_0_duration, 1.0)
		tf_coef = MATH_Sin(tf_coef * Cf_PiBy2)

		tv_start_pos = @ao_modules[i_ik_modules_nb] OBJ_PosGet()
		tv_start_pos += tv_IK_sight * (f_size_coef * 0.75)

		tv_me_to_target = @to_head_target OBJ_PosGet()
		tv_me_to_target -= tv_start_pos
		tv_me_to_target -= MATH_VecDotProduct(tv_me_to_target, v_IK_banking) * v_IK_banking

		tf_dist = MATH_VecNorm(tv_me_to_target)
		if (MATH_FloatNullToler(tf_dist, 0.001))
			tv_me_to_target = tv_IK_sight
		else	
			tv_me_to_target /= tf_dist

		tv_horizon.x = tv_me_to_target.y
		tv_horizon.y = -tv_me_to_target.x
		tv_horizon.z = 0.0
		MATH_VecSetNormalize(tv_horizon)
		tv_horizon *= MATH_Sin(f_time_start_etat * 3.0) * (0.4 * f_size_coef)

		tf_Z = 1.0 // Dest Z
		tf_Z += MATH_Sin(f_time_start_etat * 6.0) * 0.1 // Oscillation
		tf_Z *= f_size_coef

		tv_head_pos = tv_start_pos
		tv_head_pos += v_IK_banking * tf_Z
		tv_head_pos += tv_horizon

		tf_coef = MATH_FloatMin(tf_coef, 1.0)

		tv_head_pos = MATH_VecBlendRotate(tv_ik_start_pos - tv_start_pos, tv_head_pos - tv_start_pos, tf_coef)
		tv_head_pos += tv_start_pos

		DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), tv_head_pos - @ao_modules[i_ik_modules_nb] OBJ_PosGet(), color_blanc)

		DYN_SpeedSetVector((tv_head_pos - OBJ_PosGet()) / TIME_GetDt())	
		tv_head_pos = OBJ_PosGet()

		tv_head_sight = MATH_VecBlend(@to_head_target OBJ_PosGet(), @to_target OBJ_PosGet(), MATH_FloatMin((tf_dist * 0.25) - f_size_coef, 0.5))
		tv_head_sight = MATH_VecNormalize(tv_head_sight - tv_head_pos)
		tv_head_sight = MATH_VecBlendRotate(tv_ik_start_sight, tv_head_sight, tf_coef)

		PNJ_Scolo_IK(i_ik_modules_nb, tv_head_pos, tv_head_sight, tf_coef)
		
		if (f_etat_phase_duration >= Cf_phase_0_duration)
		{
			f_eat_speed = MATH_RandFloat(2.0, 4.0)
			f_etat_phase_duration = 0.0
			i_etat_phase++
		}
		
		break
		
	case 1 :
	
		// Je vais le manger
		f_etat_phase_duration += TIME_GetDt()

		tf_coef = f_etat_phase_duration / 1.0
//		tf_coef = -MATH_Cos(f_etat_phase_duration * f_eat_speed)
//		tf_coef *= 0.5
//		tf_coef += 0.5
//
		tv_start_pos = @ao_modules[i_ik_modules_nb] OBJ_PosGet()
		tv_start_pos += tv_IK_sight * (f_size_coef * 0.75)

		tv_me_to_target = @to_head_target OBJ_PosGet()
		tv_me_to_target -= tv_start_pos
		tv_me_to_target -= MATH_VecDotProduct(tv_me_to_target, v_IK_banking) * v_IK_banking

		tf_dist = MATH_VecNorm(tv_me_to_target)
		if (MATH_FloatNullToler(tf_dist, 0.001))
			tv_me_to_target = tv_IK_sight
		else	
			tv_me_to_target /= tf_dist

		tv_horizon.x = tv_me_to_target.y
		tv_horizon.y = -tv_me_to_target.x
		tv_horizon.z = 0.0
		MATH_VecSetNormalize(tv_horizon)
		tv_horizon *= MATH_Sin(f_time_start_etat * 3.0) * (0.4 * f_size_coef)

		tf_Z = 1.0 // Dest Z
		tf_Z += MATH_Sin(f_time_start_etat * 6.0) * 0.1 // Oscillation
		tf_Z *= f_size_coef

		tv_head_pos = tv_start_pos
		tv_head_pos += v_IK_banking * tf_Z
		tv_head_pos += tv_horizon

		tv_head_pos = MATH_VecBlendRotate(tv_head_pos - @ao_modules[i_ik_modules_nb] OBJ_PosGet(), @to_head_target OBJ_PosGet() - @ao_modules[i_ik_modules_nb] OBJ_PosGet(), tf_coef)
		tv_head_pos += @ao_modules[i_ik_modules_nb] OBJ_PosGet()

		DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), tv_head_pos - @ao_modules[i_ik_modules_nb] OBJ_PosGet(), color_blanc)

		DYN_SpeedSetVector((tv_head_pos - OBJ_PosGet()) / TIME_GetDt())	
		tv_head_pos = OBJ_PosGet()

		tv_head_sight = MATH_VecBlend(@to_head_target OBJ_PosGet(), @to_target OBJ_PosGet(), MATH_FloatMin((tf_dist * 0.25) - f_size_coef, 0.5))
		tv_head_sight = MATH_VecNormalize(tv_head_sight - tv_head_pos)

		PNJ_Scolo_IK(i_ik_modules_nb, tv_head_pos, tv_head_sight, 1.0)
		
//		if (f_etat_phase_duration * f_eat_speed >= Cf_2Pi)
//		{
//			f_eat_speed = MATH_RandFloat(2.0, 4.0)
//			f_etat_phase_duration = 0.0
////			i_etat_phase++
//		}

		if (f_etat_phase_duration > 1.0)
		{
			f_etat_phase_duration = 0.0
			i_etat_phase++
		}

		break

	case 2 :	

//		// Je vais l'avaler
//		f_etat_phase_duration += TIME_GetDt()
//
//		tf_coef = -MATH_Cos(f_etat_phase_duration * Cf_Pi)
//		tf_coef *= 0.5
//		tf_coef += 0.5
//
//		tv_start_pos = @ao_modules[i_ik_modules_nb] OBJ_PosGet()
//		tv_start_pos += tv_IK_sight * (f_size_coef * 0.75)
//
//		tv_me_to_target = @to_head_target OBJ_PosGet()
//		tv_me_to_target -= tv_start_pos
//		tv_me_to_target -= MATH_VecDotProduct(tv_me_to_target, v_IK_banking) * v_IK_banking
//
//		tf_dist = MATH_VecNorm(tv_me_to_target)
//		if (MATH_FloatNullToler(tf_dist, 0.001))
//			tv_me_to_target = tv_IK_sight
//		else	
//			tv_me_to_target /= tf_dist
//
//		tv_horizon.x = tv_me_to_target.y
//		tv_horizon.y = -tv_me_to_target.x
//		tv_horizon.z = 0.0
//		MATH_VecSetNormalize(tv_horizon)
//		tv_horizon *= MATH_Sin(f_time_start_etat * 3.0) * (0.4 * f_size_coef)
//
//		tf_Z = 1.0 // Dest Z
//		tf_Z += MATH_Sin(f_time_start_etat * 6.0) * 0.1 // Oscillation
//		tf_Z += tf_coef * 0.5
//		tf_Z *= f_size_coef
//
//		tv_head_pos = tv_start_pos
//		tv_head_pos += v_IK_banking * tf_Z
//		tv_head_pos += tv_me_to_target * (tf_coef * 1.5 * f_size_coef)
//		tv_head_pos += tv_horizon
//
//		DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), tv_head_pos - @ao_modules[i_ik_modules_nb] OBJ_PosGet(), color_blanc)
//
//		DYN_SpeedSetVector((tv_head_pos - OBJ_PosGet()) / TIME_GetDt())	
//		tv_head_pos = OBJ_PosGet()
//
//		tv_head_sight = MATH_VecBlend(@to_head_target OBJ_PosGet(), @to_target OBJ_PosGet(), MATH_FloatMin((tf_dist * 0.25) - f_size_coef, 0.5))
//		tv_head_sight = MATH_VecNormalize(tv_head_sight - tv_head_pos)
//		tv_head_sight = MATH_VecBlendRotate(tv_head_sight, Cv_VerticalVector, tf_coef * 0.85)
//
//		PNJ_Scolo_IK(i_ik_modules_nb, tv_head_pos, tv_head_sight, 1.0)
//		
//		if (f_etat_phase_duration >= 2.0)
//		{
//			f_etat_phase_duration = 0.0
//			i_etat_phase--
//		}

		// Je vais le manger
		f_etat_phase_duration += TIME_GetDt()

		tf_coef = 1.0 - MATH_Cos(f_etat_phase_duration * 12.0)
		tf_coef *= 0.5
		tf_coef *= 0.1
		tf_coef = 1.0 - tf_coef
//		tf_coef = -MATH_Cos(f_etat_phase_duration * f_eat_speed)
//		tf_coef *= 0.5
//		tf_coef += 0.5
//
		tv_start_pos = @ao_modules[i_ik_modules_nb] OBJ_PosGet()
		tv_start_pos += tv_IK_sight * (f_size_coef * 0.75)

		tv_me_to_target = @to_head_target OBJ_PosGet()
		tv_me_to_target -= tv_start_pos
		tv_me_to_target -= MATH_VecDotProduct(tv_me_to_target, v_IK_banking) * v_IK_banking

		tf_dist = MATH_VecNorm(tv_me_to_target)
		if (MATH_FloatNullToler(tf_dist, 0.001))
			tv_me_to_target = tv_IK_sight
		else	
			tv_me_to_target /= tf_dist

		tv_horizon.x = tv_me_to_target.y
		tv_horizon.y = -tv_me_to_target.x
		tv_horizon.z = 0.0
		MATH_VecSetNormalize(tv_horizon)
		tv_horizon *= MATH_Sin(f_time_start_etat * 3.0) * (0.4 * f_size_coef)

		tf_Z = 1.0 // Dest Z
		tf_Z += MATH_Sin(f_time_start_etat * 6.0) * 0.1 // Oscillation
		tf_Z *= f_size_coef

		tv_head_pos = tv_start_pos
		tv_head_pos += v_IK_banking * tf_Z
		tv_head_pos += tv_horizon

		tv_head_pos = MATH_VecBlendRotate(tv_head_pos - @ao_modules[i_ik_modules_nb] OBJ_PosGet(), @to_head_target OBJ_PosGet() - @ao_modules[i_ik_modules_nb] OBJ_PosGet(), tf_coef * 0.9)
		tv_head_pos += @ao_modules[i_ik_modules_nb] OBJ_PosGet()

		DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), tv_head_pos - @ao_modules[i_ik_modules_nb] OBJ_PosGet(), color_blanc)

		DYN_SpeedSetVector((tv_head_pos - OBJ_PosGet()) / TIME_GetDt())	
		tv_head_pos = OBJ_PosGet()

		tv_head_sight = MATH_VecBlend(@to_head_target OBJ_PosGet(), @to_target OBJ_PosGet(), MATH_FloatMin((tf_dist * 0.25) - f_size_coef, 0.5))
		tv_head_sight = MATH_VecNormalize(tv_head_sight - tv_head_pos)
		tv_head_sight = MATH_VecRotate(tv_head_sight, @ao_modules[1] OBJ_BankingGet(), MATH_Sin(f_time_start_etat * 8.0) * 0.1)

		PNJ_Scolo_IK(i_ik_modules_nb, tv_head_pos, tv_head_sight, 1.0)
		
		break
}

PNJ_Scolo_Bite_Dead_Meat()