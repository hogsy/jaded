#include "PNJ_Scolo_defines.var"

Include_UltraProcedure_Header

int				ti_i
int				ti_flag_dodge_fire
int				ti_flag_orient
int				ti_col_report
int				ti_flag_ok

float			tf_coef
float			tf_dist
float			tf_dist_min
float			tf_dist_max
float			tf_speed
float			tf_target_speed
float			tf_norm
float			tf_rayon
float			tf_last_module_dist
float			tf_middle_module_dist
float			tf_archimede
float			tf_Z_offset

object		to_target
object		to_head_target
object		to_collide_object

vector		tv_new_sight
vector		tv_new_banking
vector		tv_speed 
vector		tv_traction
vector		tv_pos
vector		tv_hor_sight
vector		tv_ray_start_pos
vector		tv_collide_pos
vector		tv_ray_col_normal

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	DYN_GravitySet(v_Scolo_Gravity)

	if (SND_eat_loop != -1)
	{
		SND_Stop(SND_eat_loop)
		SND_eat_loop = -1
	}
	
	return
}

if (i_etat_courant != ETAT_Sol)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Sol
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = "PNJ_Scolo_ETAT_Sol"
	
	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather | DYN_C_SlipOnGroundEdge, DYN_C_NeverDynamicHierarchy)
	DYN_GravitySet(v_Scolo_Gravity)
	DYN_FrictionVectorSet(cvector(2.0, 2.0, 0.0))

	switch(i_dernier_etat)
	{
		case ETAT_Attaque :
			break

		case ETAT_Apparition :

			DYN_SpeedSetVector(OBJ_SightGet() * f_move_speed)

//			PNJ_Scolo_Virtual_Net_Init(vrai, nobody)

			f_delay_until_last_ground_col = 1000.0
			f_delay_until_last_wall_col = 1000.0

			break

		case ETAT_Paf :
			f_move_speed = 0.0

			f_delay_until_last_ground_col = 0.0
			f_delay_until_last_wall_col = 0.0

			PNJ_Scolo_Virtual_Net_Init(faux, nobody)
			break

		default:
			PNJ_Scolo_Virtual_Net_Init(faux, nobody)
	}
	
	COL_ColSetActivationSet(C_bit_zdm_pied, none)

	f_angle_oscillation = 0.0
	f_on_ground_dist = 0.0
	
	f_delay_before_next_attack = MATH_RandFloat(0.5, 3.0)

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
o_KK_Grabbed_actor = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_kong_LNK, vrai, nofunc, nofunc)
if (o_KK_Grabbed_actor)
	macro_change_etat("PNJ_Scolo_ETAT_Grabbed_By_Kong")

//o_kk_finish = LNK_ClientGet(Ci_LNK_KKFINISH_ON_KONG, mid_kk_I_finish_LNK, vrai, nofunc, nofunc, nofunc)
o_kk_finish = LNK_ThisClientGet(o_kk_finish, Ci_LNK_KKFINISH_ON_KONG, mid_kk_I_finish_LNK, vrai, nofunc, nofunc, nofunc)
if (o_kk_finish)
	macro_change_etat("PNJ_Scolo_ETAT_KK_I_Finish")

o_predateur = LNK_ServeurGet(Ci_LNK_GRAB_RAPTOR, mid_predateur_LNK, vrai, "PNJ_Scolo_exec_LNK_predateur", nofunc)
if (o_predateur)
{
	switch(LNK_GrabServeurVisionIDGet(mid_predateur_LNK))
	{
		case C_ID_Scolo :
			macro_change_etat("PNJ_Scolo_ETAT_Wait_For_Grab")
			break	
	
		default:
			macro_change_etat("PNJ_Scolo_ETAT_Grabbed_Predateur")
	}
}

AI_Execute("PNJ_Scolo_exec_check_vision")

AI_Execute("PNJ_Scolo_exec_check_paf")
if (i_flag_paf || ! f_lifecur)
	macro_change_etat("PNJ_Scolo_ETAT_Paf")

AI_Execute("PNJ_Scolo_exec_check_best_interet")

PNJ_Scolo_Test_Human_Collision()
if (o_proie)
	macro_change_etat("PNJ_Scolo_ETAT_Snap")
if (i_flag_jump)
	macro_change_etat("PNJ_Scolo_ETAT_Jump")

if (instant_getup || f_time_start_etat > f_delay_before_next_attack)
	AI_Execute("PNJ_Scolo_exec_test_bite")

// COMPORTEMENT =========================================================
if (i_perceived_best_actor_index != -1)
{
	EVENT_InteretStatusSet(mid_best_interet, C_EVENT_InteretStatusLock)

	to_target = EVENT_InteretTargetGet(mid_best_interet)
	if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Joueur)
		to_head_target = @get_global o_camera
	else
		to_head_target = @to_target ANI_CanalObjectGet(Anim_Canal_Tete)
	
	if (!to_head_target)
		to_head_target = to_target
}
else
{
	to_target = nobody
	to_head_target = nobody
}

if (COL_CollideType(COL_C_Ground))
{
	f_delay_until_last_ground_col = 0.0

	v_ground_pos = COL_CollidedPointGet(COL_C_Ground)
	v_last_collided_pos = v_ground_pos

	v_ground_normal	= COL_ZonePosGet(C_zdm_pied)
	v_ground_normal -= v_ground_pos
	MATH_VecSetNormalize(v_ground_normal)
	
	if (v_ground_normal.z > 0.0)
		f_on_ground_dist += DYN_SpeedGet() * TIME_GetDt()
	else
		f_on_ground_dist = 0.0
}
else
{
	f_delay_until_last_ground_col += TIME_GetDt()

	if (v_ground_normal.z < 0.0 || f_delay_until_last_ground_col > 0.2)
		f_on_ground_dist = 0.0
	else
		f_on_ground_dist += DYN_SpeedGet() * TIME_GetDt()
}

if (COL_CollideType(COL_C_Wall))
{
	f_delay_until_last_wall_col = 0.0

	v_last_collided_pos = COL_CollidedPointGet(COL_C_Wall)
	v_wall_normal	= COL_ZonePosGet(C_zdm_pied)
	v_wall_normal -= v_last_collided_pos
	MATH_VecSetNormalize(v_wall_normal)
}
else
{
	f_delay_until_last_wall_col += TIME_GetDt()
}

if (i_on_virtual_net_modules_nb < i_modules_nb - 1)
{
	tv_pos = @ao_modules[i_modules_nb - 1] OBJ_PosGet()
	tv_pos.z = MATH_FloatMax(tv_pos.z, OBJ_PosGet().z)
	
	if (COL_RayObject_Dist(tv_pos, -Cv_VerticalVector, 10.0, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
	{
		v_ray_pos = MATH_VecBlend(v_ray_pos, COL_RayObject_PosGet(), 4.0 * TIME_GetDt())
		v_ray_normal = MATH_VecBlendRotate(v_ray_normal, COL_RayObject_NormalGet(), 4.0 * TIME_GetDt())
	}
}

if (f_delay_until_last_ground_col < 0.2 || f_delay_until_last_wall_col < 0.2)
{
//	if ( ! f_delay_until_last_ground_col && ! f_delay_until_last_wall_col)
//		v_dest_banking = MATH_VecBlendRotate(v_ground_normal, v_wall_normal, 0.5)
//	else if (f_delay_until_last_ground_col > f_delay_until_last_wall_col)
//		v_dest_banking = v_wall_normal
//	else 
//		v_dest_banking = v_ground_normal

	if ( ! f_delay_until_last_ground_col && ! f_delay_until_last_wall_col )
	{
		if (MATH_VecDotProduct(v_ground_normal, OBJ_SightGet()) < MATH_VecDotProduct(v_wall_normal, OBJ_SightGet()))
//			v_dest_banking = v_ground_normal
			v_dest_banking = MATH_VecBlendRotate(v_ground_normal, v_wall_normal, 0.25)
		else
//			v_dest_banking = v_wall_normal
			v_dest_banking = MATH_VecBlendRotate(v_ground_normal, v_wall_normal, 0.75)
	}
	else if ( ! f_delay_until_last_wall_col ) 
		v_dest_banking = v_wall_normal
	else if ( ! f_delay_until_last_ground_col ) 
		v_dest_banking = v_ground_normal
	else
		v_dest_banking = MATH_VecNormalize(OBJ_PosGet() - v_last_collided_pos)

	if (f_delay_until_last_ground_col && f_delay_until_last_wall_col && COL_RayObject_Dist(OBJ_PosGet(), -v_dest_banking, 1.0, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
	{
		v_dest_banking = MATH_VecNormalize(OBJ_PosGet() - COL_RayObject_PosGet())
		
		if (MATH_AbsFloat(v_dest_banking.z) > Cf_Cos60)
		{
			v_ground_normal = v_dest_banking
			f_delay_until_last_ground_col = 0.0
		}
		else
		{
			v_wall_normal = v_dest_banking
			f_delay_until_last_wall_col = 0.0
		}
	}

	tv_traction = v_dest_banking * v_Scolo_Gravity.z
	
	tv_traction.x *= DYN_FrictionVectorGet().x
	tv_traction.y *= DYN_FrictionVectorGet().y

	if (tv_traction.z)
		DYN_GravitySet(cvector(0.0, 0.0, -1.0))
	else
		DYN_GravitySet(v_Scolo_Gravity)
}
else
{
	tv_traction = Cv_NullVector

	DYN_GravitySet(v_Scolo_Gravity)

	v_dest_banking = MATH_VecBlendRotate(v_dest_banking, Cv_VerticalVector, MATH_FloatMax(f_delay_until_last_ground_col, 8.0 * TIME_GetDt()))
}

ti_col_report =COL_GMatReportGet(i_gmat_water_bit)
if (ti_col_report != -1)
{
	OBJ_HierarchyReset()	

	to_collide_object = COL_ObjectGet(COL_C_ReportIndex + ti_col_report)
	tv_collide_pos = COL_CollidedPointGet(COL_C_ReportIndex + ti_col_report) 
	tv_ray_col_normal = COL_NormalGet(COL_C_ReportIndex + ti_col_report)

	if (MATH_AbsFloat(tv_ray_col_normal.z) > Cf_Cos60)
	{
		i_on_ground_modules_nb = 0
		f_water_Z = tv_collide_pos.z
	}
}

tf_Z_offset = COL_ZoneSizeGet(C_zdm_pied)

tf_archimede = f_water_Z - OBJ_PosGet().z + tf_Z_offset
tf_archimede /= tf_Z_offset
tf_archimede = MATH_FloatLimit(tf_archimede, 0.0, 4.0)
if (tf_archimede)
{
	DYN_GravitySet(v_Scolo_Gravity)
	
	tv_traction = Cv_NullVector
	tv_traction.z -= tf_archimede * v_Scolo_Gravity.z * 0.75

	if (v_dest_banking.z < 0.0)
		v_dest_banking *= -1.0

	tv_new_sight = OBJ_SightGet()
	tv_new_sight.z = 0.0
	if (MATH_VecDotProduct(tv_new_sight, v_dest_banking) > 0.0)
		v_dest_banking = Cv_VerticalVector
}
else // if ( ! PNJ_Scolo_IsWater(OBJ_PosGet()) )
{
	tf_archimede = 0.0
	f_water_Z = -Cf_Infinit
}

if (tf_archimede || f_delay_until_last_ground_col < 0.2 || f_delay_until_last_wall_col < 0.2)
{
	if (o_next_wp && COL_Pivot_BVCollide(o_next_wp))
	{
		o_next_wp = WAY_NetNextWP(n_net, o_next_wp, 0, 0)
		if (o_next_wp)
			v_net_next_pos = @o_next_wp BV_RandomPosGet(0)
	}

	if (o_next_wp)
	{
		tv_new_sight = v_net_next_pos
	}
	else if (to_target && ai_perceived_accessible[i_perceived_best_actor_index])
	{
		if (ai_perceived_status[i_perceived_best_actor_index] & Ci_PERCEIVED_IS_DEAD)
			tv_new_sight = @to_head_target OBJ_PosGet()
		else
			tv_new_sight = av_perceived_position[i_perceived_best_actor_index]
	}
	else if (type == Ci_TYPE_FIXE)
	{
		tv_new_sight = v_init_pos
		
		if (f_time_start_etat > 1.0 && COL_Pivot_BVCollide(ao_net_wp[i_net_wp_nb - 1]))
			macro_change_etat("PNJ_Scolo_ETAT_Disparition")
	}
	else if (type == Ci_TYPE_RAMPANT)
	{
//		tv_new_sight = MATH_VecRotate(cvector(1.0, 0.0, 0.0), Cv_VerticalVector, f_time_start_etat)

		f_rand_pos_duration -= MATH_FloatMin(f_rand_pos_duration, TIME_GetDt())

		if ( ! f_rand_pos_duration || MATH_VecDotProduct(v_rand_dest_pos - OBJ_PosGet(), v_rand_dest_pos - OBJ_PosGet()) < 1.0)
		{
			f_rand_pos_duration	= MATH_RandFloat(2.0, 4.0)
		
			tv_new_sight = v_init_pos
			tv_new_sight -= OBJ_PosGet()
			tf_norm = MATH_VecNorm(tv_new_sight)
			if (tf_norm > 0.001)
				tv_new_sight /= tf_norm
			else
				tv_new_sight = OBJ_SightGet()
	
			tv_new_sight = MATH_VecCrossProduct(tv_new_sight, OBJ_BankingGet())
			tf_norm = MATH_VecNorm(tv_new_sight)
			if (tf_norm > 0.001)
				tv_new_sight /= tf_norm
			else
				tv_new_sight = OBJ_SightGet()
			
			tv_new_sight *= MATH_FloatSign(MATH_RandFloat(-1.0, 1.0))
			tv_new_sight *= rayon_balade * MATH_RandFloat(0.5, 1.0)
			
			v_rand_dest_pos = v_init_pos
			v_rand_dest_pos += tv_new_sight
		}
		
		DBG_RenderVector(OBJ_PosGet(), v_rand_dest_pos - OBJ_PosGet(), color_cyan)
		tv_new_sight = v_rand_dest_pos
	}

	// Z MOVE ??? ============================================================
	if (! tf_archimede && ! f_rand_pos_duration && MATH_VecDotProduct(OBJ_SightGet(), tv_new_sight - OBJ_PosGet()) < 0.0)
	{
		if (f_delay_until_last_wall_col < 0.1)
		{
			f_force_Z_axis_duration = 0.2
	
			if (MATH_VecDotProduct(v_wall_normal, tv_new_sight - OBJ_PosGet()) < 0.0)
				tv_new_sight = OBJ_PosGet() + Cv_VerticalVector
			else
				tv_new_sight = OBJ_PosGet() - Cv_VerticalVector
		}
		else if (f_force_Z_axis_duration)
		{
			tv_new_sight -= OBJ_PosGet()
			tv_new_sight.z = 0.0
			MATH_VecSetNormalize(tv_new_sight)
		
			if (MATH_VecDotProduct(v_wall_normal, tv_new_sight - OBJ_PosGet()) < 0.0)
				tv_new_sight = OBJ_PosGet() + MATH_VecBlend(tv_new_sight, Cv_VerticalVector, 0.5)
			else
				tv_new_sight = OBJ_PosGet() + MATH_VecBlend(tv_new_sight, -Cv_VerticalVector, 0.5)
		}
	}


	// GESTION FEU ================================================================
	ti_flag_dodge_fire = faux

	if (@get_global i_nbr_de_feux_en_cours)
	{
		tv_hor_sight = tv_new_sight
		tv_hor_sight -= OBJ_PosGet()
		tv_hor_sight.z = 0.0
	
		tf_norm = MATH_VecNorm(tv_hor_sight)	
		if ( ! MATH_FloatNullToler(tf_norm, 0.001) )
		{
			tv_hor_sight /= tf_norm
		
			if ( ! GRID_LIB_NoFireFromTo(OBJ_PosGet(), OBJ_PosGet() + (tv_hor_sight * 4.0), 0b0, 0.0, faux, 0) )
			{
				ti_flag_dodge_fire	= vrai
			
				if (MATH_AbsFloat(tv_hor_sight.x) > MATH_AbsFloat(tv_hor_sight.y))
				{
					tv_hor_sight.x = MATH_FloatSign(tv_hor_sight.x)
					tv_hor_sight.y = 0.0
				}
				else
				{
					tv_hor_sight.x = 0.0
					tv_hor_sight.y = MATH_FloatSign(tv_hor_sight.y)
				}
		
				tv_hor_sight.z = tv_hor_sight.x
				tv_hor_sight.x = tv_hor_sight.y
				tv_hor_sight.y = -tv_hor_sight.z
				tv_hor_sight.z = 0.0
				
				for (ti_i = 0; ti_i < 3; ti_i++)
				{
					if (GRID_LIB_NoFireFromTo(OBJ_PosGet(), OBJ_PosGet() + (tv_hor_sight * 4.0), 0b0, 0.0, faux, 0))
						break
						
					tv_hor_sight.z = tv_hor_sight.x
					tv_hor_sight.x = tv_hor_sight.y
					tv_hor_sight.y = -tv_hor_sight.z
					tv_hor_sight.z = 0.0
				}
				
				tv_new_sight = OBJ_PosGet()
				tv_new_sight += tv_hor_sight
			}
		}
	}
	// GESTION FEU ================================================================

	// CALCUL DE LA DIRECTION
	tv_new_sight -= OBJ_PosGet()
	tv_new_sight -= MATH_VecDotProduct(tv_new_sight, OBJ_BankingGet()) * OBJ_BankingGet()
	tf_norm = MATH_VecNorm(tv_new_sight)

	tf_middle_module_dist = OBJ_SqrDist(ao_modules[i_modules_nb >> 1])
	tf_last_module_dist = OBJ_SqrDist(ao_modules[i_modules_nb - 1])

	ti_flag_orient = vrai
	if (tf_norm < 0.001)
		ti_flag_orient = faux
	else if (ti_flag_dodge_fire)
		ti_flag_orient = vrai
	else if (o_next_wp)
		ti_flag_orient = vrai
	else if (tf_middle_module_dist > 0.001 && tf_middle_module_dist < f_middle_module_min_dist)
	{
		ti_flag_orient = vrai	
	
		tv_new_sight = OBJ_PosGet()
		tv_new_sight -= @ao_modules[i_modules_nb >> 1] OBJ_PosGet()

		tf_middle_module_dist = MATH_FloatSqrt(tf_middle_module_dist)
		tv_new_sight /= tf_middle_module_dist
		
		if (MATH_VecDotProduct(tv_new_sight, @ao_modules[i_modules_nb >> 1] OBJ_SightGet()) > 0.0)
		 	tv_new_sight = - @ao_modules[i_modules_nb >> 1] OBJ_SightGet()
	}
	else if (tf_last_module_dist > 0.001 && tf_last_module_dist < f_last_module_min_dist)
	{
		ti_flag_orient = vrai	
	
		tv_new_sight = OBJ_PosGet()
		tv_new_sight -= @ao_modules[i_modules_nb - 1] OBJ_PosGet()

		tf_last_module_dist = MATH_FloatSqrt(tf_last_module_dist)
		tv_new_sight /= tf_last_module_dist

		if (MATH_VecDotProduct(tv_new_sight, @ao_modules[i_modules_nb - 1] OBJ_SightGet()) > 0.0)
			tv_new_sight = - @ao_modules[i_modules_nb - 1] OBJ_SightGet()
	}
	else if (i_perceived_best_actor_index == -1)
	{
		ti_flag_orient = vrai
	}
	else if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Kong || f_dodge_kong_duration)
	{
		if (@o_kong Proc_KK_IsInBadSituation(0) && af_perceived_dist[i_perceived_best_actor_index] < 10.0)
			f_dodge_kong_duration = 0.25
		else if (af_perceived_dist[i_perceived_best_actor_index] < 8.0)
			f_dodge_kong_duration = 0.25
		else if (i_dernier_etat == ETAT_Paf && f_time_start_etat < 1.0)
			f_dodge_kong_duration = 0.25

		if (f_dodge_kong_duration)
		{
			f_dodge_kong_duration -= MATH_FloatMin(f_dodge_kong_duration, TIME_GetDt())

			ti_flag_orient = vrai
			tv_new_sight *= -1.0
			
////			WAY_LIB_Get_Sphere_Pos(vector tv_start_pos, vector tv_dest_pos, vector tv_sight, float tf_size, vector tv_occluder_pos, float tf_occluder_size, vector tv_occluder_sight, vector tv_occluder_horizon, int ti_flag_force_side)
//			tv_new_sight = WAY_LIB_Get_Sphere_Pos(OBJ_PosGet(), @o_main_actor OBJ_PosGet(), OBJ_SightGet(), 0.0, @o_main_actor OBJ_PosGet(), 8.0, cvector(1.0, 0.0, 0.0), cvector(0.0, 1.0, 0.0), faux)
//			tv_new_sight -= OBJ_PosGet()
//			tv_new_sight -= MATH_VecDotProduct(tv_new_sight, OBJ_BankingGet()) * OBJ_BankingGet()
//			tf_norm = MATH_VecNorm(tv_new_sight)
		}
	}
	else if (ai_perceived_status[i_perceived_best_actor_index] & Ci_PERCEIVED_IS_DEAD)
	{
		ti_flag_ok = vrai
		if (f_time_start_etat < 1.0)
			ti_flag_ok = faux
		else if (tf_archimede)
			ti_flag_ok = faux
		else if (i_on_ground_modules_nb < 10)
			ti_flag_ok = faux
		else
		{
			tf_dist = OBJ_SqrDist(to_head_target)

			tf_dist_min = 1.6 * f_size_coef
			tf_dist_min *= tf_dist_min
			
			tf_dist_max = 2.5 * f_size_coef
			tf_dist_max *= tf_dist_max
			
			if ( tf_dist < tf_dist_min)
				ti_flag_ok = faux
			else if (tf_dist > tf_dist_max)
				ti_flag_ok = faux
		}
	
		if (ti_flag_ok)
		{
			macro_change_etat("PNJ_Scolo_ETAT_Devore")
		}
		else if (tf_norm < 1.5 && ! tf_archimede )
		{
			ti_flag_orient = vrai
			tv_new_sight *= -1.0
		}
	}
	else if (tf_norm < 3.0) //  && ! (ai_perceived_status[i_perceived_best_actor_index] & Ci_PERCEIVED_IS_DEAD) )
	{
		if (ai_perceived_ID[i_perceived_best_actor_index] & Ci_PERCEIVED_NEAR_FIRE)
		{
			ti_flag_orient = vrai
			tv_new_sight *= -1.0
		}
		else
		{
			switch(ai_perceived_ID[i_perceived_best_actor_index])
			{
				case C_ID_Joueur :
				case C_ID_Scolo :
				case C_ID_Raptor :
					if (f_delay_until_last_wall_col > 0.1)
					{
						ti_flag_orient = vrai
						tv_new_sight *= -1.0
						break
					}
					
				default:
					if (IsThis_ID_Humain(ai_perceived_ID[i_perceived_best_actor_index]) && @"univ" Humains_PafTimer[ai_perceived_ID[i_perceived_best_actor_index]])
					{
						ti_flag_orient = vrai
						tv_new_sight *= -1.0
					}
			}
		}
	}

	if (ti_flag_orient)
	{
		tv_new_sight /= tf_norm
		
		if (MATH_VecDotProduct(OBJ_SightGet(), tv_new_sight) > 0.0)
			tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 6.0 * TIME_GetDt())
		else
			tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), MATH_FloatSign(MATH_VecDotProduct(tv_new_sight, OBJ_HorizonGet())) * OBJ_HorizonGet(), 6.0 * TIME_GetDt())
	}
	else
	{
		tv_new_sight = OBJ_SightGet()
	}

	tf_speed = MATH_VecDotProduct((OBJ_PosGet() - v_head_last_pos) / TIME_GetDt(), OBJ_SightGet())
	tf_speed = MATH_FloatMax(tf_speed / f_size_coef, 0.0)

//	f_angle_oscillation += TIME_GetDt() * MATH_FloatMin(tf_speed, Cf_2Pi)
	f_angle_oscillation += TIME_GetDt() * MATH_RandFloat(Cf_Pi, Cf_2Pi)
	while(f_angle_oscillation > Cf_2Pi)
		f_angle_oscillation -= Cf_2Pi

	tf_coef = MATH_Sin(f_angle_oscillation)
	if (f_force_Z_axis_duration)	
		tf_coef *= MATH_FloatMin(tf_speed, 0.15)
	else if (tf_archimede)
		tf_coef *= MATH_FloatMin(tf_speed, 0.3)
	else
		tf_coef *= MATH_FloatMin(tf_speed * 0.6, 0.2)

	tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), v_dest_banking, 8.0 * TIME_GetDt())
	tv_new_sight = MATH_VecRotate(tv_new_sight, tv_new_banking, tf_coef)

	tf_target_speed = move_speed
	tf_target_speed *= 1.0 + (MATH_Sin(TIME_Get() * 4.0) * 0.25)

	if (i_on_virtual_net_modules_nb < 10)
	{
		tf_coef = i_on_virtual_net_modules_nb
		tf_coef /= i_modules_nb
		tf_coef = 1.0 - tf_coef

		tf_target_speed = MATH_FloatMax(tf_target_speed, f_size_coef * (tf_coef * 4.0))

		tv_new_sight = MATH_VecInCone(tv_new_sight, OBJ_SightGet(), Cf_2Pi * TIME_GetDt(), 1)
	}

	if (f_timer_after_main_collision)
		tf_target_speed = MATH_FloatMax(tf_target_speed, move_speed * 2.0)

	if (tf_archimede)
		tf_target_speed *= 0.75

//	if (i_flag_kong_mode && i_dernier_etat == ETAT_Paf && f_time_start_etat < 2.0)
	if (i_dernier_etat == ETAT_Paf && f_time_start_etat < 2.0)
		tf_target_speed *= 4.0

//	if ( ! i_flag_kong_mode && i_modele == Ci_Modele_Big)
	if( ! Proc_KK_BigScolo() && i_modele == Ci_Modele_Big)
		f_move_speed = MATH_FloatBlend(f_move_speed, tf_target_speed, 2.0 * TIME_GetDt())	
	else if (f_move_speed > tf_target_speed)
		f_move_speed = MATH_FloatBlend(f_move_speed, tf_target_speed, 12.0 * TIME_GetDt())	
	else
		f_move_speed = MATH_FloatBlend(f_move_speed, tf_target_speed, 4.0 * TIME_GetDt())	

	if (tf_archimede)
		tv_new_sight.z = MATH_FloatMax(tv_new_sight.z, 0.0)

	OBJ_BankingGeneralSet(tv_new_sight, tv_new_banking)
	
	if (f_move_speed)
	{
		f_Z_noise = MATH_RandFloat(-0.05, 0.05)
		f_Z_noise *= f_size_coef

		tv_speed = OBJ_SightGet() * f_move_speed
		if (tf_archimede)
			tv_speed.z = MATH_FloatMax(tv_speed.z, 0.0)
		else
			tv_speed -= MATH_FloatMax(MATH_VecDotProduct(tv_speed, v_dest_banking), 0.0) * v_dest_banking
		DYN_SpeedSetVector(tv_speed)
	}
}
else
{
	tf_speed = DYN_SpeedGet()
	if (tf_speed > 0.001)
	{
		tv_new_sight = DYN_SpeedGetVector()
		tv_new_sight /= tf_speed
		tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 4.0 * TIME_GetDt())
	}
	else
	{
		tv_new_sight = OBJ_SightGet()
	}

	tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), v_dest_banking, 4.0 * TIME_GetDt())
	OBJ_SightGeneralSet(tv_new_sight, tv_new_banking)
}

tv_traction -= MATH_FloatMin(MATH_VecDotProduct(tv_traction, OBJ_SightGet()), 0.0) * OBJ_SightGet()
DBG_RenderVector(OBJ_PosGet(), -tv_traction, color_cyan)
DYN_TractionSet(tv_traction)

DBG_RenderVector(OBJ_PosGet(), DYN_SpeedGetVector(), color_jaune)

PNJ_Scolo_Bite_Dead_Meat()

//DYN_TractionSet(OBJ_SightGet() * (DYN_FrictionVectorGet().y * f_move_speed))

//ai_virtual_current_wp_index[0] = PNJ_Scolo_Add_Virtual_Wp(OBJ_Me())

PNJ_Scolo_Modules_Update(0, nobody)

