#include "PNJ_Scolo_defines.var"

int			ti_i
int			ti_flag_collision
int			ti_flag_ok
int			ti_cancel

float		tf_dist
float		tf_coef
float		tf_speed
float		tf_norm
float		tf_pow_coef
float		tf_delai_annonce
float		tf_jump_impulsion_max	
float		tf_jump_Z_offset
float		tf_Z		

object	to_target
object	to_head_target
object	to_bassin
object	to_camera

vector	tv_head_pos
vector	tv_head_sight
vector	tv_impulsion
vector	tv_new_sight
vector	tv_horizon
vector	tv_start_pos
vector	tv_speed
vector	tv_me_to_target
vector	tv_collide_pos
vector	tv_ik_start_pos
vector	tv_ik_start_sight
vector	tv_IK_sight
vector	tv_pos
vector	tv_ray_start_pos
vector	tv_ray_dir
vector	tv_ray_col_normal
vector	tv_temp
vector	tv_temp2

#define Cf_phase_0_duration				0.5
#define Cf_phase_1_duration				1.0

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux

	OBJ_CapaSet(none, Capa_GetUp)

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather, DYN_C_NeverDynamicHierarchy)
	DYN_GravitySet(v_Scolo_Gravity)

	COL_ColSetActivationSet(C_bit_zdm_pied, none)
	COL_ZoneSizeSet(C_zdm_pied, cvector(0.2, 0.2, 0.2))
	
	AI_TrackChange(4, "PNJ_Scolo_After_ETAT")
	macro_del_callback_tir("PNJ_Scolo_ETAT_Attaque")

	switch(i_etat_courant)
	{
		case ETAT_Snap :
		case ETAT_KKRide :
		case ETAT_KKFinish :
		case ETAT_KKBite :
			break
			
		default:
			o_proie = LNK_ThisClientGet(o_proie, Ci_LNK_GRAB_RAPTOR, mid_proie_LNK, faux, nofunc, nofunc, nofunc)
	}

	return
}

to_camera = @get_global o_camera	

if (i_etat_courant != ETAT_Attaque)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Attaque

	OBJ_CapaSet(Capa_GetUp, none)
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = "PNJ_Scolo_ETAT_Attaque"

	PNJ_Scolo_IK_Init(i_ik_modules_nb)

//	DYN_Off()
//	COL_ColSetActivationSet(none, C_bit_zdm_pied)

//	f_rot_sign = MATH_FloatSign(MATH_RandFloat(-1.0, 1.0))

	f_delay_until_last_ground_col = 1000.0
	f_delay_until_last_wall_col = 1000.0
	
	i_flag_on_screen_attack = vrai
	
//	if (i_flag_kong_mode)
//		i_flag_on_screen_attack = vrai
//	else if (f_on_screen_pourcent < 0.0)
//		i_flag_on_screen_attack = MATH_RandInt(0, 2)
//	else
//		i_flag_on_screen_attack = vrai

//	if (i_flag_instant_jump)
//		i_flag_instant_jump = faux

	f_wait_duration = 0.0

	if (AI_TriggerIsValid(trigger_instant_attack) && call_trigger(trigger_instant_attack))
	{
//		i_flag_trigger_appear_used = vrai	
//		i_flag_trigger_attack_used = vrai
//		
//		i_flag_visual_check_done = faux
//	
//		AI_Execute("PNJ_Scolo_exec_check_vision")	
	
//		PNJ_Scolo_Best_Interet_Update(i_perceived_main_actor_index)
		if( o_best_interet_target == o_kong )
			PNJ_Scolo_Best_Interet_Update(i_perceived_kong_index)
		else
			PNJ_Scolo_Best_Interet_Update(i_perceived_jack_index)
		
		tv_pos = @to_camera OBJ_PosGet()
		tv_pos -= @to_camera OBJ_SightGet() * f_size_coef
		tv_pos += @to_camera OBJ_HorizonGet() * MATH_RandFloat(-4.0, 4.0)
		tv_pos -= @to_camera OBJ_BankingGet() * MATH_RandFloat(1.0, 2.0)

		OBJ_PosSet(tv_pos)
		OBJ_SightGeneralSet(@o_best_interet_target COL_ZonePosGet(C_zde_corps) - tv_pos, Cv_VerticalVector)

		PNJ_Scolo_Align_Modules()

		f_etat_phase_duration = 0.0
		i_etat_phase = 3

		DYN_On()
		DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather, DYN_C_NeverDynamicHierarchy)
		DYN_GravitySet(v_Scolo_Gravity)
		DYN_FrictionVectorSet(Cv_Scolo_Jump_Friction)	
	
		COL_ColSetActivationSet(C_bit_zdm_pied, none)
		COL_ZoneSizeSet(C_zdm_pied, cvector(0.2, 0.2, 0.2))
		COL_StartMatrixSet(OBJ_PosGet())

		f_jump_duration = 0.0
		tv_impulsion = DYN_LIB_ImpulsionGet_Friction(OBJ_PosGet(), @o_best_interet_target COL_ZonePosGet(C_zde_corps), v_Scolo_Gravity, Cf_Scolo_Jump_Friction, f_jump_duration, faux, 0.4)
		
		f_jump_duration = MATH_FloatMax(f_jump_duration, 0.5)
		tv_impulsion = DYN_LIB_ImpulsionGet_Friction(OBJ_PosGet(), @o_best_interet_target COL_ZonePosGet(C_zde_corps), v_Scolo_Gravity, Cf_Scolo_Jump_Friction, f_jump_duration, faux, 0.4)	
	
		SND_RequestPlay(SND_ATTACK)	

		DYN_SpeedSetVector(tv_impulsion)

		PNJ_Scolo_Virtual_Net_Init(vrai, nobody)
	}
	else if (i_flag_instant_jump)
	{
		i_flag_instant_jump = faux

		f_etat_phase_duration = 0.0
		i_etat_phase = 3

		DYN_On()
		DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather, DYN_C_NeverDynamicHierarchy)
		DYN_GravitySet(v_Scolo_Gravity)
		DYN_FrictionVectorSet(Cv_Scolo_Jump_Friction)	
	
		COL_ColSetActivationSet(C_bit_zdm_pied, none)
		COL_ZoneSizeSet(C_zdm_pied, cvector(0.2, 0.2, 0.2))
		COL_StartMatrixSet(OBJ_PosGet())

//		if (i_flag_kong_mode)
		if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Kong)
			tf_jump_impulsion_max	 = Cf_impulsion_max_kong
		else if ( ! ai_perceived_accessible[i_perceived_best_actor_index] )
			tf_jump_impulsion_max = 5.0
		else
			tf_jump_impulsion_max	 = Cf_impulsion_max_jack

		f_jump_duration = 0.0
		tv_impulsion = DYN_LIB_ImpulsionGet_Friction(OBJ_PosGet(), @o_best_interet_target COL_ZonePosGet(C_zde_corps), v_Scolo_Gravity, Cf_Scolo_Jump_Friction, f_jump_duration, faux, 0.4)
		
		tf_norm = MATH_VecNorm(tv_impulsion)	
		if (tf_norm > tf_jump_impulsion_max)
		{
			tv_impulsion /= tf_norm
			tv_impulsion *= tf_jump_impulsion_max
		}

		SND_RequestPlay(SND_ATTACK)	

		DYN_SpeedSetVector(tv_impulsion)

		PNJ_Scolo_Virtual_Net_Init(vrai, nobody)
	}
	else
	{
		SND_RequestPlay(SND_GETUP)
	
		DYN_On()
		DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather, DYN_C_NeverDynamicHierarchy)
		DYN_GravitySet(Cv_NullVector)
		DYN_FrictionVectorSet(cvector(6.0, 6.0, 6.0))	
	
		COL_ColSetActivationSet(C_bit_zdm_pied, none)
		COL_ZoneSizeSet(C_zdm_pied, cvector(0.5, 0.5, 0.5))

		i_etat_phase = 0
		f_etat_phase_duration = 0.0
		
		f_delay_until_last_ground_col = 0.0
		f_delay_until_last_wall_col = 0.0	

		PNJ_Scolo_Virtual_Net_Init(faux, nobody)
	}

	f_time_start_etat = 0.0

	AI_TrackCurStop()
	AI_TrackStop(4)
	macro_add_callback_tir("PNJ_Scolo_ETAT_Attaque")

	returntrack
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ==============================================================================
o_KK_Grabbed_actor = LNK_ServeurGet(Ci_LNK_GRAB_KONG, mid_kong_LNK, vrai, nofunc, nofunc)
if (o_KK_Grabbed_actor)
	macro_change_etat("PNJ_Scolo_ETAT_Grabbed_By_Kong")

//// FINISH DE KONG 
if (o_kk_finish)
	macro_change_etat("PNJ_Scolo_ETAT_KK_I_Finish")
		
o_predateur = LNK_ServeurGet(Ci_LNK_GRAB_RAPTOR, mid_predateur_LNK, vrai, "PNJ_Scolo_exec_LNK_predateur", nofunc)
if (o_predateur)
{
	switch(LNK_GrabServeurVisionIDGet(mid_predateur_LNK))
	{
		case C_ID_Scolo :
			macro_change_etat("PNJ_Scolo_ETAT_Wait_For_Grab")
			break	
	
		default:
			macro_change_etat("PNJ_Scolo_ETAT_Grabbed_Predateur")
	}
}

AI_Execute("PNJ_Scolo_exec_check_vision")
if (i_perceived_best_actor_index == -1)
	macro_change_etat("PNJ_Scolo_ETAT_Paf")
 
AI_Execute("PNJ_Scolo_exec_check_paf")
if (i_flag_paf  || ! f_lifecur)
	macro_change_etat("PNJ_Scolo_ETAT_Paf")

AI_Execute("PNJ_Scolo_exec_check_best_interet")
if (! MSG_GlobalIsValid(mid_best_interet))
	macro_change_etat("PNJ_Scolo_ETAT_Paf")

to_target = EVENT_InteretTargetGet(mid_best_interet)
//if( i_flag_kong_mode )
if( o_kong )
{
	ti_cancel = faux
	if( @o_kong Proc_KK_IsInBadSituation(0) )
		ti_cancel = vrai
	else if( to_target == o_kong )
	{
		if( Proc_KK_BigScolo() && @o_kong Proc_KK_ModeGladiator() && @o_kong Proc_KK_Test_Mode(ETAT_Kong_desequilibre_paf_fort) )
			ti_cancel = vrai
		else if( f_fury_detect )
			ti_cancel = vrai
	}
	if( ti_cancel )
	{
		// Kong en finish(ed) ou kong en gladiator et en paf fort (pour le big scolo only)
		v_jump_dest_pos = OBJ_PosGet()
		v_jump_dest_pos -= @o_kong OBJ_PosGet()
		v_jump_dest_pos.z = 0.0
		
		tf_norm = MATH_VecNorm(v_jump_dest_pos)
		
		if (tf_norm > 0.001)
			v_jump_dest_pos /= tf_norm
		else
			v_jump_dest_pos = OBJ_SightGet()
			
		v_jump_dest_pos *= 4.0 * f_size_coef
		v_jump_dest_pos += OBJ_PosGet()
	
		macro_change_etat("PNJ_Scolo_ETAT_Jump")
	}
}

// COMPORTEMENT ========================================================================
EVENT_InteretStatusSet(mid_best_interet, C_EVENT_InteretStatusLock)

if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Joueur)
	to_head_target = @get_global o_camera
else
	to_head_target = @to_target ANI_CanalObjectGet(Anim_Canal_Tete)

if (!to_head_target)
	to_head_target = to_target

to_bassin = @to_target ANI_CanalObjectGet(Anim_Canal_Bassin)

switch(ai_perceived_ID[i_perceived_best_actor_index])
{
	case C_ID_Scolo :
		// La liaison doit déjà être établie avec un scolo pour la mise en scène.
		o_proie = LNK_ThisClientGet(to_target, Ci_LNK_GRAB_RAPTOR, mid_proie_LNK, vrai, "PNJ_Scolo_exec_LNK_proie", nofunc, "PNJ_Scolo_exec_LNK_proie")
		if (o_proie == nobody)
			macro_change_etat("PNJ_Scolo_ETAT_Paf")
	
		tf_delai_annonce = 1.0
		tf_jump_Z_offset = 0.4
		tf_jump_impulsion_max	 = Cf_impulsion_max_jack
		break
		
	case C_ID_Raptor :
		tf_delai_annonce = delai_annonce
		tf_jump_Z_offset = 0.4
		tf_jump_impulsion_max	 = Cf_impulsion_max_raptor
		break
		
	case C_ID_BatCharognard :
		tf_delai_annonce = delai_annonce
		tf_jump_Z_offset = 0.4
		tf_jump_impulsion_max	 = Cf_impulsion_max_bat
		break
		
	case C_ID_Joueur : 	
		tf_delai_annonce = delai_annonce
//		tf_jump_Z_offset = 0.01
		tf_jump_Z_offset = 0.4
		tf_jump_impulsion_max	 = Cf_impulsion_max_jack
		break

	default:
		tf_delai_annonce = delai_annonce
//		if (i_flag_kong_mode)
		if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Kong)
		{
			tf_jump_Z_offset = 0.4
			tf_jump_impulsion_max	 = Cf_impulsion_max_kong
		}
		else
		{
			tf_jump_Z_offset = 0.05
			tf_jump_impulsion_max	 = Cf_impulsion_max_humain
		}
}

if ( ! ai_perceived_accessible[i_perceived_best_actor_index] )
	tf_jump_impulsion_max = 5.0

if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Kong)
{
	// Pas pour KONG, il est toujours Crossable !
	PNJ_Scolo_UncollideAdd(to_target, Cf_EVENT_Duree_1Trame)
	PNJ_Scolo_Uncollide_KAnn()
}

if (i_etat_phase < 2)
{
	f_move_speed -= MATH_FloatMin(f_move_speed, 1.5 * move_speed * TIME_GetDt())
	f_virtual_net_offset += f_move_speed * TIME_GetDt()
	f_virtual_net_offset = MATH_FloatMin(f_virtual_net_offset, i_ik_modules_nb * dist_between_module)
}

if (i_etat_phase < 3)
	PNJ_Scolo_Modules_Update(i_ik_modules_nb, nobody)

if (ao_virtual_wp_father[i_virtual_net_last_wp_index])
{
	tv_ik_start_pos = @ao_virtual_wp_father[i_virtual_net_last_wp_index] MATH_VecLocalToGlobal(v_IK_pos)
	tv_ik_start_pos += @ao_virtual_wp_father[i_virtual_net_last_wp_index] OBJ_PosGet()
	
	tv_ik_start_sight = @ao_virtual_wp_father[i_virtual_net_last_wp_index] MATH_VecLocalToGlobal(v_IK_sight)
}
else
{
	tv_ik_start_pos = v_IK_pos
	
	tv_ik_start_sight = v_IK_sight
}

v_IK_banking = @ao_modules[i_ik_modules_nb] OBJ_BankingGet()
if (MATH_VecDotProduct(v_IK_banking, Cv_VerticalVector) > -Cf_Cos60)
	v_IK_banking = MATH_VecBlendRotate(v_IK_banking, Cv_VerticalVector, 0.5)
else
	v_IK_banking = MATH_VecBlendRotate(v_IK_banking, -Cv_VerticalVector, 0.5)

tv_horizon = MATH_VecCrossProduct(@ao_modules[i_ik_modules_nb] OBJ_SightGet(), v_IK_banking)
tv_IK_sight = MATH_VecCrossProduct(v_IK_banking, tv_horizon)
MATH_VecSetNormalize(tv_IK_sight)

DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), tv_horizon * 10.0, color_rouge)
DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), tv_IK_sight * 10.0, color_vert)
DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), v_IK_banking * 10.0, color_bleu)

switch(i_etat_phase)
{
	case 0 :
		// Je me relève
		f_etat_phase_duration += TIME_GetDt()

		tf_coef = MATH_FloatMin(f_etat_phase_duration / Cf_phase_0_duration, 1.0)
		tf_coef = MATH_Sin(tf_coef * Cf_PiBy2)

		tv_start_pos = @ao_modules[i_ik_modules_nb] OBJ_PosGet()
		tv_start_pos += tv_IK_sight * (f_size_coef * 0.75)

		tv_me_to_target = @to_head_target OBJ_PosGet()
		tv_me_to_target -= tv_start_pos
		tv_me_to_target -= MATH_VecDotProduct(tv_me_to_target, v_IK_banking) * v_IK_banking

		tf_dist = MATH_VecNorm(tv_me_to_target)
		if (MATH_FloatNullToler(tf_dist, 0.001))
			tv_me_to_target = tv_IK_sight
		else	
			tv_me_to_target /= tf_dist

		tv_horizon.x = tv_me_to_target.y
		tv_horizon.y = -tv_me_to_target.x
		tv_horizon.z = 0.0
		MATH_VecSetNormalize(tv_horizon)
		tv_horizon *= MATH_Sin(f_time_start_etat * 3.0) * (0.4 * f_size_coef)

		tf_Z = 1.5 // Dest Z
		tf_Z += MATH_Sin(f_time_start_etat * 6.0) * 0.1 // Oscillation
		tf_Z *= f_size_coef

		tv_head_pos = tv_start_pos
		tv_head_pos += v_IK_banking * tf_Z
		tv_head_pos += tv_horizon

		tf_coef = MATH_FloatMin(tf_coef, 1.0)

		tv_head_pos = MATH_VecBlendRotate(tv_ik_start_pos - tv_start_pos, tv_head_pos - tv_start_pos, tf_coef)
		tv_head_pos += tv_start_pos

//		tv_ray_start_pos = tv_start_pos
//		tv_ray_start_pos.z = tv_head_pos.z
//		tv_ray_dir = tv_head_pos - tv_ray_start_pos
//		tv_ray_dir.z = 0.0c
//		tf_norm = MATH_VecNorm(tv_ray_dir)
//		tv_ray_dir /= tf_norm
//		if (COL_RayObject_Dist(tv_ray_start_pos, tv_ray_dir, tf_norm + COL_ZoneSizeGet(C_zdm_pied), all, OBJ_C_IdentityFlag_Anims | OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
//		{
//			tv_head_pos = COL_RayObject_PosGet()
//			tv_head_pos += COL_ZoneSizeGet(C_zdm_pied) * COL_RayObject_NormalGet()
//		}

		DYN_SpeedSetVector((tv_head_pos - OBJ_PosGet()) / TIME_GetDt())	
		tv_head_pos = OBJ_PosGet()

		tv_head_sight = MATH_VecBlend(@to_head_target OBJ_PosGet(), @to_target OBJ_PosGet(), MATH_FloatMin((tf_dist * 0.25) - f_size_coef, 0.5))
		tv_head_sight = MATH_VecNormalize(tv_head_sight - tv_head_pos)
		tv_head_sight = MATH_VecBlendRotate(tv_ik_start_sight, tv_head_sight, tf_coef)

		PNJ_Scolo_IK(i_ik_modules_nb, tv_head_pos, tv_head_sight, tf_coef)
		
		if (f_etat_phase_duration >= Cf_phase_0_duration)
		{
			ti_flag_ok = vrai

			if (i_perceived_best_actor_index != -1 && ai_perceived_status[i_perceived_best_actor_index] & Ci_PERCEIVED_NEAR_FIRE && f_on_screen_pourcent != -1.0)
				ti_flag_ok = faux
			else if (wait_for_look && f_on_screen_pourcent < 0.2)
				ti_flag_ok = faux
			else if (o_kong && @o_kong Proc_KK_IsInBadSituation(0) )
				ti_flag_ok = faux
				
			if (ti_flag_ok)
			{
				wait_for_look = faux
			
				f_etat_phase_duration = 0.0
				i_etat_phase++
			}
			else
			{
				f_wait_duration += TIME_GetDt()
				if (f_wait_duration > 4.0 && i_perceived_best_actor_index != -1 && ai_perceived_status[i_perceived_best_actor_index] & Ci_PERCEIVED_NEAR_FIRE)
				{
					i_flag_jump = vrai
					v_jump_dest_pos = @ao_modules[i_ik_modules_nb] OBJ_PosGet()
					v_jump_dest_pos -= MATH_FloatSign(MATH_RandFloat(-1.0, 1.0)) * OBJ_HorizonGet() * 4.0
					
					macro_change_etat("PNJ_Scolo_ETAT_Jump")
				}
			}
		}
		
		break

	case 1 :
		// Je me comprime
		f_etat_phase_duration += TIME_GetDt()
		if( tf_delai_annonce <= 0.0 )
			tf_coef = 0.0			// attention division par 0 !!!
		else
			tf_coef = MATH_FloatMin(f_etat_phase_duration / tf_delai_annonce, 1.0)

		tv_start_pos = @ao_modules[i_ik_modules_nb] OBJ_PosGet()
		tv_start_pos += tv_IK_sight * (f_size_coef * 0.75)

		tv_me_to_target = @to_head_target OBJ_PosGet()
		tv_me_to_target -= tv_start_pos
		tv_me_to_target -= MATH_VecDotProduct(tv_me_to_target, v_IK_banking) * v_IK_banking

		tf_dist = MATH_VecNorm(tv_me_to_target)
		if (MATH_FloatNullToler(tf_dist, 0.001))
			tv_me_to_target = tv_IK_sight
		else	
			tv_me_to_target /= tf_dist

		tv_horizon.x = tv_me_to_target.y
		tv_horizon.y = -tv_me_to_target.x
		tv_horizon.z = 0.0
		MATH_VecSetNormalize(tv_horizon)
		tv_horizon *= MATH_Sin(f_time_start_etat * 3.0) * (0.4 * f_size_coef)

		tf_pow_coef = tf_coef
		tf_pow_coef *= tf_pow_coef
		tf_pow_coef *= tf_pow_coef
		tf_pow_coef *= tf_pow_coef
//		tf_pow_coef *= tf_pow_coef

		tf_Z = MATH_FloatBlend(1.5, 1.3, tf_pow_coef) // Compression lineaire
		tf_Z -= MATH_Sin(tf_pow_coef * Cf_Pi) * 0.7	// Compression sinusoidale
		tf_Z += MATH_Sin(f_time_start_etat * 6.0) * 0.1 // Oscillation
		tf_Z *= f_size_coef

		tv_head_pos = tv_start_pos
		tv_head_pos += v_IK_banking * tf_Z

		tf_coef = MATH_FloatMin(tf_coef * 1.5, 1.0)
		tv_head_pos -= tv_me_to_target * (f_size_coef * 0.5 * tf_coef * MATH_Sin(tf_pow_coef * Cf_3PiBy2))
	
		tv_head_pos += tv_horizon

//		tv_ray_start_pos = tv_start_pos
//		tv_ray_start_pos.z = tv_head_pos.z
//		tv_ray_dir = tv_head_pos - tv_ray_start_pos
//		tv_ray_dir.z = 0.0
//		tf_norm = MATH_VecNorm(tv_ray_dir)
//		tv_ray_dir /= tf_norm
//		if (COL_RayObject_Dist(tv_ray_start_pos, tv_ray_dir, tf_norm + COL_ZoneSizeGet(C_zdm_pied), all, OBJ_C_IdentityFlag_Anims | OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
//		{
//			tv_head_pos = COL_RayObject_PosGet()
//			tv_head_pos += COL_ZoneSizeGet(C_zdm_pied) * COL_RayObject_NormalGet()
//		}

		DBG_RenderVector(@ao_modules[i_ik_modules_nb] OBJ_PosGet(), tv_head_pos - @ao_modules[i_ik_modules_nb] OBJ_PosGet(), color_cyan)

		DYN_SpeedSetVector((tv_head_pos - OBJ_PosGet()) / TIME_GetDt())	
		tv_head_pos = OBJ_PosGet()

		tv_head_sight = MATH_VecBlend(@to_head_target OBJ_PosGet(), @to_target OBJ_PosGet(), MATH_FloatMin((tf_dist * 0.25) - f_size_coef, 0.5))
		tv_head_sight = MATH_VecBlendRotate(tv_head_sight - tv_head_pos, @to_head_target OBJ_PosGet() - tv_head_pos, tf_coef)
		MATH_VecSetNormalize(tv_head_sight)
		
		PNJ_Scolo_IK(i_ik_modules_nb, tv_head_pos, tv_head_sight, 1.0)

		tf_coef = MATH_FloatMin(f_etat_phase_duration / tf_delai_annonce, 1.0)

		ti_i = MATH_FloatBlend(i_modules_nb - 1, 1, tf_coef) + 0.5
		ti_i--
	
		tf_coef = MATH_Sin(TIME_Get() * 60.0)

		if (ti_i > 1)
			@ao_modules[ti_i - 1] OBJ_RotateLocalZ(tf_coef * 0.2)

		@ao_modules[ti_i] OBJ_RotateLocalZ(tf_coef * 0.4)
		@ao_modules[ti_i] OBJ_Move(@ao_modules[ti_i] OBJ_BankingGet() * f_size_coef * MATH_RandFloat(-0.05, 0.05))

		if (ti_i < i_modules_nb - 1)
			@ao_modules[ti_i + 1] OBJ_RotateLocalZ(tf_coef * 0.2)

//		if (i_flag_kong_mode)
		if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Kong)
		{
			if (AI_TriggerIsValid(KK_TrigBreakDelay) && call_trigger(KK_TrigBreakDelay))
				tf_delai_annonce = 0.0
			else if (tf_dist < KK_DistAttaqueTropProche)
				tf_delai_annonce = 0.0
		}

		if (f_etat_phase_duration > tf_delai_annonce)
		{
			f_etat_phase_duration = 0.0
			i_etat_phase = 3

			DYN_On()
			DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather, DYN_C_NeverDynamicHierarchy)
			DYN_GravitySet(v_Scolo_Gravity)
			DYN_FrictionVectorSet(Cv_Scolo_Jump_Friction)
			DYN_TractionSet(Cv_NullVector)
			
			OBJ_HierarchyReset()	
	
			COL_ColSetActivationSet(C_bit_zdm_pied, none)
			COL_ZoneSizeSet(C_zdm_pied, cvector(0.2, 0.2, 0.2))

			COL_StartMatrixSet(OBJ_PosGet())

			switch(ai_perceived_ID[i_perceived_best_actor_index])
			{
				case C_ID_Scolo :
					tv_impulsion = @to_head_target OBJ_PosGet()
					break

				case C_ID_Kong :
					// FRED (split Scolo & Kong)

					tv_impulsion = @ao_perceived_actor[i_perceived_best_actor_index] COL_ZonePosGet(C_zde_corps)
					
					if (OBJ_FlagsStatusGet() & OBJ_C_StatusFlag_Culled)
						tv_impulsion += @to_camera OBJ_SightGet() * MATH_RandFloat(10.0, 20.0)
					
					tv_temp = tv_impulsion
					tv_impulsion.z = MATH_FloatBlend(@to_head_target OBJ_PosGet().z, tv_impulsion.z, 0.5)
					tf_jump_Z_offset = MATH_FloatMin(MATH_VecNorm(tv_impulsion - OBJ_PosGet())*0.05, 1.0)
//					DBG_TraceString("tf_jump_Z_offset = ")
//					DBG_TraceFloat(tf_jump_Z_offset)
					// VINCE : si je suis + haut que Kong alors l'offset de Z doit etre par rapport à moi et pas par rapport à Kong
					tv_temp2 = OBJ_PosGet()
					if( tv_temp2.z > tv_temp.z )
					{
						tf_jump_Z_offset += ( tv_temp2.z - tv_temp.z )
//						DBG_TraceString(" / je suis + haut => tf_jump_Z_offset = ")
//						DBG_TraceFloat(tf_jump_Z_offset)
					}
//					DBG_TraceEOL()
					break
					
				default:
					if (IsThis_ID_Humain(ai_perceived_ID[i_perceived_best_actor_index]))
						tv_impulsion = @to_target COL_ZonePosGet(C_zde_corps)
					else
						tv_impulsion = @to_bassin OBJ_PosGet()
			}

//			if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Jack)
//			{
//				tv_impulsion += @to_target DYN_SpeedGetVector() * 0.15
//			
//				f_jump_duration = 0.15
//				tv_impulsion = DYN_LIB_ImpulsionGet_Friction(OBJ_PosGet(), tv_impulsion, v_Scolo_Gravity, Cf_Scolo_Jump_Friction, f_jump_duration, faux, 0.0)
//			}
//			else
			{
				f_jump_duration = 0.0
				tv_impulsion = DYN_LIB_ImpulsionGet_Friction(OBJ_PosGet(), tv_impulsion, v_Scolo_Gravity, Cf_Scolo_Jump_Friction, f_jump_duration, faux, tf_jump_Z_offset)
			}
			
			tf_norm = MATH_VecNorm(tv_impulsion)	
			if (tf_norm > tf_jump_impulsion_max)
			{
				tv_impulsion /= tf_norm
				tv_impulsion *= tf_jump_impulsion_max
			}

			SND_RequestPlay(SND_ATTACK)	

			DYN_SpeedSetVector(tv_impulsion)
			
			PNJ_Scolo_Virtual_Net_Init(vrai, nobody)
		}
		
		break

		
	case 3 :

//		if (i_flag_on_screen_attack || to_target != o_main_actor)
		if (i_flag_on_screen_attack || ( to_target != o_kong && to_target != o_jack ) )
		{
			if (IsThis_ID_Humain(ai_perceived_ID[i_perceived_best_actor_index]))
			{
				ti_flag_collision = faux
			
				if (COL_ZDE_ZDECollide(to_target, C_zdm_pied, C_zde_corps))	
					ti_flag_collision = vrai
				else if (OBJ_LIB_Virtual_Collision(OBJ_Me(), to_target, faux))
					ti_flag_collision = vrai
//				if( i_flag_kong_mode && OBJ_SqrDist(to_target) < 9.0 )
//					ti_flag_collision = vrai		// proche de Ann, à l'échelle de Kong ça me suffit
				
				if (ti_flag_collision)
				{
//					if (to_target == o_main_actor) // && i_modele != Ci_Modele_Standard)
					if( to_target == o_kong || to_target == o_jack )
					{
						if (TIME_Elapsed(f_time_last_bite_sound, 1.0))
						{
							f_time_last_bite_sound = TIME_Get()
							SND_RequestPlay(SND_BITE)
						}

						switch(i_modele)
						{
							case Ci_Modele_Sombre :	
								EVENT_AddEventPaf(C_EVENT_FILTER_All, C_PAF_KK_Faible, OBJ_Me(), Cf_EVENT_Duree_1Trame, to_target, 10.0 * PAF_Unit, OBJ_SightGet())
								break

							default:
								EVENT_AddEventPaf(C_EVENT_FILTER_All, C_PAF_KK_Moyen, OBJ_Me(), Cf_EVENT_Duree_1Trame, to_target, 10.0 * PAF_Unit, OBJ_SightGet())
								break
						}
					
						macro_change_etat("PNJ_Scolo_ETAT_Sol")
					}
					else	
					{
//						if( i_flag_kong_mode )		// demande une intéraction à KAnn
//							o_proie = LNK_ThisClientGet(to_target, Ci_LNK_INTERACTION, mid_proie_LNK, grab_allowed, "PNJ_Scolo_exec_KK_interaction_add_data", nofunc, "PNJ_Scolo_exec_KK_interaction_init")
//						else
							o_proie = LNK_ThisClientGet(to_target, Ci_LNK_GRAB_RAPTOR, mid_proie_LNK, grab_allowed, "PNJ_Scolo_exec_LNK_proie", nofunc, "PNJ_Scolo_exec_LNK_proie")
						if (o_proie)
						{
							macro_change_etat("PNJ_Scolo_ETAT_Snap")
						}
						else
						{
							if (TIME_Elapsed(f_time_last_bite_sound, 1.0))
							{
								f_time_last_bite_sound = TIME_Get()
								SND_RequestPlay(SND_BITE)
							}
							EVENT_AddEventPaf(C_EVENT_FILTER_All, C_PAF_KK_Faible, OBJ_Me(), Cf_EVENT_Duree_1Trame, to_target, 10.0 * PAF_Unit, OBJ_SightGet())
						}
					}
				}
			}
			else
			{
				if (o_proie && OBJ_SqrDist(o_proie) < 0.25)
				{
					macro_change_etat("PNJ_Scolo_ETAT_Snap")
				}
				else
				{
					tv_speed = DYN_SpeedGetVector()
					tf_dist = MATH_VecNorm(tv_speed)
					if (MATH_FloatNullToler(tf_dist, 0.001))
						tv_speed = OBJ_SightGet()
					else
						tv_speed /= tf_dist
					tf_dist *= TIME_GetDt()
				
					tv_ray_start_pos = OBJ_PosGet()
					tv_ray_start_pos -= tv_speed * tf_dist
					
					tf_dist *= 2.0
					tf_dist += 0.1 * OBJ_ZoomGet()
				
					DBG_RenderVector(tv_ray_start_pos, tv_speed * tf_dist, color_jaune)	
		
					if (COL_RaySingleObject_Dist(to_target, tv_ray_start_pos, tv_speed, tf_dist, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_visuel_and_bone_volumes))
					{
						tv_collide_pos = COL_RayObject_PosGet()
						DBG_RenderVector(tv_ray_start_pos, tv_collide_pos - tv_ray_start_pos, color_rouge)
						tv_ray_col_normal = COL_RayObject_NormalGet()
						i_snaped_bone_index = COL_RayObject_CanalGet()
				
						if (ANI_CanalObjectGet(250))
							OBJ_PosSet(tv_collide_pos - (tv_speed * (0.4 * OBJ_ZoomGet())))
						else
							OBJ_PosSet(tv_collide_pos - (tv_speed * (0.3 * OBJ_ZoomGet())))
				
						switch(ai_perceived_ID[i_perceived_best_actor_index])
						{
							case C_ID_Kong :

								if( @o_kong Proc_KK_IsInBadSituation(0) )
								{
									// Kong est déjà en finish
									Proc_KK_Scolo_Send_Paf(to_target)
								}
								else
								{
									if( Proc_KK_BigScolo() )
									{
										// KK Big Scolo
										if( f_lifecur <= Cf_KK_Big_Scolo_Life_Max_For_Asking_Finish )
										{
											// Tentative de finish
											o_kk_finish = LNK_ClientGet(Ci_LNK_KKFINISH_ON_KONG, mid_kk_I_finish_LNK, vrai, nofunc, nofunc, nofunc)
											if ( o_kk_finish)
												macro_change_etat("PNJ_Scolo_ETAT_KK_I_Finish")
											else
												Proc_KK_Scolo_Send_Paf(to_target)
										}
										else
										{
											// Tentative de morsure
											o_proie = LNK_ThisClientGet(to_target, Ci_LNK_RIDE_DINO, mid_proie_LNK, vrai, nofunc, nofunc, nofunc)
											if (o_proie)
												macro_change_etat("PNJ_Scolo_ETAT_KKBite")
											else
												Proc_KK_Scolo_Send_Paf(to_target)
										}
									}
									else
									{
										// KK Small Scolo
										if( @to_target Proc_KK_Test_Mode(ETAT_Kong_grab_mashing) )
											Proc_KK_Scolo_Send_Paf(to_target)
										else
										{
											o_proie = LNK_ThisClientGet(to_target, Ci_LNK_RIDE_DINO, mid_proie_LNK, vrai, nofunc, nofunc, nofunc)
											if (o_proie)
												macro_change_etat("PNJ_Scolo_ETAT_KKRide")
											else
												Proc_KK_Scolo_Send_Paf(to_target)
										}
									}
								}
								break
									
							default:
									o_proie = LNK_ThisClientGet(to_target, Ci_LNK_GRAB_RAPTOR, mid_proie_LNK, vrai, "PNJ_Scolo_exec_LNK_proie", nofunc, "PNJ_Scolo_exec_LNK_proie")
									if (o_proie)
									{
										macro_change_etat("PNJ_Scolo_ETAT_Snap")
									}
									else
									{
										if (TIME_Elapsed(f_time_last_bite_sound, 1.0))
										{
											f_time_last_bite_sound = TIME_Get()
											SND_RequestPlay(SND_BITE)
										}
										EVENT_AddEventPaf(C_EVENT_FILTER_All, C_PAF_KK_Faible, OBJ_Me(), Cf_EVENT_Duree_1Trame, to_target, 5.0 * PAF_Unit, OBJ_SightGet())
									}
						}
					}
				}
			}
		}

		if (f_time_start_etat && (COL_CollideType(COL_C_Ground) || COL_GMatReportGet(i_gmat_water_bit) != -1))
			macro_change_etat("PNJ_Scolo_ETAT_Sol")
		
		tf_speed = DYN_SpeedGet()
	
		if (tf_speed > 0.001)
		{
			tv_new_sight = DYN_SpeedGetVector()
			tv_new_sight /= tf_speed
			tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 6.0 * TIME_GetDt())
		
			OBJ_SightGeneralSet(tv_new_sight, MATH_VecBlend(OBJ_BankingGet(), Cv_VerticalVector, 6.0 * TIME_GetDt()))
		}

		PNJ_Scolo_Modules_Update(0, nobody)
		
		break
}

AI_Execute("PNJ_Scolo_After_ETAT")