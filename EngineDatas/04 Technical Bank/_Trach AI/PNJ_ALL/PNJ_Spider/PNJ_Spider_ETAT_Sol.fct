#include "PNJ_Spider_defines.var"

int				ti_i
int				ti_flag_orient

float			tf_LOD
float			tf_coef
float			tf_dist
float			tf_speed
float			tf_target_speed
float			tf_norm
float			tf_rayon

object		to_target
object		to_collide_object
object		to_nearest_wp

vector		tv_new_sight
vector		tv_new_banking
vector		tv_speed 
vector		tv_traction
vector		tv_pos
vector		tv_hor_sight

#define Cf_LOD_Activation				0.09

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux

	if (i_flag_secto)
	{
		i_flag_secto = faux
	
		DYN_On()
		DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather | DYN_C_SlipOnGroundEdge, DYN_C_NeverDynamicHierarchy)
		DYN_GravitySet(Cv_Spider_Gravity)
		DYN_FrictionVectorSet(cvector(1.0, 1.0, 0.0))
		
		DYN_SpeedSetVector(v_secto_speed)
	
		COL_ColSetActivationSet(C_bit_zdm_pied, none)
		OBJ_FlagsControlSet(none, OBJ_C_ControlFlag_RayInsensitive)
	}

	DYN_GravitySet(Cv_Spider_Gravity)
	return
}

if (i_etat_courant != ETAT_Sol)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Sol
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()
	
	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather | DYN_C_SlipOnGroundEdge, DYN_C_NeverDynamicHierarchy)
	DYN_GravitySet(Cv_Spider_Gravity)
	DYN_FrictionVectorSet(cvector(1.0, 1.0, 0.0))

	COL_ColSetActivationSet(C_bit_zdm_pied, none)

	f_delay_until_last_ground_col = 1000.0
	f_delay_until_last_wall_col = 1000.0

	f_angle_oscillation = 0.0
	
	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
AI_Execute("PNJ_Spider_exec_check_vision")

AI_Execute("PNJ_Spider_exec_check_paf")
if (i_flag_paf)
	macro_change_etat("PNJ_Spider_ETAT_Paf")

AI_Execute("PNJ_Spider_exec_check_best_interet")

PNJ_Spider_Test_Human_Collision()

i_flag_dodge_javelin_fire = PNJ_Spider_Dodge_Fire(tv_new_sight)

AI_Execute("PNJ_Spider_exec_test_jump")

// COMPORTEMENT =========================================================
tf_LOD = OBJ_LodVisGet()

if (tf_LOD < Cf_LOD_Activation && i_perceived_best_actor_index == -1)
{
	if ( ! i_flag_secto )
	{
		i_flag_secto = vrai

		v_secto_speed = DYN_SpeedGetVector()

		DYN_Off()
	
		COL_ColSetActivationSet(none, C_bit_zdm_pied)
		OBJ_FlagsControlSet(OBJ_C_ControlFlag_RayInsensitive, none)
	}

	returntrack
}
else if (i_flag_secto)
{
	i_flag_secto = faux

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather | DYN_C_SlipOnGroundEdge, DYN_C_NeverDynamicHierarchy)
	DYN_GravitySet(Cv_Spider_Gravity)
	DYN_FrictionVectorSet(cvector(1.0, 1.0, 0.0))
	
	DYN_SpeedSetVector(v_secto_speed)

	COL_ColSetActivationSet(C_bit_zdm_pied, none)
	OBJ_FlagsControlSet(none, OBJ_C_ControlFlag_RayInsensitive)
}

if (i_perceived_best_actor_index != -1)
	EVENT_InteretStatusSet(mid_best_interet, C_EVENT_InteretStatusLock)

if (COL_CollideType(COL_C_Ground))
{
	f_delay_until_last_ground_col = 0.0

	v_ground_pos = COL_CollidedPointGet(COL_C_Ground)
	v_last_collided_pos = v_ground_pos

	v_ground_normal	= COL_ZonePosGet(C_zdm_pied)
	v_ground_normal -= v_ground_pos
	MATH_VecSetNormalize(v_ground_normal)
}
else
{
	f_delay_until_last_ground_col += TIME_GetDt()
}

if (COL_CollideType(COL_C_Wall))
{
	f_delay_until_last_wall_col = 0.0

	v_last_collided_pos = COL_CollidedPointGet(COL_C_Wall)
	v_wall_normal	= COL_ZonePosGet(C_zdm_pied)
	v_wall_normal -= v_last_collided_pos
	MATH_VecSetNormalize(v_wall_normal)
}
else
{
	f_delay_until_last_wall_col += TIME_GetDt()
}

// ANTI CHUTE LIBRE
if (f_delay_until_last_ground_col > 5.0 && f_delay_until_last_wall_col > 5.0)
{
	OBJ_PosSet(OBJ_PosInitGet())
	OBJ_BankingGeneralSet(OBJ_SightInitGet(), Cv_VerticalVector)
	COL_StartMatrixSet(OBJ_PosGet())
	
	v_ground_normal = Cv_VerticalVector
	f_delay_until_last_ground_col = 0.0
}


if (f_delay_until_last_ground_col < 0.2 || f_delay_until_last_wall_col < 0.2)
{
//	if ( ! f_delay_until_last_ground_col && ! f_delay_until_last_wall_col)
//		v_dest_banking = MATH_VecBlendRotate(v_ground_normal, v_wall_normal, 0.5)
//	else if (f_delay_until_last_ground_col > f_delay_until_last_wall_col)
//		v_dest_banking = v_wall_normal
//	else 
//		v_dest_banking = v_ground_normal

	if ( f_delay_until_last_ground_col < 0.1 && f_delay_until_last_wall_col < 0.1)
	{
		if (MATH_VecDotProduct(v_ground_normal, OBJ_SightGet()) < MATH_VecDotProduct(v_wall_normal, OBJ_SightGet()))
			v_dest_banking = MATH_VecBlendRotate(v_ground_normal, v_wall_normal, 0.25)
		else
			v_dest_banking = MATH_VecBlendRotate(v_ground_normal, v_wall_normal, 0.75)
	}
	else if ( ! f_delay_until_last_wall_col ) 
		v_dest_banking = v_wall_normal
	else if ( ! f_delay_until_last_ground_col ) 
		v_dest_banking = v_ground_normal
	else
		v_dest_banking = MATH_VecNormalize(OBJ_PosGet() - v_last_collided_pos)

	if (f_delay_until_last_ground_col > 0.1 && f_delay_until_last_wall_col > 0.1 && COL_RayObject_Dist(OBJ_PosGet(), -v_dest_banking, 1.0, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
	{
		v_dest_banking = MATH_VecNormalize(OBJ_PosGet() - COL_RayObject_PosGet())
		
		if (MATH_AbsFloat(v_dest_banking.z) > Cf_Cos60)
		{
			v_ground_normal = v_dest_banking
			f_delay_until_last_ground_col = 0.0
		}
		else
		{
			v_wall_normal = v_dest_banking
			f_delay_until_last_wall_col = 0.0
		}
		
		tv_traction = v_dest_banking * Cv_Spider_Gravity.z * 4.0
	}
	else
	{
		tv_traction = v_dest_banking * Cv_Spider_Gravity.z
	}

	tv_traction.x *= DYN_FrictionVectorGet().x
	tv_traction.y *= DYN_FrictionVectorGet().y

	if (tv_traction.z)
		DYN_GravitySet(cvector(0.0, 0.0, -1.0))
	else
		DYN_GravitySet(Cv_Spider_Gravity)
}
else
{
	tv_traction = Cv_NullVector

	DYN_GravitySet(Cv_Spider_Gravity)

	v_dest_banking = MATH_VecBlendRotate(v_dest_banking, Cv_VerticalVector, MATH_FloatMax(f_delay_until_last_ground_col, 8.0 * TIME_GetDt()))
}

if (f_delay_until_last_ground_col < 0.2 || f_delay_until_last_wall_col < 0.2)
{
	reload:
	
	if (i_perceived_best_actor_index != -1)
	{
		to_target = ao_perceived_actor[i_perceived_best_actor_index]

		if (n_net)
		{
			if ( ! i_net_way_wp_nb || ao_net_way_wp[0] != ao_perceived_nearest_wp[i_perceived_best_actor_index])
			{
				// On recacule une chemin
				to_nearest_wp = WAY_WPNearestOfOBJ(n_net, all, none, Ci_Filter_IdentityFlag)
				i_net_way_wp_nb = WAY_ShortWay(n_net, &ao_net_way_wp[0], to_nearest_wp, ao_perceived_nearest_wp[i_perceived_best_actor_index], all, none)
				if (i_net_way_wp_nb)
					v_net_next_pos = @ao_net_way_wp[i_net_way_wp_nb - 1] BV_RandomPosGet(0)
			}
	
			if (i_net_way_wp_nb > 1 && COL_Pivot_BVCollide(ao_net_way_wp[i_net_way_wp_nb - 1]))
			{
				i_net_way_wp_nb--
				if (i_net_way_wp_nb)
					v_net_next_pos = @ao_net_way_wp[i_net_way_wp_nb - 1] BV_RandomPosGet(0)
			}
		}
	}
	else
	{
		to_target = nobody
		
		if (o_start_wp)
		{
			if (COL_Pivot_BVCollide(o_start_wp) || i_net_way_wp_nb)
			{
				o_start_wp = WAY_NetNextWP(n_net2, o_start_wp, 0, 0)
				if (o_start_wp)
					v_net_next_pos = @o_start_wp BV_RandomPosGet(0)
			}
		}

		i_net_way_wp_nb = 0
	}

	if (i_flag_dodge_javelin_fire)
	{
		// On a une position à éviter
	}
	else if (i_net_way_wp_nb > 1 || (o_start_wp && i_perceived_best_actor_index == -1))
	{
		tv_new_sight = v_net_next_pos
	}
	else if (to_target)
	{
		tv_new_sight = av_perceived_position[i_perceived_best_actor_index]
	}
	else
	{
		f_rand_pos_duration -= MATH_FloatMin(f_rand_pos_duration, TIME_GetDt())

		if ( ! f_rand_pos_duration || MATH_VecDotProduct(v_rand_dest_pos - OBJ_PosGet(), v_rand_dest_pos - OBJ_PosGet()) < 1.0)
		{
			f_rand_pos_duration	= MATH_RandFloat(2.0, 4.0)
		
			tv_new_sight = v_init_pos
			tv_new_sight -= OBJ_PosGet()
			tf_norm = MATH_VecNorm(tv_new_sight)
			if (tf_norm > 0.001)
				tv_new_sight /= tf_norm
			else
				tv_new_sight = OBJ_SightGet()
	
			tv_new_sight = MATH_VecCrossProduct(tv_new_sight, OBJ_BankingGet())
			tf_norm = MATH_VecNorm(tv_new_sight)
			if (tf_norm > 0.001)
				tv_new_sight /= tf_norm
			else
				tv_new_sight = OBJ_SightGet()
			
			tv_new_sight *= MATH_FloatSign(MATH_RandFloat(-1.0, 1.0))
			tv_new_sight *= rayon_balade * MATH_RandFloat(0.5, 1.0)
			
			v_rand_dest_pos = v_init_pos
			v_rand_dest_pos += tv_new_sight
		}
		
		DBG_RenderVector(OBJ_PosGet(), v_rand_dest_pos - OBJ_PosGet(), color_cyan)
		tv_new_sight = v_rand_dest_pos
	}

	// Z MOVE ??? ============================================================
	if (MATH_VecDotProduct(OBJ_SightGet(), tv_new_sight - OBJ_PosGet()) < 0.0)
	{
		if (f_delay_until_last_wall_col < 0.1)
		{
			f_force_Z_axis_duration = 0.2
	
			if (MATH_VecDotProduct(v_wall_normal, tv_new_sight - OBJ_PosGet()) < 0.0)
				tv_new_sight = OBJ_PosGet() + Cv_VerticalVector
			else
				tv_new_sight = OBJ_PosGet() - Cv_VerticalVector
		}
		else if (f_force_Z_axis_duration)
		{
			tv_new_sight -= OBJ_PosGet()
			tv_new_sight.z = 0.0
			MATH_VecSetNormalize(tv_new_sight)
		
			if (MATH_VecDotProduct(v_wall_normal, tv_new_sight - OBJ_PosGet()) < 0.0)
				tv_new_sight = OBJ_PosGet() + MATH_VecBlend(tv_new_sight, Cv_VerticalVector, 0.5)
			else
				tv_new_sight = OBJ_PosGet() + MATH_VecBlend(tv_new_sight, -Cv_VerticalVector, 0.5)
		}
	}

	// GESTION FEU ================================================================
	if (@get_global i_nbr_de_feux_en_cours)
	{
		tv_hor_sight = tv_new_sight
		tv_hor_sight -= OBJ_PosGet()
		tv_hor_sight.z = 0.0
	
		tf_norm = MATH_VecNorm(tv_hor_sight)	
		if (tf_norm)
		{
			tv_hor_sight /= tf_norm
		
			if ( ! GRID_LIB_NoFireFromTo(OBJ_PosGet(), OBJ_PosGet() + (tv_hor_sight * 4.0), 0b0, 0.0, faux, 0) )
			{
				i_flag_dodge_fire	= vrai
			
				if (MATH_AbsFloat(tv_hor_sight.x) > MATH_AbsFloat(tv_hor_sight.y))
				{
					tv_hor_sight.x = MATH_FloatSign(tv_hor_sight.x)
					tv_hor_sight.y = 0.0
				}
				else
				{
					tv_hor_sight.x = 0.0
					tv_hor_sight.y = MATH_FloatSign(tv_hor_sight.y)
				}
		
				tv_hor_sight.z = tv_hor_sight.x
				tv_hor_sight.x = tv_hor_sight.y
				tv_hor_sight.y = -tv_hor_sight.z
				tv_hor_sight.z = 0.0
				
				for (ti_i = 0; ti_i < 3; ti_i++)
				{
					if (GRID_LIB_NoFireFromTo(OBJ_PosGet(), OBJ_PosGet() + (tv_hor_sight * 4.0), 0b0, 0.0, faux, 0))
						break
						
					tv_hor_sight.z = tv_hor_sight.x
					tv_hor_sight.x = tv_hor_sight.y
					tv_hor_sight.y = -tv_hor_sight.z
					tv_hor_sight.z = 0.0
				}
				
				tv_new_sight = OBJ_PosGet()
				tv_new_sight += tv_hor_sight
			}
		}
	}
	// GESTION FEU ================================================================

	// CALCUL DE LA DIRECTION
	tv_new_sight -= OBJ_PosGet()
	tv_new_sight -= MATH_VecDotProduct(tv_new_sight, OBJ_BankingGet()) * OBJ_BankingGet()
	tf_norm = MATH_VecNorm(tv_new_sight)

	ti_flag_orient = vrai
	if (tf_norm < 0.001)
		ti_flag_orient = faux
	else if (i_flag_dodge_fire)
		ti_flag_orient = vrai
	else if (i_flag_dodge_javelin_fire)
	{
		ti_flag_orient = vrai
		tv_new_sight *= -1.0
	}
	else if (i_perceived_best_actor_index == -1)
		ti_flag_orient = vrai
	else if (i_net_way_wp_nb)	
		ti_flag_orient = vrai
	else if (tf_norm < Cf_min_dist && ! (ai_perceived_status[i_perceived_best_actor_index] & Ci_PERCEIVED_IS_DEAD) )
	{
		switch(ai_perceived_ID[i_perceived_best_actor_index])
		{
			case C_ID_Joueur :
			case C_ID_Spider :
			case C_ID_Raptor :
//				if (f_delay_until_last_wall_col > 0.1)
				{
					ti_flag_orient = vrai
					tv_new_sight *= -1.0
					break
				}
				
			default:
				if (IsThis_ID_Humain(ai_perceived_ID[i_perceived_best_actor_index]) && @"univ" Humains_PafTimer[ai_perceived_ID[i_perceived_best_actor_index]])
				{
					ti_flag_orient = vrai
					tv_new_sight *= -1.0
				}
		}
	}
//	else if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Jack && !f_on_screen_pourcent)
//	{
//		tv_new_sight = @to_target OBJ_PosGet()
//		tv_new_sight += OBJ_SightGet() * Cf_min_dist
//		tv_new_sight -= OBJ_PosGet()
//	} 


	if (ti_flag_orient)
	{
		tv_new_sight /= tf_norm
	
		if (MATH_VecDotProduct(OBJ_SightGet(), tv_new_sight) < 0.0)
			tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), MATH_FloatSign(MATH_VecDotProduct(OBJ_HorizonGet(), tv_new_sight)) * OBJ_HorizonGet(), 4.0 * TIME_GetDt())
		else
			tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 4.0 * TIME_GetDt())
	}

	tf_speed = MATH_VecDotProduct((OBJ_PosGet() - v_last_pos) / TIME_GetDt(), OBJ_SightGet())
	tf_speed = MATH_FloatMax(tf_speed, 0.0)

	f_angle_oscillation += TIME_GetDt() * MATH_RandFloat(Cf_Pi, Cf_2Pi)
	while(f_angle_oscillation > Cf_2Pi)
		f_angle_oscillation -= Cf_2Pi

	tf_coef = MATH_Sin(f_angle_oscillation)
	if (f_force_Z_axis_duration)	
		tf_coef *= MATH_FloatMin(tf_speed, 0.15)
	else
		tf_coef *= MATH_FloatMin(tf_speed * 0.6, 0.2)

	tv_new_sight = MATH_VecRotate(tv_new_sight, OBJ_BankingGet(), tf_coef)
	tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), v_dest_banking, 6.0 * TIME_GetDt())

	if ( ! i_flag_dodge_javelin_fire && i_perceived_best_actor_index == -1 && OBJ_SqrDist(o_main_actor) > 25.0)
		tf_target_speed = move_speed * 0.5
	else
		tf_target_speed = move_speed
	tf_target_speed *= 1.0 + (MATH_Sin(f_time_start_etat * 4.0) * 0.25)

	if (f_timer_after_main_collision)
		tf_target_speed = MATH_FloatMax(tf_target_speed, move_speed * 2.0)

//	if (f_on_screen_pourcent == -1.0)
//		f_move_speed = 8.0
//	else if (f_move_speed > tf_target_speed)
//		f_move_speed = tf_target_speed
//	else
		f_move_speed = MATH_FloatBlend(f_move_speed, tf_target_speed, 12.0 * TIME_GetDt())	

	if (MATH_VecSquareNorm(tv_new_sight) < 0.1)
		tv_new_sight = OBJ_SightGet()

	OBJ_BankingGeneralSet(tv_new_sight, tv_new_banking)
	
	if (f_move_speed)
	{
		tv_speed = OBJ_SightGet() * f_move_speed
		tv_speed -= MATH_FloatMax(MATH_VecDotProduct(tv_speed, v_dest_banking), 0.0) * v_dest_banking
		DYN_SpeedSetVector(tv_speed)
		
//		DBG_RenderVector(OBJ_PosGet(), tv_speed, color_jaune)
	}
}
else
{
	tf_speed = DYN_SpeedGet()
	if (tf_speed)
	{
		tv_new_sight = DYN_SpeedGetVector()
		tv_new_sight /= tf_speed
		tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 4.0 * TIME_GetDt())
	}
	else
	{
		tv_new_sight = OBJ_SightGet()
	}

	tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), v_dest_banking, 8.0 * TIME_GetDt())
	OBJ_SightGeneralSet(tv_new_sight, tv_new_banking)
}

//tv_traction -= MATH_FloatMin(MATH_VecDotProduct(tv_traction, OBJ_SightGet()), 0.0) * OBJ_SightGet()
//DBG_RenderVector(OBJ_PosGet(), tv_traction, color_cyan)
DYN_TractionSet(tv_traction)

//DBG_RenderVector(OBJ_PosGet(), DYN_SpeedGetVector(), color_jaune)

PNJ_Spider_Bite_Dead_Meat()


