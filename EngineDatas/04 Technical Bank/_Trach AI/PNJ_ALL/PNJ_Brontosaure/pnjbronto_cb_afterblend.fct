#include "PNJ_Brontosaure_defs.var"

vector 	tv_pos, tv_sight, tv_horiz
object	to_obj, to_bone

vector	tv_diff, tv_temp
int			i, couleur[ 4 ]

float		f_height, f_dist
vector	av_Pos[ 4 ], v_PosFront, v_PosRear, v_PosMid

tv_sight = OBJ_SightGet()
tv_horiz = OBJ_HorizonGet()

AI_Execute("pnjbronto_exec_IK_legs")
AI_Execute("pnjbronto_exec_neck")

// si on look test proximité de la tete avec le main actor pour envoyer un paf
if ( i_flag_look_main )
{
	if ( f_timer_paftete <= 0)
	{
		to_obj = get_camera
		to_bone = ANI_CanalObjectGet(Anim_Canal_Machoire)
		tv_temp = @to_obj  OBJ_PosGet() - @to_bone OBJ_PosGet()
		DBG_RenderVector(@to_bone OBJ_PosGet(), tv_temp, color_rose )
		DBG_TraceFloat( MATH_VecDotProduct(tv_temp, tv_temp) )
 		DBG_TraceEOL()
		if (MATH_VecDotProduct(tv_temp, tv_temp) < 9 )
		{
			f_timer_paftete = 1.0
			EVENT_AddEventPaf(C_EVENT_FILTER_All, C_PAF_KK_Moyen, OBJ_Me(), 0.01, AI_MainActorGet(C_ID_Joueur), 3.0 * PAF_Unit, tv_temp)
		}
	}
	else
		f_timer_paftete -= TIME_GetDt()
}
else
	f_timer_paftete = 0



if ( !Pattes_o_Object[ 0 ] )
	return

//===============[ Move Papattes ]==========================
tv_pos = @Pattes_o_Bones[ BRONTO_Bones_FrontRight ] OBJ_PosGet()
to_obj = Pattes_o_Object[ BRONTO_Bones_FrontRight ]
@to_obj OBJ_PosSet( tv_pos )
@to_obj OBJ_BankingGeneralSet( tv_sight, Cv_VerticalVector )
@"PNJ_Pacifique/PNJ_Bontosaure_Patte" to_obj v_RepulseAxe = tv_horiz

tv_pos = @Pattes_o_Bones[ BRONTO_Bones_FrontLeft ] OBJ_PosGet()
to_obj = Pattes_o_Object[ BRONTO_Bones_FrontLeft ]
@to_obj OBJ_PosSet( tv_pos )
@to_obj OBJ_BankingGeneralSet( tv_sight, Cv_VerticalVector )
@"PNJ_Pacifique/PNJ_Bontosaure_Patte" to_obj v_RepulseAxe = -tv_horiz

tv_pos = @Pattes_o_Bones[ BRONTO_Bones_RearRight ] OBJ_PosGet()
to_obj = Pattes_o_Object[ BRONTO_Bones_RearRight ]
@to_obj OBJ_PosSet( tv_pos )
@to_obj OBJ_BankingGeneralSet( tv_sight, Cv_VerticalVector )
@"PNJ_Pacifique/PNJ_Bontosaure_Patte" to_obj v_RepulseAxe = -tv_horiz

tv_pos = @Pattes_o_Bones[ BRONTO_Bones_RearLeft ] OBJ_PosGet()
to_obj = Pattes_o_Object[ BRONTO_Bones_RearLeft ]
@to_obj OBJ_PosSet( tv_pos )
@to_obj OBJ_BankingGeneralSet( tv_sight, Cv_VerticalVector )
@"PNJ_Pacifique/PNJ_Bontosaure_Patte" to_obj v_RepulseAxe = tv_horiz

//===============[ Detect Papattes State ]==========================
for (i = 0; i < 4; i++ )
{
	tv_pos = @Pattes_o_Bones[ i ] OBJ_PosGet()
	tv_diff = tv_pos - OBJ_PosGet()
	f_height = MATH_VecDotProduct( tv_diff , OBJ_BankingGet() )
	f_height -= (IK_af_Height[ i ] * f_Zoom)
	// patte au sol
	if (f_height  < 0 )
	{
		if ( IK_ai_PatteState[ i ] == 0 )
		{
			f_dist = OBJ_SqrDist(AI_MainActorGet(C_ID_Joueur))
			if ( ! no_SMOKE && (f_dist < 30 * 30) )
				 LIBGFX_PoussierePas(1, tv_pos - cvector(0,0,1))
			if ( troupe_o_orga && Pattes_Shake )
			{
				if (f_dist < 10 * 10)
				{
					@troupe_o_orga OBJ_CapaSet( OBJ_Capa_6, 0 )
					@troupe_o_orga OBJ_CapaSet( OBJ_Capa_7, 0 )
				}
			}

			IK_ai_PatteState[ i ] = 3
		}
		else
			IK_ai_PatteState[ i ] = 1
	}
	else
	{
		if ( IK_ai_PatteState[ i ] == 1 )
			IK_ai_PatteState[ i ] = 2
		else
			IK_ai_PatteState[ i ] = 0
	}
}

//if ( !DBG_IsObjSel() )
	return
	
couleur[ 0 ] = color_rouge
couleur[ 1 ] = color_bleu
couleur[ 2 ] = color_vert
couleur[ 3 ] = color_rose

for (i = 0; i < 4; i++ )
{
	tv_pos = @Pattes_o_Bones[ i ] OBJ_PosGet()
	tv_diff = tv_pos - OBJ_PosGet()
	
	f_height = MATH_VecDotProduct( tv_diff , OBJ_BankingGet() )
	f_height -= IK_af_Height[ i ]
	// patte au sol
	if (f_height  < 0 )
	{
		if ( IK_ai_PatteState[ i ] == 1 )
			IK_ai_PatteState[ i ] = 0
		if ( !IK_ai_PatteState[ i ] )
			av_Pos[ i ] = IK_av_PattePos[ i ]
		else
			av_Pos[ i ] = tv_pos
	}
	else
	{
		DBG_RenderVector( tv_pos, -4 * Cv_VerticalVector, couleur[ i ] )
		if ( COL_RayObject_Dist(tv_pos, -Cv_VerticalVector, 4.0, all, OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
		{
			IK_ai_PatteState[ i ] = 1
			IK_av_PattePos[ i ] = COL_RayObject_PosGet()
			av_Pos[ i ] = IK_av_PattePos[ i ]
		}
		else
			IK_ai_PatteState[ i ] = 2
	}
}

if ( IK_ai_PatteState[ BRONTO_Bones_FrontRight ] == 2 )
{
	if (IK_ai_PatteState[ BRONTO_Bones_FrontLeft ] == 2)
		return
	av_Pos[ BRONTO_Bones_FrontRight ] = av_Pos[ BRONTO_Bones_FrontLeft ] 
}
else if ( IK_ai_PatteState[ BRONTO_Bones_FrontLeft ] == 2 )
{
	av_Pos[ BRONTO_Bones_FrontLeft ] = av_Pos[ BRONTO_Bones_FrontRight ] 
}

if ( IK_ai_PatteState[ BRONTO_Bones_RearRight ] == 2 )
{
	if (IK_ai_PatteState[ BRONTO_Bones_RearLeft ] == 2)
		return
	av_Pos[ BRONTO_Bones_RearRight ] = av_Pos[ BRONTO_Bones_RearLeft ] 
}
else if ( IK_ai_PatteState[ BRONTO_Bones_RearLeft ] == 2 )
{
	av_Pos[ BRONTO_Bones_RearLeft ] = av_Pos[ BRONTO_Bones_RearRight ] 
}

for (i = 0; i < 4; i++)
{
	av_Pos[ i ] += IK_af_Height[ i ] * OBJ_BankingGet()
}

DBG_RenderVector( av_Pos[ BRONTO_Bones_FrontRight ], av_Pos[ BRONTO_Bones_FrontLeft ] - av_Pos[ BRONTO_Bones_FrontRight ], color_rose )
v_PosFront = (av_Pos[ BRONTO_Bones_FrontRight ] + av_Pos[ BRONTO_Bones_FrontLeft ]) * 0.5
DBG_RenderSphere( v_PosFront, 1, color_rose )

DBG_RenderVector( av_Pos[ BRONTO_Bones_RearRight ], av_Pos[ BRONTO_Bones_RearLeft ] - av_Pos[ BRONTO_Bones_RearRight ], color_vert )
v_PosRear = (av_Pos[ BRONTO_Bones_RearRight ] + av_Pos[ BRONTO_Bones_RearLeft ]) * 0.5
DBG_RenderSphere( v_PosRear, 1, color_vert )

DBG_RenderVector( v_PosFront, v_PosRear - v_PosFront, color_jaune )
v_PosMid = (v_PosFront + v_PosRear) * 0.5
DBG_RenderSphere( v_PosMid, 1, color_jaune )

OBJ_PosSet( v_PosMid )

			
			// do IK
			//@Pattes_o_Bones[ i ] OBJ_PosSet( IK_av_PattePos[ i ] +  cvector( 0, 0, IK_af_Height[ i ] ) )
			//DBG_RenderSphere( IK_av_PattePos[ i ], 1, couleur[ i ])
		

//	if (COL_RayObject_Dist(tv_pied_pos + (tv_ray_dir * 4.0), -tv_ray_dir, 6.0, all, OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
//	{
//		// OK ON TOUCHE UN SOL, ON VA POUVOIR POSITIONNER EN IK
//		tv_collide_pos = COL_RayObject_PosGet()
//
//		tf_offset = MATH_VecDotProduct(tv_collide_pos - OBJ_PosGet(), tv_ray_dir)
//
//		f_walk_offset[ti_i] = MATH_FloatBlend(f_walk_offset[ti_i], tf_offset, Cf_walk_Z_blend_speed * TIME_GetDt())
//
//		if (ti_i < 2)
//		{
//			// POUR LES PIEDS   SEULEMENT ON RECUPERE LA NORMALE	
//			tv_ray_normale = COL_RayObject_NormalGet()                     
//
//			if (MATH_VecDotProduct(tv_pied_pos - OBJ_PosGet(), tv_ray_dir) < 0.8)
//			{
//				f_IK_ground_coef[ti_i] += MATH_FloatMin(1.0 - f_IK_ground_coef[ti_i], 6.0 * TIME_GetDt())
//				v_IK_ground_normale[ti_i] = MATH_VecBlend(v_IK_ground_normale[ti_i], tv_ray_normale, 6.0 * TIME_GetDt())
//			}
//			else
//			{
//				f_IK_ground_coef[ti_i] -= MATH_FloatMin(f_IK_ground_coef[ti_i], 6.0 * TIME_GetDt())
//			}	
//		}
//
//		i_flag_climb_IK[ti_i] = vrai
//		f_IK_speed[ti_i] = 1.0
//
//		v_IK_dest_pos[ti_i] = @ao_IK_bones[ti_i][2] OBJ_PosGet()
//		v_IK_dest_pos[ti_i] += tv_ray_dir * f_walk_offset[ti_i]
//	
//		if (i_etat_courant < ETAT_commun_climb_impulsion)
//		{
//			tv_X = v_IK_dest_pos[ti_i] - @ao_IK_bones[ti_i][0] OBJ_PosGet()
//			tv_X -= MATH_VecDotProduct(tv_X, tv_ray_dir) * tv_ray_dir
//			
//			tf_X = MATH_VecDotProduct(tv_X, tv_X)
//			
//			tf_Y = af_IK_bones_length[ti_i][0] + af_IK_bones_length[ti_i][1]
//			tf_Y *= tf_Y
//				
//			tf_norm = tf_Y
//			tf_norm -= tf_X
//			tf_norm = MATH_FloatSqrt(tf_norm)
//
//			// POUR LES BRAS, ON A UN MOUVEMENT SUR LES EPAULES EN PLUS QUI PERMET D'ALLER PLUS LOIN
//			if (ti_i >= 2)
//			{
//				tf_norm -= f_Decalage_Epaules[ti_i - 2]
//			}
//			
//			tf_offset = tf_norm + MATH_VecDotProduct(v_IK_dest_pos[ti_i] - @ao_IK_bones[ti_i][0] OBJ_PosGet(), tv_ray_dir)
//			
//			if (tf_offset < tf_bassin_offset)
//			{
//				tf_bassin_offset = tf_offset
//	
//				if (ti_i >= 2)
//					tf_offset_limit = -1.8
//			}
//		}
//	}
//}
//
//