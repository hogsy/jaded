
#include"KNa_Defines.var"

//procedure_local int PNJ_Scorpion_Add_Perceived_Actor(object to_actor, int ti_status, messageid tmid_visibility_ref)
procedure_local int KNative_LIB_Target_Check_This_One(object to_target)
{
	int				ti_loop
	object		to_gao

	if (!to_target || (o_ignore_target && to_target == o_ignore_target))
		return( 0 )		// Pas de target ou Target a Ignorer
	if (BV_ZoneTerritoire && !@to_target COL_Pivot_BVCollide(BV_ZoneTerritoire))
		return(0)		// L'acteur n'est pas dans le Territoire

	// Test perso caché ou pas
	if (o_blind_zone[0])
	{	
		// Il y a au moins une zone hide
		for (ti_loop = 0; ti_loop<Ci_nbr_of_blind_zone; ti_loop++)
		{
			to_gao = o_blind_zone[ti_loop]
			if (to_gao && @to_target COL_Pivot_BVCollide(to_gao))
				return(0)		// La Target est dans une blind zone
		}
	}
	return(1)
}

procedure_local object KNative_LIB_Target_Get_One_In_BV( object o_bv )
{
	int					ti_rank
	int					ti_ID
	int					ti_index
	object			to_actor
	messageid		tmid_visibility

	ti_rank = -1
	for (tmid_visibility = MSG_GlobalScan(C_EVENT_TYPE_Visibility, &ti_rank); MSG_GlobalIsValid(tmid_visibility); tmid_visibility = MSG_GlobalScan(C_EVENT_TYPE_Visibility, &ti_rank))
	{
		ti_ID = EVENT_VisionIDGet(tmid_visibility)

		if (! IsThis_ID_Humain(ti_ID))
		continue
		
		// C'est un Humain !
		to_actor = EVENT_PereGet(tmid_visibility)

		if (! KNative_LIB_Target_Check_This_One(to_actor))
			continue			// Il n'est pas valide

		return(to_actor) 	// Bha celui là est OK
	}
	return(nobody)			// Sortie normal c'est que personne n'est OK
}


procedure_local int KNative_LIB_Check_Death_Collision()
{
//	if (IO_KeyJustPressed(65))
//		OBJ_Destroy()

	if (COL_CollideType(COL_C_Wall) && COL_GMAT_FlagsGet(COL_C_Wall) & Gmat_KK_Face_de_mort)
		return(vrai)

	if (COL_CollideType(COL_C_Ground) && COL_GMAT_FlagsGet(COL_C_Ground) & Gmat_KK_Face_de_mort)
		return(vrai)

	return(faux)
}

procedure_ultra void KNative_SetNoPafTime( float tf_sec)
{
	f_no_paf_time = tf_sec
}

procedure_ultra void KNative_SetActive(int val)
{
	OBJ_FlagInactiveSet( ! val)
	OBJ_FlagInvisibleSet( ! val)

	if (o_projectile)
	{
		@o_projectile OBJ_FlagInactiveSet( ! val)
		@o_projectile OBJ_FlagInvisibleSet( ! val)
	}	
}

procedure_ultra void KNative_GroupSet(object to_group)
{
	o_group = to_group
}

procedure_ultra object KNative_GroupGet()
{
	return o_group
}

