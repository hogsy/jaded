#include"KNa_Defines.var"
Include_UltraProcedure_Header

object		to_snap
int 			sect0
int 			sect1
int 			sect2
int 			sect3
vector		tv_temp


if (i_SF_NePasSeRejouerSiMort)
{
	int		ti_SF_AlreadyDead
	i_SF_AlreadyDead = AI_SFDynGet(0, SF_MinById, SF_MaxById)		// Alloc
	Super_SpecialFlag_get(i_SF_AlreadyDead, ti_SF_AlreadyDead)			// Test SF
	if (ti_SF_AlreadyDead)																	// Si SF = 1 alors DESTROY
		OBJ_Destroy()
}

// NUMERO =============================
i_global_native_nb = @get_global i_natives_nb
@get_global i_natives_nb++

if (o_Weapon)
{
	o_projectile = @o_Weapon OBJ_Duplicate(OBJ_PosGet())

	// Get the information from the current Object (AI)
	SCT_GetOf( &sect0, &sect1, &sect2, &sect3)       
	// Set the secto information on to new duplicated gameobject.
	@o_projectile SCT_SetOf( sect0, sect1, sect2, sect3)
	
	if( i_Weapon_Ray_on_visuel )
		@o_projectile Lance_LRay_Type_Set(COL_C_Ray_on_visuel_and_bone_volumes)
	
	//JIMI_NOTE: to make some natives init with flaming spears based on random chance in native group
	if ( i_Weapon_FlamOnInit && o_projectile )
		@get_Arme_Lance_path o_projectile mi_flamme = 1
}

TIME_Wait(Cf_EVENT_Duree_1Trame)


OBJ_FlagsIdentitySet(OBJ_C_IdentityFlag_HasInitialPos, none)

OBJ_InfoPhotoParamSet( 0, 0, 3, 3, 0.0, 0.0, 0.0, 0.8)		// Bouée d'aide à la visée

DYN_On()
DYN_FlagsSet(DYN_C_BasicForces | DYN_C_NeverDynamicFather | DYN_C_NeverDynamicHierarchy | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_SkipFrictionWhenSpeedFromAnim | DYN_C_HorizontalGrounds, none)
DYN_GravitySet(Cv_NormalGravity)

COL_CrossableSet(Gmat_KK_Crossable_Default, none)

if (o_init_pos)
{ 
	net_deplacement = @o_init_pos WAY_NetOfObj()
	OBJ_PosSet( @o_init_pos OBJ_PosGet())
	COL_StartMatrixSet(OBJ_PosGet())
}

o_move_cur_pos = o_init_pos
o_move_dest_pos = o_init_pos

//o_main = ANI_CanalObjectGet(Anim_Canal_MainDroite)
o_main = ANI_CanalObjectGet(Anim_Canal_Annex1)

f_lifecur = f_life

//COL_SwapToSpecific(C_zdm_pied)
COL_ZoneSizeSet(C_zdm_pied, cvector(0.25, 0.25, 0.25))
COL_ZonePosSet(C_zdm_pied, cvector(0.0, 0.0, 0.25))

//COL_SwapToSpecific(C_zde_corps)
COL_ZoneSizeSet(C_zde_corps, cvector(0.60, 0.60, 0.60))

//COL_SwapToSpecific(C_zde_fight)
//COL_ZoneSizeSet(C_zde_fight, cvector(0.5, 0.5, 0.5))
//COL_ZonePosSet(C_zde_fight, cvector(0.0, -0.75, 1.0))

// default
COL_ColSetActivationSet(C_bit_zde_corps, none)
COL_ColSetActivationSet(C_bit_zdm_pied, none)
// invincible
if (i_invincible)
	COL_ColSetActivationSet(none, C_bit_zde_corps)


// BV et OBBOX
tv_temp = cvector(2.5, 2.5, 2.5) * OBJ_ZoomGet()
BV_MinSet(-tv_temp)
BV_MaxSet(tv_temp)
AI_Execute("KNa_Exec_OBBOX")

i_init_done = 1
i_stats_done = 0

f_time_ground = 0.0
f_time_not_on_ground = 0.0
f_total_time = 0.0

AI_CBAdd(OBJ_Me(), CallBack_After_Blend, "KNa_CB_AfterBlend")
AI_CBAdd(OBJ_Me(), CallBack_WhenDestroy, "KNa_CB_Destroy")
AI_TrackChange(Ci_Track_Reflex, "KNa_Reflex")
if (i_borg)
	AI_TrackCurChangeNow("KNa_ETAT_Borg")	
else
	AI_TrackCurChangeNow("KNa_ETAT_Wait")
