#include "CR_defines.var"

//============================================================
// Comportement générique changement de Target
//============================================================

object			to_best_target
object			to_actor

messageid		tmid_vision

message		tmsg_trigger

int					ti_i
int					ti_regle


i_change_target_flag = faux
to_best_target = nobody


// ========================================================================================================
// REGLE PRIORITAIRE : APPARITION D'UN NOUVEAU CADAVRE
// ========================================================================================================
if( i_etat_courant != ETAT_APPARITION )
{
	to_actor = CR_Cadavre_Nearest(vrai)
	if( to_actor )
	{
		ti_regle = Ci_regle_nouveau_cadavre
		to_best_target = to_actor
		CR_Cadavre_Nouveau_Select(to_actor)		// marqué comme "visité"
	}
}


// ACTEUR DEVANT MOI (a condition d'avoir un trigger d'attaque) --------------------------------------------------------------------------------------------------------
if( ! to_best_target && ( AI_TriggerIsValid(trig_attaque) || i_no_trigger_attaque_perso_proche ) )
{
	for( ti_i = 0; ti_i < i_perceived_actor_nb; ti_i++)
	{
		to_actor = ao_perceived_actor[ti_i]
		if( CR_Target_Proche_Devant_Moi(to_actor) && CR_Target_Check(to_actor) )
		{
			ti_regle = Ci_regle_actor_devant_proche
			to_best_target = to_actor
			break
		}
//		if( to_actor != o_fight_actor && CR_Target_Check(to_actor) )
//		{
//			to_bone = ANI_CanalObjectGet(Crab_Canal_Vulnerable_Devant)		// distance à ma tête (et pas à mon pivot)
//			tv_me_to_actor = @to_actor OBJ_PosGet() - @to_bone OBJ_PosGet()
//			tf_me_to_actor = MATH_VecNorm(tv_me_to_actor)
//			tv_me_to_actor_N = tv_me_to_actor
//			if( ! MATH_VecNullEpsilon(tv_me_to_actor_N) )
//				MATH_VecSetNormalize(tv_me_to_actor_N)
//			if( i_etat_courant == ETAT_APPARITION )
//			{
//				if( tf_me_to_actor <= f_dist_to_actor_change_target_network )
//				{
//					ti_regle = Ci_regle_actor_devant_proche
//					to_best_target = to_actor
//					break
//				}
//			}
//			else
//			{
//				if( tf_me_to_actor <= f_dist_to_actor_change_target )
//				{
//					tv_sens_test = OBJ_SightGet()
//					if( CR_Strafe_En_Cours() )
//					{
//						if( CR_Strafe_Cote_Get() == 1.0 )
//							tv_sens_test = OBJ_HorizonGet()
//						else
//							tv_sens_test = - OBJ_HorizonGet()
//					}
//					DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, tv_sens_test * f_dist_to_actor_change_target, color_bleu)
//					tf_dot = MATH_VecDotProduct(tv_sens_test, tv_me_to_actor_N)
//					if( ( i_modele == MODELE_Petit && tf_dot > 0 ) // Cf_Cos30 )				// 60° pour les petits
//						|| ( i_modele == MODELE_Geant && tf_dot > - Cf_Cos45 ) )		// 270° pour les gros
//					{
//						ti_regle = Ci_regle_actor_devant_proche
//						to_best_target = to_actor
//						break
//					}
//				}
//			}
//		}
	}
}


// ========================================================================================================
// REGLES DE CHOIX DE LA TARGET SPECIFIQUES AUX MODES OU JE N'AI PAS ENCORE DE CIBLE
// ========================================================================================================
if( ! o_fight_actor || i_fight_mode != Ci_fight_mode_target || o_agonisant_change_target_gao )
{
	// FORCE ATTACK TARGET --------------------------------------------------------------------------------------------------
	if( ! to_best_target && o_DBG_force_attack_gao && CR_Perceived_Actor_Check(o_DBG_force_attack_gao, tmid_vision) )
	{
		ti_regle = Ci_regle_dbg_force_attack
		to_best_target = o_DBG_force_attack_gao
		if( ! CR_Target_Check(to_best_target) )
			to_best_target = nobody
	}
	
	// TRIGGER ATTAQUE ---------------------------------------------------------------------------------------------------------
	if( ! to_best_target && AI_TriggerIsValid(trig_attaque) && call_trigger(trig_attaque) )
	{
		if( ! i_trig_attack_type ) 		// GAO5
		{
			ti_regle = Ci_regle_trigger_gao5
			tmsg_trigger = AI_TriggerGetMsg(trig_attaque)
			to_best_target = tmsg_trigger.msg_gao5
			Check_This_Gao5(to_best_target)
		}
		else		// GAO specifique
		{
			ti_regle = Ci_regle_trigger_gao_spec
			to_best_target = o_attack_gao
		}
		if( ! CR_Target_Check(to_best_target) )
			to_best_target = nobody
		if( to_best_target && i_etat_courant == ETAT_APPARITION )
		{
			// BACKUP ACTEUR TRIGGER PENDANT APPARITION RESEAU ---------------------------------------------------------------
			o_net_trigger_actor = to_best_target
			to_best_target = nobody
		}
	}
	
	// LECTURE BACKUP ACTEUR TRIGGER PENDANT APPARITION RESEAU ---------------------------------------------------------------
	if( ! to_best_target && o_net_trigger_actor )
	{
		ti_regle = Ci_regle_net_trigger_actor
		to_best_target = o_net_trigger_actor
		if( ! CR_Target_Check(to_best_target) )
			to_best_target = nobody
	}
	
	// LECTURE BACKUP ACTEUR PAF PENDANT APPARITION RESEAU ---------------------------------------------------------------
	if( ! to_best_target && o_net_paf_actor )
	{
		ti_regle = Ci_regle_net_paf_actor
		to_best_target = o_net_paf_actor
		if( ! CR_Target_Check(to_best_target) )
			to_best_target = nobody
	}
}


// ========================================================================================================
// REGLES DE CHOIX DE LA TARGET GENERIQUES (DEJA EN COMBAT OU PAS)
// ========================================================================================================

// PAF DU MAIN ACTOR ---------------------------------------------------------------------------------------------------------
if( ! to_best_target && i_paf_main_actor_flag )
{
	ti_regle = Ci_regle_paf_main_actor
	to_best_target = o_main_actor
	if( ! CR_Target_Check(to_best_target) )
		to_best_target = nobody
}

// PAF -----------------------------------------------------------------------------------------------------------------------------------
if( ! to_best_target && o_paf_actor )
{
	ti_regle = Ci_regle_paf_actor
	to_best_target = o_paf_actor
	if( ! CR_Target_Check(to_best_target) )
		to_best_target = nobody
}

if( ! o_fight_actor || o_agonisant_change_target_gao )
{
	// IDLE, MAIN ACTOR DISPO ??? ------------------------------------------------------------------------------------------
	if( i_attaque_si_perso_accessible && ! to_best_target && CR_Target_Check(o_main_actor) && CR_ConeDeVision_Check(o_main_actor))
	{
		ti_regle = Ci_regle_idle_main_actor_dispo
		to_best_target = o_main_actor
	}
	
	// IDLE, ANY ACTOR DISPO ??? -------------------------------------------------------------------------------------------
	if( i_attaque_si_perso_accessible && ! to_best_target )
	{
		for( ti_i = 0; ti_i < i_perceived_actor_nb; ti_i++)
		{
			to_actor = ao_perceived_actor[ti_i]
			if( to_actor != o_fight_actor && CR_Target_Check(to_actor) && CR_ConeDeVision_Check(to_actor) )
			{
				ti_regle = Ci_regle_idle_actor_dispo
				to_best_target = to_actor
				break
			}
		}
	}
}


// ========================================================================================================
// INTERET SUR LA CIBLE CHOISIE 
// ========================================================================================================
if( to_best_target && CR_Target_Change_Enabled(to_best_target) && CR_Target_Check(to_best_target) )
{
	if( ! CR_Perceived_Actor_Add(to_best_target, tmid_vision) )
	{
		// event visibilité de l'acteur pas accessible....
		i_change_target_flag = faux
		return
	}
	else
	{
//		if( @to_best_target AI_IsModel(get_Humain_path) )
//		{
//			if( CR_Human_Attack_Find(OBJ_Me()) )
//			{
//				// c mon mien je continue
//			}
//			else if( @get_global i_CRAB_vague_attaque_flag )
//			{
//				// vague activée
////				ti_nb = CR_Check_Presence_Interet_Statut_Model(to_best_target, faux, -1, vrai, faux)
//				ti_nb = @get_global i_CRAB_humain_attack_compteur
////				if( ti_nb > 2 )
////				{
////					@get_global i_CRAB_vague_attaque_flag = faux
////					i_change_target_flag = faux
////					return
////				}
////				else 
//				if( ti_nb >= 2 )
//				{
//					if( ! CR_Human_Attack_Find(OBJ_Me()) )
//						@get_global i_CRAB_vague_attaque_flag = faux		// 2 autres que moi = fin de la nouvelle vague
//				}
//			}
//			else
//			{
//				// vague PAS activée
////				ti_nb = CR_Check_Presence_Interet_Statut_Model(to_best_target, faux, -1, vrai, faux)
//				ti_nb = @get_global i_CRAB_humain_attack_compteur
//				if( ti_nb == 0 )
//					@get_global i_CRAB_vague_attaque_flag = vrai
//				else
//				{
//					i_change_target_flag = faux
//					return
//				}
//			}
//		}

		CR_Interet_Update(mid_best_interet, C_EVENT_InteretStatusAttack, to_best_target, tmid_vision)
		
		if( ti_regle == Ci_regle_net_trigger_actor )
		{
			o_net_trigger_actor = nobody
		}
		else if( ti_regle == Ci_regle_net_paf_actor )
		{
			o_net_paf_actor = nobody
		}
		
		if( i_DBG_trace_etat )
		{
			DBG_TraceObject(OBJ_Me())
			if( o_fight_actor )
				DBG_TraceString(" : cible CHANGEE : ")
			else
				DBG_TraceString(" : cible INITIALE : ")
			DBG_TraceObject(to_best_target)
			switch( ti_regle )
			{
				case Ci_regle_nouveau_cadavre :
					DBG_TraceString(" (nouveau cadavre)")
					break
				case Ci_regle_trigger_gao5 :
					DBG_TraceString(" (trigger - gao5)")
					break
				case Ci_regle_trigger_gao_spec :
					DBG_TraceString(" (trigger - gao specifique)")
					break
				case Ci_regle_net_paf_actor :
					DBG_TraceString(" (NET paf actor)")
					break
				case Ci_regle_net_trigger_actor :
					DBG_TraceString(" (trigger pendant le réseau)")
					break
				case Ci_regle_dbg_force_attack :
					DBG_TraceString(" (dbg force attack)")
					break
				case Ci_regle_idle_main_actor_dispo :
					DBG_TraceString(" (idle, main actor dispo)")
					break
				case Ci_regle_idle_actor_dispo :
					DBG_TraceString(" (idle, actor dispo)")
					break
				case Ci_regle_paf_main_actor :
					DBG_TraceString(" (paf du main actor)")
					break
				case Ci_regle_paf_actor :
					DBG_TraceString(" (paf actor)")
					break
				case Ci_regle_actor_devant_proche :
					DBG_TraceString(" (acteur devant et proche)")
					break
				default:
					DBG_TraceString("règle N° ")
					DBG_TraceInt(ti_regle)
					DBG_TraceEOL()
					DBG_Error("?????")
					break
			}
			DBG_TraceEOL()
		}
	}
}

