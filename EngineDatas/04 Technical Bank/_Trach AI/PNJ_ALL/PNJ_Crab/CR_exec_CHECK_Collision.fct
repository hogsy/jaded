#include "CR_defines.var"

messageid		tmid_vision

object			to_obj

int					ti_ID
int					ti_indice


//if( i_modele != MODELE_Geant )
	return

// TEST COLLISION HUMAINS ==============================================================
if( COL_CollideType(COL_C_Wall) )
{
	to_obj = COL_ObjectGet(COL_C_Wall)
	tmid_vision = EVENT_FindEventPereTarget(C_EVENT_TYPE_Visibility, to_obj, nobody)
	if( MSG_GlobalIsValid(tmid_vision) )
	{
		ti_ID = EVENT_VisionIDGet(tmid_vision)
		if( IsThis_ID_Humain(ti_ID) )
		{
			if( ! f_time_grab_no_coll_paf || to_obj != o_grab_actor_backup )
			{
				// je ne suis pas interdit de le paffer (si je viens de le grabber)
				if( ! MSG_GlobalIsValid(mid_grab) || to_obj != EVENT_TargetGet(mid_grab) )
				{
					// ce n'est pas l'acteur que je suis en train de grabber
					if( to_obj != o_main_actor ) // || i_modele == MODELE_Geant )
					{
						// les petits ne collisionnent pas jack
						ti_indice = ARR_ObjSearch(&ao_col_paf_actor[0], i_col_paf_nb, to_obj)
						if( ti_indice == -1 )
						{
							// ce n'est pas un acteur que je viens de paffer en collision
							if( i_DBG_trace_etat )
							{
								DBG_TraceObject(OBJ_Me())
								DBG_TraceString(" paffe ")
								DBG_TraceObject(to_obj)
								DBG_TraceString(" en collision")
								DBG_TraceEOL()
							}
							EVENT_AddEventPaf(C_EVENT_FILTER_Enemy, i_paf_to_send_type, OBJ_Me(), Cf_EVENT_Duree_1Trame, to_obj, Ci_paf_dmg_colmap, @to_obj OBJ_PosGet() - OBJ_PosGet())
							CR_Paffed_Actor_Add(to_obj)
							o_repousse_actor = to_obj
							macro_change_etat("CR_ETAT_REPOUSSE")
						}
					}
				}
			}
		}
	} 
}

