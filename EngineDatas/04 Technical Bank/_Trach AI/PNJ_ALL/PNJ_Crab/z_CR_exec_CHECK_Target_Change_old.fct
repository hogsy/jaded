#include "CR_defines.var"

//============================================================
// Comportement générique changement de Target
//============================================================

object			to_best_target
object			to_actor

messageid		tmid_vision

vector			tv_me_to_main_actor
vector			tv_me_to_main_actor_N

float				tf_me_to_main_actor

int					ti_i
int					ti_regle


i_change_target_flag = faux
to_best_target = nobody

tv_me_to_main_actor = @o_main_actor OBJ_PosGet() - OBJ_PosGet()
tf_me_to_main_actor = MATH_VecNorm(tv_me_to_main_actor)
tv_me_to_main_actor_N = tv_me_to_main_actor
if( ! MATH_VecNullEpsilon(tv_me_to_main_actor_N) )
	MATH_VecSetNormalize(tv_me_to_main_actor_N)

if( o_fight_actor != o_main_actor && CR_Target_Check(o_main_actor) )
{
	// LA CIBLE COURANTE N'EST PAS JACK ET JACK ET UNE CIBLE VALIDE ====================================================
	if( ! MSG_GlobalIsValid(mid_best_interet) )
	{
		// pas de proie actuellement -> c pour Jack :)
		to_best_target = o_main_actor
		ti_regle = Ci_regle_idle_main_actor_dispo
	}
	else
	{
		// j'ai déjà une proie
		if( i_paf_main_actor_flag )
		{
			// Si Jack tire sur la bestiole elle l’attaque
			to_best_target = o_main_actor
			ti_regle = Ci_regle_paf_main_actor
		}
		else if( MATH_VecDotProduct(OBJ_SightGet(), tv_me_to_main_actor_N) > Cf_Cos30 && tf_me_to_main_actor <= f_dist_to_main_actor_change_target )
		{
			// Si Jack passe dans le cône de la bestiole (dans son sight à moins de 4 m) elle l’attaque 
			to_best_target = o_main_actor
			ti_regle = Ci_regle_main_actor_proche
		}
	}
}
else if( ! MSG_GlobalIsValid(mid_best_interet) )
{
	// JACK A DISPARU : on recherche une AUTRE cible ===============================================
	AI_Execute("CR_exec_CHECK_Vision")
	for( ti_i = 0; ti_i < i_perceived_actor_nb; ti_i++)
	{
		to_actor = ao_perceived_actor[ti_i]
		if( to_actor != o_fight_actor && CR_Target_Check(to_actor) )
		{
			to_best_target = to_actor
			ti_regle = Ci_regle_idle_actor_dispo
			break
		}
	}
}
else
{
	// CIBLE PRESENTE : changement en faveur de JACK only (test déjà réalisé)
}


// REGLE DES NOUVEAUX CADAVRES ========================================================
to_actor = CR_Cadavre_Nearest(vrai)
if( to_actor )
{
	to_best_target = to_actor
	CR_Cadavre_Nouveau_Select(to_actor)		// marqué comme "visité"
	ti_regle = Ci_regle_nouveau_cadavre
}


// NOUVELLE CIBLE ========================================================================
if( to_best_target && CR_Target_Change_Enabled(to_best_target) )
{
	if( i_DBG_trace_etat )
	{
		DBG_TraceObject(OBJ_Me())
		DBG_TraceString(" : laisse ")
		DBG_TraceObject(o_fight_actor)
		DBG_TraceString(" et préfère ")
		DBG_TraceObject(to_best_target)
		switch( ti_regle )
		{
			case Ci_regle_idle_main_actor_dispo :
				DBG_TraceString(" (plus de cible, main actor dispo)")
				break
			case Ci_regle_main_actor_proche :
				DBG_TraceString(" (main actor trop proche)")
				break
			case Ci_regle_paf_main_actor :
				DBG_TraceString(" (paf du main actor)")
				break
			case Ci_regle_idle_actor_dispo :
				DBG_TraceString(" (plus de cible, acteur dispo)")
				break
			case Ci_regle_nouveau_cadavre :
				DBG_TraceString(" (nouveau cavadre)")
				break
		}
		DBG_TraceEOL()
	}
	
	CR_Perceived_Actor_Add(to_best_target, tmid_vision)
	CR_Interet_Update(mid_best_interet, C_EVENT_InteretStatusAttack, to_best_target, tmid_vision)
}

