#include "CR_defines.var"

#define		macro_fin_du_reseau				\
{															\
	o_net_next_wp = nobody						\
	o_net_last_wp = nobody						\
	i_net_done_flag = vrai							\
	macro_change_etat("CR_ETAT_IDLE")	\
}

#define		macro_net_last_wp_reached		\
if( ! o_net_next_wp )									\
{															\
	if( i_DBG_trace_etat )							\
	{														\
		DBG_TraceObject(OBJ_Me())			\
		DBG_TraceString(" : Suivi du réseau terminé !")	\
		DBG_TraceEOL()								\
	}														\
	macro_fin_du_reseau							\
}															\
else														\
{															\
	CR_Net_Check_Attack_Enabled()			\
}

object	to_interet_actor
object	to_target

messageid		tmid_vision

int			ti_nb
int			ti_interdit
int			ti_vague
int			ti_vague_max_nb
int			ti_exec_network

vector	tv_me_to_main
vector	tv_sight

float		tf_dot


// SORTIE ETAT ==============================================================================
if (i_sort_etat)
{
	f_net_force_wait_wp_countdown = -1.0
	
	i_sort_etat = faux
	return
}


// ENTREE ETAT ==============================================================================
if (i_etat_courant != ETAT_APPARITION )
{
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_APPARITION
	str_etat = "Apparition"
	if (fct_etat_courant)
	{
		i_sort_etat = vrai
		AI_Execute(fct_etat_courant)
	}
	
	fct_etat_courant = AI_TrackCurGet()
	fct_etat_main = AI_TrackCurGet()
	f_time_start_etat = 0.0
	
	ACT_ActionSet(ACTION_Attente)
	
	if( i_DBG_trace_etat )
	{
		DBG_TraceObject(OBJ_Me())
		DBG_TraceString(" : ETAT FOLLOW NETWORK...")
		DBG_TraceEOL()
	}
	i_attack_from_network = faux
	o_net_next_wp = CR_Net_Get_Next_Wp(net_apparition, o_net_last_wp)
	if( ! o_net_last_wp )
		o_net_last_wp = o_net_next_wp		// pour checker la capa 10
	macro_net_last_wp_reached
}
else
{
	f_time_start_etat += TIME_GetDt()
}


// ANALYSE ===================================================================================
AI_Execute("CR_exec_CHECK_Vision")

AI_Execute("CR_exec_CHECK_Paf")
if( o_paf_actor )
	o_net_paf_actor = o_paf_actor			// backup du perso qui m'a paffé pendant mon déplacement, pour que je l'attaque ensuite
if( CR_Paf_Check_Change_Etat() )
	macro_change_etat("CR_ETAT_PAF")

AI_Execute("CR_exec_CHECK_Target")
if( i_change_target_flag )
{
	ti_interdit = vrai
//	if( ! i_attack_from_network )
//	{
		to_target = EVENT_InteretTargetGet(mid_best_interet)
		if( to_target && @to_target AI_IsModel(get_Humain_path) && CR_Target_Proche_Devant_Moi(to_target) )
		{
//			i_attack_from_network = vrai		// target proche devant moi
			macro_fin_du_reseau
		}
//	}
	if( i_attack_from_network )
	{
		if( i_modele == MODELE_Geant )
			ti_interdit = faux
		else
		{
			to_target = EVENT_InteretTargetGet(mid_best_interet)
			if( @to_target AI_IsModel(get_Humain_path) )
			{
				if( CR_Human_Attack_Find(OBJ_Me()) )
				{
					// c mon mien je continue
				}
				else
				{
					ti_vague = @get_global i_CRAB_vague_attaque_flag
					if( ti_vague )
					{
						// vague activée
						ti_nb = @get_global i_CRAB_humain_attack_compteur
						ti_vague_max_nb = (@get_global i_CRAB_humain_attack_max_nb -1)
						if( ti_nb < ti_vague_max_nb )
							ti_interdit = faux		// on a besoin de renforts !!!!
						else if( ti_nb == ti_vague_max_nb )
						{
							// test est-ce que je suis le dernier renfort ?
							if( ! CR_Human_Attack_Find(OBJ_Me()) )
							{
								ti_interdit = faux
								@get_global i_CRAB_vague_attaque_flag = faux		// 2 autres que moi = fin de la nouvelle vague
							}
						}
						// else ils sont déjà assez
						
					}
					else
					{
						// vague PAS activée
						ti_nb = @get_global i_CRAB_humain_attack_compteur
						if( ti_nb == 0 || ti_nb == 1 )
						{
							ti_interdit = faux
							@get_global i_CRAB_vague_attaque_flag = vrai
						}
						// else on attend la finde la vague précédente
					}
				}
			}
		}
		
		if( ! ti_interdit )
		{
			if( i_DBG_trace_etat )
			{
				DBG_TraceObject(OBJ_Me())
				DBG_TraceString(" : suivi du réseau annulé pour attaquer")
				DBG_TraceEOL()
			}
			macro_fin_du_reseau
		}
	}
}

if( COL_Pivot_BVCollide(o_net_next_wp) )
{
	// Prochain wp atteint, détermination du wp suivant...
	o_net_last_wp = o_net_next_wp
	o_net_next_wp = CR_Net_Get_Next_Wp(net_apparition, o_net_last_wp)
	macro_net_last_wp_reached
}


// PAFS COLLISION
//AI_Execute("CR_exec_CHECK_Collision")

// COMPORTEMENT =============================================================================

// INTERET --------------------------------------------------------------
to_interet_actor = nobody
if( o_net_paf_actor )
	to_interet_actor = o_net_paf_actor
else if( o_net_trigger_actor )
	to_interet_actor = o_net_trigger_actor
if( to_interet_actor )
	CR_Interet_Update(mid_best_interet, C_EVENT_InteretStatusAttack, to_interet_actor, tmid_vision)


// FORCE ATTENTE POUR LE CRABE GEANT ------------------------------------------------------
ti_exec_network = vrai
if( i_modele == MODELE_Geant && o_net_next_wp && @o_net_next_wp OBJ_CapaTest(CAPA_Reseau_Force_Attente) && @o_net_next_wp OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_DesignStruct) )
{
	ti_exec_network = faux
	if( f_net_force_wait_wp_countdown == -1.0 )
	{
		// récup du délai d'attente
		f_net_force_wait_wp_countdown = o_net_next_wp.des_float1
		f_net_force_wait_intim_delai = MATH_RandFloat(1.0, 2.0)
	}
	if( f_net_force_wait_wp_countdown > 0.0 )
	{
		if( f_on_screen_pourcent > 0.5 )
		{
			// à l'écran : n'attend plus
			@o_net_next_wp OBJ_CapaSet(none, CAPA_Reseau_Force_Attente)
			ti_exec_network = vrai
		}
		else
		{
			f_net_force_wait_wp_countdown -= MATH_FloatMin(f_net_force_wait_wp_countdown, TIME_GetDt())
			if( ! f_net_force_wait_wp_countdown )
			{
				// délai d'attente écoulé : n'attend plus
				@o_net_next_wp OBJ_CapaSet(none, CAPA_Reseau_Force_Attente)
				ti_exec_network = vrai
			}
			else
			{
				f_net_force_wait_intim_delai -= MATH_FloatMin(f_net_force_wait_intim_delai, TIME_GetDt())
				
				// orientation
				tv_me_to_main = @o_main_actor OBJ_PosGet() - OBJ_PosGet()
				tv_me_to_main.z = 0.0
				tv_sight = OBJ_SightGet()
				tv_sight.z = 0.0
				if( ! MATH_VecNullToler(tv_me_to_main, 0.1) )
					MATH_VecSetNormalize(tv_me_to_main)
				else
					tv_me_to_main = OBJ_SightGet()
				if( ! MATH_VecNullToler(tv_sight, 0.1) )
					MATH_VecSetNormalize(tv_sight)
				else
					tv_sight = OBJ_SightGet()
				tf_dot = MATH_VecDotProduct(tv_sight, tv_me_to_main)
				if( tf_dot < Cf_Cos15 )
				{
//					Str_DisplayTextOnce("tourne", cvector(0.5,0.5,0))
					ACT_ActionSet(ACTION_SurPlace)
					OBJ_BankingGeneralSet(MATH_VecBlendRotate(OBJ_SightGet(), @o_main_actor OBJ_PosGet() - OBJ_PosGet(), f_way_rotation_coef_cur * TIME_GetDt()), macro_banking)
				}
				else
				{
					if( f_net_force_wait_intim_delai )
						ACT_ActionSet(ACTION_Attente)
					else
					{
						if( ACT_ActionGet() != ACTION_Intimidation )
						{
							ACT_ActionSet(ACTION_Intimidation)
							SND_RequestPlay(Ci_SND_Intimid)
						}
						else if( ACT_ActionFinished() )
							f_net_force_wait_intim_delai = MATH_RandFloat(1.0, 2.0)
					}
					OBJ_BankingGeneralSet(MATH_VecBlendRotate(OBJ_SightGet(), @o_main_actor OBJ_PosGet() - OBJ_PosGet(), f_way_rotation_coef_cur * TIME_GetDt()), macro_banking)
				}
			}
		}
	}
}
else
	f_net_force_wait_wp_countdown = -1.0		// la capa peut etre virée d'un coup en LD, il ne faut pas rester bloqué...


if( ti_exec_network )
{
	// à l'écran ou durée écoulée et capa retirée en LD
	if( ACT_ActionGet() == ACTION_Intimidation )
	{
		// ne pas couper une anim d'intimidation
		if( ! ACT_ActionFinished() )
		{
			OBJ_BankingGeneralSet(MATH_VecBlendRotate(OBJ_SightGet(), @o_main_actor OBJ_PosGet() - OBJ_PosGet(), f_way_rotation_coef_cur * TIME_GetDt()), macro_banking)
			ti_exec_network = faux
		}
	}
}			


// DEPLACEMENT -------------------------------------------------
CR_Rotation_Coef_Blend()
if( ti_exec_network )
{
	push(o_net_next_wp)
	AI_Execute("CR_exec_NETWORK")
}


if( ! i_DBG_vague )
	return

if( o_net_trigger_actor )
{
	vector		tv_2d_pos
	tv_2d_pos = VIEW_3dWorldTo2d(0, OBJ_PosGet())
	Str_DisplayTextOnce("network ", tv_2d_pos)
	Str_DisplayGaoOnce(o_net_trigger_actor, tv_2d_pos + cvector(0.1,0,0))
	if( @get_global i_CRAB_vague_attaque_flag )
		Str_DisplayTextOnce("vague d'attaque", cvector(0.5,0,0))
}

