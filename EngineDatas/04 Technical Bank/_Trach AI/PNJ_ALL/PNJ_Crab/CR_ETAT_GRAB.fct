#include "CR_defines.var"

messageid			tmid_vision
messageid			tmid_grab

object				to_grab
object				to_bone
object				to_camera

int						ti_frame
int						ti_action_rate
int						ti_action_mange
int						ti_liaison_dead

float					tf_dist_to_grab
float					tf_cote

vector				tv_gao_to_grab
vector				tv_FA_to_me
vector				tv_FA_to_me_sight
vector				tv_FA_to_me_banking


// SORTIE ETAT ==============================================================================
if (i_sort_etat)
{
	CR_DestInt1Restore()
	
	if( i_etat_courant != ETAT_TRAINE && i_etat_courant != ETAT_REPOUSSE )
		CR_Grab_Reset()
	
	if( i_modele == MODELE_Geant )
		i_attack_intimidation_done = faux		// les crabes géants intimident avant chaque tentative de grab

	SND_Stop(i_snd_grab)
	i_snd_grab = -1
	
	i_sort_etat = faux
	return
}


// ENTREE ETAT ==============================================================================
if (i_etat_courant != ETAT_GRAB )
{
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_GRAB
	str_etat = "Grab"
	if (fct_etat_courant)
	{
		i_sort_etat = vrai
		AI_Execute(fct_etat_courant)
	}
	
	fct_etat_courant = AI_TrackCurGet()
	f_time_start_etat = 0.0
	
	// ACTION LANCEE DANS L'ETAT PRECEDENT (SAUF RETOUR APRES REPOUSSE)
	if( i_etat_ancien == ETAT_REPOUSSE && MSG_GlobalIsValid(mid_grab) )
	{
		// déjà grabbé
		if( LNK_GrabBoneGet(mid_grab) == o_bone_pinceD )
			ACT_ActionSet(ACTION_GrabDmange)
		else
			ACT_ActionSet(ACTION_GrabGmange)
	}
	else
	{
		// pas encore grabbé
		i_grab_test_done = faux
		i_grab_paf_inter_send = faux
		i_grab_mange_fini_flag = faux
	}
	
	if( i_DBG_trace_etat )
	{
		DBG_TraceObject(OBJ_Me())
		DBG_TraceString(" : ETAT GRAB")
		DBG_TraceEOL()
	}
	
	CR_DestInt1Modify()
	f_grab_mange_duration = 0.0
	i_grab_reussi = faux
//	f_grab_mange_paf_delay = 1.5
}
else
{
	f_time_start_etat += TIME_GetDt()
	if( i_modele == MODELE_Geant && MSG_GlobalIsValid(mid_grab) )
		f_grab_mange_duration += TIME_GetDt()
	if( f_grab_mange_duration > 1.5 ) //  1.75 )
		CR_DestInt1Restore()
}

// EMERGENCY ABORT =============================
if( ! i_grab_mange_fini_flag )
{
	// si flag vrai alors je le tue 
	o_emergency_abort_actor = o_fight_actor
	Macro_Emergency_Abort
}

// UNCOL -------------------------------------------------------------------------------------------
if( MSG_GlobalIsValid(mid_grab) )
	CR_UncollideAdd(o_fight_actor, Cf_EVENT_Duree_1Trame)

// ANALYSE ===================================================================================
AI_Execute("CR_exec_CHECK_Vision")


// TEST PAF ET LIAISON COUPEE ----------------------------------------
AI_Execute("CR_exec_CHECK_Paf")
if( o_paf_actor || i_paf_grab_lache_flag )
	macro_change_etat("CR_ETAT_PAF")
if( i_grab_reussi && ! MSG_GlobalIsValid(mid_grab) )
	macro_change_etat("CR_ETAT_IDLE")


//if( i_grab_test_done && i_modele == MODELE_Geant )
//{
//	// les petits crabes changent d'état (traine)
//	ti_liaison_dead = faux
//	if( ! MSG_GlobalIsValid(mid_grab) )
//		ti_liaison_dead = vrai
//	else
//	{
//		// Test rupture de liaison : j'ai mangé le perso et il coupe la liaison en mourant
//		to_grab = LNK_ThisClientGet(o_fight_actor, Ci_LNK_GRAB_RAPTOR, mid_grab, vrai, nofunc, nofunc, nofunc)
//		if( ! to_grab )
//			ti_liaison_dead = vrai
//	}
//	if( ti_liaison_dead )
//		macro_change_etat("CR_ETAT_IDLE")
//}


// COMPORTEMENT =============================================================================

// CAMERA ---------------------------------------------------------------------------------
to_camera = @get_global o_camera
if( o_fight_actor == o_main_actor && MSG_GlobalIsValid(mid_grab) && f_time_start_etat <= 0.5 )
{
	// gestion des délai entre les pafs pour le joueur (écran rouge)
	tv_FA_to_me = @o_bone_carapace OBJ_PosGet() - @to_camera OBJ_PosGet()
	DBG_RenderVector(@to_camera OBJ_PosGet(), tv_FA_to_me, color_rouge)
	tv_FA_to_me.z = 0.0
	if( ! MATH_VecNullEpsilon(tv_FA_to_me) )
		MATH_VecSetNormalize(tv_FA_to_me)
	
	tv_FA_to_me_sight = tv_FA_to_me
	DBG_RenderVector(@to_camera OBJ_PosGet(), tv_FA_to_me_sight, color_vert)
	if( LNK_GrabBoneGet(mid_grab) == o_bone_pinceG )
		tf_cote = -1.0
	else
		tf_cote = 1.0
	tv_FA_to_me_sight = MATH_VecRotate(tv_FA_to_me_sight, @to_camera OBJ_BankingGet(), tf_cote * 20 * Cf_1Degre)
	DBG_RenderVector(@to_camera OBJ_PosGet(), tv_FA_to_me_sight, color_vert)
	
	tv_FA_to_me_banking = tv_FA_to_me
	DBG_RenderVector(@to_camera OBJ_PosGet(), tv_FA_to_me_banking, color_bleu)
	tv_FA_to_me_banking = MATH_VecRotate(tv_FA_to_me_banking, @to_camera OBJ_HorizonGet(), - 50 * Cf_1Degre)
	DBG_RenderVector(@to_camera OBJ_PosGet(), tv_FA_to_me_banking, color_bleu)
	
	@to_camera OBJ_BankingGeneralSet(
		MATH_VecBlendRotate(@to_camera OBJ_SightGet(), tv_FA_to_me_sight, 20.0 * TIME_GetDt()), 
		MATH_VecBlendRotate(@to_camera OBJ_BankingGet(), tv_FA_to_me_banking, 20.0 * TIME_GetDt()))
}

// PAFS ===========================================
if( o_fight_actor == o_main_actor && MSG_GlobalIsValid(mid_grab) )
{
	if( ! f_grab_mange_paf_delay )
	{
		f_grab_mange_paf_delay = 5.0
		EVENT_AddEventPaf( C_EVENT_FILTER_Enemy, i_paf_to_send_type, OBJ_Me(), Cf_EVENT_Duree_1Trame, o_fight_actor, 10.0 * PAF_Unit, OBJ_SightGet())
		CR_Paffed_Actor_Add(o_fight_actor)
	}
}

// INTERET ----------------------------------------------------------------------------------
if( ! i_grab_mange_fini_flag )
{
	// perso pas encore mangé
	if ( ! MSG_GlobalIsValid(mid_best_interet) )
		macro_change_etat(fct_etat_main)				// perte de l'intérêt -> retourne en fight (check new target)
	
	if( MSG_GlobalIsValid(mid_grab) || CR_Perceived_Actor_Check(o_fight_actor, tmid_vision) )
		CR_Interet_Update(mid_best_interet, C_EVENT_InteretStatusGrab, o_fight_actor, tmid_vision)
	
	// ACTION -------------------------------------------------------------------------------------------
	ti_frame = ANI_CurrentFrameGet(0)
	if( ACT_ActionGet() == ACTION_GrabDmange || ACT_ActionGet() == ACTION_GrabGmange )
	{
		// Crabe Géant qui dévore sur place
		if( f_grab_mange_duration > 8.5 )
		{
			if( i_DBG_trace_etat )
			{
				DBG_TraceObject(OBJ_Me())
				DBG_TraceString(" tue ")
				DBG_TraceObject(o_fight_actor)
				DBG_TraceString(" (Mange)")
				DBG_TraceEOL()
			}
			EVENT_AddEventPaf( C_EVENT_FILTER_Enemy, C_PAF_KK_KiTue, OBJ_Me(), Cf_EVENT_Duree_1Trame, o_fight_actor, Ci_paf_dmg_grab_fin, OBJ_SightGet())
			CR_Paffed_Actor_Add(o_fight_actor)
			EVENT_Delete(mid_best_interet, C_EVENT_EOFDEL)

			// attente et maintien de la liaison
			i_grab_mange_fini_flag = vrai
		}
	}
	else if( ACT_ActionGet() == ACTION_GrabDrate || ACT_ActionGet() == ACTION_GrabGrate )
	{
		// géant ou petit, raté...
		if( ACT_ActionFinished() )
			macro_change_etat("CR_ETAT_FIGHT")
	}
	else
	{
		// tentative de grab en cours
		if( ACT_ActionGet() == ACTION_GrabDdeb )
		{
			to_bone = o_bone_pinceD
			ti_action_rate = ACTION_GrabDrate
			ti_action_mange = ACTION_GrabDmange
		}
		else
		{
			to_bone = o_bone_pinceG
			ti_action_rate = ACTION_GrabGrate
			ti_action_mange = ACTION_GrabGmange
		}
		
		if( ! MSG_GlobalIsValid(mid_grab) )
		{
			// PAS ENCORE DE LIAISON ========================================================
			tv_gao_to_grab = @o_fight_actor OBJ_PosGet() - v_grab_pos
			tf_dist_to_grab = MATH_VecNorm(tv_gao_to_grab)
			if( ti_frame >= Ci_frame_grab_test_deb 
				&& ti_frame <= Ci_frame_grab_test_fin 
				&& ( tf_dist_to_grab <= 3.5 || COL_ZDE_ZDECollide(o_fight_actor, C_zde_fight, C_zde_corps) ) 
				&& ! i_grab_reussi )		// ne pas repasser si la liaison a été coupée
			{
				i_grab_test_done = vrai
				to_grab = nobody
				if( i_modele == MODELE_Geant || TIME_Elapsed(@get_global f_crab_last_grab_time, f_grab_delay) )		// délai pour les petits crabes only
					to_grab = LNK_ThisClientGet(o_fight_actor, Ci_LNK_GRAB_RAPTOR, mid_grab, vrai, "CR_exec_GRAB_param", nofunc, "CR_exec_GRAB_param")
				if( to_grab )
				{
					CR_SND_Grab_Init()
					i_grab_reussi = vrai
					
					@get_global f_crab_last_grab_time = TIME_Get()
					LNK_GrabBoneSet(mid_grab, to_bone)
					if( i_modele == MODELE_Geant )
						LNK_GrabStatusSet(mid_grab, Ci_Grab_Crab_Type_Grab_Mange)
					else
						LNK_GrabStatusSet(mid_grab, Ci_Grab_Crab_Type_Traine_pas_encore)
					
					// paf simulé
					if( o_fight_actor == o_main_actor )
					{
						CR_Paffed_Actor_Add(o_fight_actor)
						if( i_DBG_trace_etat )
						{
							DBG_TraceObject(OBJ_Me())
							DBG_TraceString(" paffe ")
							DBG_TraceObject(o_fight_actor)
							DBG_TraceString(" (début du grab)")
							DBG_TraceEOL()
						}
					}
					
//					if( i_modele == MODELE_Petit )
//					{
//						f_grab_traine_duration = 0.0
//						i_grab_traine_force_blesse = faux
//						macro_change_etat("CR_ETAT_TRAINE")
//					}
				}
			}
			else if( ti_frame > Ci_frame_grab_test_fin )
			{
				if( ! i_grab_reussi )
				{
					// frame test fin atteinte et pas de liaison -> action raté
					ACT_ActionSet(ti_action_rate)
					if( COL_ZDE_ZDECollide(o_fight_actor, C_zde_fight, C_zde_corps) )
					{
						// il a refuse mon grab : je ne le paffe que s'il n'est grabbé par personne d'autre !
						tmid_grab = EVENT_FindEventPereTarget(Ci_LNK_EVENT_OFFSET + Ci_LNK_GRAB_RAPTOR, o_fight_actor, nobody)
						if( ! MSG_GlobalIsValid(tmid_grab) || ! EVENT_TargetGet(tmid_grab) )
						{
							EVENT_AddEventPaf(C_EVENT_FILTER_Enemy, i_paf_to_send_type, OBJ_Me(), Cf_EVENT_Duree_1Trame, o_fight_actor, Ci_paf_dmg_pince, OBJ_SightGet())
							CR_Paffed_Actor_Add(o_fight_actor)
							if( i_DBG_trace_etat )
							{
								DBG_TraceObject(OBJ_Me())
								DBG_TraceString(" paffe ")
								DBG_TraceObject(o_fight_actor)
								DBG_TraceString(" (grab raté)")
								DBG_TraceEOL()
							}
						}
					}
				}
				else
					macro_change_etat("CR_ETAT_IDLE")
			}
		}
		else
		{
			// J'AI UNE LIAISON !!! ========================================================
			if( ACT_ActionFinished() )
			{
				// choix de l'action à jouer ensuite
				if( i_modele == MODELE_Geant )
				{
					// les crabes géants dévorent leur proie sur place
					ACT_ActionSet(ti_action_mange)
					f_time_start_etat = 0.0
				}
				else
				{
					// les petits crabes trainent leur proie pour les manger plus loin
					f_grab_traine_duration = 0.0
					i_grab_traine_force_blesse = faux
					macro_change_etat("CR_ETAT_TRAINE")
				}
			}
		}
	}
	
	// ORIENTATION POUR GRABBER ---------------------------------------------------------------------
	if( ! i_grab_test_done )
		OBJ_BankingGeneralSet(MATH_VecBlendRotate(OBJ_SightGet(), @o_fight_actor OBJ_PosGet() - OBJ_PosGet(), 5 * TIME_GetDt()), macro_banking)
	else
		OBJ_BankingGeneralSet(OBJ_SightGet(), macro_banking)
}

