#include "MM_defines.var"

//=========================================================================
//                         DOCUMENTATION SUR LA BRIQUE "MONSTRE MARIN"
//--------------------------------------------------------------------------------------------------------------------------------------------------
// Y:\KK_Prod_site\Archive_Docs\Docs_Briques\Monstre_marin.doc
//=========================================================================

// Define at least one function in a track
// function track0 = "name"
// function track1 = "name"
function track2 = "MM_TRACK_Init"
// function track3 = "name"
// function track4 = "name"

separator "CONFIG"
private	int				i_mouvement = enum("IA only" 1 "IA + Anim" 2)
int							i_choix_du_marin = enum("le + proche du wp attaque" 1 "random" 2 )
object					o_wp_init = nobody		// wp d'apparition du monstre (sur le réseau si config = réseau)
object					o_water_Z = nobody				// wp pour indiquer le Z de l'eau
private	int				i_2D_virtual_network = vrai_faux
object					ao_corps[Ci_corps_nb]
private	vector		av_corps_size[Ci_corps_nb]
private	vector		av_corps_pos[Ci_corps_nb]
private	int				ai_corps_canal[Ci_corps_nb]
private	float			f_min_dmg_radeau_rasdeleau = 15			// dmg min pour annuler une attaque au ras de l'eau sur un radeau
private	float			f_min_dmg_radeau_renverse = 10			// dmg min pour annuler une attaque renverse sur un radeau
private	float			f_min_dmg_marin = 15							// dmg min pour annuler une attaque sur un marin tombé à l'eau
private	float			f_marin_pos_add_Z = 1.0						// Z à ajouter à la position de la tête d'un marin pour attaquer (pour faire sortir le monstre de l'eau)
private	float			f_radeau_pos_add_Z = 1.5						// Z à ajouter à la position du radeau pour attaquer (pour faire sortir le monstre de l'eau)
private	float			f_attack_sortdeleau_H = 15.0					// phase 1
private	float			f_attack_sortdeleau_V = 2.0
private	float			f_attack_replonge_H = 8.0						// phase 2
private	float			f_attack_replonge_V = - 2.0
private	float			f_attack_renverse_H = 0.0						// phase 3
private	float			f_attack_renverse_V = 1.5
private	float			f_attack_souleve_H = 3.0						// phase 4
private	float			f_attack_souleve_V = 3.0
private	float			f_plonge_dist_H = 10.0					// distance de progression horizontale pour plonger après une attaque (réussie ou repoussée)
private	float			f_plonge_dist_V = - 5.0				// distance de progression verticale pour plonger après une attaque (réussie ou repoussée)
private	float			f_attack_dist_wp_H = 15.0			// distance horizontale au wp d'attaque des marins pour me positionner pour lancer l'attaque
private	float			f_attack_dist_wp_V = - 3.0			// distance verticale au wp d'attaque des marins pour me positionner pour lancer l'attaque
private	float			f_speed_idle_max = 10.0						// vitesse (m/s) au repos
private	float			f_speed_idle_blend = 0.5						// coef DT d'accélération / frein pour passer en vitesse idle
private	float			f_speed_plonge_max = 12.0			// vitesse (m/s) pour plonger après une attaque
private	float			f_speed_plonge_blend = 2.0			// coef DT d'accélération / frein pour plonger après une attaque
private	float			f_speed_renverse_max = 12.0	// 8.0		// vitesse (m/s) pour plonger après une attaque
private	float			f_speed_renverse_blend = 2.0			// coef DT d'accélération / frein pour plonger après une attaque
private	float			f_occluder_largeur = 2.0				// distance de sécurité par rapport aux occluders
private	float			f_speed_attack_marins_max = 6.0			// 4.0
private	float			f_speed_attack_marins_blend = 0.5		// 0.25
private	object		o_wp_fuite = nobody						// wp où le monstre va fuit après une annulation d'attaque (paf)
private	object		o_dup_wp_occluder = nobody		// wp de destination temporaire (mode occluder)
private	vector		v_attack_axis
// ACTORS
private	object		o_jack
private	object		o_jimmy
private	object		o_denham
private	object		o_hayes
// GRAB
private	vector		v_grabbed_obj_pos
private	object		o_grabbed_actor
private	messageid	mid_grab
private	float			f_time_grab
// SPECIAL FLAGS
separator "SF"
int							i_SF_NePasSeRejouerSiMort		= vrai_faux		// Flag qui indique si l'acteur gere ou pas un SF de mort
private 	int				i_SF_AlreadyDead						= -1				// N° du SF (Alloué Dynamiquement)
// TYPE DE MOUVEMENT
private	int				i_DBG_move = enum("CHAINE" 0 "SNAKE" 1)
private	int				i_DBG_chaine_end_snake_nb = 0
private	int				i_DBG_interpolation = enum("Beziers" 0 "Lineaire" 1)
// ETATS
private 	int				i_etat_courant = -1									// état courant
private 	function 		fct_etat_courant = nofunc							// fonction de l'état courant
private 	function 		fct_etat_main = nofunc								// fonction de l'état principal
private 	int				i_etat_ancien = -1									// dernier état
private 	int				i_sort_etat = faux										// test sortie d'état
private 	float			f_time_start_etat = 0.0
// VITESSE
separator "VITESSE"
private	float			f_speed_cur = 0.0
private	float			f_speed_max
private	float			f_speed_blend
private	float			f_speed_inclinaison_coef
private	float			f_speed_direction_coef
private	float			f_speed_blend_secure
// POSITION
private	int				i_hors_de_l_eau_flag = faux
private	float			f_dans_l_eau_duree = faux
// MODULES (IMPORT FROM PNJ_SCOLO)
private	int				i_modules_nb
private 	object		ao_modules[20]
private 	float			af_modules_dist_to_prev[20]
private 	float			af_modules_dist_to_head[20]
private 	vector		av_modules_speed[20]
private 	int				i_no_snake_modules_nb = 1
// VIRTUAL NET (IMPORT FROM PNJ_SCOLO)
private 	int				i_virtual_net_last_wp_index = -1
private 	float			f_virtual_net_offset
//private 	int				ai_virtual_wp_flag[100]
//private 	float			af_virtual_link_length[100]
private 	vector		av_virtual_wp_pos[100]
private 	vector		av_virtual_wp_sight[100]
//private 	vector		av_virtual_wp_banking[100]
//private	int				i_force_pos_update_flag = faux
// RAGDOLL (IMPORT FROM PNJ_SCOLO)
private	float			f_rigidity_coef					= 5.0
private	float			f_n2_dist						= 0.6
private	float			f_n3_dist						= 0.9
private 	float			af_bone_ground_col_timer[15]
private 	vector		av_bone_col_normal[15]
// WATER TEST
separator "WATER"
int							WTR_activation			= vrai_faux
color						WTR_sky_color
color						WTR_bottom_color
color						WTR_water_color
float						WTR_Waves_Height		= 0.15		// 0.075
float						WTR_Choppy				= 0.4			// 0.2
float						WTR_Tiling					= 0.04		// 0.02
float						WTR_Speed				= 0.5			// 0.15
float						WTR_Water_Height		= 18.0
float						WTR_Wave_dir			= 2.0			// 1.0
float						WTR_Wave_Prop			= 2.1			// 2.0
float						f_WTR_Waves_Height	= 0.0
// VISION
private	int				i_vision_check_flag
private 	int				i_perceived_actor_nb
private 	object		ao_perceived_actor[Ci_perceived_nb]
private 	messageid	amid_perceived_actor[Ci_perceived_nb]
// SCRIPT
separator "SCRIPT"
private 	int				i_script_nb = 0									// nb de scripts mémorisés
private	message	amsg_script[Ci_script_nb]						// tableau des messages scripts mémorisés
private 	int				i_script_indice = 0								// indice dans le tableau du script en cours d'exécution
private	object		o_fight_actor										// acteur pour les tests zde fight/corps
private 	int				i_script_next = faux_vrai						// si vrai, autorise à passer au script mémorisé suivant
private 	int				i_script_running = vrai_faux					// si vrai, est en train d'exécuter un script mémorisé
private	object		o_script_move_wp = nobody					// wp de destination du script en cours (wp du réseau, wp hors réseau, gao à attaquer)
private	float			f_script_move_in_time_temps = 0.0
private	float			f_script_move_in_time_dist = 0.0
private	float			f_script_move_in_time_cpt = 0.0
private	int				i_script_reinit_etat = faux
// PAFS
private	float			f_HP_cur
private	float			f_HP_max = 80.0
private	int				i_paf_check_flag
private	vector		v_paf_speed
private	float			f_paf_speed_blend = 5.0
private	float			f_paf_applic = 0.0
private	float			f_paf_applic_blend = 5.0
private	float			f_attaque_paf_dmg_cumul = 0.0
private	int				i_move_mode			// mode de déplacement
private	int				i_attack_mode
// BOUCHE
private	object		o_machoire
private	vector		v_bouche_repos = Cv_NullVector
private	vector		v_bouche_current = Cv_NullVector
private	float			f_bouche_ouvre_angle
private	float			f_bouche_ferme_angle
// DYNAMITE
private	object		o_dynamite		// dynamite gobbée
private	float			f_dynamite_pos_coef = 0.0
private	int				i_paf_dynamite_gobee_flag = faux
private	int				i_paf_dmg_stop_attack_flag = faux
// MORT
private	float			f_time_mort = 0.0
// INTERET
private	object		ao_interet_target[Ci_radeau_max_passager_nb]
private	int				i_interet_target_nb = 0
private	messageid	amid_interet[Ci_radeau_max_passager_nb]
// SIGHT
private	float			f_sight_coef_accel = 1.0
private	vector		v_eau_pos
private	float			f_jump_hauteur
private	vector		v_jump_sight
private	int				i_flag_jump_now = faux
private	int				i_flag_jump = faux
private	float			f_jump_eau_Z = 0.0
private	int				i_attack_radeau_flag = faux
private	int				i_en_fuite = faux
private	int				i_immersion = faux
private	int				i_dynamite_just_gobee = faux
private	int				i_attack_phase = 0
private	int				i_attack_marins_flag = faux
//private	object		o_attack_marins_wp = nobody
private	object		o_fight_move_wp = nobody
private	float			f_time_dynamite_gobee = 0.0
private	int				i_attack_type = 0
private	int				i_grabbed_actor_killed = faux
private	int				f_time_depl_attack_joueur = 0.0
private	vector		v_move_pos_start
private	object		o_script_move_after_attack_wp = nobody		// wp dans le script qui m'indique ou aller après une attaque
private	object		o_script_attack_marin_wp = nobody				// wp dans le script qui m'indique ou aller pour niaker les marins tombés à l'eau
private	vector		v_move_pos_dest
//private	vector		v_move_pos_dest_cur
// test anim
private	float			f_angle_oscillation
private	float			f_sinus_paf_horizon = 0.0
private	float			f_sinus_paf_banking = 0.0
private	float			f_sinus_paf_visee = 0.0
private	float			f_sinus_paf_coef = 0.0
// DEBUG
separator "DEBUG"
int							i_DBG_trace_paf = vrai_faux							// trace dans le log les pafs reçus par le monstre
int							i_DBG_trace_IA = vrai_faux							// trace le comportement du perso
int							i_DBG_trace_script = faux_vrai						// trace les scripts exécutés
int							i_DBG_display_infos = vrai_faux						// affiche des infos à l'écran
int							i_DBG_track_test = enum( "0 aucun" 0 "1 tout droit" 1 "2 ronde" 2 "3 pos interm" 3 )
object					o_DBG_wp = nobody
// REGARD
private 	vector		v_look_pos
private 	vector		v_look_pos_cur
private	object		o_bone_cou
private	object		o_bone_tete
private	vector		v_cou_banking_init
private	vector		v_tete_banking_init
private	int				i_regard_flag
// SINUS
separator "SINUS"
float						f_sinus_frequence = 2.75
float						f_sinus_ampleur = 0.2
float						f_speed_test = 8
private	float			f_time_paf_sinus_horiz
private	float			f_frequence
private	float			f_ampleur
private	vector		v_sight_avant_sinus
private	float			f_paf_sinus_banking
private	float			f_paf_sinus_horiz
private	float			f_bouche_blend = 0.0
private	int				i_bouche_ouverte_flag = faux
private	int				i_fury_done = faux

// BODY MODE
private int				i_body_mode = -1
private int				i_body_old_mode = -1

