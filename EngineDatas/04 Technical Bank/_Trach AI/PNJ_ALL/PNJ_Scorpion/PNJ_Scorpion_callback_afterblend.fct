#include "PNJ_Scorpion_defines.var"

int			ti_i
int			ti_k

float		tf_coef

vector	tv_X
vector	tv_Y

object	to_tete

// ROTATION BASSIN EN FONCTION DES ACCUMULATION DE PAFS ===============================================
for (ti_i = 0; ti_i < 10; ti_i++)
{
	ti_k = MATH_Modulo(i_quat_index + ti_i, 10)

	if (af_quat_time[ti_k] == -1.0)
		continue	

	tf_coef = TIME_Get() - af_quat_time[ti_k]
	if (tf_coef < 1.0)	
	{
		tf_coef = MATH_FloatMin(tf_coef * 10.0, 1.0) * (1.0 - tf_coef)

		tv_X = @o_bassin MATH_VecGlobalToLocal(av_quat_start[ti_k])
		tv_Y = @o_bassin MATH_VecGlobalToLocal(av_quat_end[ti_k])

		@o_bassin OBJ_Rotate_FromTo(tv_X, MATH_VecBlend(tv_X, tv_Y, tf_coef * af_quat_coef[ti_k]))
	}
	else
	{
		af_quat_time[ti_k] = -1.0
	}
}


SPG2_AddSphere(COL_ZonePosGet(C_zdm_pied), 3.0)

if (OBJ_CapaTest(Capa_Blood))
{
	if (i_flag_can_gen_blood)
	{
		i_flag_can_gen_blood = faux
		to_tete = ANI_CanalObjectGet(0)
		LIBGFX_Mat_Blood(@to_tete OBJ_PosGet() + (@to_tete OBJ_BankingGet() * (0.5 * OBJ_ZoomGet())), 1.5)
	}
	
	OBJ_CapaSet(none, Capa_Blood)
}
else
{
	i_flag_can_gen_blood = vrai
}
