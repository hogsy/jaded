#include "PNJ_Scorpion_defines.var"

int				ti_i
int				ti_flag_dash
int				ti_flag_close_enough
int				ti_flag_occluder_used

float			tf_sign
float			taf_add_occ[1]
float			tf_dist_test

vector		tv_me_to_dest
vector		tv_pseudo_sight

object		to_jump_wp
object		tao_add_occ[1]

if (o_start_wp)
{
	if ( ! BV_ZoneTerritoire || @BV_ZoneTerritoire COL_BV_PointCollide(OBJ_PosGet()) )
		v_init_pos = OBJ_PosGet()
	else
		rayon_balade = 0.0

	while(o_start_wp)
	{
		v_way_destpos = @o_start_wp OBJ_PosGet()

		v_joy_dir = v_way_destpos
		v_joy_dir -= OBJ_PosGet()
		
		DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, v_joy_dir, color_blanc)	

		v_joy_dir.z = 0.0
	
		f_way_length = MATH_VecNorm(v_joy_dir)
	
		if (f_way_length < 2.0)
		{
			o_start_wp = WAY_NetNextWP(n_net, o_start_wp, 3, 0)
		}
		else if (f_way_length > 0.001)
		{
			f_joy_norm = 1.0
			v_joy_dir /= f_way_length
			break
		}
		else
		{
			f_joy_norm = 0.0
			v_joy_dir = OBJ_SightGet()
			break
		}
	}

	f_action_speed_coef = MATH_FloatBlend(f_action_speed_coef, on_net_speed_coef, 12.0 * TIME_GetDt())

	return
}

if ( ! BV_ZoneTerritoire || @BV_ZoneTerritoire COL_BV_PointCollide(v_way_destpos) )
	tv_me_to_dest = v_way_destpos
else
	tv_me_to_dest = v_init_pos

//ti_flag_occluder_used = WAY_LIB_Test_Occluder(OBJ_PosGet() + Cv_VerticalVector, OBJ_SightGet(), OBJ_ZoomGet() * 0.5, tv_me_to_dest, i_my_territory, tv_me_to_dest, to_jump_wp, &ao_budy[0], &af_budy_size[0], i_budy_nb)
ti_flag_occluder_used = WAY_LIB_Test_Occluder(OBJ_PosGet() + Cv_VerticalVector, OBJ_SightGet(), 1.0, tv_me_to_dest, i_my_territory, tv_me_to_dest, to_jump_wp, &tao_add_occ[0], &taf_add_occ[0], 0, C_Occl_Type_All)
//ti_flag_occluder_used = faux

DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, tv_me_to_dest - (OBJ_PosGet() + Cv_VerticalVector), color_jaune)

tv_me_to_dest -= OBJ_PosGet()
tv_me_to_dest.z = 0.0

f_way_length = MATH_VecNorm(tv_me_to_dest)

ti_flag_close_enough = vrai

switch(i_etat_courant)
{
	case ETAT_DEVORE :	
		tf_dist_test = Cf_Bite_Contact_Dist * f_size_coef
		break

	case ETAT_BITE :
		if (i_perceived_best_actor_index != -1 && ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Joueur)	
			tf_dist_test = Cf_Bite_Contact_Jack_Dist * f_size_coef
		else if (i_perceived_best_actor_index != -1 && ai_perceived_ID[i_perceived_best_actor_index] == C_ID_Kong)	
			tf_dist_test = Cf_Bite_Contact_Kong_Dist * f_size_coef
		else
			tf_dist_test = Cf_Bite_Contact_Dist * f_size_coef
		break
		
	default:
		tf_dist_test = Cf_Contact_Dist * f_size_coef
} 

if (ti_flag_occluder_used || f_way_length > tf_dist_test)
	ti_flag_close_enough = faux

if (ti_flag_close_enough)
	f_stop_duration += TIME_GetDt()
else
	f_stop_duration = 0.0

if (f_stop_duration > 0.2 || ! f_way_length )
{
	v_joy_dir = OBJ_SightGet()
	f_joy_norm = 0.0
}
else
{
	v_joy_dir = tv_me_to_dest / f_way_length
	f_joy_norm = MATH_FloatMin(f_way_length, 1.0)

	if (i_SND_flag_attaque_hors_champs && i_perceived_best_actor_index != -1 && f_joy_norm < 4.0 &&  ! f_on_screen_pourcent)
	{
		i_SND_flag_attaque_hors_champs = faux
		SND_RequestPlay(SND_BITE)
	}

	if (GRID_LIB_IsReachableFrom(OBJ_PosGet(), v_way_destpos, 0b0, 3.0, vrai, 0))
	{
		if (i_perceived_best_actor_index != -1 && ai_perceived_status[i_perceived_best_actor_index] & Ci_PERCEIVED_IS_DEAD)
		{
			f_action_speed_coef = MATH_FloatBlend(f_action_speed_coef, f_action_speed_max * 6.0, 12.0 * TIME_GetDt())
		}	
		else if (i_etat_courant == ETAT_BITE)
		{
			@get_global f_delay_since_last_scorpion_dash = 0.0
			@get_global o_last_scorpion_dasher = OBJ_Me()
		
			f_action_speed_coef = MATH_FloatBlend(f_action_speed_coef, f_action_speed_max * 6.0, 12.0 * TIME_GetDt())
		}
		else
		{	
			ti_flag_dash = vrai
			if (ti_flag_occluder_used)	
				ti_flag_dash = faux
			else if (i_perceived_best_actor_index == -1)
				ti_flag_dash = faux
			else if (f_on_screen_duration < 0.2)
				ti_flag_dash = faux
			else if (f_way_length < 4.0)
				ti_flag_dash = faux
			else if (!f_dash_duration && @get_global o_last_scorpion_dasher == OBJ_Me() && @get_global f_delay_since_last_scorpion_dash < 4.0)
				ti_flag_dash = faux
			else if (@get_global o_last_scorpion_dasher != OBJ_Me() && @get_global f_delay_since_last_scorpion_dash < 0.3)
				ti_flag_dash = faux
			else if (f_dash_duration > 3.0)
				ti_flag_dash = faux
			
		 	if (ti_flag_dash)
			{
				f_dash_duration += TIME_GetDt()
			
				@get_global f_delay_since_last_scorpion_dash = 0.0
				
				if (@get_global o_last_scorpion_dasher != OBJ_Me())
				{
					SND_RequestPlay(SND_ATTACK)
					@get_global o_last_scorpion_dasher = OBJ_Me()
				}
	
				f_action_speed_coef = MATH_FloatBlend(f_action_speed_coef, f_action_speed_max * 6.0, 12.0 * TIME_GetDt())
			}
			else
			{
				f_action_speed_coef = MATH_FloatBlend(f_action_speed_coef, f_action_speed_max, 6.0 * TIME_GetDt())
			}
		}
	}
//	else if (ti_flag_occluder_used)
//	{
//		f_action_speed_coef = MATH_FloatBlend(f_action_speed_coef, MATH_VecDotProduct(OBJ_SightGet(), v_joy_dir), 4.0 * TIME_GetDt())
//	}
	else
	{
//		DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, v_joy_dir * 2.0, color_cyan)	
	
		tv_pseudo_sight = v_joy_dir

//		tv_pseudo_sight = OBJ_SightGet()
//		MATH_VecSetHorzNormalize(tv_pseudo_sight)
		
		v_joy_dir = OBJ_SightGet()
		MATH_VecSetHorzNormalize(v_joy_dir)	

		if (MATH_AbsFloat(v_joy_dir.x) > MATH_AbsFloat(v_joy_dir.y))
		{
			v_joy_dir.x = MATH_FloatSign(v_joy_dir.x)
			v_joy_dir.y = 0.0
		}
		else
		{
			v_joy_dir.x = 0.0
			v_joy_dir.y = MATH_FloatSign(v_joy_dir.y)
		}

		tf_sign = MATH_FloatSign(MATH_VecCrossProduct(tv_pseudo_sight, v_joy_dir).z)
		if (!tf_sign)
			tf_sign = 1.0

		for (ti_i = 0; ti_i < 4; ti_i++)
		{
			if (!ti_i)
				DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, v_joy_dir * 3.0, color_rouge)
			else if (ti_i == 1)
				DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, v_joy_dir * 3.0, color_vert)
			else if (ti_i == 2)
				DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, v_joy_dir * 3.0, color_bleu)
			else
				DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, v_joy_dir * 3.0, color_jaune)

			if (GRID_LIB_IsReachableFrom(OBJ_PosGet(), OBJ_PosGet() + (v_joy_dir * 4.0), 0b0, 3.0, vrai, 0))
				break

			if (!ti_i || ti_i == 2)
			{
				v_joy_dir.z = v_joy_dir.x
				v_joy_dir.x = tf_sign * v_joy_dir.y
				v_joy_dir.y = -tf_sign * v_joy_dir.z
				v_joy_dir.z = 0.0
			}
			else
			{
				v_joy_dir *= -1.0
			}
		}

//		if (i_perceived_best_actor_index != -1 && ai_perceived_status[i_perceived_best_actor_index] & Ci_PERCEIVED_IS_DEAD)
//			f_action_speed_coef = MATH_FloatBlend(f_action_speed_coef, f_action_speed_max * 6.0, 12.0 * TIME_GetDt())
//		else
			f_action_speed_coef = MATH_FloatBlend(f_action_speed_coef, MATH_VecDotProduct(OBJ_SightGet(), v_joy_dir), 4.0 * TIME_GetDt())
	}

}

