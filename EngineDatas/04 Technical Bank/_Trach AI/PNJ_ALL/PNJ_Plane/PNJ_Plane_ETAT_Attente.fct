#include "PNJ_Plane_defines.var"

vector		tv_joy_dir

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}


if (i_etat_courant != ETAT_TEST)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_TEST
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	f_move_speed = 20.0

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}
	
// ANALYSE ===============================================================



// COMPORTEMENT =========================================================
f_move_length = f_move_speed * TIME_GetDt()

PNJ_Plane_Position_Set()
PNJ_Plane_Roll()

if (TEST_DO_CAMERA)
{
	tv_joy_dir = IO_JoyGetMove1()

	if (MATH_AbsFloat(tv_joy_dir.x) > 0.25)
		f_angle_Z -= MATH_FloatSign(tv_joy_dir.x) * 2.0 * TIME_GetDt()
	f_angle_Z = MATH_FloatLimit(f_angle_Z, -2.0, 2.0)
		
	if (MATH_AbsFloat(tv_joy_dir.y) > 0.25)
		f_angle_X -= MATH_FloatSign(tv_joy_dir.y) * 2.0 * TIME_GetDt()
	f_angle_X = MATH_FloatLimit(f_angle_X, -1.5, 0.25)
		
	VIEW_FocaleSet(0, 1.6)
	@o_camera OBJ_FlagInactiveSet(vrai)
	@o_camera OBJ_PosSet(OBJ_PosGet())
	@o_camera OBJ_SightGeneralSet(-OBJ_SightGet(), OBJ_BankingGet())
	@o_camera OBJ_RotateLocalZ(f_angle_Z)
	@o_camera OBJ_RotateLocalX(f_angle_X)
	@o_camera VIEW_AssignObject(0)
}

PNJ_Plane_Shoot()