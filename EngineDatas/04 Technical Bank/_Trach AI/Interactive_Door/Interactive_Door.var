#include "Interactive_Door_defs.var"

//=================================================
//                   
//                   INTERACTIVE_DOOR
//
//-------------[ CAPA ]------------------------------------------------------------------------
//	CAPA_0 : interrupter initialisé
//	CAPA_1 : demande à denham
// 	CAPA_2 : denham a analysé le code
//  CAPA_3 : le code a été activé
//  CAPA_4 : script denham terminé
//  CAPA_5 : porte s'ouvre
//  CAPA_6 : porte se ferme
//  CAPA_7 : porte statique
//	CAPA_8 : 1 = porte ouverte, 0 : porte fermée
//	CAPA_9 : 1 = déclenche l'ouverture de la porte
// 	CAPA_10 : 1 = porte bloquée dans l'état
// 	CAPA_13 : parameter change, compute vars
//-------------[ CAPA SUR LEVIER ]----------------------------------------------------
// 	CAPA_0 : levier en place
//	CAPA_5 : indique que le perso peut tenter de recaler sa main dessus
// 	CAPA_10 : jack commence à tirer ou pousser mais c bloqué => pour jouer le son
//	CAPA_11 : jack tire ou pousse mais c bloqué
// 	CAPA_15 : l'action de mettre le levier a été faite
//-------------[ CAPA SUR PILIER ]----------------------------------------------------
//	CAPA_0 : interaction utilisable ou non
//	CAPA_1 : Jack en train de pousser ou requete pour que perso pousse
//	CAPA_2 : bloqué
//	CAPA_3 : Le pilier tourne de l'extérieur (Jack)
//	CAPA_4 : Le pilier va bientot tourner (tout le monde pousse mais blocage pour animation)
//	CAPA_5 : pilier à sens inversé
//	CAPA_7 : Jack a saisi le levier
//	CAPA_8	: un autre perso a saisi le levier
//=================================================


// Define at least one function in a track
// function track0 = "name"
function track1 = "InteractiveDoor_init"
// function track2 = "name"
// function track3 = "name"
// function track4 = "name"

				int				mi_Type = enum("Hayes"0 "Denham"1 "Pilar"2 "PLF Rayman"3)

				trigger		mt_Activate										// trigger dès qu'il passe à vrai, l'IA démarre
				trigger 		mt_JackDontForceInteraction					// si à vrai : jack qui utilise un levier ne force plus l'activation

				object		mo_OpeningWP									// for opening position, door init pos is closed pos
				object		mo_PivotWP										// for ratation around another pivot
				trigger		mt_OpeningTest									// 1 : door is opening, 0 : door is closing
				float			mf_OpeningSpeed_inmeterpersecond		// opening speed
				float 			mf_ClosingSpeed_inmeterpersecond		// closing speed

				int				mi_Move = faux_vrai
				int				mi_Rotate = vrai_faux

				int				mi_BlockWhenOpened = vrai_faux
				int				mi_BlockWhenClosed = vrai_faux
				int				mi_ModeHumain = vrai_faux
//				int				mi_NoColmapWhenOpened = vrai_faux

				int				mi_no_speech = vrai_faux

//--------( SF )----------
separator "SF"
				int				SF_i_NePasRejouerSiMort = vrai_faux
	private	int				SF_i_AlreadyDead = -1
			
separator "Grid params"
				object		mo_TagRef
				int				mi_TagEtage
				int				mi_TagX
				int				mi_TagY
	private	int				mi_TagDone

separator "Pilar Door"
				int				mi_PD_NbPilar = 0
				object		mao_PD_Pilar[ 4 ]
				object		mao_PD_PilarLevier[ 4 ]
				int				mai_PD_SFLevierIsHere[ 4 ]
				int				mi_PD_State = 0
				float			mf_PD_SpeechDistance = 10
				trigger		mt_PD_InteractionOk
				int				mi_PD_UsePreferedHumain = vrai_faux
				object		maao_PD_PreferedHumain[ 4 ][ 4 ]							
	private	int				mi_PD_PilarInterract[ 4 ] 											// 0 : none, 1 : tous sauf hayes, 2 : juste hayes, 3 : tous
	private	int				mi_PD_SpeechState[ DOOR_SPEECH_Number ]
	private	float			mf_PD_SpeechTimer[ DOOR_SPEECH_Number ]
	private	int				mi_PD_NbLever
	private	int				mi_PD_NbPilarReady
	private	float			mf_PD_RotateBlockedOld[ 4 ]
	private	float			mf_PD_rotspeed_open
	private	float			mf_PD_rotspeed_close
			

separator "Sound"
	private	int				mi_Snd_LoopOpen
	private	int				mi_Snd_LoopClose

separator "Private - computing vars"
	private	float			mf_Ratio
	private	float			mf_OpeningRatio
	private	float			mf_ClosingRatio
	private	int				mi_Opened
	private	int				mi_Speech
	private	object		mo_SpeechWho

	private 	object		move_net_1
	private 	object		move_net_2

	private 	vector		mv_SightInit
	private 	vector		mv_BankingInit
	private 	vector		mv_PivotPos
	
	private	object		maao_Humain[4][ 10 ]
	private	int				mi_HumainNb = 0
	private	int				mi_HumainInit = 0
	
	private	int				mi_JackForceActivation
	private 	object		mo_main_actor
	private 	int				i_block_15
	

private	int			i_trigger_reinit_flag
private	vector	v_pos_init
