#include "KNG_Defines.var"

int 		ti_i
int			ti_done	
int 		ti_action
int			ti_nb_javelin_to_validate_wave

object	to_head
object	to_target
object	to_main
object	to_throwable_weapon 
object	to_lock_target

vector	tv_temp
vector	tv_impulsion
vector	tv_gravity
vector	tv_target_pos
vector	tv_orient
vector 	tv_MyPos

float		tf_random
float 		tf_range
float 		tf_time

message tm_msg

#define Cf_grenade_XY_friction				1.0
#define Cf_grenade_hauteur_impulsion	1.0

// SORTIE ETAT
if (i_sort_etat)
{
	i_sort_etat = faux
	return
}


// ENTREE ETAT
if (i_etat_courant != ETAT_Digwazai)
{
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Digwazai
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	f_time_start_etat = 0.0

	for (ti_i = 0; ti_i < i_number_of_natives; ti_i++)
	{
		ai_native_has_thrown_javelin[ti_i] = faux
		mai_AleadyTestedForInactiveDWZThrowRate[ti_i]	= faux
		
		//af_native_throwing_delay[ti_i] = MATH_RandFloat( 0.0,0.5 )
		//JIMI_NOTE: longer delay to allow for gradual rotation
		// KENY note : shorter delai to speed their launch&run
		af_native_throwing_delay[ti_i] = MATH_RandFloat( 0.0, 0.50) // more fucking random
	}
	
	for (ti_i = 0; ti_i < i_number_of_natives; ti_i++)
	{
		if (  ! ao_native_list[ti_i] )
			continue 
		
		if (@get_PNJ_KNative_path ao_native_list[ti_i] o_projectile == nobody)
			continue
				
		if ( @ao_native_list[ti_i] ACT_ActionGet() != Ci_AnimNative_Attente || 
			@ao_native_list[ti_i] ACT_ActionGet() != Ci_AnimNative_Attente_No_Spear)
		{
			if (@get_PNJ_KNative_path ao_native_list[ti_i] o_projectile)
				@ao_native_list[ti_i] ACT_ActionSet(Ci_AnimNative_Attente)
			else
				@ao_native_list[ti_i] ACT_ActionSet(Ci_AnimNative_Attente_No_Spear)
		}
	}
	
	i_nb_javelin_this_wave = 0
	i_wave_validee = faux
}
else
{
	f_time_start_etat += TIME_GetDt()
	for (ti_i = 0; ti_i < i_number_of_natives; ti_i++)
	{
		if (af_native_throwing_delay[ti_i] > 0.0)
			af_native_throwing_delay[ti_i] -= TIME_GetDt()
	}
}

ti_done = vrai

to_lock_target = nobody

for (ti_i = 0; ti_i < i_number_of_natives; ti_i++)
{
	if ( ! ao_native_list[ti_i] )
		continue

	if (@get_PNJ_KNative_path ao_native_list[ti_i]	o_projectile == nobody)
		continue
	
	if ( v_locked_position != Cv_NullVector )
		tv_orient = v_locked_position - @ao_native_list[ti_i] OBJ_PosGet()
	else if ( v_next_locked_position != Cv_NullVector )
		tv_orient = v_next_locked_position - @ao_native_list[ti_i] OBJ_PosGet()
	else
		tv_orient = @o_target_movement OBJ_PosGet() - @ao_native_list[ti_i] OBJ_PosGet()
	if( ! MATH_VecNullToler(tv_orient, 0.1) )
		tv_orient = MATH_VecNormalize(tv_orient)
	else
		tv_orient = @ao_native_list[ti_i] OBJ_SightGet()
	
	@ao_native_list[ti_i] OBJ_BankingGeneralSet( MATH_VecBlend( ( @ao_native_list[ti_i] OBJ_SightGet() ), tv_orient, TIME_GetDt() * 10.0 ), Cv_VerticalVector )
	
	if ( ! ai_native_has_thrown_javelin[ti_i] && !mai_AleadyTestedForInactiveDWZThrowRate[ti_i] && ( OBJ_CapaTest( Ci_Capa_Normal_Attack ) ) && ( ( MATH_RandFloat( 0.0, 1.0 ) ) <= mf_InactiveDWZFireRate ) )
		ai_native_has_thrown_javelin[ti_i] = vrai	// pretend we've already thrown it
	
	mai_AleadyTestedForInactiveDWZThrowRate[ti_i]	= vrai
		
	if (af_native_throwing_delay[ti_i] <= 0.0 && 
		@ao_native_list[ti_i] ACT_ActionGet() != Ci_AnimNative_Lance &&
	    ! ai_native_has_thrown_javelin[ti_i])
	{	
		@ao_native_list[ti_i] ACT_ActionSet(Ci_AnimNative_Lance)
	}
	else if (@ao_native_list[ti_i] ACT_ActionGet() == Ci_AnimNative_Lance && 
			  @ao_native_list[ti_i] ACT_ActionItemGet() == 1 && 
			  ! ai_native_has_thrown_javelin[ti_i])
	{
		tf_range = Cf_bambou_range
		tv_gravity = Cv_NormalGravity
		
		to_throwable_weapon = @get_PNJ_KNative_path ao_native_list[ti_i] o_projectile
		if( ! to_throwable_weapon )
			return
		
		to_target = o_target_movement
		if ( i_target_zone == Ci_target_zone_tete )
		{
			to_head = @to_target ANI_CanalObjectGet(Anim_Canal_Tete) 
			if (to_head)
				to_target = to_head
		}
		else if ( i_target_zone == Ci_target_zone_corps )
		{
			to_head = @to_target ANI_CanalObjectGet( Anim_Canal_Torse )
			if (to_head)
				to_target = to_head
		}
		
		tv_target_pos = @to_target OBJ_PosGet()
		
		if (OBJ_CapaTest(Ci_Capa_Digwazai_Attack)) // digwazai
		{
			tv_target_pos.x += MATH_RandFloat(-f_radius_digwazai,f_radius_digwazai)	
			tv_target_pos.y += MATH_RandFloat(-f_radius_digwazai, f_radius_digwazai)	
		}
		else if (OBJ_CapaTest(Ci_Capa_Normal_Attack)) // random throw
		{
			tv_target_pos.x += MATH_RandFloat(-f_radius_normal,f_radius_normal)	
			tv_target_pos.y += MATH_RandFloat(-f_radius_normal, f_radius_normal)			
		}
		else
		{
			tv_target_pos.x += MATH_RandFloat(-f_radius_normal,f_radius_normal)	
			tv_target_pos.y += MATH_RandFloat(-f_radius_normal, f_radius_normal)	
		}
		
		if (v_locked_position != Cv_NullVector)
			tv_target_pos = v_locked_position
		
		tv_MyPos = OBJ_PosGet()
		tv_target_pos.z += ( ( tv_target_pos.z - tv_MyPos.z ) * 0.8 )
		
		// lock and kill
		if (o_target_movement == o_ann)
		{
			if (i_nb_wave >= i_nb_wave_kill_ann - 1)
				to_lock_target = o_target_movement 
			else
			{
				to_lock_target = nobody

				tf_random = MATH_RandFloat(Cf_imprecision_on_ann,Cf_imprecision_on_ann + 1.0)
				if (MATH_RandInt(0,2))
					tf_random = -tf_random
				tv_target_pos.x += tf_random
				tv_target_pos.y += tf_random
			}
		}
		else if( o_target_movement == o_kong )
			to_lock_target = o_target_movement
		
		// JAVELIN IMPULSION
		tf_time = 0.0
		tv_impulsion = DYN_LIB_ImpulsionGet_Friction
		(
			@to_throwable_weapon OBJ_PosGet(), 
			tv_target_pos,
			Cv_NormalGravity, 
			Cf_grenade_XY_friction,
			tf_time,
			0,
			0.0
		)
		tf_time *= 0.5
		tv_impulsion = DYN_LIB_ImpulsionGet_Friction
		( 
			@to_throwable_weapon OBJ_PosGet(), 
			tv_target_pos,
			Cv_NormalGravity, 
			Cf_grenade_XY_friction,
			tf_time,
			0,
			0.0
		)
		@to_throwable_weapon OBJ_SightSet( tv_impulsion )
		
		// Infos pour le javelot
		MSG_SetNull(tm_msg)
		tm_msg.msg_id = msg_id_grenadelaunch
		tm_msg.msg_sender = ao_native_list[ti_i] 
		tm_msg.msg_vec1 = tv_impulsion
		tm_msg.msg_vec2 = tv_gravity
		tm_msg.msg_vec3 = cvector(Cf_grenade_XY_friction, Cf_grenade_XY_friction, Cf_grenade_XY_friction)
		tm_msg.msg_int2 = C_PAF_KK_Digwazai 
		
		// TO KILL WE NEED (CAPA 10 & TARGET) OR NO CAPA 10
		
		// spécifie que c un native qui lance (ne pas paffer par erreur)
		@to_throwable_weapon OBJ_CapaSet(Ci_KJavelinCapa_NativeLaunch, none)

		if( ! OBJ_CapaTest(Ci_Capa_Normal_Attack) )
		{
			// lock and kill only if difw attack but not on std attack
			if (to_lock_target)
				tm_msg.msg_gao4 = to_lock_target		// target locakée (ne pas paffer par erreur)
		}
		
		@to_throwable_weapon MSG_Send( tm_msg )
		ai_native_has_thrown_javelin[ti_i] = vrai
		mai_AleadyTestedForInactiveDWZThrowRate[ti_i]	= faux
		@get_PNJ_KNative_path ao_native_list[ti_i] o_projectile = nobody
		KNativeGroup_ThrownJavelinInc()
	}
	else if (ai_native_has_thrown_javelin[ti_i] && @ao_native_list[ti_i] ACT_ActionFinished())
	{
		if (@get_PNJ_KNative_path ao_native_list[ti_i] o_projectile)
			@ao_native_list[ti_i] ACT_ActionSet(Ci_AnimNative_Attente)
		else
			@ao_native_list[ti_i] ACT_ActionSet(Ci_AnimNative_Attente_No_Spear)
	}
	
	if (ai_native_has_thrown_javelin[ti_i] == faux || 
		(@ao_native_list[ti_i] ACT_ActionGet() == Ci_AnimNative_Lance && ! @ao_native_list[ti_i] ACT_ActionFinished()) )
	{
		ti_done = faux
	}
}

if (ti_done)
{
	// VINC : on doit valider une vague avec un nb de javelots envoyés.
	ti_nb_javelin_to_validate_wave = i_nb_javelin_to_validate_wave
	if( i_number_of_natives < ti_nb_javelin_to_validate_wave )
		ti_nb_javelin_to_validate_wave = i_number_of_natives
	if( i_nb_javelin_this_wave >= ti_nb_javelin_to_validate_wave )
		i_nb_wave++
	
	//JIMI_NOTE: in case a DWZ attack is requested before all the natives are done, we store and use the next DWZ target so its not lost
	if ( v_next_locked_position == Cv_NullVector )
		v_locked_position = Cv_NullVector
	else
		v_locked_position = v_next_locked_position
	
	v_next_locked_position = Cv_NullVector
	
	if (i_action == Ci_Throw_and_Go)
	{
		i_wp_already_set = 1
		OBJ_CapaSet(none, Ci_Capa_Digwazai_Attack)
		AI_TrackCurChangeNow("KNG_ETAT_Movement")
	}
	
	if (OBJ_CapaTest(Ci_Capa_Movement))
	{
		OBJ_CapaSet(none, Ci_Capa_Movement)
		AI_TrackCurChange("KNG_ETAT_Movement")
	}
	else if (OBJ_CapaTest(Ci_Capa_Digwazai_Attack))
	{
		OBJ_CapaSet(none, Ci_Capa_Normal_Attack)
		OBJ_CapaSet(none, Ci_Capa_Digwazai_Attack)
		AI_TrackCurChange("KNG_ETAT_Reload")
	}
	else if (OBJ_CapaTest(Ci_Capa_Normal_Attack))
	{
		OBJ_CapaSet(none, Ci_Capa_Normal_Attack)
		AI_TrackCurChange("KNG_ETAT_Reload")
	}
}

