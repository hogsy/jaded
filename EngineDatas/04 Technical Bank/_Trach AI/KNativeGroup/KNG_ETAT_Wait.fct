#include "KNG_Defines.var"

int ti_i
message tm_msg
int	ti_total_frame, ti_frame
vector tv_sight
object to_main
float tf_dot

// SORTIE ETAT
if (i_sort_etat)
{
	i_sort_etat = faux
	return
}


// ENTREE ETAT
if (i_etat_courant != ETAT_Wait)
{
	i_etat_ancien = i_etat_courant
	i_etat_courant = ETAT_Wait
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	f_time_start_etat = 0.0
	
	for (ti_i = 0; ti_i < i_number_of_natives; ti_i++)
	{
		if ( ao_native_list[ti_i] && ((( @ao_native_list[ti_i] ACT_ActionGet() != Ci_AnimNative_Attente || @ao_native_list[ti_i] ACT_ActionGet() != Ci_AnimNative_Attente_No_Spear )) || i_etat_ancien == -1))
		{
			if (@get_PNJ_KNative_path ao_native_list[ti_i] o_projectile)
				@ao_native_list[ti_i] ACT_ActionSet(Ci_AnimNative_Attente)
			else
				@ao_native_list[ti_i] ACT_ActionSet(Ci_AnimNative_Attente_No_Spear)
		
			ti_total_frame = @ao_native_list[ti_i] ANI_NbFrameGet(0)	
			ti_frame	= MATH_RandInt(0,ti_total_frame)
			@ao_native_list[ti_i] ANI_CurrentFrameSet(0,ti_frame)
				
		}

		af_native_throwing_delay[ti_i] = MATH_RandFloat(0,1.5)

	}
	
	if (o_cur_wp && @o_cur_wp OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_DesignStruct))
		f_wait_time = o_cur_wp.des_float1	
	else
		f_wait_time = 0.0
}	
else
{
	f_time_start_etat += TIME_GetDt()
	
	for (ti_i = 0; ti_i < i_number_of_natives; ti_i++)
	{
		if (af_native_throwing_delay[ti_i] > 0.0)
			af_native_throwing_delay[ti_i] -= TIME_GetDt()
	}

}

if (f_wait_time > 0.0)
{
	if (f_time_start_etat < f_wait_time)
		return
}

if (o_target_movement)
{
	for (ti_i = 0; ti_i < i_number_of_natives; ti_i++)
	{
		if (ao_native_list[ti_i])
		{
			tv_sight= @o_target_movement OBJ_PosGet() - @ao_native_list[ti_i] OBJ_PosGet()
		
			if ( ! MATH_VecNullEpsilon(tv_sight))
				tv_sight = MATH_VecNormalize(tv_sight)
		
			tf_dot = 	MATH_VecDotProduct(@ao_native_list[ti_i] OBJ_SightGet(), tv_sight)
			tv_sight = MATH_VecBlend(@ao_native_list[ti_i] OBJ_SightGet(),tv_sight, TIME_GetDt())
	
			if (tf_dot < 0.5)
				@ao_native_list[ti_i] OBJ_BankingGeneralSet( tv_sight ,Cv_VerticalVector ) 
		}
	}
}
      
if (AI_TriggerIsValid(tr_movement_trigger) )
{
 	//JIMI_NOTE added these flags to make 'em move again if they respawn...if move triggered once, we prolly want it done again when the guys start at their initial position
 	if ( call_trigger( tr_movement_trigger ) || ( mi_KeepMovementTriggered && mi_JustDied ) )
	{
		mi_KeepMovementTriggered 	= vrai
		mi_JustDied						= faux
		
		AI_TrackCurChange("KNG_ETAT_Movement")
	
		if ( o_target_movement == nobody)
		{
			tm_msg = AI_TriggerGetMsg(tr_movement_trigger)
			o_target_movement = tm_msg.msg_gao5
			
		}
	}
}


// check for digwazai request
//JIMI_NOTE: first check that we are allowed a DWZ here (Capa 12 on means no DWZ allowed at a WP)
//if ( !o_cur_wp || !(@o_cur_wp OBJ_CapaTest( Ci_Capa_DWZNotAllowed ) ) )
if ( mi_AllowDWZ )
{
	if( OBJ_CapaTest(Ci_Capa_Digwazai_Attack) )
	{
		AI_TrackCurChangeNow("KNG_ETAT_Digwazai")
	}
	else if ( ! OBJ_CapaTest( Ci_Capa_Cancel_Attack))
	{
		// ON PEUX INTERDIRE LES ATTAQUES NORMALES
		if( OBJ_CapaTest(Ci_Capa_Normal_Attack) )
		{
			AI_TrackCurChangeNow("KNG_ETAT_Digwazai")
		}
	}
}


if (OBJ_CapaTest( Ci_Capa_Movement ) || (o_cur_wp && @o_cur_wp OBJ_CapaTest(Ci_Capa_Action) == 0))
{
	OBJ_CapaSet(0, Ci_Capa_Movement)
	
	if (o_target_movement == nobody)
	{
		DBG_Warning("NativeGroup : Not o_target_movement set, defaulting to Kong")
		o_target_movement = get_kong
	}

	AI_TrackCurChangeNow("KNG_ETAT_Movement")
}

