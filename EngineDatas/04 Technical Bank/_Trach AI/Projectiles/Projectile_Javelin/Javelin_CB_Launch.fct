#include "_Projectile_Javelin_defs.var"

vector 	v
object 	to_obj, o
int			ti_plug, ti_canal
int			ti_snd
vector	tv_normal
vector	tv_impact_pos
vector	tv_temp, tv_temp1
float		tf_temp, tf_dist, tf_range
int			ti_paf


ti_plug = faux
o_plug_to = nobody
o = nobody

//---------( GFX )--------------------------------------------
if (mi_flamme)
	AI_Execute( "Javelin_GFX_fire" )
	
//--------( Lancers de rayon sur les objects qui sont susceptibles d'avoir des obbox )--------------------
if( !MATH_VecNullEpsilon(OBJ_PosGet() - v_last_pos) )
{
	tv_temp1 = mf_ContactPointDistance* OBJ_SightGet()
	tv_temp = v_last_pos + tv_temp1
	tv_temp1 += OBJ_PosGet() 
		
	to_obj = COL_RayObject_Vector(tv_temp, tv_temp1 - tv_temp, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_visuel_and_bone_volumes)
	
	if (to_obj && COL_RayObject_ActorGet() != mo_Sender) 
	{
		o_plug_to = to_obj
		tv_impact_pos = COL_RayObject_PosGet()
		to_obj = COL_RayObject_ActorGet()
		o = to_obj
		o_plug_to_master = to_obj

		EVENT_AddEventSound(C_EVENT_FILTER_Tir, OBJ_Me(), Cf_EVENT_Duree_1Trame, OBJ_PosGet(), 5.0)
		
		if(@to_obj AI_IsModel("KingKong/Humain"))
		{
			i_GFX_impactcolor = 0xFF
			AI_Execute("Javelin_GFX_Impact")
		}
		else
		{
			ti_snd = COL_RayObject_SoundGet()
			if (ti_snd && ti_snd < COL_C_Snd_Number)
				SND_RequestPlay( ti_snd )
			else
			{
				ti_canal = COL_RayObject_CanalGet()
				if (ti_canal != -1)
					ti_snd = COL_C_Snd_Flesh
				SND_RequestPlay( SND_impact_dirt )
			}
			switch( ti_snd )
			{
				case COL_C_Snd_None :
				case COL_C_Snd_Dirt :
				case COL_C_Snd_Veget : 
					i_GFX_impactcolor = 0xFF808080
					ti_plug = vrai
					break
				case COL_C_Snd_Flesh :
					i_GFX_impactcolor = 0xFF
					ti_plug = vrai
					break
				case COL_C_Snd_Stone	: 
					i_GFX_impactcolor = 0xFF808080
					AI_Execute("Javelin_GFX_Impact")
					break
				case COL_C_Snd_Water	:
					mi_flamme = 0
					if (i_GFX_Fire != -1)
					{
						GFX_Seti( i_GFX_Fire, 13106, 0)	
						i_GFX_Fire = -1
					}
					o = nobody
					break
			}
		}
	}
	tv_temp = OBJ_PosGet() - v_pos_de_lancement
	tf_dist = MATH_VecDotProduct(tv_temp,tv_temp)
	tf_range = @"univ" Weapon_af_pointblankrange[ Ci_weapon_ID_bambou  ]
	if ( tf_dist < (tf_range * tf_range) ) 
		ti_paf = @"univ" Weapon_af_Damage[ Ci_weapon_ID_bambou ][ 0 ]
	else
	{		
		tf_range = @"univ" Weapon_af_middlerange[ Ci_weapon_ID_bambou ]
		if ( tf_dist < (tf_range * tf_range) ) 
			ti_paf = @"univ" Weapon_af_Damage[ Ci_weapon_ID_bambou ][ 1 ]
		else
		{
			// si le javelot vient d une PluieDeLances, on laisse le plug a vrai peu
			// importe la distance
			if (! (OBJ_CapaGet() & OBJ_Capa_2))
				ti_plug = faux
				
			ti_paf = @"univ" Weapon_af_Damage[ Ci_weapon_ID_bambou ][ 2 ]
		}
	}
}

//---------( plug ? )---------
if ( ti_plug )
{
	OBJ_PosSet( tv_impact_pos -  (OBJ_SightGet()*0.6) )
	
	v_plug_local = @o_plug_to MATH_VecGlobalToLocal(OBJ_PosGet() - @o_plug_to OBJ_PosGet())
	v_plug_sight = @o_plug_to MATH_VecGlobalToLocal(OBJ_SightGet())
	v_plug_banking = @o_plug_to MATH_VecGlobalToLocal(OBJ_BankingGet())
	
	EVENT_AddEventPaf(C_EVENT_FILTER_All, C_EVENT_PAF_Perforant, mo_Sender, Cf_EVENT_Duree_1Trame, o, ti_paf, OBJ_SightGet())
	mi_ColCount = 0

	AI_CBDel( OBJ_Me(), CTX_AfterBlend, "Javelin_CB_Launch" )
	AI_TrackChange(2,  "Javelin_Plug" )
	AI_Execute("Javelin_GFX_Impact")
	return
}	

//---------( tomber trop bas ? )---------
if ( MATH_AbsFloat( OBJ_PosGet().z - mf_ZInit) > 50)
	AI_Execute( "Javelin_destroy" )

//---------( choc )---------
if ( o )
{
	// si OBJ_Capa_2, le javelin vient d une Pluie De Lances et est particulierement
	// destructeur (sur jack seulement)
	if (OBJ_CapaGet() & OBJ_Capa_2)
	{
		OBJ_CapaSet(0,OBJ_Capa_2)
	}

	// si capa3 est a vrai, le javelin ne doit pas faire de paf
	if (! (OBJ_CapaGet() & OBJ_Capa_3))
	{
		EVENT_AddEventPaf(C_EVENT_FILTER_All, C_EVENT_PAF_Perforant , mo_Sender, Cf_EVENT_Duree_1Trame, o, ti_paf, OBJ_SightGet())
		OBJ_CapaSet(0,OBJ_Capa_3)
	}
	
	mi_ColCount = 0
	COL_ColSetActivationSet( all, none)
	OBJ_PosSet( v_last_pos )
	v = DYN_SpeedGetVector() * 0.1
	tv_normal = COL_RayObject_NormalGet()
	v -= (2 * MATH_VecDotProduct(v,tv_normal) / MATH_VecDotProduct(tv_normal,tv_normal)) * tv_normal
	DYN_SpeedSetVector( v )
	macro_del_callback_tir("Javelin_launch")
	i_endoflaunch = vrai
	return
}

// Orientation -------------------------
v_last_pos = OBJ_PosGet()
v_last_sight = OBJ_SightGet()
v_last_speed = DYN_SpeedGetVector()
if ( !MATH_VecNull( v_last_speed ) )
{
	if(mo_LockObj)
	{
		tv_temp = @mo_LockObj MATH_VecLocalToGlobal(mv_LockObj)
		tv_temp += @mo_LockObj OBJ_PosGet()
		
		tv_temp1 = mv_LockObjGlobal - OBJ_PosGet()
		if(MATH_VecDotProduct(tv_temp1, OBJ_SightGet()) > 0)
		{
			tf_temp = MATH_VecNorm(tv_temp - OBJ_PosGet())
//				if(MATH_VecNorm(mv_LockObjGlobal - tv_temp) < 2)
//				if(MATH_VecNorm(mv_LockObjGlobal - tv_temp) < tf_temp)
			{
				tv_temp -= OBJ_PosGet()
				MATH_VecSetNorm(tv_temp, MATH_VecNorm(v_last_speed))
				v_last_speed = MATH_VecBlend(v_last_speed, tv_temp, 100 * TIME_GetDt())
				v_last_speed = tv_temp
				DYN_SpeedSetVector(v_last_speed)
			}
		}
	}
	
	OBJ_SightSet( v_last_speed )
}

