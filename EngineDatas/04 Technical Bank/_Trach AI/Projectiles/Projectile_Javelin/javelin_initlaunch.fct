#include "_Projectile_Javelin_defs.var"

//---------( init dyna )--------
if ( !i_dynon_done )
{
	DYN_On()
	i_dynon_done = vrai
}
DYN_FlagsSet( DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction, none)
DYN_FrictionVectorSet( mv_LaunchFriction )
DYN_GravitySet( mv_LaunchGravity )
if(!mi_fall) DYN_SpeedSetVector( mv_LaunchSpeed )

v_last_speed = DYN_SpeedGetVector()

//DYN_LIB_Display_Trajectory(OBJ_PosGet(), DYN_SpeedGetVector(), DYN_GravityVectorGet(), DYN_FrictionVectorGet(), 0.2, 20, 0.0)

if ( !MATH_VecNull( mv_LaunchSpeed ) && !mi_fall) 
{
	OBJ_SightSet( mv_LaunchSpeed )
	v_GFX_lastsight = mv_LaunchSpeed
}

//--------( init collision ) --------
if ( mo_Sender )
	COL_UnCollidableAdd( mo_Sender )
	
//--------( init vars ) --------
mf_ZInit = OBJ_PosGet().z
v_last_pos = OBJ_PosGet()
v_last_sight = OBJ_SightGet()

if ( mi_fall )
{
	f_rotate_fall = MATH_RandInt(-3, 3)
	COL_ColSetActivationSet( all, none)
	AI_TrackCurChange( "Javelin_endofmove" )
	if(mi_flamme) f_fire_time = JAVELIN_FireTimeWhenFixed
}
else
{
	macro_add_callback_tir("Javelin_launch")	
	mi_State = -1
	AI_TrackCurStop()
}


