#include "Projectile_defs.var"

message	msg
int				launch
vector		tv_temp
float			tf_radius
object		to_bone
int				ti_SF_AlreadyTaken

// --- ALLOCATION SF + DESTRUCTION Si SF A VRAI --------------
if (mi_Type == ProjType_Levier)
	i_SF_TakeOnlyOnce = vrai

if (i_SF_TakeOnlyOnce)
{
	i_SF_AlreadyTaken = AI_SFDynGet(0, SF_MinById, SF_MaxById)
	SpecialFlag_get(i_SF_AlreadyTaken, ti_SF_AlreadyTaken )
	if (ti_SF_AlreadyTaken)
		OBJ_Destroy()
}
// FIN SF

OBJ_FlagsControlSet(OBJ_C_ControlFlag_RayInsensitive, 0)
OBJ_FlagsIdentitySet(OBJ_C_IdentityFlag_DesignStruct | OBJ_C_IdentityFlag_Msg, 0)
COL_UnCollidableAdd(AI_MainActorGet(C_ID_Joueur))

BV_MinSet(cvector(-2.5,-2.5,-2.5))
BV_MaxSet(cvector(2.5,2.5,2.5))

mi_crane_gfx = -1
mi_crane_allume = 1
mi_dyna_gfx = -1
mf_dyna_time = C_Time_Dyna
mf_dyna_timecoef = 1.0
mi_dyna_resetgravity = vrai

on_ground = faux

// --------( init vars for crane )--------
if (mi_Type == ProjType_Crane )
{
	if (  mi_crane_takepaf)
	{
		OBJ_ZoomSet( 3 )
		OBJ_FlagsControlSet(0, OBJ_C_ControlFlag_RayInsensitive )
		to_bone = ANI_CanalObjectGet( 0 )
		if (to_bone )
		{
			@to_bone BV_OBBoxMinSet(cvector(-0.55, -0.85, -0.55) / OBJ_ZoomGet())
			@to_bone BV_OBBoxMaxSet(cvector(0.55, 0.45, 0.55) / OBJ_ZoomGet())
		}
	}
	mi_crane_choc = 0
}
// --------( init vars for crane flamme )--------
else if ( mi_Type == ProjType_CraneFlamme)
{
	mi_craneflamme_tramecount = 200
	mf_craneflamme_timeleft = 0
	mi_craneflamme_splof = 0
	mv_craneflamme_spot = OBJ_PosGet()
	mf_craneflamme_distmin = 0.5 * 0.5
	mi_craneflamme_spg2_nb = 0
	mv_craneflamme_grid = GRID_PosGet( OBJ_PosGet() )
}


launch = faux
msg = MSG_Get()
while(msg.msg_id)
{
	if ( msg.msg_id == msg_id_grenadelaunch )
	{
		mo_Sender = msg.msg_sender
		if (!mo_Sender) mo_Sender = AI_MainActorGet(C_ID_Joueur)
		mv_LaunchSpeed = msg.msg_vec1
		mv_LaunchGravity = msg.msg_vec2
		mv_LaunchFriction = msg.msg_vec3
		tv_temp = msg.msg_vec4
		mf_dyna_time = tv_temp.x
		launch = vrai
		has_been_launched = vrai
	}
	
	if(msg.msg_id == msg_id_grenadeburning)
	{
		i_dynam_allumee = vrai
		tv_temp = msg.msg_vec1
		mf_dyna_time = tv_temp.x
	}
	
	if(msg.msg_id == msg_id_grenadefall)
	{
		mo_Sender = msg.msg_sender
		if (!mo_Sender) mo_Sender = AI_MainActorGet(C_ID_Joueur)
		mv_LaunchSpeed = msg.msg_vec1
		mv_LaunchGravity = msg.msg_vec2
		mv_LaunchFriction = msg.msg_vec3
		tv_temp = msg.msg_vec4
		mf_dyna_time = tv_temp.x
		DYN_On()
		DYN_SpeedSetVector(mv_LaunchSpeed)
	}
	
	msg = MSG_Get()
}

v_start_impulsion = mv_LaunchSpeed 
v_start_pos = OBJ_PosGet()


OBJ_MorphFactorSet(0,1)
OBJ_MorphProgSet(0,mf_dyna_time / C_Time_Dyna)

if (mi_Type == ProjType_Dynamite)
	tf_radius = Cf_grenade_range_medium
else
	tf_radius = 2.0
	
COL_SwapToSpecific(C_zde_fight)
COL_ZonePosSet(C_zde_fight, cvector(0.0, 0.0, 0.0))
COL_ZoneSizeSet(C_zde_fight, cvector( tf_radius, tf_radius, tf_radius))
//COL_CrossableSet(Gmat_Jack_Face_eau + Gmat_Jack_DefaultCrossable + Gmat_Jack_Face_de_Bord, none)
COL_CrossableSet(Gmat_RM_Crossable_Default, none)

if( launch )
	AI_TrackCurChangeNow( "Projectile_initlaunch" )
else
	AI_TrackCurChange( "Projectile_waittaken" )
	
