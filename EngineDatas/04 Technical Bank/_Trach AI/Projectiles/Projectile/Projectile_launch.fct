#include "Projectile_defs.var" 

vector		tv_temp
int				couleur
float			tf_temp, tf_norm
object		to_obj

//========[ Crane : détection par visuel + explosion dès que choc ]========
if ( mi_Type == ProjType_Crane )
{
	Proj_Crane_Launch()
	return
}

//========[ crane flamme ]========
if ( mi_Type == ProjType_CraneFlamme )
{
	Proj_CraneFlamme_Launch()
	return
}

// ========[ dynamite : remet une gravité normal si on a dépassé le range ]========
if (mi_Type == ProjType_Dynamite )
{
	if ( mi_dyna_resetgravity )
	{
		if( COL_CollideType(COL_C_Ground) || COL_CollideType(COL_C_Wall) )
			mi_dyna_resetgravity = faux
		
		tv_temp = OBJ_PosGet() - v_start_pos
		if ( MATH_VecDotProduct( tv_temp, tv_temp ) > (Cf_grenade_range * Cf_grenade_range) )
			mi_dyna_resetgravity = faux
		
		if (!mi_dyna_resetgravity)
		{
			mv_LaunchGravity = Cv_NormalGravity
			DYN_GravitySet(mv_LaunchGravity)
		}
	}
	
	// ----( timer accéléré si touche sol ou mur )----
	if( COL_CollideType(COL_C_Ground) || COL_CollideType(COL_C_Wall) )
	{
		if( mf_dyna_timecoef  == 1.0 )
			mf_dyna_timecoef  = 5.0
		if (GRID_LIB_CaseEnFeu( OBJ_PosGet() ) )
		{
			i_dynam_allumee = 1
			mf_dyna_time = -1
		}
	}
	
	// ----( gobbée )----
	if( OBJ_CapaTest(OBJ_Capa_0) )
	{
		mf_dyna_timecoef = 10.0
	}
	
}

// ----( fait tourner la grenade )----
OBJ_RotateLocalZ( 0.1 )

// ----( entre dans l'eau )----
if( !i_dans_l_eau && COL_GMatReportGet(Gmat_RM_Face_eau) != -1 )
{
	i_dans_l_eau = vrai
	mf_dyna_timecoef  = 5.0
	mv_LaunchGravity = cvector(0.0, 0.0, -1.0)
	DYN_GravitySet(mv_LaunchGravity)
	mv_LaunchFriction = cvector(5.0, 5.0, 5.0)
	DYN_FrictionVectorSet(mv_LaunchFriction)
	mi_dyna_resetgravity = faux
}

// ----( controle de la vitesse en cas de rebond )----
if(COL_CollideType(COL_C_Ground))
{
	tf_temp = MATH_VecNorm(v_last_speed)
	v_last_speed.z = -v_last_speed.z
	tf_temp *= 0.25
	if(tf_temp > 1)
	{
		MATH_VecSetNorm(v_last_speed, tf_temp)
		DYN_SpeedSetVector(v_last_speed)
	}
	else
	{
		DYN_Off()
		on_ground = faux
		AI_TrackCurChangeNow("Projectile_waittaken")
	}
}
else
{
	v_last_speed = DYN_SpeedGetVector()
}
