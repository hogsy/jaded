#include "k_define.var"

float		tf_ray_length

vector	tv_A
vector	tv_B
vector	tv_C
vector	tv_D
vector	tv_pos

object	to_collide_object

tv_pos = @ao_IK_bones[Ci_IK_pied_gauche][2] OBJ_PosGet()
tv_pos -= OBJ_SightGet() * 4.0

tf_ray_length = 5.0

to_collide_object = COL_RayObject_Dist(tv_pos, -v_climb_normale, tf_ray_length, all, OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
if (to_collide_object)
{
	tv_D = COL_RayObject_PosGet()

	tv_pos = @ao_IK_bones[Ci_IK_pied_droit][2] OBJ_PosGet()
	tv_pos -= OBJ_SightGet() * 4.0
	
	to_collide_object = COL_RayObject_Dist(tv_pos, -v_climb_normale, tf_ray_length, all, OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
	if (to_collide_object)
	{
		tv_A = COL_RayObject_PosGet()
	
		tv_pos = @ao_IK_bones[Ci_IK_main_droite][2] OBJ_PosGet()
		tv_pos -= OBJ_SightGet() * 4.0	
		
		to_collide_object = COL_RayObject_Dist(tv_pos, -v_climb_normale, tf_ray_length, all, OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
		if (to_collide_object)
		{
			tv_B = COL_RayObject_PosGet()
	
			tv_pos = @ao_IK_bones[Ci_IK_main_gauche][2] OBJ_PosGet()
			tv_pos -= OBJ_SightGet() * 4.0	

			to_collide_object = COL_RayObject_Dist(tv_pos, -v_climb_normale, tf_ray_length, all, OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
			if (to_collide_object)
			{
				i_flag_climb_wall = vrai	
			
				tv_C = COL_RayObject_PosGet()
//				macro_render_Vector(tv_pos, tv_C - tv_pos, color_blanc)
	
//				v_IK_dest_pos[Ci_IK_pied_droit] = tv_A - (OBJ_SightGet() * 0.5)
//				v_IK_dest_pos[Ci_IK_main_droite] = tv_B - (OBJ_SightGet() * 0.5)
//				v_IK_dest_pos[Ci_IK_main_gauche] = tv_C - (OBJ_SightGet() * 0.5)
//				v_IK_dest_pos[Ci_IK_pied_gauche] = tv_D - (OBJ_SightGet() * 0.5)
	
				if (i_etat_courant == ETAT_commun_climb_2D || i_etat_courant == ETAT_commun_climb_slide)
				{
					tv_pos = MATH_VecCrossProduct(tv_B - tv_A, tv_C - tv_A)
					MATH_VecSetHorzNormalize(tv_pos)
					
					if (MATH_VecDotProduct(tv_pos, v_climb_normale) > Cf_Cos20)
						v_climb_normale = tv_pos
					
					v_climb_position = MATH_VecDotProduct(tv_A - OBJ_PosGet(), v_climb_normale) * v_climb_normale
					v_climb_position += OBJ_PosGet()
				}
				
				return
			}
		}
	}
}

// ECHEC DES LANCES DE RAYON
if (i_etat_courant == ETAT_commun_climb_2D || i_etat_courant == ETAT_commun_climb_slide)
{
	v_climb_normale = -OBJ_SightGet()
	v_climb_position = OBJ_PosGet()	
}