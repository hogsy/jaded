#include"k_define.var"

#define		CBit_KKFinished_Anim_Non_Interruptible		0b01000000

object	to_col
object	to_bone
object	to_center

vector	tv_col_pos
vector	tv1
vector	tv2
vector	tv_zde_old_pos
vector	tv_temp
vector	tv_sight

int			ti_valide
int			ti_kamera_mode
int			ti_kamera_mode_kk_a_perdu
int			ti_kamera_mode_kk_a_gagne 
int			ti_finisherType		// who's trying to finish me
int			ti_Kamera_finished_on
int			ti_action_se_place
int			ti_action_debut
int			ti_action_fin
int			ti_action_mort
int			ti_nb_frame
int			ti_condition_gagne
int			ti_DBG_stay_in_challenge
int			ti_1st_frame_anim
int			ti_action
int			ti_condition_gagne_remplie
int			ti_frame_gagne_debut_d_anim
int			ti_moment_difficulte_max

float		tf_percent
float		tf_debut_controle
float		tf_finished_hardness
float		tf_nmi_force_max
float		tf_nmi_force_blend_coef
float		tf_finished_force_nmi_init
float		tf_finished_timeout
float		tf_kong_loose_rage
float		tf_kong_loose_default
float		tf_kong_force_blend_coef
float		tf_finished_hardness_default
float		tf_secure_dt

string		tstr_temp


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	o_finish_actor = LNK_ServeurGet( Ci_LNK_KKFINISH_ON_KONG, mid_finish_LNK_ID, faux, nofunc, nofunc)
	DYN_GravitySet( Cv_Kong_Gravity)
	SND_GRAB_STOP
	RIDE_Clear_Link_Bat(vrai)
	@get_global i_KNMI_finish_fake_actor_count = 0		// pour reseter la répartition des anims des acteurs
	i_finished_big_scolo_kong_grab = faux		// raz du flag qui dit si c kong qui a grabbé le big scolo ou l'inverse
//	@get_global i_KNMI_finish_kong_a_gagne = faux
	
	// forcer à relacher le shift FPS (sinon saute de cam car changement d'offset pour la cam fps sur l'épaule)
	@get_global i_FPS_Shoulder_force_new_entry = vrai	
	
	// check dual repousse finish
//	@get_global i_KNMI_finish_all_actor_count = 0
	@get_global i_KNMI_finish_type = -1
//	@get_global i_KNMI_finish_repousse = faux
	
	f_finished_dual_timer = 0.0
	
	i_sort_etat = faux
	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_Kong_finished) 
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Kong_finished

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	// GRAB CLIENT ACCEPT
	ai_SRV_ENABLE[Ci_LNK_KKFINISH_ON_KONG] = vrai
	
	// LACHER GRAB 2 MAINS
	if ( i_GrabKong_MainBloquee != -1 )																
	{
		ao_CL_GRABKONG[i_GrabKong_MainBloquee] = LNK_ClientGet( Ci_LNK_GRAB_KONG, amid_CL_LIAISON_ID_GRABKONG[i_GrabKong_MainBloquee],  faux, nofunc, nofunc, nofunc)
		i_GrabKong_MainBloquee = -1																					
		AI_CBDel(o_GrabKong_Target, CallBack_After_Blend, "k_exec_Ik_GrabKong")
		o_GrabKong_Target = nobody
	}
	
	// LACHER GRAB PETIT NMI
	if( MSG_GlobalIsValid(amid_CL_LIAISON_ID_GRABKONG[0]) )
		ao_CL_GRABKONG[0] = LNK_ClientGet( Ci_LNK_GRAB_KONG, amid_CL_LIAISON_ID_GRABKONG[0],  faux, nofunc, nofunc, nofunc)
	
	// TEST LACHER ANN SI ANN DANS LA MAIN (et pas sur l'épaule)
//	if( ao_CL[Ci_LNK_KKGRAB_OBJECT])
//	{
//		if( ! @get_global i_KK_ANN_On_Shoulder ) 
//		{
//			i_Grab_Torse_ANN = faux
//			i_Grab_Torse_Main = -1
//			i_Grab_Torse_Actor = faux			// new new new VINCE 02/06/2005 !!!!
//			LNK_KKGrabObject_TypeSet(amid_CL_LIAISON_ID[Ci_LNK_KKGRAB_OBJECT], Ci_KKGrabObject_Lache)
//		}
//	}
	
	fct_last_etat = AI_TrackCurGet()
	v_finish_pos_init = OBJ_PosGet()
	i_exit_mode = faux
	v_add_speed = Cv_NullVector
	f_coef_recul = 1.0		// SUPPR DES ADD SPEED
	RUMBLE_INIT
	
	i_SND_mash_advantage = 1 // par defaut Kong n a pas l avantage pour jouer le son quand il prend l avantage
	f_time_start_etat = 0.0
	
	f_finished_force_nmi = 0
	f_finished_force_kong = 0
	f_finished_frame = 0.0
	i_finished_SFX = faux
	f_finished_challenge_duration = 0.0
	i_finished_force_lose_flag = faux
	@get_global i_KNMI_finish_kong_a_gagne = faux
	
	ti_finisherType = LNK_Finish_FinisherTypeGet(mid_finish_LNK_ID)
	
	if( ti_finisherType != Ci_GrabKong_Finished_BigScolo || ! i_finished_big_scolo_kong_grab )
	{
		ai_finished_count[ti_finisherType]++		// difficulté augmente si je subis le finish
		
		if( ai_finished_count[ti_finisherType] > 3 )
			ai_finished_count[ti_finisherType] = 3
		
		Fury_End			// conserver la fury si je grabbe le big scolo
	}
	
	LNK_Finish_ActionSet( mid_finish_LNK_ID, Ci_GrabKong_FinishSePlace )
	
	RIDE_Clear_Link_For_Finished(o_finish_actor)
	
	if( ti_finisherType == Ci_GrabKong_Finished_TREX )
		DYN_GravitySet(Cv_NullVector)
	else
		DYN_GravitySet(Cv_Kong_Gravity)
	
	if( ti_finisherType == Ci_GrabKong_Finished_BigScolo )
		STATS_IncAttack()		// Kong veut finir un big scolo
	
	@get_global i_FPS_Shoulder_force_new_entry = vrai		// forcer à relacher le shift FPS 
	
	// check dual repousse finish
	@get_global i_KNMI_finish_type = ti_finisherType
	@get_global i_KNMI_finish_repousse = faux
	f_finished_dual_timer = 5.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

RIDE_Propose_Link()		// proposer aux nmi spawnés

tstr_temp = "???"

ti_DBG_stay_in_challenge = faux			// DBG : sert à interdire de gagner / perdre (pour positionner les nmis)

// ANALYSE  ==============================================================

AI_Execute("k_exec_detect_paf")
if ( o_paf_actor && f_time_start_etat > 0.0 && ! ( i_paf_type & C_PAF_KK_Faible) )
{
	// REX m'envoie un paf avant d'établir la liaison finish
	PAF_Test_ChangeEtatValid(fct_track_change)
	if( fct_track_change != nofunc )
	{
		f_finished_just_paf_delay_no_finished = 1.0		// pas de nouveau finished tout de suite
		macro_change_etat(fct_track_change)
	}
}

if ( i_exit_mode)
	ti_valide = faux		// Sortie de mode demandée on ne veux plus de liaison
else
	ti_valide = vrai

if ( o_finish_actor)
	o_finish_actor = LNK_ServeurGet( Ci_LNK_KKFINISH_ON_KONG, mid_finish_LNK_ID, ti_valide, nofunc, nofunc)
if ( ! o_finish_actor)
{
	// Liaison coupée
	if( @get_global i_KNMI_finish_repousse )
	{
		i_request_txt_forced = GeneKon_C_reward_roar
		RAGE_Launch_Action( Ci_Kanim_Intimid_FinishFurieCri)		// Lance l'action mais pas l'effet Fury
		f_finished_just_paf_delay_no_finished = 1.0		// pas de nouveau finished tout de suite
		macro_change_etat( "k_ETAT_main")		// Grab Fini
	}
	
	switch ( ACT_ActionGet())
	{
		case Ci_Kanim_FinishedBats_Gagne :
		case Ci_Kanim_FinishedScolos_Gagne :
			if( ( ACT_ActionItemGet() == 1 && ANI_CurrentFrameGet(0) > 30 && f_joy_norm )
			|| ACT_ActionFinished())		// couper la tr att pour les finished small bats & small scolos
				macro_change_etat("k_ETAT_main")
			break
		case Ci_Kanim_Paf_Face :
			if( ACT_ActionFinished())
				macro_change_etat("k_ETAT_main")
			else
				return
			break
		default:
			if( ACT_ActionFinished() || ! (ACT_CustomBitGet() & CBit_KKFinished_Anim_Non_Interruptible) )
				macro_change_etat("k_ETAT_main")
			break
	}
}

// COMPORTEMENT ==============================================================

ti_Kamera_finished_on = faux

f_ride_paf_time = 0.0		// Pas de paf de scolo sur le delai dans ce mode

if (o_finish_actor )
{
	ti_Kamera_finished_on = vrai
	ti_kamera_mode = Ci_Kamera_Finished_id_TREX		// default
	ti_finisherType = LNK_Finish_FinisherTypeGet(mid_finish_LNK_ID)
	switch (ti_finisherType)
	{
		//-------------------------------------------------------------------------------------------------------------------------------------------
		case Ci_GrabKong_Finished_Bats :			// SMALL BATS
		//-------------------------------------------------------------------------------------------------------------------------------------------
			ti_action_se_place 	= Ci_Kanim_FinishedBats_SePlace
			ti_action_debut 		= Ci_Kanim_FinishedBats_Deb
			ti_action_fin 			= Ci_Kanim_FinishedBats_Gagne
			ti_action_mort			= Ci_Kanim_FinishedBats_Perd
			tf_debut_controle = 1.5
			ti_1st_frame_anim = ti_action_se_place
			
			ti_kamera_mode = Ci_Kamera_Finished_id_Bats
			ti_kamera_mode_kk_a_perdu = Ci_Kamera_Finished_id_Bats_Won
			ti_kamera_mode_kk_a_gagne = Ci_Kamera_Finished_id_Bats_KongWin
			
			tf_nmi_force_blend_coef = 2.0
			tf_nmi_force_max = 10.0
			tf_kong_loose_rage = 3.0
			tf_kong_loose_default = 20.0
			ti_condition_gagne = Ci_condition_gagne_debut_d_anim		// doit rembonier l'anim pour gagner !!!
			ti_frame_gagne_debut_d_anim = 0
			tf_finished_force_nmi_init = 2.0
			tf_finished_hardness_default = 1.25
			ti_moment_difficulte_max = Ci_moment_difficulte_max_debut_d_anim
			break
			
		//-------------------------------------------------------------------------------------------------------------------------------------------
		case Ci_GrabKong_Finished_Scolo :			// SMALL SCOLOS
		//-------------------------------------------------------------------------------------------------------------------------------------------
			ti_action_se_place 	= Ci_Kanim_FinishedScolos_SePlace
			ti_action_debut 		= Ci_Kanim_FinishedScolos_Deb
			ti_action_fin 			= Ci_Kanim_FinishedScolos_Gagne
			ti_action_mort			= Ci_Kanim_FinishedScolos_Perd
			tf_debut_controle = 1.5
			ti_1st_frame_anim = ti_action_se_place
			
			ti_kamera_mode = Ci_Kamera_Finished_id_Scolos
			ti_kamera_mode_kk_a_perdu = Ci_Kamera_Finished_id_Scolos_Won
			ti_kamera_mode_kk_a_gagne = Ci_Kamera_Finished_id_Scolos_KongWins
			
			tf_nmi_force_blend_coef = 2.0
			tf_nmi_force_max = 10.0
			tf_kong_loose_rage = 3.0
			tf_kong_loose_default = 20.0
			ti_condition_gagne = Ci_condition_gagne_debut_d_anim		// doit rembonier l'anim pour gagner !!!
			ti_frame_gagne_debut_d_anim = 0
			tf_finished_force_nmi_init = 2.0
			tf_finished_hardness_default = 1.25
			ti_moment_difficulte_max = Ci_moment_difficulte_max_debut_d_anim
			break

		//-------------------------------------------------------------------------------------------------------------------------------------------
		case Ci_GrabKong_Finished_BigScolo :			// BIG SCOLO
		//-------------------------------------------------------------------------------------------------------------------------------------------
			ti_action_se_place 	= Ci_Kanim_FinishBigScolo_SePlace
			ti_action_debut 		= Ci_Kanim_FinishBigScolo_Deb
			ti_action_fin 			= Ci_Kanim_FinishBigScolo_Gagne
			ti_action_mort			= Ci_Kanim_FinishBigScolo_Perd
			tf_debut_controle = 3.0
			if( i_finished_big_scolo_kong_grab )
			{
//				ti_1st_frame_anim = ti_action_debut			// Big Scolo grabbé par Kong -> on squeeze l'anim "seplace"
				ti_1st_frame_anim = Ci_Kanim_Attrape_D			// Big Scolo grabbé par Kong -> on squeeze l'anim "seplace"
				ti_action_se_place 	= Ci_Kanim_Attrape_D
			}
			else
				ti_1st_frame_anim = ti_action_se_place		// Kong grabbé par Big Scolo -> on joue l'anim "seplace"

			ti_kamera_mode = Ci_Kamera_Finished_id_BigScolo
			ti_kamera_mode_kk_a_perdu = Ci_Kamera_Finished_id_BigScolo_Won
			ti_kamera_mode_kk_a_gagne = Ci_Kamera_Finished_id_BigScolo_KongWins

			tf_nmi_force_blend_coef = 2.0
			tf_nmi_force_max = 10.0
			tf_kong_loose_rage = 3.0
			tf_kong_loose_default = 20.0
			ti_condition_gagne = Ci_condition_gagne_debut_d_anim		// doit rembonier l'anim pour gagner !!!
			ti_frame_gagne_debut_d_anim = 0
			tf_finished_force_nmi_init = 2.0
			tf_finished_hardness_default = 1.25
			ti_moment_difficulte_max = Ci_moment_difficulte_max_fin_d_anim
			break	
				
		//-------------------------------------------------------------------------------------------------------------------------------------------
		case Ci_GrabKong_Finished_Raptors :			// RAPTORS
		//-------------------------------------------------------------------------------------------------------------------------------------------
			ti_action_se_place 	= Ci_Kanim_FinishedRaptors_SePlace
			ti_action_debut 		= Ci_Kanim_FinishedRaptors_Deb
			ti_action_fin 			= Ci_Kanim_FinishedRaptors_Gagne
			ti_action_mort			= Ci_Kanim_FinishedRaptors_Perd
			tf_debut_controle = 3.0
			ti_1st_frame_anim = ti_action_se_place
			
			ti_kamera_mode = Ci_Kamera_Finished_id_Raptor
			ti_kamera_mode_kk_a_perdu = Ci_Kamera_Finished_id_Raptors_Won
			ti_kamera_mode_kk_a_gagne = Ci_Kamera_Finished_id_Raptors_KongWin
			
			tf_nmi_force_blend_coef = 2.0
			tf_nmi_force_max = 10.0
			tf_kong_loose_rage = 3.0
			tf_kong_loose_default = 20.0
			ti_condition_gagne = Ci_condition_gagne_debut_d_anim		// doit rembonier l'anim pour gagner !!!
			ti_frame_gagne_debut_d_anim = 0
			tf_finished_force_nmi_init = 2.0
			tf_finished_hardness_default = 1.75
			ti_moment_difficulte_max = Ci_moment_difficulte_max_fin_d_anim
			break
			
		//-------------------------------------------------------------------------------------------------------------------------------------------
		case Ci_GrabKong_Finished_TREX :				// TREX
		//-------------------------------------------------------------------------------------------------------------------------------------------
		default:
		//-------------------------------------------------------------------------------------------------------------------------------------------
			ti_action_se_place 	= Ci_Kanim_FinishedRex_SePlace
			ti_action_debut 		= Ci_Kanim_FinishedRex_Deb
			ti_action_fin 			= Ci_Kanim_FinishedRex_Gagne
			ti_action_mort			= Ci_Kanim_FinishedRex_Perd	
			tf_debut_controle = 1.65		// 1.833
			ti_1st_frame_anim = ti_action_se_place
			
			ti_kamera_mode = Ci_Kamera_Finished_id_TREX
			ti_kamera_mode_kk_a_perdu = Ci_Kamera_Finished_id_TREX_Won
			ti_kamera_mode_kk_a_gagne = -1
			
			tf_nmi_force_blend_coef = 2.0
			tf_nmi_force_max = 12.0
			tf_kong_loose_rage = 3.0
			tf_kong_loose_default = 20.0
			ti_condition_gagne = Ci_condition_gagne_debut_d_anim
			ti_frame_gagne_debut_d_anim = 10
			tf_finished_force_nmi_init = 0.0			// 0.0
			tf_finished_hardness_default = 2.25
			ti_moment_difficulte_max = Ci_moment_difficulte_max_debut_d_anim
			break	
	}
	
	if( f_time_start_etat == 0.0 )
		ACT_ActionSet( ti_1st_frame_anim )
	
	// CHOIX DES ANIMS DEPENDANT DE KONG
	switch ( LNK_Finish_ActionGet(mid_finish_LNK_ID) )
	{
		//-------------------------------------------------------------------------------------------------------------------------------------------
		case Ci_GrabKong_FinishSePlace :			// Positionnement
		//-------------------------------------------------------------------------------------------------------------------------------------------
			tstr_temp = "se place"
			if( ACT_ActionFinished()
			|| (ACT_ActionGet() == Ci_Kanim_Attrape_D && ANI_CurrentFrameGet(0) > 28)  )
			{
				i_SND_Grab_LoopA = SND_RequestPlayLoopOnObjCanal(54, Anim_Canal_MainDroite)
				i_SND_Grab_LoopB = SND_RequestPlayLoopOnObjCanal(55, Anim_Canal_MainGauche)
				LNK_Finish_ActionSet( mid_finish_LNK_ID,  Ci_GrabKong_FinishDeb )
				i_request_txt_forced = GeneKon_C_mashing_strangled
				ACT_ActionSet( ti_action_debut)
			}
			switch( ti_finisherType )
			{
				case Ci_GrabKong_Finished_Bats :
				case Ci_GrabKong_Finished_Raptors :
					OBJ_BankingGeneralSet(OBJ_SightGet(), MATH_VecBlend( OBJ_BankingGet(), Cv_VerticalVector, 6.0 * TIME_GetDt()))
					break
				case Ci_GrabKong_Finished_Scolo :
				case Ci_GrabKong_Finished_BigScolo :		// Orientation vers le centre de l'arrène
					to_center = @get_global o_KK_finish_arena_center
					if( to_center )
//						tv_sight = MATH_VecBlendRotate(OBJ_SightGet(), @to_center OBJ_PosGet() - OBJ_PosGet(), 6.0 * TIME_GetDt())
						tv_sight = @to_center OBJ_PosGet() - OBJ_PosGet()
					else
						tv_sight = OBJ_SightGet()
					OBJ_BankingGeneralSet(tv_sight, MATH_VecBlend( OBJ_BankingGet(), Cv_VerticalVector, 6.0 * TIME_GetDt()))
					break
				case Ci_GrabKong_Finished_TREX :
				default:
					OBJ_BankingGeneralSet( 
						MATH_VecBlend( OBJ_SightGet(), @o_finish_actor OBJ_PosGet() - OBJ_PosGet(), 6.0 * TIME_GetDt()), 
						MATH_VecBlend( OBJ_BankingGet(), @o_finish_actor OBJ_BankingGet(), 6.0 * TIME_GetDt()))
					break
			}
			break
			
		//-------------------------------------------------------------------------------------------------------------------------------------------
		case Ci_GrabKong_FinishDeb :				// Challenge en cours
		//-------------------------------------------------------------------------------------------------------------------------------------------
			// RUMBLE KAM
			if( Proc_KK_Mashing_Button_Just_Pressed() )
			{
				tf_percent = Proc_KK_Mashing_Pct()
				@get_Kamera Proc_Kam_RumbleSet( ((1.0-tf_percent) / Cf_Rumble_Amplitude), 6.0)
			}
			
			// SOUND
			SND_InsertVarSet( i_SND_Grab_LoopA, 11, ANI_RatioGet(0))
			if ( ! i_SND_mash_advantage && ANI_RatioGet(0) < 0.25)
			{
				i_SND_mash_advantage = 1
				SND_RequestPlay( 56)
			}
			else if ( i_SND_mash_advantage && ANI_RatioGet(0) > 0.4)
			{
				i_SND_mash_advantage = 0
			}
			
			// RUMBLE JOY
			Proc_KK_RumbleGrowWithPower(90.0)
			
			// CHALLENGE REFUSE (BIG SCOLO) ======================================================
			switch( ti_finisherType )
			{
				case Ci_GrabKong_Finished_BigScolo :		
					if( ! @o_finish_actor Proc_KK_Scolo_Finish_Allowed() && ANI_CurrentFrameGet(0) > 40 ) // 80 ) // 100 ) // 160 )
					{
						// KK a grabbé le solo qui veux pas etre finish, cancel
						f_time_start_etat = f_time_start_etat
						ACT_ActionSet( Ci_Kanim_Paf_Face)
						SND_RequestPlay( Ci_KSound_PafFort)
						v_frappe_sight = Cv_NullVector
						o_finish_actor = LNK_ServeurGet( Ci_LNK_KKFINISH_ON_KONG, mid_finish_LNK_ID, faux, nofunc, nofunc)
						f_finished_just_paf_delay_no_finished = 1.0		// pas de nouveau finished tout de suite
						return
					}
					break
					
				default:
					break
			}
			
			//================================================================================================
			// GESTION DU CHALLENGE 
			//================================================================================================
			f_finished_challenge_duration += TIME_GetDt()
			ti_nb_frame = ANI_NbFrameGet(0)
			if ( ! i_finished_end )
			{
				if( f_finished_challenge_duration < tf_debut_controle )
				{
					tstr_temp = "challenge (init)"
					f_finished_frame = ANI_CurrentFrameGet(0)
					f_finished_force_nmi = tf_finished_force_nmi_init
				}
	 			else
				{
					tstr_temp = "challenge !!!"
					
					// DUAL TIMER
					if( ! @get_global i_Player_is_Kong )
						f_finished_dual_timer -= MATH_FloatMin(f_finished_dual_timer, TIME_GetDt())
					
					if( ! ti_DBG_stay_in_challenge 
						&& (
								@get_global i_Player_is_Kong
								||
								! f_finished_dual_timer
							)
						&& ( 
								( ti_condition_gagne == Ci_condition_gagne_fin_d_anim && f_finished_frame <= 0.0 )
								|| 
								( ti_condition_gagne == Ci_condition_gagne_debut_d_anim && f_finished_frame >= ANI_NbFrameGet(0) ) 
							)
						) 
					{
						// TEST ECHEC
						i_finished_end = vrai
						LNK_Finish_ActionSet(mid_finish_LNK_ID, Ci_GrabKong_FinishPerdu)
						ACT_ActionSet(ti_action_mort)
					}
					else
					{
						// TIME OUT & PERTE TROP IMPORTANTE
						tf_finished_hardness = tf_finished_hardness_default - (ai_finished_count[ti_finisherType]  * 0.25)
						tf_finished_timeout = tf_finished_hardness * 6
						if ((f_finished_force_kong - f_finished_force_nmi) < -2.5)
							tf_finished_timeout = 0
						if( i_finished_force_lose_flag )
							tf_finished_timeout = 0
						
						tf_secure_dt = MATH_FloatLimit(TIME_GetDt(), 0.016, 0.048)		// SECURE DT FOR LOW FRAMERATE !!!
						
						// NE PAS MONTER LA FORCE DE L'ENNEMI SI KONG EST FORT
						if( f_finished_force_kong < 2.0 )
							f_finished_force_nmi = MATH_FloatMin(f_finished_force_nmi + (tf_nmi_force_blend_coef * tf_secure_dt), tf_nmi_force_max)
						
						// REDUCTION DE LA FORCE DE KONG
						if( Proc_KK_RAGE_Test() )		// on peut etre en rage (big scolo)
							tf_kong_force_blend_coef = tf_kong_loose_rage
						else
							tf_kong_force_blend_coef = tf_kong_loose_default
						f_finished_force_kong = MATH_FloatMax(0,f_finished_force_kong - (tf_kong_force_blend_coef * tf_secure_dt))
						
						// GESTION DU BOUTON
						#ifndef _FINAL_
						if( @"univ" i_cheat_page == 4 )
						{
							Str_DisplayTextOnce("TimeOut in... ", cvector(0.4,0.7,0))
							Str_DisplayFloatOnce( MATH_FloatMax(0.0, tf_debut_controle + tf_finished_timeout - f_finished_challenge_duration), cvector(0.55,0.7,0))
						}
						#endif
						if( ti_DBG_stay_in_challenge 
							|| ( f_finished_challenge_duration < (tf_debut_controle + tf_finished_timeout) )
							|| ! @get_global i_Player_is_Kong )
						{
							if( Proc_KK_Mashing_Button_Just_Pressed() )
							{
								#ifndef _FINAL_
								if( @"univ" i_cheat_page == 4 )
									Str_DisplayTextOnce("MASHING !!!", cvector(0.45,0.75,0))
								#endif
								f_finished_force_nmi = MATH_FloatMax(0, f_finished_force_nmi - 0.5)		// la force de l'ennemi diminue
								tf_percent = Proc_KK_Mashing_Pct()
								switch( ti_finisherType )
								{
									case Ci_GrabKong_Finished_Raptors :
									case Ci_GrabKong_Finished_BigScolo :
										f_finished_force_kong = 2.0 + (15.5-(MATH_FloatLimit(tf_percent+0.25, 0.0, 1.0) * 15.5))		// la force de kong augmente, et ça devient de + en + dur en avançant dans l'anim
										break
									case Ci_GrabKong_Finished_Bats :
									case Ci_GrabKong_Finished_Scolo :
									case Ci_GrabKong_Finished_TREX :
									default:
										f_finished_force_kong = 3.0 - (0.5-(tf_percent * 0.5))		// la force de kong augmente, et ça devient de + en + dur en reculant dans l'anim
										break
								}
//								Str_DisplayFloatOnce(f_finished_force_kong, cvector(0.5,0.5,0))
							}
						}
						
						// AJOUT DES FORCES
						if( ti_condition_gagne == Ci_condition_gagne_fin_d_anim )
						{
							// le joueur gagne en arrivant à la fin de l'anim
							f_finished_frame += f_finished_force_kong
							f_finished_frame -= f_finished_force_nmi
						}
						else
						{
							// le joueur gagne en retombant au début de l'anim
							f_finished_frame -= f_finished_force_kong
							f_finished_frame += f_finished_force_nmi
						}
						f_finished_frame = MATH_FloatLimit(f_finished_frame, 0.0, ANI_NbFrameGet(0) )
						
						// TEST VICTOIRE
						ti_condition_gagne_remplie = faux
						if( @get_global i_KNMI_finish_repousse )
						{
							// Fin du Finish KONG Gagne
							ti_condition_gagne_remplie = vrai
							ACT_ActionSet( ti_action_fin )
							LNK_Finish_ActionSet( mid_finish_LNK_ID, Ci_GrabKong_FinishGagne )
						}
						else if( ! ti_DBG_stay_in_challenge
							&& (
									@get_global i_Player_is_Kong
									||
									! f_finished_dual_timer
								)
							&& ( 
									( ti_condition_gagne == Ci_condition_gagne_fin_d_anim && f_finished_frame >= ANI_NbFrameGet(0) )
									|| 
									( ti_condition_gagne == Ci_condition_gagne_debut_d_anim && f_finished_frame <= ti_frame_gagne_debut_d_anim ) 
								) 
							)
						{
							if( ai_finished_count[ti_finisherType] < 3 )		// possible de masher, mais impossible de gagner au 3è coup
							{
								// Fin du Finish KONG Gagne
								ti_condition_gagne_remplie = vrai
								ACT_ActionSet( ti_action_fin )
								LNK_Finish_ActionSet( mid_finish_LNK_ID, Ci_GrabKong_FinishGagne )
							}
							else
								i_finished_force_lose_flag = vrai			// on force le timeout pour remonter l'anim pour ne pas avoir d'anim figée
						}
						
						if( ! ti_condition_gagne_remplie )
						{
							// BUG DU PLAYER D ANIM BUG DU PLAYER D ANIM
							if ( ACT_ActionFinished())
								ACT_ActionSet( ACT_ActionGet() + Ci_ActionSet_Force_SameAction)
							// BUG DU PLAYER D ANIM BUG DU PLAYER D ANIM						
							ANI_Pause(faux)
							ANI_RatioSet(0, MATH_FloatMin(f_finished_frame / ANI_NbFrameGet(0), 0.95) )
							if( @o_finish_actor ACT_HasActionKit() )
							{
								@o_finish_actor ANI_Pause(faux)
								@o_finish_actor ANI_RatioSet(0, MATH_FloatMin(f_finished_frame / @o_finish_actor ANI_NbFrameGet(0), 0.95) )
							}
						}
					}
				}
			}
			break
			
		//-------------------------------------------------------------------------------------------------------------------------------------------
		case Ci_GrabKong_FinishGagne :			// KONG a gagné
		//-------------------------------------------------------------------------------------------------------------------------------------------
			ti_Kamera_finished_on = faux
			if (ti_kamera_mode_kk_a_gagne != -1)
			{
				ti_Kamera_finished_on = vrai
				ti_kamera_mode = ti_kamera_mode_kk_a_gagne
			}
			tstr_temp = "finish gagne"
			@get_global i_KNMI_finish_kong_a_gagne = vrai
			i_request_txt_forced = GeneKon_C_mashing_lift_trex_win
			switch ( ti_finisherType )
			{
				case Ci_GrabKong_Finished_TREX :
					if ( ACT_ActionFinished())
						LNK_Finish_ActionSet( mid_finish_LNK_ID, Ci_GrabKong_FinishFin )
					else if( ANI_CurrentFrameGet(0) > 60 )
						SND_GRAB_STOP
					else
						IO_PafSet( f_rumble_power,1)
					break
				
				case Ci_GrabKong_Finished_Raptors :
					if( ! i_finished_SFX && ANI_CurrentFrameGet(0) > 60 )
					{
						i_finished_SFX = vrai
						LIBGFX_ShakeCam( 0.05, 35.0, 0.0, 0.0, 0.15, 1.1)
						to_bone = @o_finish_actor ANI_CanalObjectGet(Anim_Canal_Torse)
						Proc_KK_SFX_Ring(@to_bone OBJ_PosGet(), Cv_VerticalVector)
					}
					RIDE_Clear_Link_Bat(vrai)		// les bats et les scolos coupent eux-même, c pas kong qui coupe
					// pas de break !!!
				case Ci_GrabKong_Finished_Bats :
				case Ci_GrabKong_Finished_Scolo :
					if( ACT_ActionFinished() )
						LNK_Finish_ActionSet( mid_finish_LNK_ID, Ci_GrabKong_FinishFin )
					else if( ANI_CurrentFrameGet(0) < 100 )
						IO_PafSet( f_rumble_power,1)
					break
					
				case Ci_GrabKong_Finished_BigScolo :
					// SFX & PAF REPOUSSE
					if( ! i_finished_SFX && ANI_CurrentFrameGet(0) > 98 )
					{
						i_finished_SFX = vrai
						LIBGFX_ShakeCam( 0.05, 35.0, 0.0, 0.0, 0.15, 1.1)
						Proc_KK_SFX_Ring(@o_finish_actor OBJ_PosGet(), Cv_VerticalVector)
						tv_zde_old_pos = COL_ZonePosGet(C_zde_fight)
						tv_zde_old_pos -= OBJ_PosGet()
						tv_zde_old_pos = MATH_VecGlobalToLocal(tv_zde_old_pos)
						tv_temp = @o_finish_actor OBJ_PosGet()
						tv_temp -= OBJ_PosGet()
						tv_temp = MATH_VecGlobalToLocal(tv_temp)
						COL_ZonePosSet(C_zde_fight, tv_temp)
						COL_ZoneSizeSet(C_zde_fight, cvector(8.0, 8.0, 8.0))
						KONG_Test_ZDE_ZDE(C_zde_fight, C_zde_corps, Cv_NullVector, faux, vrai)
						COL_ZonePosSet(C_zde_fight, tv_zde_old_pos)
						COL_ZoneSizeSet(C_zde_fight, Cf_ZDE_SizeFight)
					}
					// PASSAGE EN GRAB 2 MAINS
					if( ACT_ActionFinished() )
					{
						IO_PafSet( f_rumble_power,1)
						// JOUER LE REWARD
//						RAGE_Launch_Reward(o_finish_actor)
						if( ! Proc_KK_Get_BIG_NMI_Count(o_finish_actor) && @o_finish_actor Proc_KS_Scolo_Launch_Reward())
						{
							i_request_txt_forced = GeneKon_C_reward_roar
							RAGE_Launch_Action( Ci_Kanim_Intimid_FinishFurieReward)		// Lance l'action mais pas l'effet Fury
							EVENT_LIFE_CurLifeSet(ID_LIFE, EVENT_LIFE_MaxLifeGet(ID_LIFE))
							FINISH_Reset_Count( -1)
							f_finished_just_paf_delay_no_finished = 1.0		// pas de nouveau finished tout de suite
							macro_change_etat( "k_ETAT_main")		// Grab Fini
						}
						else
						{
							i_GrabKong_Type = Ci_GrabKong_Type_Souche
							i_GrabKong_Type &= ~Ci_GrabKong_Type_Finish
							i_GrabKong_MainActionGrab = 0
							ao_CL_GRABKONG[i_GrabKong_MainActionGrab] = LNK_ThisClientGet( o_finish_actor, Ci_LNK_GRAB_KONG, amid_CL_LIAISON_ID_GRABKONG[i_GrabKong_MainActionGrab], vrai, "k_exec_grab_object_param", nofunc, nofunc)		
	
							if ( ao_CL_GRABKONG[i_GrabKong_MainActionGrab])
							{
								i_GrabKong_Souche = vrai
								i_GrabKong_posset_allowed = vrai
								to_bone = ANI_CanalObjectGet( Anim_Canal_Snap_MainD)
								LNK_GrabKong_BoneSet( amid_CL_LIAISON_ID_GRABKONG[0], to_bone)
								macro_change_etat( "k_ETAT_main_souche")		// Grab Fini
							}
						}
					}
					break
			}
			break
			
		//-------------------------------------------------------------------------------------------------------------------------------------------
		case Ci_GrabKong_FinishFin :  	// après que KONG ait gagné
		//-------------------------------------------------------------------------------------------------------------------------------------------
			tstr_temp = "finish fin"
			break
			
		//-------------------------------------------------------------------------------------------------------------------------------------------
		case Ci_GrabKong_FinishPerdu :		// KONG a perdu
		//-------------------------------------------------------------------------------------------------------------------------------------------
			tstr_temp = "finish perdu"
			ti_kamera_mode = ti_kamera_mode_kk_a_perdu
//			if( ! i_mode_mort )
//				DBG_TraceString("KONG s'est fait croquer..\n")
			switch ( ti_finisherType )
			{
				case Ci_GrabKong_Finished_Raptors :
				case Ci_GrabKong_Finished_BigScolo :
					if( ! i_finished_SFX && ANI_CurrentFrameGet(0) > 100 )
					{
						Proc_KK_Death(ti_kamera_mode_kk_a_perdu)
						i_finished_SFX = vrai
						LIBGFX_ShakeCam( 0.05, 35.0, 0.0, 0.0, 0.15, 1.1)
						to_bone = ANI_CanalObjectGet(Anim_Canal_Torse)
						Proc_KK_SFX_Ring(@to_bone OBJ_PosGet(), Cv_VerticalVector)
					}
					break
					
				case Ci_GrabKong_Finished_Bats :
				case Ci_GrabKong_Finished_Scolo :
					if( ! i_mode_mort && ANI_CurrentFrameGet(0) > 20 )
						Proc_KK_Death(ti_kamera_mode_kk_a_perdu)
					break
					
				case Ci_GrabKong_Finished_TREX :
					if( ! i_mode_mort && ANI_CurrentFrameGet(0) > 70 )
						Proc_KK_Death(ti_kamera_mode_kk_a_perdu)
					break				
			}
			
			if ( ACT_ActionFinished())
				SND_GRAB_STOP
			break
	}
}


// KAMERA =========================================================================
// Gestion des cas particuliers (liaison déjà coupée) --------------------- 
ti_action = ACT_ActionGet()
switch( ti_action )
{
	// BATS & SCOLOS
	case Ci_Kanim_FinishedBats_Gagne :
	case Ci_Kanim_FinishedScolos_Gagne :
		ti_Kamera_finished_on = vrai
		if( ti_action == Ci_Kanim_FinishedBats_Gagne )
			ti_kamera_mode = Ci_Kamera_Finished_id_Bats_KongWin
		else
			ti_kamera_mode = Ci_Kamera_Finished_id_Scolos_KongWins
		if( ! i_finished_SFX && ACT_ActionItemGet() == 1 && ANI_CurrentFrameGet(0) > 30 )
		{
			i_finished_SFX = vrai
			LIBGFX_ShakeCam( 0.05, 35.0, 0.0, 0.0, 0.15, 1.1)
			to_bone = ANI_CanalObjectGet(Anim_Canal_MainDroite)
			Proc_KK_SFX_Ring(@to_bone OBJ_PosGet(), Cv_VerticalVector)
		}	
		break
}
// Demande de Kamera ----------------------------------------------------------------
if( ti_Kamera_finished_on )
	@get_Kamera Proc_Kam_FinishMode_Set(ti_kamera_mode, OBJ_Me())	// Parametres pour le moment, le type de Finish et le perso de reference de ce finish (en principe KONG)
else
	@get_global i_kong_camera_status = Ci_Kcamera_deplacement 
// KAMERA ========================================================================


// DEBUG ========================================================================
#ifndef _FINAL_
if( @"univ" i_cheat_page == 4 )
{
	// Dual timer ------------------------
	Str_DisplayTextOnce("Dual timer = ", cvector(0.4,0.65,0))
	Str_DisplayFloatOnce(f_finished_dual_timer, cvector(0.6,0.65,0))
	// Kamera ----------------------------
	if( ti_Kamera_finished_on )
	{
		Str_DisplayTextOnce("kamera finish / id = ", cvector(0.4,0.8,0))
		Str_DisplayIntOnce(ti_kamera_mode, cvector(0.6,0.8,0))
	}
	// Etat liaison ------------------------
	Str_DisplayTextOnce("LIAISON = ", cvector(0.4,0.85,0))
	Str_DisplayTextOnce(tstr_temp, cvector(0.5,0.85,0))
	// Frame -------------------------------
	Str_DisplayTextOnce("FRAME = ", cvector(0.4,0.9,0))
	Str_DisplayFloatOnce(f_finished_frame, cvector(0.5,0.9,0))
	// Difficulté -----------------------------
	if( MSG_GlobalIsValid(mid_finish_LNK_ID) )
	{
		Str_DisplayTextOnce("Difficulté = ", cvector(0.8,0.2,0))
		Str_DisplayIntOnce(ai_finished_count[ti_finisherType], cvector(0.92,0.2,0))
	}
}
#endif


