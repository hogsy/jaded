#include"k_define.var"

messageid		tmid_proposition

object	to_serveur
object	to_bone
object	tao_bones[5][2]

int			ti_ride
int			ti_type

float		tf_dist

vector	tv_temp

#define		ci_type_bats				0
#define		ci_type_raptors			1

tmid_proposition = pop

if((@"univ" Cheat_i_Flags & CHEAT_Invicible))
{
	LNK_ServeurRefuse(tmid_proposition)
	return
}

to_serveur = MSG_GlobalGetGao(tmid_proposition, SERVEUR)

// BATS ============================================
tao_bones[ci_type_bats][0] = ANI_CanalObjectGet(Anim_Canal_Cou)
tao_bones[ci_type_bats][1] = ANI_CanalObjectGet(Anim_Canal_BrasGauche)
tao_bones[ci_type_bats][2] = ANI_CanalObjectGet(Anim_Canal_BrasDroit)
tao_bones[ci_type_bats][3] = ANI_CanalObjectGet(Anim_Canal_Torse)
tao_bones[ci_type_bats][4] = ANI_CanalObjectGet(Anim_Canal_Bassin)

// RAPTORS & SCOLOS ===============================
tao_bones[ci_type_raptors][0] = ANI_CanalObjectGet(Anim_Canal_Cou)
tao_bones[ci_type_raptors][1] = ANI_CanalObjectGet(Anim_Canal_BrasGauche)
tao_bones[ci_type_raptors][2] = ANI_CanalObjectGet(Anim_Canal_BrasDroit)
tao_bones[ci_type_raptors][3] = ANI_CanalObjectGet(Anim_Canal_Torse)
tao_bones[ci_type_raptors][4] = ANI_CanalObjectGet(Anim_Canal_Bassin)

if( @to_serveur AI_IsModel(get_PNJ_KBats_path) )
	ti_type = ci_type_bats
else
	ti_type = ci_type_raptors		// raptors et scolos

to_bone = tao_bones[ti_type][i_bone_index]
//to_bone = ANI_CanalObjectGet(Anim_Canal_Bassin)

tv_temp = @to_bone OBJ_PosGet() + (@to_bone OBJ_BankingGet() * 1.5)
MATH_VecDistance( @to_serveur OBJ_PosGet(), tv_temp )
tf_dist = @to_serveur OBJ_SqrDist( to_bone)

// accepte ?
ti_ride = faux
if( ! @get_global i_Player_is_Kong && Proc_KK_Test_Mode(ETAT_Kong_colonne) )
	ti_ride = faux			// refuser les ride alors que le joueur a laissé Kong sur une colonne (ne pas tomber)
else if( i_etat_courant == ETAT_Kong_finished )
{
	// n'accepter que les nmi spawn&s pour le finished
	switch( LNK_Finish_FinisherTypeGet(mid_finish_LNK_ID) )
	{
		case Ci_GrabKong_Finished_Bats : 
			if( @to_serveur AI_IsModel(get_PNJ_KBats_path) )
				ti_ride = vrai
			break
		case Ci_GrabKong_Finished_Raptors : 
			if( @to_serveur AI_IsModel(get_PNJ_KRaptor_path) )
				ti_ride = vrai
			break
	}
}
else if( ! Proc_KK_RAGE_Test() && ! OBJ_CapaTest(Capa_Refuse_Ride_and_Grab) )
{
	if( @to_serveur AI_IsModel(get_PNJ_Scolo_Path) )
		ti_ride = vrai		// toujours accepter pour les scolos
	else if( @to_serveur AI_IsModel(get_PNJ_KBats_path) )
		ti_ride = vrai		// toujours accepter pour les bats
	else if( @to_serveur AI_IsModel(get_PNJ_KRaptor_path) )		// raptors : test état et distance
	{
		if (i_etat_courant != ETAT_Kong_jump && OBJ_SqrDist(to_serveur) < 49.0 )
			ti_ride = vrai
	}
}

if( ti_ride )
{
	LNK_ClientPropose(tmid_proposition, tf_dist)
	LNK_GrabBoneSet(tmid_proposition, to_bone)
	LNK_GrabBoneIdSet(tmid_proposition, i_bone_index)		// Indice du bone
}

