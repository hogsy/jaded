#include"k_define.var"

float		tf_max_speed

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux
	return
}


// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_Kong_fps) 
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Kong_fps

	if (fct_last_etat)
	{
		i_sort_etat = vrai 
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	f_time_collide_ground = 0.0 // -0.2
	
	// GRAB CLIENT ACCEPT
	ai_SRV_ENABLE[Ci_LNK_KKFINISH_ON_KONG] = vrai
	
	DYN_GravitySet( Cv_Kong_Gravity)
	
	f_fps_speed = 0.0
	v_fps_speed = Cv_NullVector
}
else
{
	f_time_start_etat += TIME_GetDt()
}


// FINISHED =======================================
o_finish_actor = LNK_ServeurGet(Ci_LNK_KKFINISH_ON_KONG, mid_finish_LNK_ID, vrai, nofunc, nofunc)
if (o_finish_actor)
	macro_change_etat("k_ETAT_finished")


// DETECT PAF =============================
AI_Execute("k_exec_detect_paf")
if ( o_paf_actor)
{
	PAF_Test_ChangeEtatValid(fct_track_change)
	if( fct_track_change != nofunc )
		macro_change_etat(fct_track_change)
}


// EXIT FPS ================================
if( ! @get_global i_Player_on_KK_Shoulder )
	macro_change_etat("k_ETAT_main")

if( @get_global i_FPS_Shoulder_force_new_entry )
	macro_change_etat("k_ETAT_main")

if( JUMP_Check_chute(vrai) )
{
	@get_global i_FPS_Shoulder_force_new_entry = vrai
	macro_change_etat("k_ETAT_jump")
}

// DEPLACEMENT ===========================
if( f_joy_norm )
{
	tf_max_speed = 9.0	//15.0
	v_fps_speed = v_joy_sight_normalized
	ACT_ActionSet(Ci_Kanim_Marche_FPS)
}
else
{
	tf_max_speed = 0.0
	ACT_ActionSet(Ci_Kanim_Attente)
}

f_deplacement_speed_factor = MATH_FloatBlend(f_deplacement_speed_factor, tf_max_speed, 5 * TIME_GetDt())
DYN_SpeedSetVector(v_fps_speed * f_deplacement_speed_factor )

OBJ_BankingGeneralSet( OBJ_SightGet(), Cv_VerticalVector)	

OBJ_CapaSet(Capa_Force_Regard_Sight, none)

