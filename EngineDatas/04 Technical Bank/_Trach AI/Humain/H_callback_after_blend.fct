#include "H_defines.var"
#include "H_action.var"

object	to_bidoche
object	to_camera
object	to_obj
object	to_obj1


vector	tv_temp
vector	tv_temp1
vector	tv_temp2

int			ti_enable_blend
int			ti_take_fire_poison
int			ti_gfx
int			ti_paf_repousse
int			ti_temp
int			ti_poison_type

float		tf_temp
float		tf_paf



v_last_dyn_speed = v_dyn_speed
v_dyn_speed = DYN_SpeedGetVector()

// Prefered Target ?
H_PreferedTarget()


// POSITION CAMERA
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if( (OBJ_FlagsStatusGet() & OBJ_C_StatusFlag_Active) && ! @get_global o_cam_on && ! @get_global o_cam_cut)
{
	to_camera = @get_global o_camera
	ti_enable_blend = faux
	tv_temp = @to_camera  OBJ_PosGet()
	to_obj = ANI_CanalObjectGet(Anim_Canal_Tete)
	
	tf_temp = MATH_VecNorm(IO_JoyGetMove1())
	if(i_flag_tir || tf_temp < 0.4)
		v_cam_last_joy1 = MATH_VecBlend(v_cam_last_joy1, Cv_NullVector, 1 * TIME_GetDt())
	else if(i_flag_snipe)
		v_cam_last_joy1 = MATH_VecBlend(v_cam_last_joy1, -IO_JoyGetMove1()*0.4, 0.5 * TIME_GetDt())
	else
		v_cam_last_joy1 = MATH_VecBlend(v_cam_last_joy1, -IO_JoyGetMove1()*0.4, 1.5 * TIME_GetDt())
		
	tv_temp1 = v_cam_last_joy1
	tv_temp1.y = 0
	tv_temp1 = @to_camera MATH_VecLocalToGlobal(tv_temp1)
	if(i_flag_snipe)
		tv_temp1 *= 0.05
	else
		tv_temp1 *= 0.2
	tv_temp1 += @to_camera OBJ_SightGet()
	
	tv_temp2 = v_cam_last_joy1
	if(i_flag_snipe)
		tv_temp2 *= 0.05
	else
		tv_temp2 *= 0.2
	tv_temp2 = @to_camera OBJ_BankingGet() + (@to_camera OBJ_SightGet() * tv_temp2.y)
	
	if(i_flag_pousse) tv_temp1 = v_sight_pousse
	if(i_flag_nage || i_flag_pousse || i_soin_en_cours) tv_temp2 = Cv_VerticalVector
	
	v_cam_last_sight = tv_temp1
	v_cam_last_bank = tv_temp2
	
	@to_obj OBJ_BankingGeneralSet(v_cam_last_sight, v_cam_last_bank)
	@to_obj OBJ_PosSet(tv_temp)		
	
	// Plug sur jack
//	if(@get_global o_bidoche_plug_jack)
//	{
//		to_obj1 = @get_global o_bidoche_plug_jack
//		to_obj = ANI_CanalObjectGet(Anim_Canal_Annex1)
//
//		@to_obj1 OBJ_PosSet(@to_obj OBJ_PosGet() + (1.0 * @to_obj OBJ_SightGet()))
//		@to_obj1 OBJ_SightGeneralSet(@to_obj OBJ_SightGet(), Cv_VerticalVector)		
//	}	
	
	if(i_flag_va_mourrir)
	{
		tv_temp = cvector(0,0.1,0.8)
		tv_temp = MATH_VecBlendRotate(@get_camera OBJ_SightGet(), tv_temp, 2 * TIME_GetDt())
		tv_temp1 = MATH_VecBlendRotate(@get_camera OBJ_BankingGet(), OBJ_HorizonGet(), TIME_GetDt())
		@get_camera OBJ_SightGeneralSet(tv_temp, tv_temp1)
	}
}

// BACKUP INFOS BONES ANNEXES
o_canal_annexe1 = ANI_CanalObjectGet(Anim_Canal_Annex1)
v_pos_annexe1 = @o_canal_annexe1 OBJ_PosGet()
v_sight_annexe1 = @o_canal_annexe1 OBJ_SightGet()
v_bank_annexe1 = @o_canal_annexe1 OBJ_BankingGet()

o_canal_fleche = ANI_CanalObjectGet(Anim_Canal_ArmeFleche)
v_pos_fleche = @o_canal_fleche OBJ_PosGet()
v_sight_fleche = @o_canal_fleche OBJ_SightGet()
v_bank_fleche = @o_canal_fleche OBJ_BankingGet()


//if( i_etat_courant == ETAT_joueur_fake )
//	return

// Herbes
SPG2_AddSphere(OBJ_PosGet(), 2.0)


// Levier
if (i_etat_courant == ETAT_Porte)
	Joueur_TournePilier()

// Présence et Position GFX
GFX_FlammeType = GFX_Fire_GetType()	// toujours calculer
GFX_Fire_ComputePos()

// Eau
ti_take_fire_poison = vrai
if( GFX_FlammeOldPos != Cv_NullVector )
{
	tv_temp = GFX_FlammePos - GFX_FlammeOldPos
	if( MATH_VecDotProduct(tv_temp,tv_temp) < 1 )
	{
		to_obj = COL_RayObject_Vector(GFX_FlammeOldPos, tv_temp, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_visuel)
		if( to_obj && (COL_RayObject_SoundGet() == COL_C_Snd_Water) )
		{
			H_Weapon_SetOnFire(faux)
			H_Weapon_SetPoisonned(faux)
			ti_take_fire_poison = faux
		}
	}
}
// Pluie
if( ! @get_global ENV_pluie_interdit && @get_global ENV_pluie_encours )
{
	H_Weapon_SetOnFire(faux)
	H_Weapon_SetPoisonned(faux)
	ti_take_fire_poison = faux
}
// Take Fire / Poison
if( ti_take_fire_poison && ACT_ActionGet() == Inf_Action_Bambou_Repousse ) // && BambouEnMain() )
{
	DBG_RenderVector(GFX_FlammePos, cvector(0,0,2), 0xFFFF00)
	DBG_RenderVector(GFX_FlammeFXPos, cvector(0,0,2), 0xFFFFFF)
	// test feu prio
	if( ! f_time_no_fire && 
		( EVENT_FIRE_IsPosInFire(GFX_FlammePos, o_grabbed_object_en_main) 
		|| EVENT_FIRE_IsPosInFire(GFX_FlammeFXPos, o_grabbed_object_en_main) ) )
	{
		H_Weapon_SetOnFire(vrai)
	}
	// sinon test poison
	else
	{
		ti_poison_type = EVENT_POISON_IsPosInPoison(GFX_FlammePos, o_grabbed_object_en_main)
		if( ! ti_poison_type )
			ti_poison_type = EVENT_POISON_IsPosInPoison(GFX_FlammeFXPos, o_grabbed_object_en_main)
		if( ti_poison_type )
			H_Weapon_SetPoisonned(ti_poison_type)
	}
}


// REPOUSSE
ti_paf_repousse = faux
@get_global i_bidoche_coup = faux
// ATTRAPER UNE BIDOCHE / METTRE LE FEU
if( ACT_ActionGet() == Inf_Action_Bambou_Repousse )
{
	o_tir_prefered = nobody
	// Mettre le feu
	if( H_Weapon_IsOnFire() )
	{
		if ( ANI_CurrentFrameGet(0) > 20 )
		{
			tv_temp = @get_camera OBJ_SightGet()
			if ( tv_temp.z < 0 )
			{
				o_tir_prefered = COL_RayObject_Vector(GFX_FlammePos , cvector(0,0,-1.5), all, none, 0, COL_C_Ray_on_ColMap_NoCrossable)		
				if(o_tir_prefered) 
					LIBGFX_GridFire( GFX_FlammePos + (0.5 * OBJ_SightGet()), faux )
			}
		}
	}
	
	// Attraper une bidoche
	o_tir_prefered = nobody
	if( ANI_CurrentFrameGet(0) > 20 )
		@get_global i_bidoche_coup = vrai
	
	// Repousse ?
	if( ANI_CurrentFrameGet(0) < 25 )
	{
		ti_paf_repousse = vrai
		tv_temp = GFX_FlammePos
		tv_temp -= @get_camera OBJ_PosGet()
		MATH_VecSetNorm(tv_temp, 4.0)
		o_tir_prefered = COL_RayObject_Vector(@get_camera OBJ_PosGet(), tv_temp, all, none, 0, COL_C_Ray_on_visuel_and_bone_volumes)
	}
}
else if( ACT_ActionGet() == Inf_Action_CoupDePoing )
{
	if( ANI_CurrentFrameGet(0) > 15 )
	{
		ti_paf_repousse = vrai
		o_tir_prefered = COL_RayObject_Dist(@get_camera OBJ_PosGet(), @get_camera OBJ_SightGet(), 2.0, all, none, 0, COL_C_Ray_on_visuel_and_bone_volumes)
	}
}

// Repousse ?
if( o_tir_prefered && COL_RayObject_SoundGet() == COL_C_Snd_Water )
	o_tir_prefered = nobody
if( ti_paf_repousse && o_tir_prefered && o_last_repousse != o_tir_prefered )
{
	o_last_repousse = o_tir_prefered
	v_tir_prefered_impact = COL_RayObject_PosGet()
	i_tir_prefered_canal = COL_RayObject_CanalGet()
	if( i_tir_prefered_canal != -1 )
		o_tir_prefered = COL_RayObject_ActorGet()
	
	@get_global o_jack_last_paf = o_tir_prefered
	
	// PAFS
	ti_temp = C_PAF_KK_Repousse
	tf_paf = 0.0
	switch(H_Weapon_ID_Get())
	{
		case Ci_weapon_ID_bambou :
		case Ci_weapon_ID_ossement :
			ti_temp |= C_PAF_KK_GetBidoche		// chopper une bidoche !!!
			if( H_Weapon_IsOnFire() )
			{
				tf_paf = 5.0
				ti_temp |= C_PAF_KK_Fire
			}
			else if( H_Weapon_IsPoisonned() )
			{
				tf_paf = 5.0
				ti_temp |= C_PAF_KK_Poison
			}
			else
				tf_paf = 3.0
			break

		default:
			ti_temp |= C_PAF_KK_Punch		// coup de poing de jack
			tf_paf = 0.0
			break
	}
	
	EVENT_AddEventPafCanal(C_EVENT_FILTER_All, ti_temp, OBJ_Me(), Cf_EVENT_Duree_1Trame, o_tir_prefered, i_tir_prefered_canal, tf_paf, @get_camera OBJ_SightGet(), v_tir_prefered_impact)
	IO_PafSet(50, 2)
}


// FLECHE POUR ARC
if( o_dup_fleche )
	@o_dup_fleche OBJ_FlagInvisibleSet(vrai)
if( ! @get_global i_Player_is_Kong && H_ActionArc(ACT_ActionGet()) )		// on peut posséder l'arc mais jouer une autre anim (punch, nage...)
{
	if( (ACT_ActionGet() == Inf_Action_Arc_Incline_Deb && ANI_CurrentFrameGet(0) > 25)
		|| ACT_ActionGet() == Inf_Action_Arc_Incline_Tendu 
		|| (ACT_ActionGet() == Inf_Action_Arc_Incline_Tir && ANI_CurrentFrameGet(0) > 25) )
		Dupl_Fleche(o_dup_fleche, faux)		// générer une flèche quand on bande l'arc
	if( o_dup_fleche && i_joy_flag_viser )
	{
		@o_dup_fleche OBJ_FlagInvisibleSet(faux)
		@o_dup_fleche OBJ_PosSet(v_pos_fleche)
		@o_dup_fleche OBJ_SightGeneralSet(v_sight_fleche, - v_bank_fleche)
	}
}




// BACKUP O_TIR_PREFERED POUR ANTICIPATION
if(v_tir_prefered_impact != Cv_NullVector)
{
	tv_temp = @get_camera OBJ_PosGet() + cvector(0,0,-0.2)
	DBG_RenderVector(tv_temp, v_tir_prefered_impact - tv_temp, color_rouge)
}
