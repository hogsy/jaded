object		to_nearest_cible
object		to_nearest_me
int				ti_num, ti_i, ti_rank
object		ao_obj[100]
messageid EVT_ID
object 		EVT_Pere
vector		tv_temp, tv_temp1
int				ti_state
float			tf_temp
object		to_obj, to_obj1
vector		v_pos_cache
object		to_cache

v_pos_cache = pop

to_nearest_cible = WAY_WPNearestOfPos(v_pos_cache, move_network, -1, 0, 0)	
to_nearest_me = WAY_WPNearestOfPos(OBJ_PosGet(), move_network, -1, 0, 0)
ti_num = WAY_ShortWay(move_network, &ao_obj[0], to_nearest_me, to_nearest_cible, -1, 0)
if(ti_num)
{
	for(ti_i = 0; ti_i < ti_num - 1; ti_i++)	// On ne test pas le WP de depart
	{
		to_cache = ao_obj[ti_i]
//		if(OBJ_SqrDist(to_cache) > 15 * 15) continue
		
		// Si un enemi est trop pres du point intermédiaire, on annule la cache
		ti_rank = -1
		EVT_ID = MSG_GlobalScan(C_EVENT_TYPE_Enemy, &ti_rank)
		while(MSG_GlobalIsValid(EVT_ID))
		{
			EVT_Pere = EVENT_PereGet(EVT_ID)
			ti_state = EVENT_EnemyStateGet( EVT_ID )
			if (ti_state == C_EVENT_EnemyState_Fight || ti_state == C_EVENT_EnemyState_Wait)
			{
				// Enemi proche d'un wp du chemin
				tv_temp = @EVT_Pere OBJ_PosGet() - @to_cache OBJ_PosGet()
				if(MATH_VecDotProduct(tv_temp, tv_temp) < 4 * 4)
				{
					tv_temp1 = GRID_PosValid(@to_cache OBJ_PosGet(), @EVT_Pere OBJ_PosGet(), faux)
					if(!MATH_VecNull(tv_temp1))
					{
						push(1)
						return
					}
				}
				
				// Enemi un peu plus loin, mais qui regarde le wp
				if(MATH_VecDotProduct(tv_temp, tv_temp) < 6 * 6)
				{
					tv_temp1 = tv_temp
					MATH_VecSetHorzNormalize(tv_temp1)
					if(MATH_VecDotProduct(@EVT_Pere OBJ_SightGet(), tv_temp1) < 0)
					{
						push(1)
						return
					}
				}
				
				// Y'a-t-il un mechant sur la ligne droite entre les 2 wps ?
				to_obj = ao_obj[ti_i]
				to_obj1 = ao_obj[ti_i + 1]
				tv_temp = @to_obj OBJ_PosGet() - @EVT_Pere OBJ_PosGet()
				tv_temp1 = @to_obj1 OBJ_PosGet() - @EVT_Pere OBJ_PosGet()
				if(MATH_VecDotProduct(tv_temp, tv_temp1) < 0) // Enemi entre les deux wps
				{				
					tv_temp = @to_obj OBJ_PosGet() - @to_obj1 OBJ_PosGet()
					MATH_VecSetHorzNormalize(tv_temp)
					tv_temp1 = @to_obj OBJ_PosGet() - @EVT_Pere OBJ_PosGet()
					MATH_VecSetHorzNormalize(tv_temp1)
					tf_temp = MATH_AbsFloat(MATH_VecDotProduct(tv_temp, tv_temp1))
					if(tf_temp > 0.9)
					{
						push(1)
						return
					}
				}
			}
			
			EVT_ID = MSG_GlobalScan(C_EVENT_TYPE_Enemy, &ti_rank)
		}
	}
}

push(0)