#include "H_defines.var"
#include "H_action.var"

#define	Cv_unknown	cvector(Cf_Infinit,Cf_Infinit,Cf_Infinit)

vector	tv_new_speed
vector	tv_new_sight
vector	tv_new_banking
vector	tv_temp
vector	tv_temp1
vector	tv_speed
vector	tv_tir_impact
vector	tv_pos

float		tf_hauteur
float		tf_speed
float		tf_range
float		tf_temp

int			ti_new_action_enabled
int			ti_action
int			ti_weapon_id
int			ti_weapon_index

object	to_weapon
object	to_camera
object	to_bone

//	i_flag_crouch
//	i_joy_flag_viser
//	i_joy_flag_tir
//	i_joy_flag_repousse
//	i_joy_flag_lancer
//	i_joy_flag_drop
//	i_joy_flag_reload
//	i_joy_flag_swap
//	i_joy_flag_ramasse


// CHEAT MOVE
if( i_flag_cheat_move )
{
	ACT_ActionSet1(Inf_Action_MainsLibres_Att)
	i_flag_action_wait_for_end = faux
	return
}

// JUMP FROM KK
if( i_jump_from_KK_flag )
{
	ACT_ActionSet1(Inf_Action_MainsLibres_Att)
	return			// ne pas changer la dyna pour conserver l'impulsion
}

// ON KK SHOULDER
if( @get_global i_Player_on_KK_Shoulder && f_fps_shoulder_duree < 0.1 )
{
	ACT_ActionSet1(Inf_Action_MainsLibres_Att)
	return			// anti-bug du pop de l'arme
}


// DUREE MOVE
if( f_joy_norm )
	f_time_move += TIME_GetDt()
else
	f_time_move = 0.0


// NAGE (ou sort de l'eau)
if( i_flag_nage || f_nage_wall_contact_Z_offset )
{
	// ACTION
	if( H_Weapon_ID_Get() )	// arme à la main
		ti_action = Inf_Action_Nage_Weapon
	else if( f_nage_wall_contact_Z_offset )		// monter à un rebord
		ti_action = Inf_Action_Nage_Avance
	else if( ! f_joy_norm)			// nage attente
		ti_action = Inf_Action_Nage_Att
	else if( MATH_VecDotProduct(OBJ_SightGet(), v_joy_dir) > 0 )	// nage avance
		ti_action = Inf_Action_Nage_Avance
	else		// nage recule
		ti_action = Inf_Action_Nage_Recule
	ACT_ActionSet1(ti_action)
	
	// POSITION
	tv_temp = OBJ_PosGet()
	tf_hauteur = f_water_Z_world - ( Hauteur_Eau_Nage - 0.05)
	tf_hauteur += MATH_Sin(TIME_Get() * 2) * 0.025	
	tv_temp.z = MATH_FloatBlend(tv_temp.z, tf_hauteur, 10 * TIME_GetDt())
	if( f_nage_wall_contact_Z_offset )
	{
		tv_temp.z += f_nage_wall_contact_Z_offset
//		COL_ColSetActivationSet(0, C_bit_zdm_pied)
	}
	OBJ_PosSet(tv_temp)
	
	// ORIENTATION
	tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), v_joy_dir, 0.5 * TIME_GetDt())	
	tv_new_banking = Cv_VerticalVector
	OBJ_BankingGeneralSet(tv_new_sight, tv_new_banking)
	return		// pas la suite !!!!
}


// ACTIONS
ti_new_action_enabled = vrai
if( ACT_ActionGet() == Inf_Action_Ramasse )
{
	if( ! ACT_ActionFinished() )
	{
		ti_new_action_enabled = faux
		if( ACT_ActionItemGet() == 1 )
		{
			if( @"univ" o_ramasse_objet_who == OBJ_Me() )
			{
				ti_weapon_id = @"univ" i_ramasse_objet
				to_weapon = @"univ" o_ramasse_objet_what
				ti_weapon_index = H_Joueur_GrabbedObject_Add(ti_weapon_id, to_weapon)
				H_Weapon_Current_Set(ti_weapon_index, ti_weapon_id, to_weapon)
				// reset ramasse
				@"univ" o_ramasse_objet_who = nobody
				@"univ" o_ramasse_objet_what = nobody
				@"univ" i_ramasse_objet = -1
				// kill link !
//				LNK_ClientGet(Ci_LNK_GRAB_OBJECT, mid_LNK_Ramasse, faux, nofunc, nofunc, nofunc)
			}
		}
	}
}
if( i_flag_action_wait_for_end && ACT_ActionFinished() )
	i_flag_action_wait_for_end = faux
if( i_flag_action_wait_for_end )
	ti_new_action_enabled = faux
if( ti_new_action_enabled )
{
	ti_action = ACT_ActionGet()		// par défaut on conserve l'action en cours
	if( i_joy_flag_ramasse )
	{
		ti_action = Inf_Action_Ramasse
	}
	else if( i_joy_flag_repousse )
	{
		switch( H_Weapon_ID_Get() )
		{
			case Ci_weapon_ID_bambou :
			case Ci_weapon_ID_ossement :
				ti_action = Inf_Action_Bambou_Repousse
				i_flag_action_wait_for_end = vrai
				break
				
			case Ci_weapon_ID_arc :
			case 0 :	// poing
				ti_action = Inf_Action_CoupDePoing
				i_flag_action_wait_for_end = vrai
				break
		}
	}
	else
	{
		switch( H_Weapon_ID_Get() )
		{
			// ARC ----------------------------------------------------
			case Ci_weapon_ID_arc :
				if( i_joy_flag_tir )
				{
//					if( @"univ" Weapon_Pref_Arc_Horiz )
//						ti_action = Inf_Action_Arc_Arme_Horiz_Tir
//					else
//						ti_action = Inf_Action_Arc_Arme_Vert_Tir
//					i_flag_action_wait_for_end = vrai

					ti_action = Inf_Action_Arc_Incline_Tir
//					tv_speed = @o_dup_fleche OBJ_SightGet() * 50.0
						
//					@o_dup_fleche OBJ_PosSet(v_pos_fleche)
					to_camera = @get_global o_camera
					tf_range = 15.0
					if(v_tir_prefered_impact != Cv_NullVector)
						tv_tir_impact = v_tir_prefered_impact
					else
						tv_tir_impact = @to_camera OBJ_PosGet() + (@to_camera OBJ_SightGet() * tf_range)
					tv_speed = tv_tir_impact - @o_dup_fleche OBJ_PosGet()
					DBG_RenderVector(@o_dup_fleche OBJ_PosGet(), tv_speed, color_jaune)
					
					// Anticipation
					if( o_tir_prefered )
					{
						if( @o_tir_prefered AI_IsModel(get_PNJ_KBats_path) )
						{
							if( @get_PNJ_KBats_path o_tir_prefered i_beziers_flag_last_trame )
							{
								tv_temp1 = @get_PNJ_KBats_path o_tir_prefered v_beziers_sight
								tf_temp = @get_PNJ_KBats_path o_tir_prefered f_speed
								tf_temp = MATH_FloatMin(tf_temp, 3.0)		// aide au tir limitée
								tv_speed += (tv_temp1 * tf_temp)
							}
//							else
//							{
//								to_bone = @o_tir_prefered ANI_CanalObjectGet(Anim_Canal_Tete)
//								if( ! to_bone )
//									to_bone = o_tir_prefered
//								tv_speed = @to_bone OBJ_PosGet() - @o_dup_fleche OBJ_PosGet()
//							}
						}
//						else if( @o_tir_prefered OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Dyna) && @o_tir_prefered DYN_SpeedGet() )
//						{
//							tv_temp1 = @o_tir_prefered DYN_SpeedGetVector()
//							tf_temp = @o_tir_prefered DYN_SpeedGet()
//							tv_speed += tv_temp1
//						}
//						else
//						{
//							to_bone = @o_tir_prefered ANI_CanalObjectGet(Anim_Canal_Tete)
//							if( ! to_bone )
//								to_bone = o_tir_prefered
//							tv_speed = @to_bone OBJ_PosGet() - @o_dup_fleche OBJ_PosGet()
//						}
						DBG_RenderVector(@o_dup_fleche OBJ_PosGet(), tv_speed, color_blanc)
					}
					
					MATH_VecSetNorm(tv_speed, 30.0)
//					@o_dup_fleche OBJ_PosSet(@to_camera OBJ_PosGet())
//					@o_dup_fleche OBJ_SightGeneralSet(@to_camera OBJ_SightGet(), @to_camera OBJ_BankingGet())
					@o_dup_fleche Fleche_Tir(OBJ_Me(), tv_speed)
					o_dup_fleche = nobody		// forget me
				}
				else if( i_joy_flag_viser )
				{
					switch( ACT_ActionGet() )
					{
						// DEB
						case Inf_Action_Arc_Incline_Deb :
							if( ACT_ActionFinished() )
							{
								f_Arc_tendu_duree = 0.0
								ti_action = Inf_Action_Arc_Incline_Tendu
							}
							break
//						case Inf_Action_Arc_Arme_Horiz_Deb :
//						case Inf_Action_Arc_Arme_Vert_Deb :
//							macro_arc_corde_tendue
//							if( ACT_ActionFinished() )
//							{
//								// passe en tendu
//								if( @"univ" Weapon_Pref_Arc_Horiz )
//									ti_action = Inf_Action_Arc_Arme_Horiz_Tendu
//								else
//									ti_action = Inf_Action_Arc_Arme_Vert_Tendu
//							}
//							break
							
						// ARMER
						case Inf_Action_Arc_Incline_Tendu :
							f_Arc_tendu_duree += TIME_GetDt()
							@o_grabbed_object_en_main Arc_Tendre_Corde()
							break
//						case Inf_Action_Arc_Arme_Horiz_Tendu :
//						case Inf_Action_Arc_Arme_Vert_Tendu :
//							if( @"univ" Weapon_Pref_Arc_Horiz )
//								ti_action = Inf_Action_Arc_Arme_Horiz_Tendu
//							else
//								ti_action = Inf_Action_Arc_Arme_Vert_Tendu
//							macro_arc_corde_tendue
//							break
							
						// TRANSITION
//						case Inf_Action_Arc_Arme_Horiz_tr_Vert :
//						case Inf_Action_Arc_Arme_Vert_tr_Horiz :
//							macro_arc_corde_tendue
//							break
							
						// TIRER
						case Inf_Action_Arc_Incline_Tir :
							if( ACT_ActionFinished() )
							{
								f_Arc_tendu_duree = 0.0
								ti_action = Inf_Action_Arc_Incline_Tendu
							}
							break
//						case Inf_Action_Arc_Arme_Horiz_Tir :
//						case Inf_Action_Arc_Arme_Vert_Tir :
//							if( ANI_CurrentFrameGet(0) > 20 )
//								macro_arc_corde_tendue
//							if( ACT_ActionFinished() )
//							{
//								if( @"univ" Weapon_Pref_Arc_Horiz )
//									ti_action = Inf_Action_Arc_Arme_Horiz_Tendu
//								else
//									ti_action = Inf_Action_Arc_Arme_Vert_Tendu
//							}
//							break
							
						// INIT MODE ARC
						default:
							ti_action = Inf_Action_Arc_Incline_Deb
//							if( @"univ" Weapon_Pref_Arc_Horiz )
//								ti_action = Inf_Action_Arc_Arme_Horiz_Deb
//							else
//								ti_action = Inf_Action_Arc_Arme_Vert_Deb
							break
					}
				}
				else
				{
					if( f_joy_norm )
						ti_action = Inf_Action_Weapon_Marche
					else
						ti_action = Inf_Action_Weapon_Att
				}
				break
	
			// BAMBOU --------------------------------------------
			case Ci_weapon_ID_bambou :
			case Ci_weapon_ID_ossement :
				if( i_joy_flag_lancer )
					ti_action = Inf_Action_Bambou_Lance
				else if( i_joy_flag_viser )
				{
					if( f_joy_norm )
						ti_action = Inf_Action_Bambou_Arme_Marche
					else
						ti_action = Inf_Action_Bambou_Arme_Att
				}
				else
				{
					if( f_joy_norm )
						ti_action = Inf_Action_Bambou_Marche
					else
						ti_action = Inf_Action_Bambou_Att
				}
				break
			
			// GENERIQUE --------------------------------------------
			case Ci_weapon_ID_crane :
			case Ci_weapon_ID_hachette :
			case Ci_weapon_ID_levier :
			case Ci_weapon_ID_sarbacane :
				// dissocier si besoin !!!!!
				if( i_joy_flag_lancer )
					ti_action = Inf_Action_Weapon_Lance
				else if( i_joy_flag_viser )
				{
					if( f_joy_norm )
						ti_action = Inf_Action_Weapon_Arme_Marche
					else
						ti_action = Inf_Action_Weapon_Arme_Att
				}
				else
				{
					if( f_joy_norm )
						ti_action = Inf_Action_Weapon_Marche
					else
						ti_action = Inf_Action_Weapon_Att
				}
				break
				
			// MAINS LIBRES --------------------------------------------
			default:
			 	if( i_joy_flag_repousse )
			 	{
				 	ti_action = Inf_Action_CoupDePoing
					i_flag_action_wait_for_end = vrai
				}
				else if( f_joy_norm )
					ti_action = Inf_Action_MainsLibres_Marche
				else
					ti_action = Inf_Action_MainsLibres_Att
				break
		}
	}
	
	ACT_ActionSet1(ti_action)
}

