//=============================================================
//=============================================================
procedure_local void CasseLance( int ti_force )
{
	object		to_obj
	object 		to_bambou
	message 	tm_msg
	
	/////////////// KING KONG 2 /////////////////
	return	
	/////////////// KING KONG 2 /////////////////
	
//	// Bidoche plugée
//	if(joueur && @get_global o_bidoche_plug_jack)
//	{
//		to_obj = @get_global o_bidoche_gao
//		@to_obj OBJ_CapaSet(OBJ_Capa_0, none)
//
//		@get_global o_bidoche_gao = nobody
//		@get_global o_bidoche_plug_jack = nobody
//	}
//	
//	@"univ" i_jack_cpt_plug = 1000
//	
//	GFX_FlammeAxe = -3.8 * @o_canal_annex1 OBJ_BankingGet()
//	GFX_FlammeAxe += 1.1 * @o_canal_annex1 OBJ_HorizonGet()
//	if (i_flag_arme_haute)
//		GFX_FlammeAxe += -1.25 * @o_canal_annex1 OBJ_SightGet()
//	else
//		GFX_FlammeAxe += -1 * @o_canal_annex1 OBJ_SightGet()
//	MATH_VecSetNorm( GFX_FlammeAxe, 0.1 )
//	GFX_FlammePos = @o_canal_annex1 OBJ_PosGet() - (10 * GFX_FlammeAxe)
//	GFX_FlammeFXPos = GFX_FlammePos
//	
//	to_bambou = @get_bambou_pointe OBJ_Duplicate( GFX_FlammeFXPos ) 
//	@to_bambou OBJ_SightGeneralSet(GFX_FlammeAxe, Cv_VerticalVector)
//	
//	MSG_SetNull(tm_msg)		
//	tm_msg.msg_id = msg_id_grenadefall
//	tm_msg.msg_sender = OBJ_Me()
//	tm_msg.msg_vec1 = OBJ_SightGet() * 5
//	tm_msg.msg_vec2 = Cv_NormalGravity
//	tm_msg.msg_vec3 = cvector(1.0, 1.0, 0.0)
//	@to_bambou MSG_Send( tm_msg )	
//	
//	if(@"univ" i_weapon_ID[i_id_humain] == Ci_weapon_ID_bambou_moy || ti_force)
//	{
//		@to_bambou OBJ_DrawMaskSet(0, DM_C_Draw)
//		@to_bambou SND_RequestPlay(15)
//	}
//	else
//	{
//		@to_bambou SND_RequestPlay(14)
//	}
}


//=============================================================
//=============================================================
//procedure_local int H_EtatIdle( )
//{
//	object	to_obj
//	vector	tv_temp
//	int			i
//	float		tf_duree
//	
//	i_mode_idle = faux
//	if(!f_joy_norm)
//		f_time_idle_enter += TIME_GetDt()
//	else
//	{
//		PRG_Idle_Num = 0
//		f_time_idle_enter = 0
//		return 0
//	}
//		
//	if(f_time_idle_enter < 2) return 0
//	if(!PRG_Idle) return 0
//	if(i_feu_pas_loin) return 0
//	if(i_in_fight) return 0
//	
//	i_mode_idle = vrai
//	to_obj = @"Progression/PRG_IntentionIdle" PRG_Idle des_ao_destination[PRG_Idle_Num]
//	if(!to_obj) 
//	{
//		PRG_Idle_Num = 0
//		to_obj = @"Progression/PRG_IntentionIdle" PRG_Idle des_ao_destination[PRG_Idle_Num]
//	}
//	
//	if(ZoneDangereuse(@to_obj OBJ_PosGet())) return 0
//	tf_duree = @"Progression/PRG_IntentionIdle" PRG_Idle des_af_duree[PRG_Idle_Num]
//	if(!f_time_idle_in)
//	{
//		tv_temp = v_way_destpos
//		v_way_destpos = @to_obj OBJ_PosGet()
//		f_time_attend = 0
//		i_flag_force_marche = vrai
//		CommonMove()
//		v_way_destpos = tv_temp
//		AI_Execute("H_exec_select_action")
//		f_joy_norm = 0
//	}
//	else
//	{
//		i_flag_arrived = vrai
//	}
//	
//	if(i_flag_arrived)
//	{
//		f_time_idle_in += TIME_GetDt()
//		if(f_time_idle_in > tf_duree)
//		{
//			PRG_Idle_Num = MATH_Modulo(PRG_Idle_Num + 1, 5)
//			f_time_idle_in = 0
//		}
//		
//		return 0
//	}
//	
//	return 1
//}
//
//=============================================================
//=============================================================
procedure_local int H_SilenceDepuis( float delay )
{
	float	tf_time
	
//	tf_time = SPEECH_HumanGetLastTime(C_ID_Denham)
//	tf_time = MATH_FloatMax(tf_time, SPEECH_HumanGetLastTime(C_ID_Hayes))
//	tf_time = MATH_FloatMax(tf_time, SPEECH_HumanGetLastTime(C_ID_Jimmy))
//	tf_time = MATH_FloatMax(tf_time, SPEECH_HumanGetLastTime(C_ID_Ann))
//	if(!TIME_Elapsed(tf_time, delay)) return faux
	return vrai
}

//=============================================================
//=============================================================
procedure_local int H_SilenceDepuisMoi( float delay )
{
	float	tf_time
	
	tf_time = SPEECH_HumanGetLastTime(i_id_humain)
	if(!TIME_Elapsed(tf_time, delay)) return faux
	return vrai
}

//=============================================================
//=============================================================
//procedure_local int H_Attitude( )
//{
//	if(f_joy_norm) return -1
//	if(!PRG_Intention) return -1
//	if(i_force_intention != -1) return i_force_intention
//	return @"Progression/PRG_Intention" PRG_Intention des_i_attitude
//}

//=============================================================
//=============================================================
procedure_local void ResetPath()
{
	i_way_force_recompute = vrai
	i_way_case_nbr = 0
}


procedure_local void H_SetGFXTracePointData(int ti_point_index, int ti_color, vector tv_pos, vector tv_speed)
{
	#define noiseprop 0.15
	#define Cf_Water_visual_offset 0.02

	GFX_Seti(GFX_Water_Trace, 12104 , ti_point_index) // Actual point to set
	GFX_Seti(GFX_Water_Trace, 12109 , ti_color) 	// Color
	GFX_Setv(GFX_Water_Trace, 12200, tv_pos) 	// StartPos
	GFX_Setv(GFX_Water_Trace, 12201, (1.0 - noiseprop ) * tv_speed) 	// Speed
	GFX_Setv(GFX_Water_Trace, 12208, noiseprop * 	tv_speed) 	// Random Speed
	GFX_Setf(GFX_Water_Trace, 12003, f_water_Z + Cf_Water_visual_offset)	// Constraint ZMin
}

procedure_local void H_GFX_Trace()
{
	float		tf_coef
	float		tf_Z_offset
	vector 	tv_pos
	vector	GX, GY, GZ
	int			ti_temp
	int 		Color

	float		alpha_airtrace	
	float		tf_Z_coef
	float		Largeur_A
	float		Largeur_B
	float		Largeur_C
	float		tf_speed
	float		tf_norm
	
	object	to_visuel	

	#define Force_Jet_SIDE 1.0
	#define Force_Jet_UP 0.8
	
	return

//	tv_pos = OBJ_PosGet()
//
//	tf_Z_offset = 0.3
//
//	Largeur_A = 0.25
//	Largeur_B = 0.15
//	Largeur_C = 0.05
//	
//	GY = DYN_SpeedGetVector()
//	GY.z = 0.0
//	tf_speed = MATH_VecNorm(GY)
//	if (tf_speed > 0.01)
//	{
//		GY /= tf_speed
//	}
//	else
//	{
//		GY = OBJ_SightGet()
//		GY.z = 0.0
//		tf_norm = MATH_VecNorm(GY)
//		if (tf_norm > 0.01)
//			GY /= tf_norm
//		else
//		{
//			GY = - OBJ_BankingGet()
//			MATH_VecSetHorzNormalize(GY)
//		}
//	}
//
//	tf_Z_coef = f_water_Z + tf_Z_offset - tv_pos.z
//	tf_Z_coef /= tf_Z_offset
//	tf_Z_coef = MATH_FloatLimit(tf_Z_coef, 0.0, 1.0)
//
//	tf_coef = MATH_FloatLimit(DYN_SpeedGet() - 0.1, 0.0, 0.5) * 2.0
//	tf_coef *= tf_Z_coef
//
//	alpha_airtrace = tf_coef
//
//	if ( ! tf_coef ) // || (GFX_Water_Trace == -1 && tf_Z_coef < 1.0))
//	{
//		f_time_trace_off += TIME_GetDt()
//	
//		if (GFX_Water_Trace == -1)
//		{
//			return
//		}
//		else if (f_time_trace_off > 1.0)
//		{
//			GFX_Del(GFX_Water_Trace)
//			GFX_Water_Trace = -1
//			return
//		}
//	}
//	else
//	{
//		f_time_trace_off = 0.0
//	}
//
//	if(GFX_Water_Trace == -1)
//	{
//		alpha_airtrace	= 0.0
//	
//		to_visuel = ANI_CanalObjectGet(0)
//
//		GFX_Water_Trace = GFX_Add(12)
////		GFX_MaterialSet(GFX_Water_Trace, to_visuel, 1)	// met le materiau
//		GFX_MaterialSet(GFX_Water_Trace, get_SFX_light_and_smoke, 39)	// met le materiau
//
//		GFX_Seti(GFX_Water_Trace, 12100 , 6)												// Number of point per profile
//		GFX_Seti(GFX_Water_Trace, 12101 , 5) 											// Number of Link per profile
//		GFX_Seti(GFX_Water_Trace, 12102 , 8) 											// Number of profiles
//		
//		GFX_Seti(GFX_Water_Trace, 12103 , 1) 											// start
//		GFX_Seti(GFX_Water_Trace, 12111 , 8) 											// UTiler
//		
//		GFX_Setf(GFX_Water_Trace, 12004 , 0.35) 											// Segment lenght min
//		GFX_Setv(GFX_Water_Trace, 12202, cvector(0.05,0.05, 0.0)) 						// Friction
//		
//		GFX_Seti(GFX_Water_Trace, 12105 , 0) 											// Actual LINK to set
//		GFX_Seti(GFX_Water_Trace, 12106 , 0) 											// Point A
//		GFX_Seti(GFX_Water_Trace, 12107 , 1) 											// Point B
//		
//		GFX_Setf(GFX_Water_Trace, 12001 , 0.0) 											// Point VA
//		GFX_Setf(GFX_Water_Trace, 12002 , 0.33) 										// Point VB
//			
//		GFX_Seti(GFX_Water_Trace, 12105 , 1) 											// Actual LINK to set
//		GFX_Seti(GFX_Water_Trace, 12106 , 1) 											// Point A
//		GFX_Seti(GFX_Water_Trace, 12107 , 2) 											// Point B
//		
//		GFX_Setf(GFX_Water_Trace, 12001 , 0.33) 											// Point VA
//		GFX_Setf(GFX_Water_Trace, 12002 , 0.66) 											// Point VB
//			
//		GFX_Seti(GFX_Water_Trace, 12105 , 2) 											// Actual LINK to set
//		GFX_Seti(GFX_Water_Trace, 12106 , 2) 											// Point A
//		GFX_Seti(GFX_Water_Trace, 12107 , 3) 											// Point B
//		
//		GFX_Setf(GFX_Water_Trace, 12001 , 0.66) 									// Point VA
//		GFX_Setf(GFX_Water_Trace, 12002 , 1.0) 										// Point VB
//		
//		GFX_Seti(GFX_Water_Trace, 12105 , 3) 											// Actual LINK to set
//		GFX_Seti(GFX_Water_Trace, 12106 , 3) 											// Point A
//		GFX_Seti(GFX_Water_Trace, 12107 , 4) 											// Point B
//		GFX_Setf(GFX_Water_Trace, 12001 , 0.5) 											// Point VA
//		GFX_Setf(GFX_Water_Trace, 12002 , 0.75) 											// Point VB
//		
//		GFX_Seti(GFX_Water_Trace, 12105 , 4) 											// Actual LINK to set
//		GFX_Seti(GFX_Water_Trace, 12106 , 4) 											// Point A
//		GFX_Seti(GFX_Water_Trace, 12107 , 5) 											// Point B
//		GFX_Setf(GFX_Water_Trace, 12001 , 0.75) 										// Point VA
//		GFX_Setf(GFX_Water_Trace, 12002 , 1.0) 											// Point VB
//			
//		GFX_FlagSet(GFX_Water_Trace, 0 , 1)
//		GFX_FlagSet(GFX_Water_Trace, 2 , 1)
//	}
//
//	Color = 0x00C0DFDF
//	ti_temp = alpha_airtrace * 64
//	Color |= (ti_temp << 24)
//		
//	// POSITIONNEMENT DES POINTS
//	H_SetGFXTracePointData(0, Color, cvector(-Largeur_A, -0.1, 0.0), tf_coef * cvector(-Force_Jet_SIDE, 0.0, Force_Jet_UP * 0.5))
//	H_SetGFXTracePointData(5, Color, cvector(Largeur_A, -0.1, 0.0), tf_coef * cvector(Force_Jet_SIDE, 0.0, Force_Jet_UP * 0.5))
//	H_SetGFXTracePointData(1, Color, cvector(-Largeur_B, -0.1, 0.0), tf_coef * cvector(-Force_Jet_SIDE * 0.75, 0.0, Force_Jet_UP))
//	H_SetGFXTracePointData(4, Color, cvector(Largeur_B, -0.1, 0.0), tf_coef * cvector(Force_Jet_SIDE * 0.75, 0.0, Force_Jet_UP))
//	H_SetGFXTracePointData(2, Color, cvector(-Largeur_C, -0.1, 0.0), tf_coef * cvector(-Force_Jet_SIDE * 0.5, 0.0, Force_Jet_UP * 0.5))
//	H_SetGFXTracePointData(3, Color, cvector(Largeur_C, -0.1, 0.0), tf_coef * cvector(Force_Jet_SIDE * 0.5, 0.0, Force_Jet_UP * 0.5))
//	
//	GFX_Setf(GFX_Water_Trace, 12000 , -2.0) 									// Gravity
//	
//	GY *= -1.0
//	GZ = Cv_VerticalVector
//	GX = MATH_VecCrossProduct(GY, GZ)
////	DBG_RenderVector(OBJ_PosGet(), GX * 5.0, color_rouge)
//		
//	GFX_Setv(GFX_Water_Trace, 12203, GX) // GX
//	GFX_Setv(GFX_Water_Trace, 12204, GY) // GY
//	GFX_Setv(GFX_Water_Trace, 12205, GZ) // GZ
//	
//	tv_pos.z = f_water_Z + Cf_Water_visual_offset
//	GFX_Setv(GFX_Water_Trace, 12206, tv_pos) // GT
//	
//	// SI VUE INTERIEURE
//	GFX_Seti(GFX_Water_Trace, 12103 , 1) // Start
}

//=============================================================
//=============================================================
procedure int H_QQunBlesse()
{
//	if(@"univ" ai_HumainIsHere[C_ID_Ann] && @"univ" LIFE_HumainEtat[C_ID_Ann] == Cf_Life_Agonisant) return vrai
//	if(@"univ" ai_HumainIsHere[C_ID_Hayes] && @"univ" LIFE_HumainEtat[C_ID_Hayes] == Cf_Life_Agonisant) return vrai
//	if(@"univ" ai_HumainIsHere[C_ID_Denham] && @"univ" LIFE_HumainEtat[C_ID_Denham] == Cf_Life_Agonisant) return vrai
//	if(@"univ" ai_HumainIsHere[C_ID_Jimmy] && @"univ" LIFE_HumainEtat[C_ID_Jimmy] == Cf_Life_Agonisant) return vrai
	return faux
}

//=============================================================
//=============================================================
procedure_local void HUM_fct_GFX_Splash(vector tv_pos) {
	int	mi_GFX_Key

	mi_GFX_Key = GFX_Add(13)
	GFX_MaterialSet( mi_GFX_Key, get_SFX_light_and_smoke, -1 )
	GFX_FlagSet( mi_GFX_Key, 0 , 1)
	GFX_FlagSet( mi_GFX_Key, 2 , 1)
	GFX_Seti( mi_GFX_Key, 13101,37)
	GFX_Seti( mi_GFX_Key, 13102,38)
	GFX_Seti( mi_GFX_Key, 13100,30)
	GFX_Seti( mi_GFX_Key, 13106,30)
	GFX_Setf( mi_GFX_Key, 13003,0.200000)
	GFX_Setf( mi_GFX_Key, 13004,0.400000)
	GFX_Seti( mi_GFX_Key, 13012,0.500000)
	GFX_Seti( mi_GFX_Key, 13107,0)
	GFX_Setf( mi_GFX_Key, 13000,0.250000)
	GFX_Setf( mi_GFX_Key, 13001,0.4900000)
	GFX_Setf( mi_GFX_Key, 13002,0.010000)
	GFX_Setf( mi_GFX_Key, 13005,0.100000)
	GFX_Setf( mi_GFX_Key, 13006,0.300000)
	GFX_Setf( mi_GFX_Key, 13007,-5.000000)
	GFX_Setv( mi_GFX_Key, 13203,cvector(0.01500, 0.01500, 0.02500))
	GFX_Seti( mi_GFX_Key, 13103,-3551556)
	GFX_Seti( mi_GFX_Key, 13104,-1178087748)
	GFX_Seti( mi_GFX_Key, 13105,12306608)
	GFX_Setf( mi_GFX_Key, 13009,-1.000000)
	GFX_Setf( mi_GFX_Key, 13010,-4.000000)
	GFX_Setf( mi_GFX_Key, 13011,-1000)
	GFX_Setv( mi_GFX_Key, 13200, tv_pos)
	GFX_Setv( mi_GFX_Key, 13201,cvector(0.00000, 0.00000, -0.15000))
	GFX_Setv( mi_GFX_Key, 13202,cvector(0.00000, 0.00000, -0.35000))
	GFX_Setv( mi_GFX_Key, 13204,cvector(0.00000, 0.00000, 0.00000))
	GFX_Setv( mi_GFX_Key, 13205,cvector(0.00000, 0.00000, 0.00000))
	GFX_Setv( mi_GFX_Key, 13206,cvector(0.00000, 0.00000, 0.00000))
	GFX_Setv( mi_GFX_Key, 13207,0.150000 * OBJ_HorizonGet() )
	GFX_Setv( mi_GFX_Key, 13208,0.150000 * OBJ_SightGet() )
	GFX_Setv( mi_GFX_Key, 13209,0.100000  * OBJ_BankingGet())
	GFX_Seti( mi_GFX_Key, 13114,1)
	GFX_Setf( mi_GFX_Key, 13013,-1.000000)
	GFX_Setf( mi_GFX_Key, 13014,1.000000)
	GFX_Setf( mi_GFX_Key, 13015,-0.050000)
	GFX_Setf( mi_GFX_Key, 13016,0.050000)
	GFX_Setf( mi_GFX_Key, 13008,0.000000)
}




procedure_local void Proc_Hum_SFX_Walling( vector tv_pos, vector tv_sight)
{
	int		pi_GFX_Blood
	
	pi_GFX_Blood = GFX_Add(13)																// Create the boum
	GFX_MaterialSet(pi_GFX_Blood, get_SFX_light_and_smoke, 40)					// met le materiau
	GFX_FlagSet(pi_GFX_Blood, 0 , 1)
	GFX_FlagSet(pi_GFX_Blood, 2 , 1)
	GFX_Seti(pi_GFX_Blood, 13101, 3)															// Materiau 8
	GFX_Seti(pi_GFX_Blood, 13100, 4)															// *Buffer number of sprite
	GFX_Seti(pi_GFX_Blood, 13106, 4) //0xFFFFFFFF)									// *number of sprite to generate
	GFX_Setf(pi_GFX_Blood, 13003, 0.4)														// Time fase 1
	GFX_Setf(pi_GFX_Blood, 13004, 1.2)														// Time fase 2
	GFX_Seti(pi_GFX_Blood, 13107, 0)															// Sprites non triés
	GFX_Setf(pi_GFX_Blood, 13012, 0.50)														// Time random
	GFX_Setf(pi_GFX_Blood, 13000, 0.0)														// Growing speed min
	GFX_Setf(pi_GFX_Blood, 13001, 0.1)														// Growing speed max
	GFX_Setf(pi_GFX_Blood, 13002, 0.0001)													// Friction Grow
	GFX_Setf(pi_GFX_Blood, 13005, 0.05)														// Creation size min
	GFX_Setf(pi_GFX_Blood, 13006, 0.1)														// Creation size max
	GFX_Setv(pi_GFX_Blood, 13203, cvector(0.02, 0.02, 0.02))							// friction speed
	GFX_Seti(pi_GFX_Blood, 13103, 0xA0809A82 )										// Color fase 0
	GFX_Seti(pi_GFX_Blood, 13104, 0xF0809A82 )										// Color fase 1
	GFX_Seti(pi_GFX_Blood, 13105, 0x00809A82 )											// Color fase 2
	GFX_Setf(pi_GFX_Blood, 13009, 0.1)														// Norm speed min
	GFX_Setf(pi_GFX_Blood, 13010, 0.75)														// Norm speed max
	GFX_Setf(pi_GFX_Blood, 13007, 0.0)														// Gravity
	GFX_Setf(pi_GFX_Blood, 13008, 0.0)														// generation rate
	GFX_Setv(pi_GFX_Blood, 13204, tv_sight * 0.2)										// wind
	GFX_Setv(pi_GFX_Blood, 13205, Cv_NullVector)										// Mainposspeed
	GFX_Setv(pi_GFX_Blood, 13206, Cv_NullVector)										// Mainpossfriction
	GFX_Setv(pi_GFX_Blood, 13200, tv_pos) 												// Creation Pos
	GFX_Setv(pi_GFX_Blood, 13201, cvector( -1.0, -1.0, -1.0))							// Speed min
	GFX_Setv(pi_GFX_Blood, 13202, cvector( 1.0, 1.0, -1.0))							// Speed max
}





