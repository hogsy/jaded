#include "H_defines.var"
vector 		vtime
object 		obj
message 	m_cine, m_cine1
int				ti_weapon
int				ti_i
function		shoot
object		to_obj

if (i_sort_etat)
{
	if (i_snd_tommygun != -1) 
	{
		SND_Stop( i_snd_tommygun )
		i_snd_tommygun = -1
		SND_Stop( i_snd_tommygunB )
		i_snd_tommygunB = -1
		SND_RequestPlay( SND_Jack_TommygunEndLoop )
	}

	i_sort_etat = faux
	return
}

DYN_FlagsSet(DYN_C_OptimizeColDisable, 0)

m_cine = am_CineStack[0]

if(i_etat_courant != ETAT_CINE_Shoot)
{
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	i_psss_nomove = vrai
	f_time_start_etat = 0
	i_etat_courant = ETAT_CINE_Shoot
	fct_main_etat = AI_TrackCurGet()
	fct_last_etat = AI_TrackCurGet()
	
	vtime = m_cine.msg_vec1
	vtime.y = 0
	am_CineStack[0] = m_cine
	m_cine.msg_vec1 = vtime
	
	////////////// INTERACTION /////////////////////////
	for (ti_i = 0; ti_i < Ci_LNK_TYPE_NB; ti_i++)
		ai_SRV_ENABLE[ti_i] = faux

	// AUTORISATIONS DES GRABS
	ai_SRV_ENABLE[Ci_LNK_GRAB_RAPTOR]	= vrai

	// AUTORISATION DES AIDES
//	ai_SRV_ENABLE[Ci_LNK_INTERACTION] 		= vrai
	ai_SRV_ENABLE[Ci_LNK_PSSS] 					= vrai
	/////////////////////////////////////////////////////////////////
} 
else
{
	f_time_start_etat += TIME_GetDt()
}

/////////////////////////////////////////////////////////////////////////////////

AI_Execute("H_exec_read_world")
AI_Execute("H_exec_serveur_get")
AI_Execute("H_exec_change_etat")
AI_Execute("H_exec_ch_Stimulus_Paf")
if (o_paf_sender) macro_change_etat("H_ETAT_IA_paf")
OBJ_Me().des_int1 = Ci_DISPLAY_PSSS

/////////////////////////////////////////////////////////////////////////////////

ti_weapon = @"univ" i_weapon_ID [i_id_humain]
if(!ti_weapon)
{
	o_cine_shoot = nobody
	i_cine_close = vrai
	return
}

// Si définie, ca veut dire qu'on est passé en etat lance, puis qu'on est revenu à nouveau dans celui la
// On sort, car on a finit de tirer
if(o_cine_shoot && !m_cine.msg_int2)
{
	o_cine_shoot = nobody
	i_cine_close = vrai
	return
}

// Arret durée
if(m_cine.msg_int1 == 0)
{
	vtime = m_cine.msg_vec1
	vtime.y += TIME_GetDt() 
	m_cine.msg_vec1 = vtime
	am_CineStack[0] = m_cine
	if(vtime.y >= vtime.x) i_cine_close = vrai
}
 
// Arret si d'autres trucs en attente
else if(m_cine.msg_int1 == 1)
{
	OBJ_CapaSet(OBJ_Capa_13, 0)
}
 
// Fin du tir ?
if(m_cine.msg_gao2)
{
	o_target_stimulus_vis = m_cine.msg_gao2
	o_cine_shoot = o_target_stimulus_vis
	to_obj = @o_target_stimulus_vis ANI_CanalObjectGet(Anim_Canal_Tete)
	if(to_obj)
		v_target_stimulus_vis = @to_obj OBJ_PosGet()
	else
		v_target_stimulus_vis = @o_target_stimulus_vis OBJ_PosGet()
}
else
{
	ComputeCibleAShooter( -1.0 )
	o_cine_shoot = nobody
}

// A l'arret
i_cine_shoot_mode = m_cine.msg_int2
f_joy_norm = 0
v_joy_dir = Cv_NullVector
 
if(o_target_stimulus_vis) 
{
	i_flag_oriente_vers = vrai
	obj = o_target_stimulus_vis
	v_joy_dir = @obj OBJ_PosGet() - OBJ_PosGet()
 	MATH_VecSetHorzNormalize(v_joy_dir)
 	
	HL_MakeShoot(shoot)
	if(shoot != nofunc) macro_change_etat( shoot )
	o_cine_shoot = nobody
}

i_cine_action = -1
AI_Execute("H_exec_select_action")
