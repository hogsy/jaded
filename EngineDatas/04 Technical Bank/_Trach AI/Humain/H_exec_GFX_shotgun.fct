#include "H_defines.var"

int		ti_GFX_Blam
int		ti_GFX_Spark

vector	tv_pos
vector	tv_temp
vector	tv_direction
float		tf_temp

tv_pos = pop
tv_direction = pop

tf_temp = 0.1
push(tf_temp)
tf_temp = 0.3
push(tf_temp)
push(tv_pos)
AI_Execute("H_exec_GFX_Flamme")

// FUMEE
ti_GFX_Blam = GFX_Add(13)																	// Create the boum
			
GFX_MaterialSet(ti_GFX_Blam, get_SFX_light_and_smoke, -1)					// met le materiau
GFX_Seti(ti_GFX_Blam, 13101, 8)															// Materiau 0

GFX_Seti(ti_GFX_Blam, 13100, 10)															// *Buffer number of sprite
GFX_Seti(ti_GFX_Blam, 13106, 10)															// *number of sprite to generate

GFX_Setf(ti_GFX_Blam, 13003, 0.05)														// Time fase 1
GFX_Setf(ti_GFX_Blam, 13004, 1.5)														// Time fase 2

GFX_Seti(ti_GFX_Blam, 13107, 0)															// Sprites non triés

GFX_FlagSet(ti_GFX_Blam, 0 , 1)
GFX_FlagSet(ti_GFX_Blam, 2 , 1)

GFX_Setf(ti_GFX_Blam, 13012, 0)														// Time random

GFX_Setf(ti_GFX_Blam, 13000, 2.1)														// Growing speed min
GFX_Setf(ti_GFX_Blam, 13001, 5.3)														// Growing speed max
GFX_Setf(ti_GFX_Blam, 13002, 0.2)													// Friction Grow

GFX_Setf(ti_GFX_Blam, 13005, 0.1)														// Creation size min
GFX_Setf(ti_GFX_Blam, 13006, 0.2)														// Creation size max

GFX_Setv(ti_GFX_Blam, 13203, cvector(0.2, 0.2, 0.2))							// friction speed

GFX_Seti(ti_GFX_Blam, 13103, 0xA0505050)											// Color fase 0
GFX_Seti(ti_GFX_Blam, 13104, 0x20202020)											// Color fase 1
GFX_Seti(ti_GFX_Blam, 13105, 0x00202020)											// Color fase 2

GFX_Setf(ti_GFX_Blam, 13009, 0.0)														// Norm speed min
GFX_Setf(ti_GFX_Blam, 13010, 8.0)														// Norm speed max

GFX_Setf(ti_GFX_Blam, 13008, 0.0001)													// generation rate

GFX_Setv(ti_GFX_Blam, 13205, Cv_NullVector)										// Mainposspeed
GFX_Setv(ti_GFX_Blam, 13206, Cv_NullVector)										// Mainpossfriction
	
GFX_Setv(ti_GFX_Blam, 13200, tv_pos) 													// Creation Pos
GFX_Setf(ti_GFX_Blam, 13007, 0.6)									// Gravity

tv_temp = tv_direction * 0.0
GFX_Setv(ti_GFX_Blam, 13201, tv_temp + cvector(-1.0, -1.0, -1.0))				// Speed min
GFX_Setv(ti_GFX_Blam, 13202, tv_temp + cvector(1.0, 1.0, 1.0))					// Speed max
		
// Etincelles
ti_GFX_Spark = GFX_Add(9)
GFX_FlagSet(ti_GFX_Spark , 0, 1)
GFX_FlagSet(ti_GFX_Spark , 2, 1)
GFX_MaterialSet(ti_GFX_Spark , get_SFX_light_and_smoke, 5)
GFX_Setf(ti_GFX_Spark, 9000, Cf_PiBy2*0.05)								// angle d'ouverture
GFX_Setf(ti_GFX_Spark, 9001, 100.0)										// vitesse initiale minimum
GFX_Setf(ti_GFX_Spark, 9002, 150.0)										// vitesse initiale maximum
GFX_Setf(ti_GFX_Spark, 9003, 0.95)										// friction
GFX_Setf(ti_GFX_Spark, 9004, 0.010)										// épaisseur
GFX_Setf(ti_GFX_Spark, 9005, 0.5)										// durée de vie minimum
GFX_Setf(ti_GFX_Spark, 9006, 0.9)										// durée de vie maximum
GFX_Setf(ti_GFX_Spark, 9007, 0.5 )										// multiplicateur de longueur
GFX_Setf(ti_GFX_Spark, 9008, 0.000005 )									// generation périod
GFX_Setf(ti_GFX_Spark, 9009, 0.1)										// durée de mort minimun
GFX_Setf(ti_GFX_Spark, 9010, 0.2)										// durée de mort maximun
GFX_Seti(ti_GFX_Spark, 9100, 20)											// Nombre
GFX_Seti(ti_GFX_Spark, 9102, 0b11000)									// Flags (1 => agrandissement centré)
GFX_Setv(ti_GFX_Spark, 9200, tv_pos)									// Origine des étincelles
GFX_Setv(ti_GFX_Spark, 9201, tv_direction)								// Direction
GFX_Setv(ti_GFX_Spark, 9202, cvector(0.0, 0.0, 0.0) )				// gravity
GFX_Seti(ti_GFX_Spark, 9101, 0x2080FF) 								// couleur
