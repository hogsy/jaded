#include "H_defines.var"
#include "H_Action.var"

messageid		tmid_LNK
messageid		tmid_info
object			to_serveur
float				tf_dist
object			to_main
object			to_for_who
vector			tv_temp
int					ti_danger
int					ti_what
vector			tv_pos
int					ti_weapon
int					ti_reserve
float				tf_maxdist
int					type
object			to_obj
float				tf_temp
int					ti_force
int					ti_temp

tmid_LNK = pop
if(joueur) return
if(i_flag_nage) return

to_serveur = MSG_GlobalGetGao(tmid_LNK, SERVEUR)
tv_pos = LNK_InteractionPositionGet(tmid_LNK)
if(CaseEnFeu(tv_pos)) return
ti_what = (LNK_InteractionParamGet(tmid_LNK) & 0xFF00) >> 8
tv_temp = tv_pos - OBJ_PosGet()
tf_dist = MATH_VecNorm(tv_temp)

// Hack radeau
if(OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Hierarchy) && tf_dist > 2) return
	
// Si sur une case jaune, interdit
if((GRID_CapaGet(tv_pos) & tag_grid_terrain) == 1) return

// BAMBOU
if(ti_what == Ci_weapon_ID_bambou || ti_what == Ci_weapon_ID_bambou_moy || ti_what == Ci_weapon_ID_bambou_petit)
{
	// REQUET
	if(i_interdit_ramasse) return
	@get_global HL_Requete[i_id_humain] = 1
	if(tf_dist > @get_global HL_DistRequete[i_id_humain]) return
	
	if(i_id_humain == C_ID_Denham)
	{
		if
		(
			PRG_Intention &&
			(
				(@"Progression/PRG_Intention" PRG_Intention des_i_attitude == 2) 
			||	(@"Progression/PRG_Intention" PRG_Intention des_i_attitude == 3) 
			)
		)
		{
			return
		}
	}
	
	f_best_lance = MATH_FloatMin(f_best_lance, tf_dist)
	
	if(i_recharge_arme) return
	if(i_etat_courant != ETAT_IA_suivi && i_etat_courant != ETAT_IA_hide && i_etat_courant != ETAT_IA_help) return

	tf_maxdist = 5
	if(i_flag_danger && i_flag_cache) 
	{
		if(HasInteret() && o_ennemi_proche && OBJ_SqrDist(o_ennemi_proche) < 8 * 8)
			tf_maxdist = 18
		else if(o_ennemi_proche && OBJ_SqrDist(o_ennemi_proche) < 6 * 6)
			tf_maxdist = 18
	}
	
	//////
	if(@get_global o_qqun_grab) tf_maxdist = 18
	if(@get_global o_qqun_carry) tf_maxdist = 18
	to_obj = AI_MainActorGet(C_ID_Jack)
	i_spec_agoni = faux
	if(@"KingKong/Humain" to_obj i_flag_danger)
	{
		i_spec_agoni = vrai
		if(@"KingKong/Humain" to_obj f_paf_timer > 0) tf_maxdist = 18
		if(@"univ" LIFE_HumainEtat[C_ID_Jack] == Cf_Life_Agonisant) tf_maxdist = 18
	}
	//////
	
	if(f_hauteur_eau >= Hauteur_Eau_Basse)
		tf_maxdist = 5

	if(tf_dist > tf_maxdist) return														// Trop loin
	if(BambouEnMain()) return
	if(GunEnPlace()) return
	if(!TIME_Elapsed(f_time_ramasse_bambou, 1)) return
//	if(i_etat_courant == ETAT_IA_suivi && !i_in_fight && !i_ramasse_suivi) return		// En suivi, pas d'arme	
	if(i_id_humain == C_ID_Denham && IsWater(i_ground_ID) && f_hauteur_eau) return	// Denham dans l'eau
	f_time_ramasse_bambou = TIME_Get()
	
	i_way_evite_ennemi = faux
	i_autorise_capa7 = faux
	ti_danger = HL_CheminDangereux(tv_pos)
	i_way_evite_ennemi = vrai
	if(ti_danger == -1) return
	
	if(tf_maxdist != 18)
	{
		if(o_hide_0D || i_etat_courant != ETAT_IA_hide || !i_flag_danger)
		{
			if(o_hide_0D && CacheTientLaPos(o_hide_0D))
			{
				tf_temp = HasInteretOnMinDist(OBJ_Me(), to_obj, type)
				if(to_obj && tf_temp < 5) ti_danger = 0
			}
			
			if(ti_danger) return
		}
	}
	
	// REQUET
	@get_global HL_AcceptRequete[i_id_humain] = 1
}

// MUNITIONS
else if(ti_what >= Ci_weapon_ID_munition && ti_what <= Ci_weapon_ID_munition_end)
{
	if(i_recharge_arme) return
	if(i_etat_courant != ETAT_IA_suivi && i_etat_courant != ETAT_IA_hide && i_etat_courant != ETAT_IA_help) return
	if(i_id_humain != C_ID_Hayes) return
	ti_what -= Ci_weapon_ID_munition
	if(tf_dist > 15) return
	
	ti_force = faux
	if(@to_serveur AI_IsModel("Objets/SwapArme")) 
	{
		// Si la caisse possede une arme forcé, alors je dois y aller
		ti_temp = @"Objets/SwapArme" to_serveur des_i_force_hayes
		if(ti_temp == ti_what) ti_force = vrai
		
		// Si la caisse me force à avoir une arme, et que je l'ai déjà, et que l'arme sur la caisse n'est pas celle que je dois avoir,
		// alors c bon, pas la peine d'y aller
		if(ti_temp && ti_temp != ti_what && @"univ" i_weapon_ID[ i_id_humain ] == ti_temp) return
	}
	
	if(!ti_force && !(@"univ" i_weapon_ID[ C_ID_Jack ])) return
	
	// Meme arme que moi
	ti_weapon = @"univ" i_weapon_ID[ i_id_humain ]
	if(ti_what == ti_weapon && !ti_force) return
	
	if(!ti_force && (ti_what != ti_weapon))
	{
		switch(ti_weapon)
		{
			case Ci_weapon_ID_shotgun :
			case Ci_weapon_ID_tommy_gun :
			case Ci_weapon_ID_sniper_rifle : 
				if(@"univ" i_weapon_ammunition_reserve[ti_weapon][i_id_humain]) return
				if(@"univ" i_weapon_ammunition[ti_weapon][i_id_humain]) return
				return
		}
	}
	
	// Chemin
	if(!TIME_Elapsed(f_time_ramasse, 2)) return
	f_time_ramasse = TIME_Get()
	ti_danger = HL_CheminDangereux(tv_pos)
	if(ti_danger == -1) return	
	f_time_ramasse = TIME_Get()
}
else if(ti_what == Ci_weapon_ID_grenade || ti_what == Ci_weapon_ID_crane || ti_what == Ci_weapon_ID_levier)
{
	if(@"univ" i_weapon_ID[ i_id_humain ]) return
	if(i_recharge_arme) return
	if(i_etat_courant != ETAT_IA_suivi && i_etat_courant != ETAT_IA_hide && i_etat_courant != ETAT_IA_help) return
	
	if(tf_dist > 5) return	// Trop loin
	
	if(!TIME_Elapsed(f_time_ramasse, 2)) return
	
	f_time_ramasse = TIME_Get()
	ti_danger = HL_CheminDangereux(tv_pos)
	if(ti_danger == -1) return
}
else
{
	return
}

LNK_ClientPropose(tmid_LNK, tf_dist)	