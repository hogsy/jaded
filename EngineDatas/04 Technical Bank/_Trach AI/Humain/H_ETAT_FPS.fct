Include_UltraProcedure_Header

#include "H_defines.var"
#include "H_action.var"

#define		Ci_jump_from_KK			1
#define		Ci_jump_from_ground		2


int			ti_numero
int			ti_index
int			ti_i
int			ti_bool
int			ti_action
int			ti_demande_soin
int			ti_weapon
int			x, y
int			ti_capa
int			ti_select_action
int			ti_jump

object	to_obj
object	to_ray_obj
object	to_bambou

vector	tv_temp
vector	tv_temp1
vector	tv_ray_start_pos
vector	tv_ray_col_pos
vector	tv_ray_end_pos
vector	tv_ray_axis
vector	tv_jump_speed

float		tf_dot
float		tf_temp
float		tf_norm
float		tf_jump_time
float		tf_jump_friction
float		tf_ray_length
float		tf_max_Z

function retfunc

messageid	EVT_InfoSeen_ID

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux
	i_flag_add_shoot = faux
	
	i_flag_carry = faux
	if(ao_CL[Ci_LNK_CARRY])
		ao_CL[Ci_LNK_CARRY] = LNK_ClientGet(Ci_LNK_CARRY, amid_CL_LIAISON_ID[Ci_LNK_CARRY], faux, nofunc, nofunc, nofunc)
	
	if (ao_SRV[Ci_LNK_GRAB_RAPTOR] 
		&& LNK_GrabServeurVisionIDGet(amid_SRV_LIAISON_ID[Ci_LNK_GRAB_RAPTOR]) != C_ID_Tyranosaure
		&& LNK_GrabServeurVisionIDGet(amid_SRV_LIAISON_ID[Ci_LNK_GRAB_RAPTOR]) != C_ID_CrabeGeant
		&& LNK_GrabServeurVisionIDGet(amid_SRV_LIAISON_ID[Ci_LNK_GRAB_RAPTOR]) != C_ID_CrabePetit
		&& LNK_GrabServeurVisionIDGet(amid_SRV_LIAISON_ID[Ci_LNK_GRAB_RAPTOR]) != C_ID_MonstreMarin)
		ao_SRV[Ci_LNK_GRAB_RAPTOR] = LNK_ClientGet(Ci_LNK_GRAB_RAPTOR, amid_SRV_LIAISON_ID[Ci_LNK_GRAB_RAPTOR], faux, nofunc, nofunc, nofunc)

	if (o_grab_actor)
	{
		f_grab_time = 0
		
		@get_joueur_leg OBJ_FlagInvisibleSet(vrai)
		@get_joueur_leg OBJ_FlagInactiveSet(vrai)
		
		@get_global i_cam_blocked_trans = faux
		
		if( i_grab_actor_ID == C_ID_CrabeGeant || i_grab_actor_ID == C_ID_CrabePetit )
		{
			tv_temp = @o_grab_actor OBJ_SightGet()
			tv_temp = MATH_VecRotate(tv_temp, @o_grab_actor OBJ_HorizonGet(), - Cf_1Degre * 15)
			tv_temp *= 3.0
			DBG_RenderVector(OBJ_PosGet(), tv_temp, color_jaune)
			DYN_SpeedSetVector(tv_temp)
			f_delay_no_select_action = 0.5
			DYN_GravitySet(H_GRAVITY)
		}

		AI_CBDel(o_grab_actor, CallBack_After_Blend, "H_callback_set_pos")	
		o_grab_actor = nobody
		i_grab_actor_ID = -1
		i_flag_crouch = faux
	}

	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_FPS)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_FPS
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	fct_main_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	
	// INTERACTION
	for (ti_i = 0; ti_i < Ci_LNK_TYPE_NB; ti_i++)
		ai_SRV_ENABLE[ti_i] = faux
	ai_SRV_ENABLE[Ci_LNK_GRAB_RAPTOR] = vrai
	ai_SRV_ENABLE[Ci_LNK_KKGRAB_OBJECT] = vrai
	
	Proc_Joueur_Swap_to_1st()
	f_fps_shoulder_duree = 0.0
	i_flag_action_wait_for_end = faux		// si on était sorti de l'état (paf ?) pendant une action "do not cut"
}
else
{
	f_time_start_etat += TIME_GetDt()
	
	// génération lances infinies
	if( @get_global i_FPS_Lances_Infinies
		&& f_time_start_etat > 0.15 
		&& @"univ" LIFE_HumainEtat[i_id_humain] != Life_ETAT_Mort 
		&& @"univ" i_weapon_ID[i_id_humain] == 0 )
	{
		to_bambou = @get_Arme_Lance OBJ_Duplicate(OBJ_PosGet())
		H_Joueur_GrabbedObject_Add(Ci_weapon_ID_bambou, to_bambou)
	}
}


// ANALYSE ==========================================================================================

AI_Execute("H_exec_serveur_get")
// Je grimpe sur Kong
if( ! @get_global i_Player_on_KK_Shoulder && Proc_KIndigene_Kong_LiaisonStatusGet() )
{
	@get_global i_Player_on_KK_Shoulder = vrai
	AI_CBAdd(o_KONG, CallBack_After_Blend, "H_callback_set_pos")
	macro_change_etat("H_ETAT_Fake")
}

// Test axe jump en FPS sur épaule
ti_jump = faux
if( @get_global i_Player_on_KK_Shoulder && ! Proc_KIndigene_Kong_LiaisonStatusGet() )
	ti_jump = Ci_jump_from_KK
if( IO_ButtonJustPressed(Jack_Joy_Grimpe_Descend_de_Kong) )
	if( COL_CollideType(COL_C_Ground) ) // || i_echelle_flag )
		ti_jump = Ci_jump_from_ground
if( ti_jump )
{
//	tv_ray_start_pos = OBJ_PosGet()	
//	tv_ray_start_pos += (0.5 * Cv_VerticalVector)	// jump depuis le sol, le lray doit toucher le sol...
	tv_ray_start_pos = @get_Kamera OBJ_PosGet()
	tv_ray_axis = @get_Kamera OBJ_SightGet()
	to_ray_obj = nobody
	if( ti_jump == Ci_jump_from_KK )
	{
		// jump pour descendre de Kong
		tf_ray_length = 7.0
		@o_KONG OBJ_FlagsControlSet(OBJ_C_ControlFlag_RayInsensitive, 0)
	}
	else
	{
		// jump au sol
		tf_ray_length = 5.0
	}
	tf_ray_length = 2.0
//	to_ray_obj = COL_RayObject_Dist(tv_ray_start_pos, tv_ray_axis, tf_ray_length, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_Crossable)
	if( ti_jump == Ci_jump_from_KK )
		@o_KONG OBJ_FlagsControlSet(0, OBJ_C_ControlFlag_RayInsensitive)
//	if( to_ray_obj )
//		tv_ray_end_pos = COL_RayObject_PosGet()
//	else
		tv_ray_end_pos = OBJ_PosGet() + (tf_ray_length * tv_ray_axis)
	tv_ray_end_pos.z = MATH_FloatMin((tv_ray_start_pos.z + 2.0), tv_ray_end_pos.z)
//	if( to_ray_obj )
//		DBG_RenderVector(tv_ray_start_pos + cvector(0.05,0,0), tv_ray_end_pos - tv_ray_start_pos, color_vert)
//	else
		DBG_RenderVector(tv_ray_start_pos + cvector(0.05,0,0), tv_ray_end_pos - tv_ray_start_pos, color_rouge)

//	if( ! Proc_KIndigene_Kong_LiaisonStatusGet() )
	{
		@get_global i_Player_on_KK_Shoulder = faux
		i_jump_flag = vrai
		if( i_echelle_flag )
			i_jump_from_echelle_flag = vrai
		if( ti_jump == Ci_jump_from_KK )
		{
			AI_CBDel(o_KONG, CallBack_After_Blend, "H_callback_set_pos")
			i_jump_from_KK_flag = vrai
		}
		v_jump_destination = tv_ray_end_pos
		tf_ray_length = MATH_VecNorm(v_jump_destination - OBJ_PosGet())
		tf_jump_friction = 1.0
		tf_jump_time = 0.0
//		tf_max_Z = 0.0
//		if( tv_ray_end_pos.z < (OBJ_PosGet().z + 2.0) )
			tf_max_Z = 2.0
		DYN_FrictionVectorSet(cvector(tf_jump_friction,tf_jump_friction,0.0))
		v_jump_from_KK_speed = DYN_LIB_ImpulsionGet_Friction(
												OBJ_PosGet(), 
												v_jump_destination, 
												H_GRAVITY,
												tf_jump_friction,
												tf_jump_time,
												faux,
												tf_max_Z)
		DBG_RenderVector(OBJ_PosGet(), v_jump_from_KK_speed, color_jaune)
		DYN_SpeedSetVector(v_jump_from_KK_speed)
//		OBJ_HierarchyReset()
	}
}

if( @get_global i_Player_on_KK_Shoulder )
{
	// Mode FPS sur l'épaule de Kong
	f_fps_shoulder_duree += TIME_GetDt()
	
	if( @get_global i_FPS_Shoulder_force_new_entry )
		macro_change_etat("H_ETAT_Fake")		// Mode FPS sur l'épaule temporairement interdit -> force la sortie
	else if( ! IO_ButtonPressed(Jack_Joy_Viser) )
		macro_change_etat("H_ETAT_Fake")
}

MACRO_READ_WORLD

AI_Execute("H_exec_read_joy")

if( i_Reward_Type != -1 )
	macro_change_etat("H_ETAT_Reward")

AI_Execute("H_exec_ch_Stimulus_Paf")
if (o_paf_sender) 
	macro_change_etat("H_ETAT_Paf")

if(o_obj_porte && @"univ" LIFE_HumainEtat[i_id_humain] != Life_ETAT_Mort && !ao_SRV[Ci_LNK_GRAB_RAPTOR])
	macro_change_etat("H_ETAT_Porte")



// GRAB ==============================================================================================
ti_demande_soin = vrai
ti_select_action = vrai

if ( @"univ" Cheat_i_Flags & CHEAT_GodMode )
	ao_SRV[Ci_LNK_GRAB_RAPTOR] = LNK_ClientGet(Ci_LNK_GRAB_RAPTOR, amid_SRV_LIAISON_ID[Ci_LNK_GRAB_RAPTOR], faux, nofunc, nofunc, nofunc)

if(ao_SRV[Ci_LNK_GRAB_RAPTOR])
{
	f_grab_time += TIME_GetDt()
	i_grab_actor_ID = LNK_GrabServeurVisionIDGet(amid_SRV_LIAISON_ID[Ci_LNK_GRAB_RAPTOR])
	
	switch(i_grab_actor_ID)
	{
		case C_ID_Tyranosaure :
	
			IO_PafSet(100, 50)
			@get_global i_jack_grab = vrai
			f_time_help = 5
			Jack_is_grabbed()
			ti_demande_soin = faux

			if (o_grab_actor)
			{
				f_time_psss += TIME_GetDt()
			}
			else
			{
				f_time_psss = 0.0
			
				o_grab_actor = ao_SRV[Ci_LNK_GRAB_RAPTOR]
				AI_CBAdd(o_grab_actor, CallBack_After_Blend, "H_callback_set_pos")	
			}
			
			@get_global Proc_AE_MotionSmoothSet(MATH_FloatBlend(@get_global Proc_AE_MotionSmoothGet(), 0.5, TIME_GetDt()))			
			break

		case C_ID_SwampCrawlerSmall :
			i_flag_nage	= faux			// FRED pour pouvoir se defendre en grab nage
			// Continue on raptor !

		case C_ID_Raptor :

			@get_global i_jack_grab = vrai
			f_time_help = 5
			Jack_is_grabbed()
			ti_demande_soin = faux
			if(!f_time_psss) i_request_txt = Gene_C_caught

			f_time_psss += TIME_GetDt()

			if (!o_grab_actor)
			{
				i_flag_init_rag_doll = vrai
				o_grab_actor = ao_SRV[Ci_LNK_GRAB_RAPTOR]
				AI_CBAdd(o_grab_actor, CallBack_After_Blend, "H_callback_set_pos")	
			}
			
			break

		case C_ID_Scolo :
	
			@get_global i_jack_grab = vrai
			f_time_help = 5
			Jack_is_grabbed()
			i_flag_crouch = faux
			ti_demande_soin = faux
			if(!f_time_psss) i_request_txt = Gene_C_caught

			@get_global i_cam_blocked_trans = vrai

			f_time_psss += TIME_GetDt()
			if( f_time_psss > 2.0 && !GunEnPlaceSansReserve())
			{
				if(o_grab_actor) AI_CBDel(o_grab_actor, CallBack_After_Blend, "H_callback_set_pos")	
				o_grab_actor = LNK_ClientGet(Ci_LNK_GRAB_RAPTOR, amid_CL_LIAISON_ID[Ci_LNK_GRAB_RAPTOR], faux, nofunc, nofunc, nofunc)
				ao_SRV[Ci_LNK_GRAB_RAPTOR] = nobody
			}
			else if (!o_grab_actor)
			{
				@get_global i_cam_blocked_trans = faux

				i_flag_init_rag_doll = vrai
				o_grab_actor = ao_SRV[Ci_LNK_GRAB_RAPTOR]
				AI_CBAdd(o_grab_actor, CallBack_After_Blend, "H_callback_set_pos")	
			}
			
			break

			
		case C_ID_Scorpion : 
		
			@get_global i_jack_grab = vrai
			f_time_help = 5
			Jack_is_grabbed()
			ti_demande_soin = faux
			if(!f_time_psss) i_request_txt = Gene_C_caught

			f_time_psss += TIME_GetDt()
			if ( f_time_psss > 2.0 && !GunEnPlaceSansReserve())
			{
				@get_joueur_leg OBJ_FlagInvisibleSet(vrai)
				@get_joueur_leg OBJ_FlagInactiveSet(vrai)

				if(o_grab_actor) AI_CBDel(o_grab_actor, CallBack_After_Blend, "H_callback_set_pos")	
				o_grab_actor = LNK_ClientGet(Ci_LNK_GRAB_RAPTOR, amid_CL_LIAISON_ID[Ci_LNK_GRAB_RAPTOR], faux, nofunc, nofunc, nofunc)
				ao_SRV[Ci_LNK_GRAB_RAPTOR] = nobody
				i_flag_crouch = faux
			}
			else if (!o_grab_actor)
			{
				i_flag_init_rag_doll = vrai
				o_grab_actor = ao_SRV[Ci_LNK_GRAB_RAPTOR]
				AI_CBAdd(o_grab_actor, CallBack_After_Blend, "H_callback_set_pos")	
			}
			
			break
			
		case C_ID_CrabeGeant :
		case C_ID_CrabePetit :
					
			@get_global i_jack_grab = vrai
			f_time_help = 5
			Jack_is_grabbed()
			ti_demande_soin = faux
			i_flag_crouch = faux
			if( ! f_time_psss )
				i_request_txt = Gene_C_caught
			f_time_psss += TIME_GetDt()
			DYN_GravitySet(Cv_NullVector)		// spécial grab crab !!!
			if( !o_grab_actor )
			{
				// Init Grab
				i_flag_init_rag_doll = vrai
				o_grab_actor = ao_SRV[Ci_LNK_GRAB_RAPTOR]
				AI_CBAdd(o_grab_actor, CallBack_After_Blend, "H_callback_set_pos")	
				f_grab_crab_coef = 0.0
			}
			
			break			
	}
}
else if (o_grab_actor)
{
	i_flag_action_wait_for_end = faux		// sinon bug coupure liaison
	
	f_grab_time = 0
	
	@get_joueur_leg OBJ_FlagInvisibleSet(vrai)
	@get_joueur_leg OBJ_FlagInactiveSet(vrai)

	@get_global i_cam_blocked_trans = faux

	if( i_grab_actor_ID == C_ID_CrabeGeant || i_grab_actor_ID == C_ID_CrabePetit )
	{
		tv_temp = @o_grab_actor OBJ_SightGet()
		tv_temp = MATH_VecRotate(tv_temp, @o_grab_actor OBJ_HorizonGet(), - Cf_1Degre * 15)
		tv_temp *= 3.0
		DBG_RenderVector(OBJ_PosGet(), tv_temp, color_jaune)
		DYN_SpeedSetVector(tv_temp)
		f_delay_no_select_action = 0.5
		DYN_GravitySet(H_GRAVITY)
	}
	
	if( i_grab_actor_ID == C_ID_MonstreMarin )
		f_delay_no_select_action = 99
	
	AI_CBDel(o_grab_actor, CallBack_After_Blend, "H_callback_set_pos")	
	o_grab_actor = nobody
	i_grab_actor_ID = -1
	i_flag_crouch = faux
}


/////////////////////// ACTIONS /////////////////////////
if( ! i_mode_attrape && ! f_delay_no_select_action && ti_select_action)
{
	AI_Execute("H_exec_select_action")
}

AI_Execute("H_exec_speed")

if( i_joy_flag_lancer )
	macro_change_etat("H_ETAT_Lance")


////////////////////// MOURANT ////////////////////
if(@"univ" LIFE_HumainEtat[i_id_humain] == Life_ETAT_Mort)
{
	f_time_mort_jack += TIME_GetDt()
	@"univ" MENU_f_LockedDuring = 1.0
}
else
	f_time_mort_jack = 0
if(f_time_mort_jack > 0)
{
	Humains_LeaveObjectInHand()
	SIG_Send(SIG_C_TYPE_MORT, OBJ_Me())
	tf_temp = (f_time_mort_jack / Cf_delai_mort)

	AFE_Brightness_1_cur = MATH_FloatBlend(@get_global Proc_AE_BrightnessGet(), 0.1, tf_temp)
	AFE_ColorBalance_1_cur = MATH_FloatBlend(@get_global Proc_AE_ColorBalance1Get(), 1.0, tf_temp)
	AFE_ColorBalance_2_cur = 0.5
	AFE_MotionBlur_1_cur = MATH_FloatBlend(@get_global Proc_AE_MotionBlurGet(), 0.8, tf_temp)
	AFE_Contraste_1_cur = MATH_FloatBlend(@get_global Proc_AE_ContrasteGet(), 0, tf_temp)
	AFE_Remanence_1_cur = MATH_FloatBlend(@get_global Proc_AE_RemanenceGet(), 0, tf_temp)
	AFE_SpeedDecrease = 0.0
	AFE_NoDecrease = vrai

	if(f_time_mort_jack > 0.5) 
	{
		i_camera_animee = vrai
		if(i_flag_crouch)
			@get_joueur_cam ACT_ActionSet(3)
		else
			@get_joueur_cam ACT_ActionSet(1)
	}
	
	if(f_time_mort_jack > Cf_delai_mort)
		macro_change_etat("H_ETAT_Mort")
}

if(f_time_mort_jack)
{
	tv_temp = DYN_SpeedGetVector()
	tv_temp1 = tv_temp
	tv_temp *= MATH_FloatMax(0, 1 - (f_time_mort_jack / (Cf_delai_mort * 0.5)))
	tv_temp.z = tv_temp1.z
	DYN_SpeedSetVector(tv_temp)
	if(f_time_mort_jack > Cf_delai_mort * 0.5) i_flag_crouch = vrai
}

///////////////////////////////////////////////////////////////
if(@"univ" LIFE_HumainEtat[i_id_humain] == Life_ETAT_Agonisant)
{
	f_pulse_border += TIME_GetDt()
	if(f_pulse_border < 0.5)
		AFE_Border = MATH_FloatBlend(AFE_Border, 0.3, f_pulse_border / 0.5)
	else if(f_pulse_border < 0.5)
		AFE_Border = MATH_FloatBlend(AFE_Border, 0.2, (1.0 - f_pulse_border) / 0.5)
	else
		f_pulse_border = 0
	
	if(i_big_gladiator)
		tf_temp = 0.91
	else
		tf_temp = 0.5
	if(TIME_Elapsed(f_paf_agonisant, tf_temp))
	{
		IO_PafSet(100, 1)
		i_pifpaf = faux
		f_paf_agonisant = TIME_Get()
		i_prio_fade++
		f_gladiator_AFX_coef = 1.0
	}
	else
	{
		if(i_big_gladiator)
			tf_temp = 1.5
		else
			tf_temp = 2.5
		f_gladiator_AFX_coef = MATH_FloatBlend(f_gladiator_AFX_coef, 0.0, tf_temp * TIME_GetDt())
	}
			
	@get_global Proc_AE_ColorBalanceSet(MATH_FloatBlend(@get_global Proc_AE_ColorBalance1Get(), 0.7 * f_gladiator_AFX_coef, 5.0 * TIME_GetDt()), 0.52)
}
else
{
	AFE_Border = MATH_FloatBlend(AFE_Border, 0, TIME_GetDt())
	AFE_BorderColor = COLOR_Blend(AFE_BorderColor, 0, TIME_GetDt())
}

AE_BorderBrightness(AFE_Border)
AE_BorderColor(AFE_BorderColor)


// AGONISANT JOUEUR
///////////////////////////////////////////////////////////////////
if(@"univ" LIFE_HumainEtat[i_id_humain] == Life_ETAT_Agonisant)
{
	if(TIME_Elapsed(f_time_agonisant, f_time_gladiator))
	{
		@"univ" LIFE_HumainEtat[i_id_humain] = Life_ETAT_Conval
	}
}

if(@"univ" LIFE_HumainEtat[i_id_humain] == Life_ETAT_Normal)
{
	f_time_gladiator = 10
}

// CAM ANIMEE FIN
if(i_camera_animee)
{
	if(@get_joueur_cam ACT_ActionFinished())
		i_camera_animee = faux
}

// Pas de zdm tete si en chute
COL_ColSetActivationSet(C_bit_zdm_recalagespecial, 0)
if(!COL_CollideType(COL_C_Ground))
{
	if(DYN_SpeedGetVector().z < 0)
		COL_ColSetActivationSet(0, C_bit_zdm_recalagespecial)
}

/////////////////////////////////////////////////////////////////////////////////////////////
if(f_time_case_mortel > 1.0)
	f_time_case_mortel += TIME_GetDt()

// Case mortelle
if(COL_CollideType(COL_C_Ground) || i_flag_nage)
{
	if(f_time_case_ronce > 2.5 || f_time_case_mortel > 1)
	{
		@"univ" LIFE_HumainEtat[i_id_humain] = Life_ETAT_Mort		
	}
	else if(f_time_case_mortel > 0 || f_time_case_ronce > 1.5)
	{
		tv_temp = -v_org_speed
		tv_temp.z = 0
		if(MATH_VecNull(tv_temp)) tv_temp = -OBJ_SightGet()
		MATH_VecSetNormalize(tv_temp)
		tv_temp *= 3
		i_auto_paf = faux
		if(f_paf_timer > Paf_Gap_Delay) i_auto_paf = vrai
		EVENT_AddEventPafCanal(C_EVENT_FILTER_All, C_PAF_KK_Fort, OBJ_Me(), Cf_EVENT_Duree_1Trame, OBJ_Me(), -1, 1.0 * PAF_Unit, tv_temp, OBJ_PosGet())
	}	
}

