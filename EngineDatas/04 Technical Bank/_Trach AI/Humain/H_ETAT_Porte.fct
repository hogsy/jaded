#include "H_defines.var"
#include "H_action.var"

int			ti_i
int			ti_action
int			ti_numero
int			ti_index
int			ti_flag_grab
int			ti_context
int			ti_useparam
int			ti_danger
int			ti_rotinverse

float		tf_val
float		tf_dot
float		tf_dot1
float		tf_speed
float		tf_desfloat1

vector	tv_dest_pos
vector	tv_temp
vector 	tv_temp1
vector	tv_pilier_sight
vector	tv_pilier_horizon

object	to_trap
object	to_obj

int			ti_what

//Str_DisplayTextOnce("i_etat_state = ", cvector(0.4,0,0))
//Str_DisplayIntOnce(i_etat_state, cvector(0.55,0,0))
//DBG_Gao_All_Capas("=== o_obj_porte ===", o_obj_porte, cvector(0.1,0.1,0))
//DBG_Gao_All_Capas("=== o_obj_levier ===", o_obj_levier, cvector(0.5,0.1,0))

// INIT VAR ======================================================

// ----( get axis )----
if ( o_obj_levier )
{
	tv_pilier_sight = -@o_obj_levier OBJ_SightGet()
	tv_pilier_horizon = @o_obj_levier OBJ_HorizonGet()
}
else if ( o_obj_porte )
{
	tv_pilier_sight = @o_obj_porte OBJ_SightGet()
	tv_pilier_horizon = @o_obj_porte OBJ_HorizonGet()
}

// ----( sens de rotation )----
ti_rotinverse = faux
if ( o_obj_porte && @o_obj_porte OBJ_CapaTest(OBJ_Capa_5) )
{
	tv_pilier_horizon = -tv_pilier_horizon
	ti_rotinverse = vrai
}

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_use_porte = faux
	if(@"univ" i_weapon_ID_second[ i_id_humain ] == Ci_weapon_ID_levier && !@"univ" i_weapon_ID[ i_id_humain ])
	{
		@"univ" i_weapon_ID[ i_id_humain ] = Ci_weapon_ID_levier
		@"univ" i_weapon_ID_second[ i_id_humain ] = 0
	}
	
	if(o_obj_porte)
	{
		@o_obj_porte OBJ_CapaSet(0, OBJ_Capa_7)
		o_obj_porte.des_float1 = 0
	}
	
	o_obj_porte = nobody
	f_timer_notake = 0.1
	f_speed_porte = 0
	i_sort_etat = faux
	i_cache_arme = faux
	i_flag_pousse = faux
	
	COL_ColMapActivationSet( all, none)
	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_Porte)
{
	i_use_porte = vrai
	if(@"univ" i_weapon_ID[ i_id_humain ] == Ci_weapon_ID_levier)
	{
		@"univ" i_weapon_ID_second[ i_id_humain ] = Ci_weapon_ID_levier
		@"univ" i_weapon_ID[ i_id_humain ] = 0
	}
	
	Humains_LeaveObjectInHand()

	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Porte
	f_time_echec_use = 0
	
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()

	for (ti_i = 0; ti_i < Ci_LNK_TYPE_NB; ti_i++)
		ai_SRV_ENABLE[ti_i] = faux

	// AUTORISATION DES AIDES
	ai_SRV_ENABLE[Ci_LNK_INTERACTION] 		= vrai
	ai_SRV_ENABLE[Ci_LNK_GRAB_RAPTOR] = vrai
	
	DYN_SpeedSetVector(Cv_NullVector)
	DYN_TractionSet(Cv_NullVector)
	DYN_GravitySet(Cv_NullVector)
	f_time_start_etat = 0.0		
	i_etat_state = 0
	
	if( o_obj_porte && MATH_VecDotProduct(OBJ_SightGet(), tv_pilier_horizon) > 0 )
		ACT_ActionSet(Inf_Action_Levier_Tire_Deb)
	else
		ACT_ActionSet(Inf_Action_Levier_Pousse_Deb)
	
	COL_ColMapActivationSet(none, all)
	SND_RequestPlay(6)
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE  =====================================================================
MACRO_READ_WORLD
AI_Execute("H_exec_serveur_get")
AI_Execute("H_exec_ch_Stimulus_Paf")
if (o_paf_sender) 
{
	ACT_ActionSet(1)
	fct_prev_etat = "H_ETAT_FPS"
	macro_change_etat("H_ETAT_Paf")
}

if(ao_SRV[Ci_LNK_GRAB_RAPTOR])
	macro_change_etat("H_ETAT_FPS")
	
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
if( ! o_obj_porte )
	macro_change_etat(fct_main_etat)


if( f_time_start_etat > 1 )
{
	if( ! IO_ButtonPressed(joy_button_R2) )
		macro_change_etat(fct_main_etat)
}

@o_obj_porte OBJ_CapaSet(OBJ_Capa_7, 0)
@o_obj_porte OBJ_CapaSet(0, OBJ_Capa_12)
AI_Execute("H_exec_read_joy")	

i_flag_recharge = faux
i_flag_arme_basse = vrai

// ----( rotate axe : dans le cas d'une rotation bloquée )----
tf_desfloat1 = o_obj_porte.des_float1
if ( tf_desfloat1 )
{
	tv_pilier_sight = MATH_VecRotate( tv_pilier_sight, @o_obj_porte OBJ_BankingGet(), -o_obj_porte.des_float1 )
	tv_pilier_horizon = MATH_VecRotate( tv_pilier_horizon, @o_obj_porte OBJ_BankingGet(), -o_obj_porte.des_float1 )
}

// ----( rotation speed )----
tf_speed = f_speed_porte
if(!tf_speed)
	tf_speed = 1.0
if (ti_rotinverse)
	tf_speed = -tf_speed

if (i_etat_state == 0)
{
	// PRISE EN MAIN ========================================
	if (ACT_ActionFinished() )
	{
		if ( MATH_VecDotProduct(OBJ_SightGet(), tv_pilier_horizon ) > 0)
		{
			ACT_ActionSet(Inf_Action_Levier_Tire_Att)
			i_etat_state = 2
		}
		else
		{
			ACT_ActionSet(Inf_Action_Levier_Pousse_Att)
			i_etat_state = 1
		}
	}
}
else if (i_etat_state == 1 )
{
	// POUSSE ==============================================
	@o_obj_porte OBJ_CapaSet(0, OBJ_Capa_12)
	if(f_joy_norm)
	{	
		tf_dot = MATH_VecDotProduct(v_joy_dir,  tv_pilier_horizon )
		if(tf_dot < 0)
		{
			if ( @o_obj_porte OBJ_CapaTest(OBJ_Capa_10) )
				ACT_ActionSet(Inf_Action_Levier_Pousse_Bloque)
			else
			{
				ACT_ActionSet(Inf_Action_Levier_Pousse)
				if (!ACT_ActionIsTransition() )
					@o_obj_porte OBJ_CapaSet(OBJ_Capa_12, 0)
				if ( @o_obj_porte OBJ_CapaTest( OBJ_Capa_14 ) )
				{
					@o_obj_porte OBJ_RotateGlobalZ(tf_speed * TIME_GetDt())
					@get_camera OBJ_RotateGlobalZ(tf_speed * TIME_GetDt())
				}
			}
		}
		else
		{
			ACT_ActionSet(Inf_Action_Levier_Tire_Bloque)
		}
	}
	else
	{
		ACT_ActionSet(Inf_Action_Levier_Pousse_Att)
	}
}
else
{
	// TIRE ==============================================
	@o_obj_porte OBJ_CapaSet(0, OBJ_Capa_12)
	if(f_joy_norm)
	{	
		tf_dot = MATH_VecDotProduct(v_joy_dir,  tv_pilier_horizon )
		
		if(tf_dot < 0)
		{
			if ( @o_obj_porte OBJ_CapaTest(OBJ_Capa_10) )
				ACT_ActionSet(Inf_Action_Levier_Tire_Bloque)
			else
			{
				ACT_ActionSet(Inf_Action_Levier_Tire)
				if (!ACT_ActionIsTransition() )
					@o_obj_porte OBJ_CapaSet(OBJ_Capa_12, 0)
				if ( @o_obj_porte OBJ_CapaTest( OBJ_Capa_14 ) )
				{
					@o_obj_porte OBJ_RotateGlobalZ(tf_speed * TIME_GetDt())
					@get_camera OBJ_RotateGlobalZ(tf_speed * TIME_GetDt())
				}
			}
		}
		else
		{
			ACT_ActionSet(Inf_Action_Levier_Pousse_Bloque)
		}
	}
	else
	{
		ACT_ActionSet(Inf_Action_Levier_Tire_Att)
	}
}

// POS/ORIENT
if ( o_obj_levier )
{
	tv_temp = @o_obj_levier OBJ_PosGet()
	tv_temp.z -= 1.2
	to_obj = @get_global o_camera
	@get_camera_path to_obj f_specific_Z = (tv_temp.z - OBJ_PosGet().z) + 1.47
	tf_dot = MATH_VecDotProduct(OBJ_SightGet(), tv_pilier_horizon )
	
	if(tf_dot < 0)
	{
		tv_temp += (tv_pilier_horizon * 0.5)
		v_sight_pousse = -tv_pilier_horizon
	}
	else // Inversé
	{
		tv_temp -= (tv_pilier_horizon * 0.45)
		v_sight_pousse = tv_pilier_horizon
	}
}
else
{
	tv_temp = @o_obj_porte OBJ_PosGet()
	tv_temp -= (tv_pilier_sight * 0.7)
	tf_dot = MATH_VecDotProduct(OBJ_SightGet(), tv_pilier_horizon )
	
	if(tf_dot < 0)
	{
		tv_temp += (tv_pilier_horizon * 0.5)
		v_sight_pousse = -tv_pilier_horizon
	}
	else // Inversé
	{
		tv_temp -= (tv_pilier_horizon * 0.45)
		v_sight_pousse = tv_pilier_horizon
	}
}

i_flag_pousse = vrai
i_cache_arme = vrai
DYN_SpeedSetVector(Cv_NullVector)
DYN_TractionSet( Cv_NullVector)
DYN_GravitySet( Cv_NullVector )

i_flag_arme_haute = faux
