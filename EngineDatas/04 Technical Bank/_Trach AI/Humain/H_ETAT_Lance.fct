#include "H_defines.var"
#include "H_action.var"

int			ti_context
int			ti_i
int			ti_act
int			ti_index

float		tf_time
float		tf_coef
float		tf_liferatio
float		tf_norm
float		tf_dot
float		tf_range

vector	tv_dest_pos
vector	tv_impulsion
vector	tv_tir_impact
vector	tv_temp
vector	tv_impact_org
vector	tv_gravity
vector	tv_pos

object	to_impact_org

message	tm_msg

object		to_bone
object		to_main
object		to_obj
object		to_camera

#define Cf_grenade_XY_friction				1.0
#define Cf_grenade_hauteur_impulsion	1.0

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	i_sort_etat = faux	
	f_time_recharge = 0
	i_recharge_arme = faux
	i_cache_arme = faux
	i_wait_arme_bas = vrai
	i_flag_arme_haute = 0
	if( i_grenade_launched )
	{
		H_Weapon_Delete(o_grabbed_object_en_main)
		H_Weapon_Swap()
		i_grenade_launched = faux
	}

	i_flag_force_rate = faux	
	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_Lance)
{
	i_request_txt = Gene_C_throw_spear
	i_flag_snipe = faux
	STATS_IncSpears()
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Lance

	i_flag_force_rate = faux

	if(@get_global i_jack_grab || @"univ" LIFE_HumainEtat[C_ID_Joueur] == Cf_Life_Agonisant)
		i_flag_force_rate = faux

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()
	
	// AUTORISATIONS DES GRABS
	for (ti_i = 0; ti_i < Ci_LNK_TYPE_NB; ti_i++)
		ai_SRV_ENABLE[ti_i] = faux
	ai_SRV_ENABLE[Ci_LNK_KKGRAB_OBJECT] = vrai

	i_grenade_launched = 0
	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// COUPER LE LANCER APRES UN FINISHED REPOUSSE
if( @get_global i_Player_on_KK_Shoulder && @get_global i_FPS_Shoulder_force_new_entry )
	macro_change_etat("H_ETAT_Fake")		// Mode FPS sur l'épaule temporairement interdit -> force la sortie

// ANALYSE ======================================================================
MACRO_READ_WORLD
AI_Execute("H_exec_serveur_get")
AI_Execute("H_exec_ch_Stimulus_Paf")
if (o_paf_sender) 
{
	macro_change_etat("H_ETAT_Paf")
}

// COMPORTEMENT ================================================================

AI_Execute("H_exec_read_joy")
AI_Execute("H_exec_speed")

// Lance !!!
if( ACT_ActionItemGet() == 1 && ! i_grenade_launched )
{
	to_camera = @get_global o_camera
	tv_gravity = Cv_NormalGravity
	
	i_cache_arme = vrai
	
	switch(@"univ" i_weapon_ID[i_id_humain])
	{
		case Ci_weapon_ID_bambou :
			tf_range = Cf_bambou_range
			to_main = ANI_CanalObjectGet(Anim_Canal_ArmeLance)
			break
			
		case Ci_weapon_ID_ossement :
			tf_range = Cf_ossement_range
			to_main = ANI_CanalObjectGet(Anim_Canal_ArmeLance)
			break
		
		case Ci_weapon_ID_hachette :
			tf_range = Cf_hachette_range
			to_main = ANI_CanalObjectGet(Anim_Canal_ArmeHachette)
			break
		
		case Ci_weapon_ID_crane :
			tf_range = Cf_crane_range
			to_main = ANI_CanalObjectGet(Anim_Canal_ArmeCrane)
			break
			
		default:
			tf_range = 0.0
			DBG_Error("humain / etat ia lance / arme non prévue pour lancer !!!")
			break
	}
	if( ! to_main )
		DBG_Error("to_main ???")
	
	tv_pos = @to_main OBJ_PosGet()
//	tv_pos -= OBJ_PosGet()
//	tf_dot = MATH_VecDotProduct( tv_pos, OBJ_HorizonGet())
//	tv_pos -= (tf_dot * OBJ_HorizonGet())
//	tv_pos += OBJ_PosGet()
	
	o_grenade = o_grabbed_object_en_main
	if( ! o_grenade )
		DBG_Error("o_grenade ????")
	@o_grenade OBJ_PosSet(tv_pos)

	if(v_tir_prefered_impact != Cv_NullVector)
		tv_tir_impact = v_tir_prefered_impact
	else
		tv_tir_impact = @to_camera OBJ_PosGet() + (@to_camera OBJ_SightGet() * tf_range)
	tv_impulsion = tv_tir_impact - @o_grenade OBJ_PosGet()
	MATH_VecSetNorm(tv_impulsion, tf_range * 2.5)
	
//	i_cache_arme = vrai		
	to_obj = o_canal_annexe1
	@to_obj OBJ_DrawMaskSet(0, DM_C_Draw)		
	@o_grenade OBJ_SightSet( tv_impulsion )
	
	MSG_SetNull(tm_msg)
	tm_msg.msg_id = msg_id_grenadelaunch
	tm_msg.msg_sender = OBJ_Me()
	tm_msg.msg_vec1 = tv_impulsion
	tm_msg.msg_vec2 = tv_gravity
	tm_msg.msg_vec3 = cvector(Cf_grenade_XY_friction, Cf_grenade_XY_friction, Cf_grenade_XY_friction)
	tm_msg.msg_vec4 = cvector( f_time_dynamite, 0, 0 )
	
	@o_grenade MSG_Send( tm_msg )
	
	// Bidoche plugée
	if(@get_global o_bidoche_plug_jack)
	{
		to_obj = @get_global o_bidoche_gao
		@get_PNJ_Bidoche_path to_obj o_javelin = o_grenade

		to_obj = o_grenade
		@get_Arme_Lance_path to_obj o_bidoche = @get_global o_bidoche_gao

		@get_global o_bidoche_gao = nobody
		@get_global o_bidoche_plug_jack = nobody
	}

	// Comptage plug lance
	if(@o_grenade OBJ_CapaTest(OBJ_Capa_5))
	{
		@get_Arme_Lance_path o_grenade i_cpt_plug = @"univ" i_jack_cpt_plug
		@"univ" i_jack_cpt_plug = 0
	}
	
	f_time_dynamite = C_Time_Dyna
	@"univ" i_jack_cpt_plug = 0
	o_grenade = nobody
	
	f_time_tir_grenade = TIME_Get()
	i_grenade_launched = 1
	
	i_flag_arme_haute = faux
}

if (ACT_ActionFinished())
{
	macro_change_etat(fct_main_etat)
}
