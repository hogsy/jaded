#include "H_defines.var"

//====================================================================
// UN SERVEUR DEMANDE UNE INTERACTION, EST-CE QU'ON PEUT ETRE CLIENT
//====================================================================

object			to_serveur
object			to_for_who

messageid		tmid_proposition

float				tf_ponderation

int					ti_param
int					ti_ok

tmid_proposition = pop

to_serveur = MSG_GlobalGetGao(tmid_proposition, SERVEUR)
ti_param = LNK_InteractionParamGet( tmid_proposition ) & 0xFF

// Si l'interaction est demandée pour qqun en particulier
to_for_who = LNK_InteractionDestGaoGet( tmid_proposition )
if(to_for_who && to_for_who != OBJ_Me()) return

switch(LNK_InteractionTypeGet(tmid_proposition))
{
	case Ci_LNK_INTERACTION_HEAL :
		push(tmid_proposition)
		AI_Execute("H_exec_propose_heal")
		break

	case Ci_LNK_INTERACTION_FIGHT :
		if(joueur) return
		push(tmid_proposition)
		AI_Execute("H_exec_propose_help")
		return
	
	case Ci_LNK_INTERACTION_USE :
		if(joueur) return
		if(ti_param == Ci_LNKINT_USE_Ramasse || ti_param == Ci_LNKINT_USE_RamasseUp)
		{
			push(tmid_proposition)
			AI_Execute("H_exec_propose_ramasse")
		}
		else if(ti_param == Ci_LNKINT_USE_Film)
		{
			push(tmid_proposition)
			AI_Execute("H_exec_propose_film")
		}
		else if(ti_param == Ci_LNKINT_USE_Porte)
		{
			push(tmid_proposition)
			AI_Execute("H_exec_propose_porte")
		}
		else
		{
			push(tmid_proposition)
			AI_Execute("H_exec_propose_use")
		}
		return
		
	case Ci_LNK_INTERACTION_CARRY :
		push(tmid_proposition)
		AI_Execute("H_exec_propose_carry")
		return		
}
