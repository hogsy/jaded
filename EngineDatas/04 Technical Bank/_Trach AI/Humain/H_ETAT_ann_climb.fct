#include "H_defines.var"
#include "H_action.var"


int				ti_i
int				ti_orient, ti_orient2
int				ti_move
int				ti_movenextstate

float			tf_horiz
float			tf_vertic
float			tf_norm
float			tf_liferatio
float			tf_temp

vector		tv_temp
vector		tv_normal
vector		tv_movedest
vector		tv_banking

object		to_obj


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	DYN_GravitySet(H_GRAVITY)
	i_sort_etat = faux
	climb_i_nocolset = faux
	way_o_climbvaladest = nobody
	i_flag_suivi_regard = vrai
	COL_ColMapActivationSet(all, none)
	ACT_DefaultTransitionParams(40, ACT_C_TF_DefaultTransition | ACT_C_TF_BlendStock)
	return
}

if(i_etat_state == 100 || i_etat_state == 103)
	ACT_DefaultTransitionParams(0, ACT_C_TF_DefaultTransition | ACT_C_TF_BlendProgressive | ACT_C_TF_BlendStock)
else
	ACT_DefaultTransitionParams(20, ACT_C_TF_DefaultTransition | ACT_C_TF_BlendStock)

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_IA_Ann_Climb )
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_IA_Ann_Climb 
	fct_prev_etat = fct_last_etat

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()

	for (ti_i = 0; ti_i < Ci_LNK_TYPE_NB; ti_i++)
		ai_SRV_ENABLE[ti_i] = faux
	
	// AUTORISATIONS DES GRABS
	ai_SRV_ENABLE[Ci_LNK_GRAB_RAPTOR]	= vrai
	
	DYN_GravitySet(H_GRAVITY)
	DYN_FrictionVectorSet(cvector(1.0, 1.0, 0.0))

	COL_ColMapActivationSet(none, all)

	i_etat_state = 0
	f_time_start_etat = 0.0
	climb_i_piedaterre = 0
	i_request_txt = Gene_C_opening_door
}
else
{
	f_time_start_etat += TIME_GetDt()
}

if(TIME_Elapsed(f_time_opening, 6) && !SPEECH_ObjectHasContent(OBJ_Me()))
{
	f_time_opening = TIME_Get()
	i_request_txt = Gene_C_opening_door
}

ti_orient = faux
ti_orient2 = faux
ti_move = faux
climb_i_nocolset = faux

// ========( ANALYSE )=========================================
AI_Execute("H_exec_read_world")
AI_Execute("H_exec_serveur_get")
AI_Execute("H_exec_change_etat")

// ========( PAF )=========================================
AI_Execute("H_exec_ch_Stimulus_Paf")
//if ( IO_KeyJustPressed( 66 ) )
//	o_paf_sender = OBJ_Me()
	
if ( @"univ" LIFE_HumainEtat[i_id_humain] == Life_ETAT_Mort )
{
	macro_change_etat( "H_ETAT_IA_mort" )
}

if (o_paf_sender )
{
	if ( (i_etat_state == 0) || (i_etat_state == 100 ))
		macro_change_etat( "H_ETAT_IA_paf")
	else if ((i_etat_state == 110 ) || (i_etat_state == 103 ) || (i_etat_state == 12) )
	{
		i_request_txt = Gene_C_blow_take
		i_last_request_txt = -1
		o_paf_sender = nobody
	}
	else
	{
		if ( (i_etat_state >= 101) && (i_etat_state <= 109) )
			ACT_ActionSet1( Action_Ann_Grimpe_PafPaf)
		else
			ACT_ActionSet1( Action_Ann_Grimpe_Paf )

		i_request_txt = Gene_C_blow_take
		i_last_request_txt = -1
		o_paf_sender = nobody
		if ( @"univ" LIFE_HumainEtat[i_id_humain] == Life_ETAT_Mort )
		{
//			macro_change_etat( "H_ETAT_IA_Projete" )
			macro_change_etat( "H_ETAT_IA_mort" )
		}
		else
		{
			climb_v_posavantchute = OBJ_PosGet()
			f_etat_statetimer = 1
			if ( (i_etat_state >= 101) && (i_etat_state <= 109) )
				i_etat_state = 110
			else
			{
				if ((i_etat_state == 2) || (i_etat_state == 3))
					climb_i_etatavantpaf = 1
				else if ( (i_etat_state != 10) && (i_etat_state != 11) )
					climb_i_etatavantpaf = i_etat_state
				i_etat_state = 10
			}
		}
	}
}

i_flag_suivi_regard = faux

// --------( test arrivée à destination d'nu vala )-------------------------------------------------------------
if ( way_o_climbvaladest )
{
	v_joy_dir = @way_o_climbvaladest OBJ_PosGet() - OBJ_PosGet()
	f_joy_norm = MATH_VecNorm(v_joy_dir)
	if ( f_joy_norm < 0.5 )
	{
		i_flag_arrived = vrai
		i_cine_close = vrai
		way_o_climbvaladest = nobody
	}
}

// --------( etat 0 : approche du mur )--------------------------------------------------------------------------
if (i_etat_state == 0)
{
	v_way_destpos = @way_o_climb OBJ_PosGet()
	v_joy_dir = v_way_destpos - OBJ_PosGet()
	v_joy_dir.z = 0.0
	f_joy_norm = MATH_VecNorm(v_joy_dir)
	if(f_joy_norm < 0.5)
		i_etat_state = 1
	if(f_joy_norm > 2)
		i_flag_run = vrai
		
	AI_Execute("H_exec_select_action")
	
	if (f_joy_norm < 0.5)
	{
		i_etat_state = 1
		i_flag_nage = faux
	}
	else if (COL_CollideType(COL_C_Wall) )
	{
		tv_temp = COL_NormalGet(COL_C_Wall)
		if(MATH_VecDotProduct(OBJ_SightGet(), tv_temp) < -0.4)
		{
			to_obj = COL_ObjectGet( COL_C_Wall )
			if ( !(@to_obj OBJ_FlagsIdentityGet() & OBJ_C_IdentityFlag_Anims ) )
			{
				i_etat_state = 1
				i_flag_nage = faux
			}
		}
	}
}

// --------( etat 1 : WP suivant )-----------------------------------------------------------------------------------------
if (i_etat_state == 1)
{
//	ACT_ActionSet1(Action_Ann_Grimpe_Att )
	way_o_climbto = WAY_NetNextWP( move_network, way_o_climb, 7, OBJ_Capa_6 )
	if (way_o_climbto == nobody)
	{
		DBG_TraceString("Ann bloquée sur reseau de grimpe\n")
		DBG_TraceString( "trouve pas de lien avec la capa_6 = lien de grimpe\n" )
		return
	}
	
	v_joy_dir = @way_o_climbto OBJ_PosGet() - @way_o_climb OBJ_PosGet()
	tf_horiz = (v_joy_dir.x * v_joy_dir.x) + (v_joy_dir.y * v_joy_dir.y)
	tf_vertic = v_joy_dir.z * v_joy_dir.z
	
	if ( @way_o_climb OBJ_FlagsIdentityTest( OBJ_C_IdentityFlag_DesignStruct ) )
	{
		if ( way_o_climb.des_int1 == 1)
		{
			climb_i_phrase = way_o_climb.des_int2
			climb_i_down = faux
			if ( v_joy_dir.z < 0 )
				climb_i_down = vrai
			i_etat_state = 100
		}
	}

	if (i_etat_state != 100)
	{
		if ( v_joy_dir.z < 0 && (tf_vertic > tf_horiz * 2) )
		{
			ACT_ActionSet1( Action_Ann_Grimpe_Glisse )
			i_etat_state = 3
			climb_f_speed = 0.5
		}
		else
		{
			if (tf_vertic > tf_horiz * 2)
			{
				ACT_ActionSet1( Action_Ann_Grimpe_Haut )
				climb_f_speed = 0.5
			}
			else
			{
				v_joy_dir.z = 0
				if ( MATH_VecDotProduct( v_joy_dir, OBJ_HorizonGet()) > 0)
				{
					ACT_ActionSet1( Action_Ann_Grimpe_Gauche) 
					climb_f_speed = 0.5
				}
				else
				{
					ACT_ActionSet1( Action_Ann_Grimpe_Droite) 
					climb_f_speed = 0.5
				}
			}
			i_etat_state = 2
		}
	}
}

// --------( etat 2 : grimpe )-----------------------------------------------------------------------------------------
if (i_etat_state == 2)
{
	ti_move = 1
	ti_movenextstate = 4
	tv_movedest = @way_o_climbto OBJ_PosGet()
	ti_orient = 1
}

// --------( etat 3 : glisse )-----------------------------------------------------------------------------------------
if (i_etat_state == 3)
{
	ti_move = 1
	ti_movenextstate = 4
	tv_movedest = @way_o_climbto OBJ_PosGet()
	if(ACT_ActionIsTransition())
		ti_orient = 0
	else
		ti_orient = 1
}

// --------( etat 4 : arrivée à un WP : regarde si fin de grimpette )----------------------------------
if (i_etat_state == 4)
{
	climb_i_piedaterre = 0
	
	way_o_climb = way_o_climbto
	if (@way_o_climb OBJ_CapaTest( OBJ_Capa_1 ) )
	{
		i_etat_state = 12
		if(ACT_ActionGet() == Action_Ann_Grimpe_Haut)
			ACT_ActionSet(Action_Ann_FinGrimpe_Haut)
		else
			ACT_ActionSet(Action_Ann_FinGrimpe_Bas)
	}
	else
	{
		if (@way_o_climb OBJ_CapaTest( OBJ_Capa_2 ) )
			climb_i_piedaterre = 1
	
		if (@way_o_climb OBJ_CapaTest( OBJ_Capa_3 ) || @way_o_climb OBJ_CapaTest( OBJ_Capa_4 ))
		{
			if (@way_o_climb OBJ_CapaTest( OBJ_Capa_2 ) )
				ACT_ActionSet1( Action_Cache_Att )
			else
				ACT_ActionSet1( Action_Ann_Grimpe_Att )
				
			if (@way_o_climb OBJ_CapaTest( OBJ_Capa_3 ) )
			{
				climb_f_timer = 0
				if ( @way_o_climb OBJ_FlagsIdentityTest( OBJ_C_IdentityFlag_DesignStruct ) )
				{
					tv_temp = way_o_climb.des_vec1
					climb_f_timer = tv_temp.x
				}
				if (climb_f_timer <= 0)
					climb_f_timer = 1.0
				i_etat_state = 5
			}
			else
			{
				i_etat_state = 6
			}
		}
		else
			i_etat_state = 1
	}
}

// --------( etat 5 : attente )----------------------------------
if ( i_etat_state == 5 )
{
	climb_f_timer -= TIME_GetDt()
	if (climb_f_timer < 0)
		i_etat_state = 1
}

// --------( etat 5 : bloquage )----------------------------------
if ( i_etat_state == 6 )
{
	if ( !@way_o_climb OBJ_CapaTest( OBJ_Capa_4 ))
		i_etat_state = 1
}

// --------( etat 10 : paf )----------------------------------
if (i_etat_state == 10)
{
	if (ACT_ActionFinished()) 
	{
		ACT_ActionSet1( Action_Ann_Grimpe_Haut )
		climb_f_speed = 0.5
		i_etat_state = 11
	}
	
	f_etat_statetimer -= TIME_GetDt()
	if (f_etat_statetimer < 0 )f_etat_statetimer = 0
		
	v_joy_dir = cvector( 0, 0, -1)
	tv_temp = v_joy_dir * TIME_GetDt() * (f_etat_statetimer * 2)
	DYN_SpeedSetVector( Cv_NullVector )
	OBJ_PosSet( OBJ_PosGet() + tv_temp )
}

// --------( etat 11 : remontée après paf )----------------------------------
if (i_etat_state == 11)
{
	ti_move = 1
	ti_movenextstate = climb_i_etatavantpaf 
	tv_movedest = climb_v_posavantchute
	ti_orient = 1
}

// --------( etat 12 : fin grimpe haut )----------------------------------
if (i_etat_state == 12)
{
	ti_orient = 0
	ti_move = 0
	if(ACT_ActionFinished())
	{
		if(fct_prev_etat)
			macro_change_etat( fct_prev_etat )
		else
			macro_change_etat( fct_main_etat )
	}
}

//===============[ GRIMPE AVEC PHRASE ]================

// --------( etat 100 : debut de grimpe )--------
if (i_etat_state == 100 )
{
	if (climb_i_down)
		ACT_ActionSet( Action_Ann_Grimpe_descentedeb )
	else
		ACT_ActionSet( Action_Ann_Grimpe_montedeb )
	i_etat_state = 101
}

// --------( etat 101 : recalage )--------
if (i_etat_state == 101)
{
	tv_movedest = @way_o_climb OBJ_PosGet()
	tv_movedest -= @way_o_climb OBJ_SightGet() * 0.3
	tv_banking = OBJ_BankingGet()
	ti_orient2 = 1
	
	DBG_RenderSphere( tv_movedest, 0.1, color_rouge )
 
	if (ACT_ActionFinished())
	{
		DYN_SpeedSetVector(Cv_NullVector)
		OBJ_PosSet( tv_movedest )
		climb_i_actionstart = tv_movedest
		climb_i_actionnum = 0
		climb_i_actionfirstloop= vrai
		ACT_ActionSet( Action_Ann_Grimpe_Phrase1 + climb_i_phrase)
		i_etat_state = 102
	}
	else
	{
		tv_movedest -= OBJ_PosGet()
		tf_norm = MATH_VecNorm( tv_movedest )
		if (tf_norm > 0.05 )
			tv_movedest = OBJ_PosGet() + ((TIME_GetDt() / tf_norm) *  tv_movedest )
		else
			tv_movedest += OBJ_PosGet()
		OBJ_PosSet( tv_movedest )
		DYN_SpeedSetVector(Cv_NullVector)
	}
}

// --------( etat 102 : joue le phrasé )--------
if (i_etat_state == 102)
{
	if(TIME_Elapsed(f_time_sfx_grimpe, f_time_sfx_rand_grimpe))
	{
		f_time_sfx_rand_grimpe = MATH_RandFloat(0.5, 2)
		f_time_sfx_grimpe = TIME_Get()
		if(MATH_RandInt(0, 2))
			to_obj = ANI_CanalObjectGet(Anim_Canal_PiedDroit)
		else
			to_obj = ANI_CanalObjectGet(Anim_Canal_PiedGauche)
		Proc_Hum_SFX_Walling(@to_obj OBJ_PosGet(), - OBJ_BankingGet())
	}
	
	DYN_GravitySet(Cv_NullVector)
	climb_i_nocolset = 1
	
	tv_normal = @way_o_climbto OBJ_PosGet()
	tv_normal -= @way_o_climb OBJ_PosGet()
	MATH_VecSetNormalize( tv_normal )
	if (climb_i_down)
		tv_normal = -tv_normal
	tv_banking = tv_normal 
	if ((climb_i_phrase >= 2) && (climb_i_phrase < 5 ))
	{
		tv_normal = Cv_VerticalVector
		tv_banking = tv_normal
	}
	ti_orient2 = 1
	
	tv_movedest = @way_o_climbto OBJ_PosGet()
	tv_movedest -= OBJ_PosGet()
	
	tf_temp = MATH_VecDotProduct( tv_movedest, tv_normal )
   
  	if (MATH_VecDotProduct( tv_movedest, tv_movedest) < 4 )
  	{
		//----( dernier WP de grimpe ? )----
		if (@way_o_climbto OBJ_CapaTest( OBJ_Capa_1 ) )
		{
			if (climb_i_down)
			{
				if ( tf_temp > 0 )
				{
					ACT_ActionSet( Action_Ann_Grimpe_descentefin )
					i_etat_state = 103
				}
			}
			else
			{
				if ( tf_temp < 1.7  )
				{
					ACT_ActionSet( Action_Ann_Grimpe_montefin )
					i_etat_state = 103
				}
			}
		}
		else
		{
			//----( dépassement du WP , passe au suivant )----
			if ( (!climb_i_down && (tf_temp < 0.6)) || (climb_i_down && (tf_temp > 0) ) ) 
			{
				way_o_climb = way_o_climbto
				way_o_climbto = WAY_NetNextWP( move_network, way_o_climb, 7, OBJ_Capa_6 )
				if (way_o_climbto == nobody)
				{
					DBG_TraceString("Ann bloquée sur reseau de grimpe\n")
					DBG_TraceString( "trouve pas de lien avec la capa_6 = lien de grimpe\n" )
					return
				}
			}
		}
	}

	climb_i_actionnum = ACT_ActionItemGet()
	climb_i_actionframe = ANI_CurrentFrameGet( 0 )
	climb_i_actionstart = OBJ_PosGet()
	
	// ----( fin du phrasé, loop )----
	if ( ACT_ActionFinished() )
	{
		switch (climb_i_phrase)
		{
			case 2 : climb_i_phrase = 3 break
			case 3 : climb_i_phrase = 4 break
			case 4 : climb_i_phrase = 2 break
		}
		ACT_ActionSet( Action_Ann_Grimpe_Phrase1 + climb_i_phrase)
		climb_i_actionstart = OBJ_PosGet()
		climb_i_actionnum = 0
		climb_i_actionfirstloop= faux
		climb_i_actionframe = 0
		ANI_CurrentFrameSet( 0, 0 )
	}
	//else
	//{
		// ----( changement d'action item )----
		//if (ACT_ActionItemGet() != climb_i_actionnum )
		//{
			//climb_i_actionstart = OBJ_PosGet()
		//}
	//}
}

//----( fin de la grimpe )----
if ( i_etat_state == 103 )
{
	if(TIME_Elapsed(f_time_opening, 2))
	{
		f_time_opening = TIME_Get()
		i_request_txt = Gene_C_opening_door
	}
	
	tv_banking = Cv_VerticalVector
	ti_orient2 = vrai
	DYN_GravitySet(Cv_NullVector)

	if (ACT_ActionItemGet() <= 1)
		climb_i_nocolset = 1
	if (ACT_ActionFinished() )
	{
		ACT_DefaultTransitionParams(20, ACT_C_TF_DefaultTransition | ACT_C_TF_BlendStock)
		ACT_ActionSet( Action_Stress_Attente )
		@"univ" LIFE_HumainEtat[i_id_humain] = Life_ETAT_Normal
		macro_change_etat( fct_prev_etat )
	}
}

//----( take a paf en grimpe phrasé )----
if (i_etat_state == 110)
{
	climb_i_nocolset = 1
	//DYN_SpeedSetVector( Cv_NullVector )
	DYN_GravitySet(Cv_NullVector)
	if (ACT_ActionFinished())
	{
		if(TIME_Elapsed(f_time_opening, 2))
		{
			f_time_opening = TIME_Get()
			i_request_txt = Gene_C_opening_door
		}
		
		ACT_FullActionSet(Action_Ann_Grimpe_Phrase1 + climb_i_phrase, climb_i_actionnum )
		ANI_CurrentFrameSet(0,climb_i_actionframe)
		OBJ_PosSet( climb_i_actionstart )
		DYN_SpeedSetVector( Cv_NullVector )
		i_etat_state = 102
	}
}


// --------( mouvement )----------------------------------
if (ti_move)
{
	v_joy_dir = tv_movedest - OBJ_PosGet()
	tf_norm = MATH_VecNorm( v_joy_dir )

	if (climb_i_piedaterre)
	{
		f_joy_norm = tf_norm 
		//i_flag_run = vrai
		AI_Execute("H_exec_select_action")
		ti_orient = 0
	}
	else
	{
		tv_temp = (v_joy_dir / tf_norm) * TIME_GetDt() * climb_f_speed
		DYN_SpeedSetVector( Cv_NullVector )
		OBJ_PosSet( OBJ_PosGet() + tv_temp )
	}
	
	if (tf_norm < 0.5 )
		i_etat_state = ti_movenextstate
}

// --------( orientation )----------------------------------
if (ti_orient)
{
	if (COL_CollideType(COL_C_Wall))
		tv_normal = -COL_NormalGet( COL_C_Wall )
	else
	{
		tv_normal = @way_o_climb OBJ_SightGet()
//		tv_normal = @way_o_climbto OBJ_PosGet() - @way_o_climb OBJ_PosGet()
//		tv_normal = MATH_VecCrossProduct( tv_normal, Cv_VerticalVector)
//		if ( MATH_VecDotProduct( tv_normal, OBJ_SightGet() ) < 0)
//			tv_normal = -tv_normal
	}

	tv_temp = MATH_VecBlendRotate( OBJ_SightGet(), tv_normal, TIME_GetDt()*4 )
	OBJ_SightGeneralSet( tv_temp, Cv_VerticalVector)
}

// --------( orientation )----------------------------------
if (ti_orient2)
{
	tv_banking = MATH_VecBlendRotate( OBJ_BankingGet(), tv_banking, TIME_GetDt() )
	tv_temp = MATH_VecBlendRotate( OBJ_SightGet(), @way_o_climb OBJ_SightGet(), TIME_GetDt() )
	OBJ_BankingGeneralSet( tv_temp, tv_banking)
}


