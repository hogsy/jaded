vector	tv_start_pos
vector	tv_dest_pos
vector	tv_wind
vector	tv_temp
float		tf_temp

int			ti_GFX_Impact
int			ti_GFX_Feu
int			ti_nb_sprite
vector	tv_start
vector	XAX 
vector 	YAX 
vector	POS_FOR_GFX 
vector	BANKING_FOR_GFX 
vector	SIGHT_FOR_GFX  

tv_start_pos = pop
tv_dest_pos = pop
ti_nb_sprite = pop

if( ! i_flag_snipe)  // || @"univ" i_weapon_ID[i_id_humain] != Ci_weapon_ID_sniper_rifle)
{
	tf_temp = 0.05
	push(tf_temp)
	tf_temp = 0.1
	push(tf_temp)
	push(tv_start_pos)
	AI_Execute("H_exec_GFX_Flamme")
}

tv_start = tv_start_pos
if (tv_start_pos == tv_dest_pos)
	return

POS_FOR_GFX =tv_start_pos 
BANKING_FOR_GFX = MATH_VecNormalize(tv_dest_pos - tv_start_pos)

ti_GFX_Impact = GFX_Add(13)																	// Create the boum
			
GFX_MaterialSet(ti_GFX_Impact, get_SFX_light_and_smoke, -1)					// met le materiau
GFX_Seti(ti_GFX_Impact, 13101, 8)															// Materiau 0

XAX = 0.35 * BANKING_FOR_GFX
POS_FOR_GFX -= BANKING_FOR_GFX *0.10

YAX = cvector(0,0,0)
GFX_Setv(ti_GFX_Impact, 13207, XAX )				// CreaPosAxe X
GFX_Setv(ti_GFX_Impact, 13208, YAX )				// CreaPosAxe Y
GFX_Seti(ti_GFX_Impact, 13100, 5)															// *Buffer number of sprite
GFX_Seti(ti_GFX_Impact, 13106, 5)															// *number of sprite to generate
GFX_Setf(ti_GFX_Impact, 13003, 0.05)														// Time fase 1
GFX_Setf(ti_GFX_Impact, 13004, 1.5)														// Time fase 2
GFX_Seti(ti_GFX_Impact, 13107, 0)															// Sprites non triés
GFX_FlagSet(ti_GFX_Impact, 0 , 1)
GFX_FlagSet(ti_GFX_Impact, 2 , 1)
GFX_Setf(ti_GFX_Impact, 13012, 0.0)														// Time random
GFX_Setf(ti_GFX_Impact, 13000, 2.5 )						// Growing speed min
GFX_Setf(ti_GFX_Impact, 13001, 5.8 )						// Growing speed max
GFX_Setf(ti_GFX_Impact, 13002, 0.20)													// Friction Grow
GFX_Setf(ti_GFX_Impact, 13005, 0.00)														// Creation size min
GFX_Setf(ti_GFX_Impact, 13006, 0.00)														// Creation size max
GFX_Setv(ti_GFX_Impact, 13203, cvector(0.2, 0.2, 0.2))							// friction speed
GFX_Seti(ti_GFX_Impact, 13103, 0x40C0a0a0)											// Color fase 0
GFX_Seti(ti_GFX_Impact, 13104, 0x0AC0a0a0)											// Color fase 1
GFX_Seti(ti_GFX_Impact, 13105, 0x00C0a0a0)											// Color fase 2
GFX_Setf(ti_GFX_Impact, 13009, 1.0)														// Norm speed min
GFX_Setf(ti_GFX_Impact, 13010, 5.8)														// Norm speed max
GFX_Setf(ti_GFX_Impact, 13008, 0.0001)													// generation rate
GFX_Setv(ti_GFX_Impact, 13205, Cv_NullVector)										// Mainposspeed
GFX_Setv(ti_GFX_Impact, 13206, Cv_NullVector)										// Mainpossfriction
GFX_Setv(ti_GFX_Impact, 13200, OBJ_PosGet()) 													// Creation Pos
GFX_Setf(ti_GFX_Impact, 13007, 0.6)									// Gravity
tv_temp = 0* tf_temp * BANKING_FOR_GFX
GFX_Setv(ti_GFX_Impact, 13201, tv_temp +(1*tf_temp *cvector(-1.2, -1.2, -1.0)))				// Speed min
GFX_Setv(ti_GFX_Impact, 13202, tv_temp +(1*tf_temp *cvector(1.2, 1.2, 1.0)))					// Speed max
GFX_Setv(ti_GFX_Impact, 13200,POS_FOR_GFX  )													// Creation Pos

// DOUILLES
SIGHT_FOR_GFX  = MATH_VecCrossProduct(BANKING_FOR_GFX,cvector(0.0, 0.0, 1.0))
SIGHT_FOR_GFX  = MATH_VecNormalize(SIGHT_FOR_GFX )
SIGHT_FOR_GFX  += cvector(0.0, 0.0, 1.0)
SIGHT_FOR_GFX  += 0.5*BANKING_FOR_GFX
SIGHT_FOR_GFX  = MATH_VecNormalize(SIGHT_FOR_GFX )
ti_GFX_Impact = GFX_Add(9)
GFX_FlagSet(ti_GFX_Impact , 0, 1)
GFX_FlagSet(ti_GFX_Impact , 2, 1)
GFX_MaterialSet(ti_GFX_Impact , get_SFX_light_and_smoke, 33)
GFX_Setf(ti_GFX_Impact, 9000, Cf_PiBy2*0.2)												// angle d'ouverture
GFX_Setf(ti_GFX_Impact, 9001, 4.0)														// vitesse initiale minimum
GFX_Setf(ti_GFX_Impact, 9002, 4.1)														// vitesse initiale maximum
GFX_Setf(ti_GFX_Impact, 9003, 0.95 )														// friction
GFX_Setf(ti_GFX_Impact, 9004, 0.010)													// épaisseur
GFX_Setf(ti_GFX_Impact, 9005, 0.40)														// durée de vie minimum
GFX_Setf(ti_GFX_Impact, 9006, 0.42)														// durée de vie maximum
GFX_Setf(ti_GFX_Impact, 9007, 0.6 )														// multiplicateur de longueur
GFX_Setf(ti_GFX_Impact, 9008, 0.005 )													// generation périod
GFX_Setf(ti_GFX_Impact, 9009, 0.4)			 											// durée de mort minimun
GFX_Setf(ti_GFX_Impact, 9010, 0.4)														// durée de mort maximun
GFX_Seti(ti_GFX_Impact, 9100, 1)															// Nombre
GFX_Seti(ti_GFX_Impact, 9102, 0b11000)												// Flags (1 => agrandissement centré)
GFX_Setv(ti_GFX_Impact, 9200, POS_FOR_GFX - (0.3 * BANKING_FOR_GFX))													// Origine des étincelles
GFX_Setv(ti_GFX_Impact, 9201, SIGHT_FOR_GFX   )											// Direction
GFX_Setv(ti_GFX_Impact, 9202, cvector(0.0, 0.0, -6.0) )								// gravity
GFX_Seti(ti_GFX_Impact, 9101, 0xf0304040) 												// couleur}

