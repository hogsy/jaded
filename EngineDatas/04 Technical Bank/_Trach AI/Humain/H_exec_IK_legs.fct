#include "H_defines.var"
#include "H_action.var"


int			ti_i
int			ti_k
int			ti_frame_num
int			ti_flag_collision
int			ti_flag_ok
int			ti_action
int			ti_flag_ray_insensitive
int			ti_flag_carry

float		tf_LOD
float		tf_dt
float		tf_angle
float		tf_offset
float		tf_bassin_offset
float		tf_bassin_offset_min
float		tf_norm
float		tf_X
float		tf_Y
float		tf_coef
float		tf_IK_coef
float		tf_size_coef
float		tf_coef_min
float		tf_coef_max
float		tf_ray_start_offset
float		tf_look_Z_coef
float		tf_target_coef
float		tf_sign
float		tf_dot_product
float		taf_carry_snap_coef[2]

vector	tv_pied_pos
vector	tv_collide_pos
vector	tv_ray_start
vector	tv_ray_dir
vector	tv_last_pos
vector	tv_start_axis
vector	tv_dest_axis
vector	tv_ray_normale
vector	tv_bassin_dest_pos
vector	tv_dest_pos
vector	tv_X
vector	tv_Y
vector	tv_temp
vector	tv_rot_pivot_pos
vector	tv_look_axis
vector	tv_virtual_banking
vector	tv_virtual_sight
vector	tv_ik_1st_bone_dir[2]
vector	tv_ik_2nd_bone_dir[2]
vector	tv_flexion_dir

object	to_camera
object	to_target
object	to_bone
object	to_ventre
object	to_torse

#define Cf_offset_min						-4.0
#define Cf_offset_max						2.0
#define Cf_walk_Z_blend_speed			12.0

#define Ci_bone_pos_index				2

/////////////////////////////////////////////////////////////////////////////////////////
// IK LEGS
/////////////////////////////////////////////////////////////////////////////////////////
if (@get_global i_IK_LEG_Off)
	return

if (joueur)
	return

switch(i_id_humain)
{
	case C_ID_Ann :
	case C_ID_Hayes :
	case C_ID_Denham :
	case C_ID_Jimmy :
		break
		
	default:
		return
}

if (@get_global i_frame_nbr < 10)
	tf_dt = 1000.0
else
	tf_dt = TIME_GetDt()

f_IK_speed[Ci_IK_pied_gauche] = tf_dt * 6.0
f_IK_speed[Ci_IK_pied_droit] = f_IK_speed[Ci_IK_pied_gauche]
i_flag_leg_IK[Ci_IK_pied_gauche]	= ACT_CustomBitTest(2)
i_flag_leg_IK[Ci_IK_pied_droit]	= ACT_CustomBitTest(2)

if(OBJ_CapaTest(OBJ_Capa_2))
{
	i_flag_leg_IK[Ci_IK_pied_gauche] = 0
	i_flag_leg_IK[Ci_IK_pied_droit] = 0
}

if (ACT_ActionFinished())
{
	if (i_finished_action_trame_nb && i_finished_action == ACT_ActionGet())
	{
//		DBG_TraceObject(OBJ_Me())
//		DBG_TraceString(" a fini l'anim ")
//		DBG_TraceInt(i_finished_action)
//		DBG_TraceString(" depuis ")
//		DBG_TraceInt(i_finished_action_trame_nb)
//		DBG_TraceString(" trame (la trame courrante est la ")
//		DBG_TraceInt(ANI_CurrentFrameGet(0))
//		DBG_TraceString(" / ")
//		DBG_TraceInt(ANI_NbFrameGet(0))
//		DBG_TraceEOL()
//		
//		DBG_Warning("Anim non rafraichie => Log")
//
		i_finished_action_trame_nb ++
		return
	}

	i_finished_action = ACT_ActionGet()
	i_finished_action_trame_nb ++
}
else
{
	i_finished_action_trame_nb = 0
}

//OBJ_RotateGlobalZ(2.0 * TIME_GetDt())

v_IK_ref_ground_pos = OBJ_PosGet()

tv_virtual_banking = H_Body_Speed_Rotate()
tv_ray_dir = tv_virtual_banking

//if (i_flag_culled) //  || IO_KeyPressed(VK_SPACE))
//{
//	H_Reset_IK_Legs()	
//	return
//}

//to_queue = ANI_CanalObjectGet(Anim_Canal_Queue)
//tv_queue_banking = @to_queue OBJ_BankingGet()

tf_size_coef = 1.0
tf_bassin_offset_min = -1.0
tf_coef_min = 0.15
tf_coef_max = 0.2
tf_ray_start_offset = 0.33

// EST-CE QU'ON S'ADAPTE AU RELIEF DU SOL ??? =============================================================
tf_bassin_offset = 0.0

ti_action = ACT_ActionGet()
//switch(ti_action)
//{
//	case 47 :
//	case 48 :
//	case 82 :
//	case 204 :
//	case 208 :
//		ti_flag_carry = vrai
//		break
//		
//	default:
//		ti_flag_carry = faux
//}

if (i_etat_courant == ETAT_IA_carried)
	ti_flag_carry = vrai
else
	ti_flag_carry = faux


to_camera = @get_global o_camera
if (MATH_VecDotProduct(OBJ_PosGet() - @to_camera OBJ_PosGet(), @to_camera OBJ_SightGet()) < -1.0)
	tf_LOD = 0.0
else
	tf_LOD = OBJ_LodVisGet()

if (tf_LOD < 0.3 && ! ti_flag_carry)
{
	H_Reset_IK_Legs()	
	return
}

if (ti_flag_carry)
{
	i_flag_leg_IK[0] = vrai
	i_flag_leg_IK[1] = vrai
	taf_carry_snap_coef[0] = 0.0
	taf_carry_snap_coef[1] = 0.0
}

for (ti_i = 0; ti_i < 2; ti_i++)
{
//	i_flag_leg_IK[ti_i] = vrai

	tf_dot_product = MATH_VecDotProduct(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet() - v_IK_ref_ground_pos, tv_virtual_banking)
	f_IK_ground_coef[ti_i] = MATH_FloatBlend(1.0, 0.0, (tf_dot_product - 0.1) * 8.0)

	if ( ! i_flag_leg_IK[ti_i] && ! f_IK_coef[ti_i] )
		continue

	if (ti_flag_carry)
		tf_coef = 1.0
	else
		tf_coef = H_Get_Move_Coef(ti_i)

	if (f_IK_coef[ti_i] == 1.0 && tf_coef != -1.0 && ! i_flag_leg_bend[ti_i] )
	{
		// ON A L'INFORMATION DE DEPLACEMENT DU PIED
		if (tf_coef == 1.0)
		{
			// LE PIED EST BLOQUE
			if (f_IK_snap_coef[ti_i] != 1.0)
			{
				f_IK_snap_coef[ti_i] = 1.0	
			
				v_IK_bone_last_valid_sight[ti_i] = @ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_SightGet()
				v_IK_bone_last_valid_banking[ti_i] = @ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_BankingGet()
	
				tv_pied_pos = @ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet()
			}
			else
			{
				v_IK_bone_last_valid_sight[ti_i] = @ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_SightGet()
				v_IK_bone_last_valid_banking[ti_i] = MATH_VecInCone(v_IK_bone_last_valid_banking[ti_i], @ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_BankingGet(), Cf_PiBy6, 1)
		
				if (ti_flag_carry)
				{
					// ON GARDE LA DERNIERE POSITION DANS UN CONE
					tv_pied_pos = v_IK_ground_pos[ti_i]
					tv_pied_pos -= @ao_IK_bones[ti_i][0] OBJ_PosGet()
					tv_pied_pos = MATH_VecInCone(tv_pied_pos, OBJ_SightGet(), Cf_PiBy3, 0)
					tv_pied_pos += @ao_IK_bones[ti_i][0] OBJ_PosGet()
	
					// AXE
					tv_dest_axis = tv_pied_pos
					tv_dest_axis -= @ao_IK_bones[ti_i][0] OBJ_PosGet()
					tf_norm = MATH_VecNorm(tv_dest_axis)
					tv_dest_axis /= tf_norm
					
					// CONSERVTION DE LA DISTANCE HANCHE - PIED
					tv_pied_pos = @ao_IK_bones[ti_i][0] OBJ_PosGet()
//					tv_pied_pos += tv_dest_axis * MATH_FloatMax(tf_norm, MATH_VecNorm(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet() - @ao_IK_bones[ti_i][0] OBJ_PosGet()) * 0.75)
					tv_pied_pos += tv_dest_axis * MATH_VecNorm(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet() - @ao_IK_bones[ti_i][0] OBJ_PosGet())


					// EST-CE QU'ON EST TORDU ?
					tv_dest_axis.z = 0.0
					MATH_VecSetNormalize(tv_dest_axis)

					taf_carry_snap_coef[ti_i] = MATH_VecDotProduct(tv_dest_axis, -OBJ_HorizonGet())
					taf_carry_snap_coef[ti_i] *= 0.5
		
					tv_pied_pos -= @ao_IK_bones[ti_i][0] OBJ_PosGet()
					tv_pied_pos *= 0.97 - MATH_AbsFloat(taf_carry_snap_coef[ti_i] * 0.1)
					tv_pied_pos += @ao_IK_bones[ti_i][0] OBJ_PosGet()
				}
				else
				{
					tv_pied_pos = v_IK_ground_pos[ti_i] 
				}

				tv_pied_pos += MATH_VecDotProduct(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet() - tv_pied_pos, tv_ray_dir) * tv_ray_dir
			}

			DBG_RenderVector(tv_pied_pos, Cv_VerticalVector * 100.0, color_jaune)
		}
		else
		{
			// LE PIED EST EN MOUVEMENT
			f_IK_snap_coef[ti_i]	= 1.0 - tf_coef
		
			tv_pied_pos = MATH_VecBlend(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet(), v_IK_ground_pos[ti_i], f_IK_snap_coef[ti_i])
			tv_pied_pos += MATH_VecDotProduct(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet() - tv_pied_pos, tv_ray_dir) * tv_ray_dir

			v_IK_bone_last_valid_sight[ti_i] = MATH_VecBlend(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_SightGet(), v_IK_bone_last_valid_sight[ti_i], f_IK_snap_coef[ti_i])
			v_IK_bone_last_valid_banking[ti_i] = MATH_VecBlend(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_BankingGet(), v_IK_bone_last_valid_banking[ti_i], f_IK_snap_coef[ti_i])
		}
	}
	else
	{
		// PAS D'INFO SUR LE DEPLACEMENT, ON CONSIDERE QUE LE PIED EST POSE
		if (f_IK_snap_coef[ti_i])
		{
			// LE PIED ETAIT BLOQUE, ON LE RAMENE VERS LA POSITION DE L'ANIM
			f_IK_snap_coef[ti_i] -= MATH_FloatMin(f_IK_snap_coef[ti_i], 2.0 * tf_dt)	

			tv_pied_pos = MATH_VecBlend(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet(), v_IK_ground_pos[ti_i], f_IK_snap_coef[ti_i])
			tv_pied_pos += MATH_VecDotProduct(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet() - tv_pied_pos, tv_ray_dir) * tv_ray_dir

			v_IK_bone_last_valid_sight[ti_i] = MATH_VecBlend(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_SightGet(), v_IK_bone_last_valid_sight[ti_i], f_IK_snap_coef[ti_i])
			v_IK_bone_last_valid_banking[ti_i] = MATH_VecBlend(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_BankingGet(), v_IK_bone_last_valid_banking[ti_i], f_IK_snap_coef[ti_i])
		}
		else
		{
			// LE PIED EST ORIENTE ET POSITIONNE PAR L'ANIM
			v_IK_bone_last_valid_sight[ti_i] = @ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_SightGet()
			v_IK_bone_last_valid_banking[ti_i] = @ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_BankingGet()
	
			tv_pied_pos = @ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet()
			
			if (tf_coef != -1.0)
				i_flag_leg_bend[ti_i] = faux
		}
	}

	tv_ray_start = tv_pied_pos
	tv_ray_start -= MATH_VecDotProduct(tv_ray_start - @ao_IK_bones[ti_i][0] OBJ_PosGet(), tv_ray_dir) * tv_ray_dir

	ti_flag_collision = faux

	if (@get_global i_IK_LEG_Target)
	{
		if (COL_RayObject_Dist(tv_ray_start, -tv_ray_dir, f_IK_leg_length[ti_i], all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_visuel))
			ti_flag_collision = vrai
	}
	else
	{
		if (o_ground_col)
		{
			ti_flag_ray_insensitive = @o_ground_col OBJ_FlagsControlGet() & OBJ_C_ControlFlag_RayInsensitive
			
			@o_ground_col OBJ_FlagsControlSet(none, OBJ_C_ControlFlag_RayInsensitive)
	
			if (COL_RaySingleObject_Dist(o_ground_col, tv_ray_start, -tv_ray_dir, f_IK_leg_length[ti_i], all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
				ti_flag_collision = vrai
				
			if (ti_flag_ray_insensitive)
				@o_ground_col OBJ_FlagsControlSet(OBJ_C_ControlFlag_RayInsensitive, none)
		}
	
		if (! ti_flag_collision)
		{
			@get_global i_raptor_ray_on_colmap_nb++
			if (COL_RayObject_Dist(tv_ray_start, -tv_ray_dir, f_IK_leg_length[ti_i], all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
				ti_flag_collision = vrai
		}
	}
	
	if (ti_flag_collision)
	{
		// OK ON TOUCHE UN SOL, ON VA POUVOIR POSITIONNER EN IK ==============================================
		tv_collide_pos = COL_RayObject_PosGet()
		tv_ray_normale = COL_RayObject_NormalGet()

//		DBG_RenderVector(tv_ray_start, tv_collide_pos - tv_ray_start, color_vert)
		DBG_RenderVector(tv_collide_pos, tv_ray_normale * 0.25, color_jaune)
		
		tf_offset = MATH_VecDotProduct(tv_collide_pos - tv_ray_start, -tv_ray_dir)
		if (tf_offset >= tf_ray_start_offset)
			ti_flag_collision = vrai
		else
			ti_flag_collision = faux
	}
	else
	{
		DBG_RenderVector(tv_ray_start, -tv_ray_dir * f_IK_leg_length[ti_i], color_rouge)
	}
	
	if (ti_flag_collision)
	{
		v_IK_ground_pos[ti_i] = tv_collide_pos
		v_IK_ground_normale[ti_i] = MATH_VecBlendRotate(v_IK_ground_normale[ti_i], tv_ray_normale, 4.0 * tf_dt)
		tf_offset = MATH_VecDotProduct(tv_collide_pos - v_IK_ref_ground_pos, tv_ray_dir)
	}
	else
	{
		v_IK_ground_pos[ti_i] = tv_pied_pos
		v_IK_ground_normale[ti_i] = MATH_VecBlendRotate(v_IK_ground_normale[ti_i], tv_virtual_banking, 4.0 * tf_dt)
		tf_offset = 0.0	
//		DBG_RenderVector(tv_ray_start, -tv_ray_dir * f_IK_leg_length[ti_i], color_rouge)	
	}		

	///////// OFFSET //////////
	if(f_joy_norm)
		tf_offset *= 0.6
		
	tf_offset = MATH_FloatMin(tf_offset, f_IK_leg_length[ti_i] * 0.33)
	
	if (tf_offset && tf_offset > f_IK_Z_offset[ti_i])
		f_IK_Z_offset[ti_i] = tf_offset // MATH_FloatBlend(f_IK_Z_offset[ti_i], tf_offset, 20.0 * tf_dt)
	else
		f_IK_Z_offset[ti_i] = MATH_FloatBlend(f_IK_Z_offset[ti_i], tf_offset, Cf_walk_Z_blend_speed * tf_dt)

	v_IK_dest_pos[ti_i] = tv_pied_pos
	v_IK_dest_pos[ti_i] += tv_ray_dir * f_IK_Z_offset[ti_i]
	
//	DBG_RenderVector(v_IK_dest_pos[ti_i], -tv_ray_dir * f_IK_Z_offset[ti_i], color_cyan)

	f_IK_speed[ti_i] = 1.0
}

// TRAINAGE AU SOL
if (ti_flag_carry)
{
	tf_coef = taf_carry_snap_coef[0]
	tf_coef += taf_carry_snap_coef[1]
	tf_coef *= 0.5

	to_torse = ANI_CanalObjectGet(Anim_Canal_Torse)
	to_ventre = ANI_CanalObjectGet(Anim_Canal_Ventre)

	tf_X = MATH_VecNorm(@to_ventre OBJ_PosGet() - @o_bassin OBJ_PosGet())
	tf_Y = MATH_VecNorm(@to_torse OBJ_PosGet() - @to_ventre OBJ_PosGet())

	tv_ray_start = @to_torse  OBJ_PosGet()
	tv_X = @to_torse OBJ_BankingGet()
	tv_Y = @to_torse OBJ_SightGet()

	tv_dest_pos = v_IK_dest_pos[0]
	tv_dest_pos += (v_IK_dest_pos[1] - v_IK_dest_pos[0]) * 0.5
	tv_dest_pos -= tv_ray_start
	MATH_VecSetNorm(tv_dest_pos, tf_X + tf_Y)

	tv_dest_pos = MATH_VecBlendRotate(@o_bassin OBJ_PosGet() - tv_ray_start, tv_dest_pos, 0.25)
	@o_bassin OBJ_PosSet(tv_ray_start + tv_dest_pos)
//	@o_bassin OBJ_BankingGeneralSet(@o_bassin OBJ_SightGet(), -tv_dest_pos)

	@o_bassin OBJ_RotateLocalX( - MATH_AbsFloat(tf_coef) * 0.5)
	@o_bassin OBJ_RotateLocalZ(tf_coef * 0.5)

	OBJ_LIB_IK(	o_bassin, to_ventre,
						tf_X, tf_Y,
						tv_ray_start,
						-@o_bassin OBJ_SightGet(),
						1.0)

	@to_torse OBJ_BankingGeneralSet(tv_Y, tv_X)
	
	tf_bassin_offset_min = 0.0
}
else
{
	// DECALAGE EN Z DU BASSIN POUR QUE LES PIEDS PUISSENT TOUCHER LE SOL ============================================
	tf_bassin_offset = MATH_FloatMin(f_IK_Z_offset[Ci_IK_pied_gauche], f_IK_Z_offset[Ci_IK_pied_droit])
	
//	for (ti_i = 0; ti_i < 2; ti_i++)
//	{
//		if (i_flag_leg_IK[ti_i] || f_IK_coef[ti_i])
//		{
//			tv_X = v_IK_dest_pos[ti_i] - @ao_IK_bones[ti_i][0] OBJ_PosGet()
//			tv_X -= MATH_VecDotProduct(tv_X, tv_ray_dir) * tv_virtual_banking
//		
//			tf_X = MATH_VecDotProduct(tv_X, tv_X)
//	
//			tf_Y = 0.0
//			for (ti_k = 0; ti_k < 3; ti_k++)
//				tf_Y += af_IK_bones_length[ti_i][ti_k]
//	
//			tf_Y *= 0.99
//			tf_Y *= tf_Y
//			
//			tf_norm = tf_Y
//			tf_norm -= tf_X
//		
//			tf_norm = MATH_FloatMax(tf_norm, 0.0)
//		//		if (tf_norm < 0.0)
//		//			DBG_Error("Ha ha !!!")	
//		
//			tf_norm = MATH_FloatSqrt(tf_norm)
//		
//			tf_offset = tf_norm + MATH_VecDotProduct(v_IK_dest_pos[ti_i] - @ao_IK_bones[ti_i][0] OBJ_PosGet(), tv_virtual_banking)
//		
//			tf_bassin_offset = MATH_FloatMin(tf_bassin_offset, tf_offset)
//		}
//	}
}

tf_bassin_offset = MATH_FloatMax(tf_bassin_offset, tf_bassin_offset_min)

f_bassin_Z_offset	= MATH_FloatBlend(f_bassin_Z_offset, tf_bassin_offset, 8.0 * tf_dt)
f_bassin_Z_offset *= f_IK_coef[0]

tv_bassin_dest_pos = @o_bassin OBJ_PosGet()
tv_bassin_dest_pos += tv_virtual_banking * f_bassin_Z_offset
	
@o_bassin OBJ_PosSet(tv_bassin_dest_pos)
v_IK_bassin_pos = tv_bassin_dest_pos

// ON EXECUTE L'IK =============================================================================================================
for (ti_i = 0; ti_i < 2; ti_i++)
{
	if (i_flag_leg_IK[ti_i])
	{
		f_IK_coef[ti_i] += MATH_FloatMin(1.0 - f_IK_coef[ti_i], tf_dt * 10.0)	

		f_IK_ground_coef[ti_i] *= f_IK_coef[ti_i]

		tv_pied_pos = MATH_VecBlend(MATH_VecLocalToGlobal(v_IK_local_offset[ti_i]), v_IK_dest_pos[ti_i] - OBJ_PosGet(), f_IK_speed[ti_i])
		v_IK_local_offset[ti_i] = MATH_VecGlobalToLocal(tv_pied_pos)
		tv_pied_pos += OBJ_PosGet()
	}
	else if (f_IK_coef[ti_i])
	{
		f_IK_coef[ti_i] -= MATH_FloatMin(f_IK_coef[ti_i], tf_dt * 10.0)

		f_IK_Z_offset[ti_i] *= f_IK_coef[ti_i]
		f_IK_ground_coef[ti_i] *= f_IK_coef[ti_i]
		f_IK_snap_coef[ti_i] *= f_IK_coef[ti_i]
	
		v_IK_dest_pos[ti_i] = @ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_PosGet()
		tv_pied_pos = MATH_VecBlendRotate(v_IK_dest_pos[ti_i] - OBJ_PosGet(), MATH_VecLocalToGlobal(v_IK_local_offset[ti_i]), f_IK_coef[ti_i])
		v_IK_local_offset[ti_i] = MATH_VecGlobalToLocal(tv_pied_pos)
		tv_pied_pos += OBJ_PosGet()
	}
	else
	{
		v_IK_ground_normale[ti_i] = tv_virtual_banking
		continue
	}

	if (ti_flag_carry)
	{
		tv_start_axis = @ao_IK_bones[ti_i][0] MATH_VecGlobalToLocal(OBJ_BankingGet())
		DBG_RenderVector(@ao_IK_bones[ti_i][0] OBJ_PosGet(), @ao_IK_bones[ti_i][0] MATH_VecLocalToGlobal(tv_start_axis), color_rouge)

		tv_dest_axis = @ao_IK_bones[ti_i][0] MATH_VecGlobalToLocal(MATH_FloatSign(taf_carry_snap_coef[ti_i]) * OBJ_HorizonGet())
		DBG_RenderVector(@ao_IK_bones[ti_i][0] OBJ_PosGet(), @ao_IK_bones[ti_i][0] MATH_VecLocalToGlobal(tv_dest_axis), color_bleu)

		tv_dest_axis = MATH_VecBlendRotate(tv_start_axis, tv_dest_axis, MATH_AbsFloat(taf_carry_snap_coef[ti_i]))
		DBG_RenderVector(@ao_IK_bones[ti_i][0] OBJ_PosGet(), @ao_IK_bones[ti_i][0] MATH_VecLocalToGlobal(tv_dest_axis), color_vert)

		@ao_IK_bones[ti_i][0] OBJ_Rotate_FromTo(tv_start_axis, tv_dest_axis)
	}

//	tv_flexion_dir = @ao_IK_bones[ti_i][2] OBJ_PosGet() - @ao_IK_bones[ti_i][0] OBJ_PosGet()
//	tv_flexion_dir *= 0.5
//	tv_flexion_dir += @ao_IK_bones[ti_i][0] OBJ_PosGet()
//	tv_flexion_dir = @ao_IK_bones[ti_i][1] OBJ_PosGet() - tv_flexion_dir

	tf_Y = OBJ_LIB_IK(	ao_IK_bones[ti_i][0], ao_IK_bones[ti_i][1],
									af_IK_bones_length[ti_i][0], af_IK_bones_length[ti_i][1],
									tv_pied_pos,
									Cv_NullVector,
									f_IK_coef[ti_i] )

	if (ti_flag_carry)
	{
		v_IK_ground_pos[ti_i] = @ao_IK_bones[ti_i][Ci_bone_pos_index]  OBJ_PosGet()
		f_IK_ground_coef[ti_i] = 0.0
	}

//	if ( ! i_flag_leg_bend[ti_i] && f_IK_snap_coef[ti_i] == 1.0 && tf_Y < 0.01)
//		i_flag_leg_bend[ti_i] = vrai

	if (f_IK_ground_coef[ti_i])
	{
		@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_BankingGeneralSet(
			MATH_VecBlend(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_SightGet(), v_IK_bone_last_valid_sight[ti_i], f_IK_ground_coef[ti_i]) , 
			MATH_VecBlend(@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_BankingGet(), v_IK_bone_last_valid_banking[ti_i], f_IK_ground_coef[ti_i]) )

		tv_start_axis = @ao_IK_bones[ti_i][Ci_bone_pos_index] MATH_VecGlobalToLocal(tv_virtual_banking)
		tv_dest_axis = v_IK_ground_normale[ti_i]
		tv_dest_axis = MATH_VecInCone(tv_dest_axis, - @ao_IK_bones[ti_i][1] OBJ_BankingGet(), Cf_PiBy6, 1)
		tv_dest_axis = @ao_IK_bones[ti_i][Ci_bone_pos_index] MATH_VecGlobalToLocal(tv_dest_axis)
		tv_dest_axis = MATH_VecBlend(tv_start_axis, tv_dest_axis, f_IK_ground_coef[ti_i])
		@ao_IK_bones[ti_i][Ci_bone_pos_index] OBJ_Rotate_FromTo(tv_start_axis, tv_dest_axis)
	}
}

