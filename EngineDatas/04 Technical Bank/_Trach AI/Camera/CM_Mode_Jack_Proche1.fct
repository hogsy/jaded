#include "CM_Defines.var"

vector	tv_temp, tv_temp1
vector	tv_joy1
object	to_obj
float		tf_temp
float		tf_speed_rot_x
float		tf_speed_rot_y

object	ao_obj[100]
int			ti_num
float		tf_radius
vector	tv_temp2, tv_temp3

#define SPEED_X_NORMAL	3
#define SPEED_Y_NORMAL	3
#define SPEED_X_LOCK		1.5
#define SPEED_Y_LOCK		1.5
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Params
o_mf_actor = AI_MainActorGet(0)
v_cur_pos_suivi = @o_mf_actor OBJ_PosGet()

// Changement de mode ?
if(i_mode_cur != CM_ModeJack_Proche)
{
	v_pos_cible = Cv_NullVector
	f_IdealZMax = 1.2
	af_FctIdeal_ZTgt[1] = 1.3
	i_mode_cur = CM_ModeJack_Proche
	
	tv_temp = @o_mf_actor OBJ_PosGet() - OBJ_PosGet()
	tv_temp.z = 0
	@o_mf_actor OBJ_BankingGeneralSet(tv_temp, Cv_VerticalVector)
}

// Sortie mode proche
if(@get_global i_jack_camera_status != Ci_Jcamera_visee) 
{
	v_pos_cible = Cv_NullVector
	af_FctIdealY = -2
	v_ideal_sight = -@o_mf_actor OBJ_SightGet()
	AI_TrackCurChangeNow("CM_Mode_Jack")
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

i_auto_evitementsight = faux
i_auto_blendsight = faux
i_stick_zmax = faux
i_visee_force_sight = vrai

// Params : Distance ideale
if(i_mf_cut) 
{
	f_IdealDist = 0.9
	f_blend_pos = 30
}
else
{
	f_IdealDist = MATH_FloatBlend(f_IdealDist , 0.9, 4 * TIME_GetDt())
	f_blend_pos = MATH_FloatBlend(f_blend_pos, 30, TIME_GetDt())
}

// Params : Hauteur cam
af_FctIdealY = -2

// Params : X tgt
af_FctIdeal_XTgt[1] = 0
af_FctIdeal_XTgt[3] = 0

// Params : Hauteur tgt
af_FctIdeal_ZTgt[3] = 1.5

to_obj = @o_mf_actor ANI_CanalObjectGet(0)
tf_temp = @to_obj OBJ_PosGet().z - @o_mf_actor OBJ_PosGet().z
f_IdealZMin = tf_temp 

// Sight
v_ideal_sight = -@o_mf_actor OBJ_SightGet()
v_ideal_sight -= (@o_mf_actor OBJ_HorizonGet() * 0.8)

// Vitesse rotation
v_pos_cible = Cv_NullVector
tf_speed_rot_x = SPEED_X_NORMAL
tf_speed_rot_y = SPEED_Y_NORMAL
ti_num = COL_SightDistanceListGet(&ao_obj[0], OBJ_PosGet(), OBJ_SightGet(), 50, 0.1, -1, 0, Ci_Filter_IdentityFlag, 100)
while(ti_num)
{	
	ti_num--
	if(@ao_obj[ti_num] OBJ_ModifierType(MDF_C_Modifier_InfoPhoto))
	{
		tv_temp = @ao_obj[ti_num] OBJ_InfoPhotoPivotGet()
		tf_radius = @ao_obj[ti_num] OBJ_InfoPhotoRadiusGet()
		tv_temp2 = MATH_VecNormalize((tv_temp + (OBJ_HorizonGet() * tf_radius)) - OBJ_PosGet())
		tv_temp3 = MATH_VecNormalize((tv_temp - (OBJ_HorizonGet() * tf_radius)) - OBJ_PosGet())
		tv_temp2 = MATH_VecCrossProduct(tv_temp2, OBJ_SightGet())
		tv_temp3 = MATH_VecCrossProduct(tv_temp3, OBJ_SightGet())
		if(MATH_VecDotProduct(tv_temp2, tv_temp3) < 0)
		{
			tv_temp2 = MATH_VecNormalize((tv_temp + (OBJ_BankingGet() * tf_radius)) - OBJ_PosGet())
			tv_temp3 = MATH_VecNormalize((tv_temp - (OBJ_BankingGet() * tf_radius)) - OBJ_PosGet())
			tv_temp2 = MATH_VecCrossProduct(tv_temp2, OBJ_SightGet())
			tv_temp3 = MATH_VecCrossProduct(tv_temp3, OBJ_SightGet())
			if(MATH_VecDotProduct(tv_temp2, tv_temp3) < 0)
			{
				tf_speed_rot_x = SPEED_X_LOCK
				tf_speed_rot_y = SPEED_Y_LOCK	
				v_pos_cible = @ao_obj[ti_num] OBJ_InfoPhotoPivotGet()
				break
			}
		}
	}
}

// Pad
v_joy_1 = MATH_VecBlend(v_joy_1, IO_JoyGetMove1(), 10 * TIME_GetDt())
tv_joy1 = v_joy_1
if(MATH_AbsFloat(tv_joy1.x) > C_JoyTolX)
{
	tv_joy1.x -= C_JoyTolX * MATH_FloatSign(tv_joy1.x)
	tv_joy1.x *= (TIME_GetDt() * tf_speed_rot_x)
	v_ideal_sight = MATH_VecRotate(v_ideal_sight, Cv_VerticalVector, tv_joy1.x)
}

if(MATH_AbsFloat(tv_joy1.y) > C_JoyTolY)
{
	tv_joy1.y -= C_JoyTolY * MATH_FloatSign(tv_joy1.y)
	tv_joy1.y *= (TIME_GetDt() * tf_speed_rot_y)
	f_IdealZMax -= tv_joy1.y
	f_IdealZMax = MATH_FloatLimit(f_IdealZMax, 0.2, 2)
	af_FctIdeal_ZTgt[1] = 1.25 - (f_IdealZMax - 1.25)
}

if(IO_ButtonPressed(JoyPSX_Button_croix))
{
	i_sfx_ramble = vrai
	f_sfx_ramble_amplitude = 0.03
}