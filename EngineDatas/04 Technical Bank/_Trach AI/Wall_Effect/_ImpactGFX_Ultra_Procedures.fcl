#include "Wall_Effect_defines.var"

//=================================================================================================
//This file contains ultra procedures to test KONGS contact with the environment, and then to launch the approproate GFX
//=================================================================================================


//---KONGS WALL TEST--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure_ultra int Proc_KK_TestWall(vector tv_Anim_Canal_EpauleGauche, vector tv_Anim_Canal_DoigtG1, byref vector tv_pos,  byref vector tv_normal,  byref int i_soundID, byref int i_displayTexture)
{

	
	int i_result

  	o_firstContact =  COL_RayObject_Vector( tv_Anim_Canal_EpauleGauche,  ( tv_Anim_Canal_DoigtG1 - tv_Anim_Canal_EpauleGauche) , all, none, 0, COL_C_Ray_on_visuel     )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable  COL_C_Ray_use_SpecificCrossableSet
	DBG_RenderVector(tv_Anim_Canal_EpauleGauche, (tv_Anim_Canal_DoigtG1 - tv_Anim_Canal_EpauleGauche), color_rouge)


	if(o_firstContact)
	{ 				
		//exclude all actors from getting the texture, exclude all objects with ODE.....
		if( !@o_firstContact ACT_HasActionKit() && @o_firstContact ODE_Getf(0) == -1)//&&  @o_firstContact COL_GMAT_IDGet(COL_C_Wall) !=5 &&  @o_firstContact COL_GMAT_IDGet(COL_C_Wall) !=6 &&  @o_firstContact COL_GMAT_IDGet(COL_C_Wall) !=7 ) 
		{	
			//timer for now, until kong actually stops the animation of his fist when he first comes into contact with a wall
			if(f_global_time - f_start_punch_time >= f_delay_until_next_punch) //IF TIMER//
			{
				
				@o_empty_wayPoint   OBJ_PosSet(COL_RayObject_PosGet())
				
				 tv_pos			= @o_empty_wayPoint	OBJ_PosGet()
				 i_soundID		= COL_RayObject_SoundGet()
				 
				 if(i_soundID <0 || i_soundID > 7)
					return faux
				 if(!i_soundID)
				 {
						tv_normal	= Cv_NullVector
						tv_pos		= Cv_NullVector
						i_displayTexture = faux
						i_soundID	= -1
						i_result 		= faux
						return i_result
				 }
				 
				@o_empty_wayPoint	OBJ_PosSet( cvector(COL_RayObject_PosGet().x, COL_RayObject_PosGet().y, COL_RayObject_PosGet().z) - (punchSensitivity * @o_empty_wayPoint OBJ_SightGet())  )  //set the waypoint a bit behind the wall
	
				//CHECK FOR NAN ERROR after setting sight! 
				if(  MATH_VecNull(MATH_VecCrossProduct(COL_RayObject_NormalGet(), @o_empty_wayPoint OBJ_HorizonGet()))  || MATH_VecNull(MATH_VecCrossProduct(COL_RayObject_NormalGet(), @o_empty_wayPoint OBJ_BankingGet())) 	)
					@o_empty_wayPoint OBJ_SightSet( MATH_VecNormalize(COL_RayObject_NormalGet()  + cvector(0.1, 0.1, 0.1)))
				else
					@o_empty_wayPoint OBJ_SightSet(COL_RayObject_NormalGet())
			 
				tv_normal		= @o_empty_wayPoint	 OBJ_SightGet()
				firstArmPoint = tv_Anim_Canal_EpauleGauche
				
				xPunchOffset +=  @o_empty_wayPoint	OBJ_HorizonGet() 
				yPunchOffset += @o_empty_wayPoint	OBJ_BankingGet() 
					
				xPunchOffset *= x_PunchLength/2.0
				yPunchOffset *= y_PunchLength/2.0
							
	  			ray_endPoint = @o_empty_wayPoint OBJ_PosGet() + xPunchOffset 
				o_test_ray    =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
	    			DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				                                      									
				                                      												
				ray_endPoint = @o_empty_wayPoint	OBJ_PosGet() - xPunchOffset 
				o_test_ray1   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
				DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				
				
				ray_endPoint = @o_empty_wayPoint	OBJ_PosGet() + yPunchOffset
				o_test_ray2   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
				DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				
				
				ray_endPoint = @o_empty_wayPoint OBJ_PosGet() - yPunchOffset
				o_test_ray3   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
				DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)	
				
				xPunchOffset = Cv_NullVector	
				yPunchOffset = Cv_NullVector			
					
			 	if((o_test_ray != o_test_ray1 || o_test_ray != o_test_ray2 || o_test_ray != o_test_ray3   || o_test_ray1 != o_test_ray2 || o_test_ray1 != o_test_ray3    || o_test_ray2 != o_test_ray3) || (!o_test_ray && !o_test_ray1 && !o_test_ray2 && !o_test_ray3))
			 		i_texture_out_of_bounds = vrai 
			 	else
			 		i_texture_out_of_bounds = faux
	 
				if(!i_texture_out_of_bounds && o_WallPunch_Impact_Textures[i_soundID])
				{
					i_displayTexture = vrai
				}
				else
					i_displayTexture = faux
			
				 i_result = vrai
				 		
				f_start_punch_time = TIME_Get()
				
			}//end timer condition
			else
			{
				tv_normal	= Cv_NullVector
				tv_pos		= Cv_NullVector
				i_displayTexture = faux
				i_soundID	= -1
				i_result 		= faux
			}
		 }
		else
		{
			tv_normal	= Cv_NullVector
			tv_pos		= Cv_NullVector
			i_soundID	= -1
			i_displayTexture = faux
			i_result = faux
		}
	}
	else
	{
		tv_normal	= Cv_NullVector
		tv_pos		= Cv_NullVector
		i_soundID	= -1
		i_displayTexture = faux
		i_result = faux
	}
	return i_result
}



//---KONGS GROUND TEST--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure_ultra int Proc_KK_TestGround(vector tv_Anim_Canal_Cou, byref vector tv_pos, byref vector tv_normal, byref int i_soundID, byref int i_displayTexture)	
{
	int i_result
	message	msg
	vector		tv_temp
	object		to_camera
	
	neck_offset 	= cvector(tv_Anim_Canal_Cou.x, tv_Anim_Canal_Cou.y, tv_Anim_Canal_Cou.z - 5.0) //5
	o_firstContact =  COL_RayObject_Vector( tv_Anim_Canal_Cou,  (neck_offset - tv_Anim_Canal_Cou) , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
    	DBG_RenderVector(tv_Anim_Canal_Cou,  (neck_offset - tv_Anim_Canal_Cou) ,  color_bleu )

	if(o_firstContact)
	{ 				 
		//exclude all actors from getting the texture, exclude all objects with ODE.....
		if( !@o_firstContact ACT_HasActionKit() && @o_firstContact ODE_Getf(0) == -1) 
		{	
			//timer for now, assuming kong can't fall multiple times in a few seconds...
			if(f_global_time - f_start_fall_time >= f_delay_until_next_fall) //IF TIMER
			{
				
				//shake the camera when kong lands	
//				msg.msg_id = 2
//				tv_temp.z = 0
//				
//				tv_temp.x = 0.1
//				tv_temp.y = 35.0
//				msg.msg_vec1 = tv_temp
//				
//				tv_temp.x = 0.1
//				tv_temp.y = 20.0
//				msg.msg_vec2 = tv_temp
//				
//				tv_temp.x = 0.2
//				tv_temp.y = 1.1
//				msg.msg_vec3 = tv_temp
//				to_camera = @get_global o_camera
//				@to_camera MSG_Send(msg)
//		
				@o_empty_wayPoint	OBJ_PosSet(COL_RayObject_PosGet())
				
				//CHECK FOR NAN ERROR after setting sight! 
				if(  MATH_VecNull(MATH_VecCrossProduct(COL_RayObject_NormalGet(), @o_empty_wayPoint OBJ_HorizonGet()))  || MATH_VecNull(MATH_VecCrossProduct(COL_RayObject_NormalGet(), @o_empty_wayPoint OBJ_BankingGet())) 	)
					@o_empty_wayPoint OBJ_SightSet( MATH_VecNormalize(COL_RayObject_NormalGet()  + cvector(0.1, 0.1, 0.1)))
				else
					@o_empty_wayPoint OBJ_SightSet(COL_RayObject_NormalGet())
					
	  		  	i_soundID = COL_RayObject_SoundGet()
	  		  	
	  		  	if(i_soundID <0 || i_soundID > 7)
					return faux
				 if(!i_soundID)
				 {
						tv_normal	= Cv_NullVector
						tv_pos		= Cv_NullVector
						i_displayTexture = faux
						i_soundID	= -1
						i_result 		= faux
						return i_result
				 }
				 
				tv_pos 			= @o_empty_wayPoint		OBJ_PosGet()
				tv_normal 		= @o_empty_wayPoint		OBJ_SightGet() 
				firstArmPoint	= tv_Anim_Canal_Cou
				i_soundID		= COL_RayObject_SoundGet()
			
				xOffset  +=		@o_empty_wayPoint	OBJ_HorizonGet()
				yOffset  +=		@o_empty_wayPoint	OBJ_BankingGet() 
				
				xOffset 	*= 	x_LandLength/2.0
				yOffset 	*= 	y_LandLength/2.0
				
				ray_endPoint = @o_empty_wayPoint OBJ_PosGet() + cvector(xOffset.x, xOffset.y, xOffset.z-0.3) 
				o_test_ray    =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
		    		DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				                                      									
						
		 		ray_endPoint = @o_empty_wayPoint	 OBJ_PosGet() - cvector(xOffset.x, xOffset.y, xOffset.z+0.3) 
				o_test_ray1   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
				DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				
				
				ray_endPoint = @o_empty_wayPoint OBJ_PosGet() + cvector(yOffset.x, yOffset.y, yOffset.z-0.3) 
				o_test_ray2   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
				DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z),     cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				
				
				ray_endPoint = @o_empty_wayPoint OBJ_PosGet() - cvector(yOffset.x, yOffset.y, yOffset.z+0.3) 
				o_test_ray3   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
		 		DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)	
				
 				xOffset = Cv_NullVector	
				yOffset = Cv_NullVector	
				
	 			if((o_test_ray != o_test_ray1 || o_test_ray != o_test_ray2 || o_test_ray != o_test_ray3   || o_test_ray1 != o_test_ray2 || o_test_ray1 != o_test_ray3    || o_test_ray2 != o_test_ray3) || (!o_test_ray && !o_test_ray1 && !o_test_ray2 && !o_test_ray3))
	 				i_texture_out_of_bounds = vrai 
	 			else
			 		i_texture_out_of_bounds = faux	
	
				if( !@o_firstContact ACT_HasActionKit() &&  !i_texture_out_of_bounds && o_Ground_Impact_Textures[i_soundID])
				{ 
					i_displayTexture = vrai
				}
				else
					i_displayTexture = faux
					
				i_result = vrai
				f_start_fall_time = TIME_Get()
			}//end timer condition
			else
			{
				tv_normal	= Cv_NullVector
				tv_pos		= Cv_NullVector
				i_soundID	= -1
				i_displayTexture = faux
				i_result = faux
			}
		}
		else
		{
			tv_normal	= Cv_NullVector
			tv_pos		= Cv_NullVector
			i_displayTexture = faux
			i_soundID	= -1
			i_result 		= faux
		}
	}
	else
	{
		tv_normal	= Cv_NullVector
		tv_pos		= Cv_NullVector
		i_displayTexture = faux
		i_soundID	= -1
		i_result 		= faux
	}
	
	return i_result
	
}



//---KONGS FURY PUNCH ON GROUND TEST--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure_ultra int Proc_KK_TestFURYGround(vector tv_Anim_Canal_Cou, vector Anim_fingers, byref vector tv_pos, byref vector tv_normal, byref int i_soundID, byref int i_displayTexture)	
{
	int i_result
	message	msg
	vector		tv_temp
	object		to_camera
	
	//neck_offset 	= cvector(tv_Anim_Canal_Cou.x, tv_Anim_Canal_Cou.y, tv_Anim_Canal_Cou.z - 5.0) //5
	neck_offset = Anim_fingers + cvector(0.0,0.0,-0.5)
	o_firstContact =  COL_RayObject_Vector( tv_Anim_Canal_Cou,  (neck_offset - tv_Anim_Canal_Cou) , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
    	DBG_RenderVector(tv_Anim_Canal_Cou,  (neck_offset - tv_Anim_Canal_Cou) ,  color_rouge )

	if(o_firstContact)
	{ 				 
		//exclude all actors from getting the texture, exclude all objects with ODE.....
		if( !@o_firstContact ACT_HasActionKit() && @o_firstContact ODE_Getf(0) == -1) 
		{	
			//timer for now, assuming kong can't fall multiple times in a few seconds...
			if(f_global_time - f_start_fall_time >= f_delay_until_next_fall) //IF TIMER
			{
	
				//shake camera
//				msg.msg_id = 2
//				tv_temp.z = 0
//			
//				tv_temp.x = 5.0
//				tv_temp.y = 100.0
//				msg.msg_vec1 = tv_temp
//			
//				tv_temp.x = 0.7
//				tv_temp.y = 0.1
//				msg.msg_vec2 = tv_temp
//			
//				tv_temp.x = 15.0//0.1
//				tv_temp.y = 15.0//1.1
//				msg.msg_vec3 = tv_temp
//				to_camera = @get_global o_camera
//				@to_camera MSG_Send(msg)

				@o_empty_wayPoint	 OBJ_PosSet(COL_RayObject_PosGet())

				//CHECK FOR NAN ERROR after setting sight! 
				if(  MATH_VecNull(MATH_VecCrossProduct(COL_RayObject_NormalGet(), @o_empty_wayPoint OBJ_HorizonGet()))  || MATH_VecNull(MATH_VecCrossProduct(COL_RayObject_NormalGet(), @o_empty_wayPoint OBJ_BankingGet())) 	)
					@o_empty_wayPoint OBJ_SightSet( MATH_VecNormalize(COL_RayObject_NormalGet()  + cvector(0.1, 0.1, 0.1)))
				else
					@o_empty_wayPoint OBJ_SightSet(COL_RayObject_NormalGet())
	
	  		  	i_soundID = COL_RayObject_SoundGet()
	  		  	
	  		  	if(i_soundID <0 || i_soundID > 7)
					return faux
				 if(!i_soundID)
				 {
						tv_normal	= Cv_NullVector
						tv_pos		= Cv_NullVector
						i_displayTexture = faux
						i_soundID	= -1
						i_result 		= faux
						return i_result
				 }
				 	  		  	
				tv_pos 			= @o_empty_wayPoint		OBJ_PosGet()
				tv_normal 		= @o_empty_wayPoint		OBJ_SightGet() 
				firstArmPoint	= tv_Anim_Canal_Cou
				i_soundID		= COL_RayObject_SoundGet()
			
				xOffset  +=		@o_empty_wayPoint	OBJ_HorizonGet()
				yOffset  +=		@o_empty_wayPoint	OBJ_BankingGet() 
				
				xOffset 	*= 	x_LandLength/2.0
				yOffset 	*= 	y_LandLength/2.0
				
				ray_endPoint = @o_empty_wayPoint OBJ_PosGet() + cvector(xOffset.x, xOffset.y, xOffset.z-0.3) 
				o_test_ray    =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
		    		DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				                                      									
						
		 		ray_endPoint = @o_empty_wayPoint	 OBJ_PosGet() - cvector(xOffset.x, xOffset.y, xOffset.z+0.3) 
				o_test_ray1   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
				DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				
				
				ray_endPoint = @o_empty_wayPoint OBJ_PosGet() + cvector(yOffset.x, yOffset.y, yOffset.z-0.3) 
				o_test_ray2   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
				DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				
				
				ray_endPoint = @o_empty_wayPoint OBJ_PosGet() - cvector(yOffset.x, yOffset.y, yOffset.z+0.3) 
				o_test_ray3   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
		 		DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)	
				
				xOffset = Cv_NullVector	
				yOffset = Cv_NullVector	
				
	 			if((o_test_ray != o_test_ray1 || o_test_ray != o_test_ray2 || o_test_ray != o_test_ray3   || o_test_ray1 != o_test_ray2 || o_test_ray1 != o_test_ray3    || o_test_ray2 != o_test_ray3) || (!o_test_ray && !o_test_ray1 && !o_test_ray2 && !o_test_ray3))
	 				i_texture_out_of_bounds = vrai 
	 			else
			 		i_texture_out_of_bounds = faux	
	
				if( !@o_firstContact ACT_HasActionKit() &&  !i_texture_out_of_bounds && o_Ground_Impact_Textures[i_soundID])
				{ 
					i_displayTexture = vrai
				}
				else
					i_displayTexture = faux
					
				i_result = vrai
				f_start_fall_time = TIME_Get()
			}//end timer condition
			else
			{
				tv_normal	= Cv_NullVector
				tv_pos		= Cv_NullVector
				i_soundID	= -1
				i_displayTexture = faux
				i_result = faux
			}
		}
		else
		{
			tv_normal	= Cv_NullVector
			tv_pos		= Cv_NullVector
			i_displayTexture = faux
			i_soundID	= -1
			i_result 		= faux
		}
	}
	else
	{
		tv_normal	= Cv_NullVector
		tv_pos		= Cv_NullVector
		i_displayTexture = faux
		i_soundID	= -1
		i_result 		= faux
	}
	
	return i_result
	
}

//---KONGS FURY PUNCH ON GROUND TEST--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure_ultra int Proc_KK_TestThrowImpact(vector tv_Anim_Canal_Cou, vector Anim_fingers, byref vector tv_pos, byref vector tv_normal, byref int i_soundID, byref int i_displayTexture)	
{
	int i_result
	message	msg
	vector		tv_temp
	object		to_camera
	
	//neck_offset 	= cvector(tv_Anim_Canal_Cou.x, tv_Anim_Canal_Cou.y, tv_Anim_Canal_Cou.z - 5.0) //5
	neck_offset = Anim_fingers
	o_firstContact =  COL_RayObject_Vector( tv_Anim_Canal_Cou,  (neck_offset - tv_Anim_Canal_Cou)*2.0 , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
    	DBG_RenderVector(tv_Anim_Canal_Cou,  (neck_offset - tv_Anim_Canal_Cou)*2.0  ,  color_rouge )

	if(o_firstContact)
	{ 				 
		//exclude all actors from getting the texture, exclude all objects with ODE.....
		if( !@o_firstContact ACT_HasActionKit() && @o_firstContact ODE_Getf(0) == -1) 
		{	
			//timer for now, assuming kong can't fall multiple times in a few seconds...
			if(f_global_time - f_start_fall_time >= f_delay_until_next_fall) //IF TIMER
			{
	
//				//shake camera
//				msg.msg_id = 2
//				tv_temp.z = 0
//			
//				tv_temp.x = 5.0
//				tv_temp.y = 100.0
//				msg.msg_vec1 = tv_temp
//			
//				tv_temp.x = 0.7
//				tv_temp.y = 0.1
//				msg.msg_vec2 = tv_temp
//			
//				tv_temp.x = 15.0//0.1
//				tv_temp.y = 15.0//1.1
//				msg.msg_vec3 = tv_temp
//				to_camera = @get_global o_camera
//				@to_camera MSG_Send(msg)

				@o_empty_wayPoint	 OBJ_PosSet(COL_RayObject_PosGet())

				//CHECK FOR NAN ERROR after setting sight! 
				if(  MATH_VecNull(MATH_VecCrossProduct(COL_RayObject_NormalGet(), @o_empty_wayPoint OBJ_HorizonGet()))  || MATH_VecNull(MATH_VecCrossProduct(COL_RayObject_NormalGet(), @o_empty_wayPoint OBJ_BankingGet())) 	)
					@o_empty_wayPoint OBJ_SightSet( MATH_VecNormalize(COL_RayObject_NormalGet()  + cvector(0.1, 0.1, 0.1)))
				else
					@o_empty_wayPoint OBJ_SightSet(COL_RayObject_NormalGet())
	
	  		  	i_soundID = COL_RayObject_SoundGet()
	  		  	
	  		  	if(i_soundID <0 || i_soundID > 7)
					return faux
				 if(!i_soundID)
				 {
						tv_normal	= Cv_NullVector
						tv_pos		= Cv_NullVector
						i_displayTexture = faux
						i_soundID	= -1
						i_result 		= faux
						return i_result
				 }
				 	  		  	
				tv_pos 			= @o_empty_wayPoint		OBJ_PosGet()
				tv_normal 		= @o_empty_wayPoint		OBJ_SightGet() 
				firstArmPoint	= tv_Anim_Canal_Cou
				i_soundID		= COL_RayObject_SoundGet()
			
				xOffset  +=		@o_empty_wayPoint	OBJ_HorizonGet()
				yOffset  +=		@o_empty_wayPoint	OBJ_BankingGet() 
				
				xOffset 	*= 	x_LandLength/2.0
				yOffset 	*= 	y_LandLength/2.0
				
				ray_endPoint = @o_empty_wayPoint OBJ_PosGet() + cvector(xOffset.x, xOffset.y, xOffset.z-0.3) 
				o_test_ray    =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)*1.2  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
		    		DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				                                      									
						
		 		ray_endPoint = @o_empty_wayPoint	 OBJ_PosGet() - cvector(xOffset.x, xOffset.y, xOffset.z+0.3) 
				o_test_ray1   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)*1.2  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
				DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				
				
				ray_endPoint = @o_empty_wayPoint OBJ_PosGet() + cvector(yOffset.x, yOffset.y, yOffset.z-0.3) 
				o_test_ray2   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)*1.2  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
				DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)				
				
				ray_endPoint = @o_empty_wayPoint OBJ_PosGet() - cvector(yOffset.x, yOffset.y, yOffset.z+0.3) 
				o_test_ray3   =   COL_RayObject_Vector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x,  ray_endPoint.y-firstArmPoint.y,  ray_endPoint.z-firstArmPoint.z)*1.2  , all, none, 0, COL_C_Ray_on_visuel )  //COL_C_Ray_on_visuel    //COL_C_Ray_on_ColMap_NoCrossable
		 		DBG_RenderVector( cvector(firstArmPoint.x, firstArmPoint.y, firstArmPoint.z), cvector(ray_endPoint.x -firstArmPoint.x, ray_endPoint.y-firstArmPoint.y, ray_endPoint.z-firstArmPoint.z), color_bleu)	
				
				xOffset = Cv_NullVector	
				yOffset = Cv_NullVector	
				
	 			if((o_test_ray != o_test_ray1 || o_test_ray != o_test_ray2 || o_test_ray != o_test_ray3   || o_test_ray1 != o_test_ray2 || o_test_ray1 != o_test_ray3    || o_test_ray2 != o_test_ray3) || (!o_test_ray && !o_test_ray1 && !o_test_ray2 && !o_test_ray3))
	 				i_texture_out_of_bounds = vrai 
	 			else
			 		i_texture_out_of_bounds = faux	
	
				if( !@o_firstContact ACT_HasActionKit() &&  !i_texture_out_of_bounds && o_Ground_Impact_Textures[i_soundID])
				{ 
					i_displayTexture = vrai
				}
				else
					i_displayTexture = faux
					
				i_result = vrai
				f_start_fall_time = TIME_Get()
			}//end timer condition
			else
			{
				tv_normal	= Cv_NullVector
				tv_pos		= Cv_NullVector
				i_soundID	= -1
				i_displayTexture = faux
				i_result = faux
			}
		}
		else
		{
			tv_normal	= Cv_NullVector
			tv_pos		= Cv_NullVector
			i_displayTexture = faux
			i_soundID	= -1
			i_result 		= faux
		}
	}
	else
	{
		tv_normal	= Cv_NullVector
		tv_pos		= Cv_NullVector
		i_displayTexture = faux
		i_soundID	= -1
		i_result 		= faux
	}
	
	return i_result
	
}



//---TEST ACTORS FEET --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure_ultra int Proc_KK_TestFoot(vector v_Jambe, vector v_Foot, byref vector tv_pos, byref vector tv_normal,byref  int i_soundID,byref int i_displayTexture )
{
	
	object o_Contact
	int i_result

	o_Contact=  COL_RayObject_Vector( v_Jambe,  ((v_Foot+ cvector(0,0,-0.7)) - v_Jambe) , all, none, 0, COL_C_Ray_on_visuel )  //+ cvector(0,0,-0.7)
	i_soundID= COL_RayObject_SoundGet()
	  		  	
  	if(i_soundID <0 || i_soundID > 7)
		return faux
	 if(!i_soundID)
	 {
			tv_normal	= Cv_NullVector
			tv_pos		= Cv_NullVector
			i_displayTexture = faux
			i_soundID	= -1
			i_result 		= faux
			return i_result
	 }
	 
	DBG_RenderVector( v_Jambe,  ((v_Foot + cvector(0,0,-0.7)) - v_Jambe) , color_blanc) //+ cvector(0,0,-0.7)
			 	
	if(o_Contact && !@o_Contact ACT_HasActionKit() && @o_Contact ODE_Getf(0) == -1) 
	{	
	
		i_result = vrai
		//i_displayTexture = vrai
		tv_normal	=  COL_RayObject_NormalGet() 
		tv_pos		= COL_RayObject_PosGet()
	
	}
	else
	{
		tv_normal	= Cv_NullVector
		tv_pos		= Cv_NullVector
		i_soundID	= -1
		//i_displayTexture = faux
		i_result 		= faux
	}
	
	return i_result
}	

//---TEST ACTORS FEET --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure_ultra int Proc_KK_TestImpact(vector v_Jambe, vector v_Foot, byref vector tv_pos, byref vector tv_normal,byref  int i_soundID,byref int i_displayTexture )
{
	object o_Contact
	int i_result
	
	o_Contact=  COL_RayObject_Vector( v_Jambe,  (v_Foot - v_Jambe)*2.0 , all, none, 0, COL_C_Ray_on_visuel )  //+ cvector(0,0,-0.7)
	i_soundID= COL_RayObject_SoundGet()
	  		  	
	if(i_soundID <0 || i_soundID > 7)
		return faux
	 if(!i_soundID)
	 {
			tv_normal	= Cv_NullVector
			tv_pos		= Cv_NullVector
			i_displayTexture = faux
			i_soundID	= -1
			i_result 		= faux
			return i_result
	 }
	 
	DBG_RenderVector( v_Jambe,  (v_Foot  - v_Jambe)*2.0 , color_blanc) //+ cvector(0,0,-0.7)
			 	
	if(o_Contact && !@o_Contact ACT_HasActionKit() && @o_Contact ODE_Getf(0) == -1) 
	{	
	
		i_result = vrai
		//i_displayTexture = vrai
		tv_normal	=  COL_RayObject_NormalGet() 
		tv_pos		= COL_RayObject_PosGet()
	
	}
	else
	{
		tv_normal	= Cv_NullVector
		tv_pos		= Cv_NullVector
		i_soundID	= -1
		//i_displayTexture = faux
		i_result 		= faux
	}
	
	return i_result
}	



//---LAUNCH A GFX --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//This procedure launches all GFX for kong
//-FOOTSTEPS
//-WALL IMPACT and TEXTURE
//-GROUND IMPACT and TEXTURE
//-WALLING 
procedure_ultra void Proc_KK_SFXADD(int SFX_ID_Impact, vector tv_pos,  vector tv_normal, int i_soundID, int i_displayTexture, vector v_actorSight)	
{
	
	int i 
	message m_Msg
	object o_duplicatedGFX
	//return 
	//check bounds of sound ID parameter...
	if(i_soundID < 0 || i_soundID > 7 )
		return
		
	
	switch(SFX_ID_Impact)
	{
	
		//When Kong punches a wall
		case SFX_ID_ImpactOnWall:	
				
				//DISPLAY THE TEXTURE
				if(i_displayTexture)
				{ 			
					if(k <= i_numberPunchObjects-1)
					{
						if(o_num_punchTextures[k])
						{
							m_Msg.msg_int1 = i_wall_punch_fade_delay
							Dispatch_Interaction(o_num_punchTextures[k], m_Msg )  
							//@o_num_punchTextures[k] OBJ_Destroy()
						}
		 				o_num_punchTextures[k] = @o_WallPunch_Impact_Textures[i_soundID] OBJ_Duplicate(tv_pos)
		 			
		 			}
		 			else
		 			{
			 			k=0
			 			if(o_num_punchTextures[k])
			 			{
				 			m_Msg.msg_int1 = i_wall_punch_fade_delay
				 			Dispatch_Interaction(o_num_punchTextures[k], m_Msg )  
				 		}
							//@o_num_punchTextures[k] OBJ_Destroy()
		 				o_num_punchTextures[k] = @o_WallPunch_Impact_Textures[i_soundID] OBJ_Duplicate(tv_pos)
		 			}

		 			//set the position/sight/heirarchy of the texture
		 			@o_num_punchTextures[k] OBJ_PosSet(tv_pos)	
					
					//CHECK FOR NAN ERROR after setting sight! 
					if(  MATH_VecNull(MATH_VecCrossProduct(tv_normal, @o_num_punchTextures[k] OBJ_HorizonGet()))  || MATH_VecNull(MATH_VecCrossProduct(tv_normal, @o_num_punchTextures[k]  OBJ_BankingGet())) 	)
						@o_num_punchTextures[k] OBJ_SightSet(tv_normal + cvector(0.1, 0.1, 0.1))
					else
						@o_num_punchTextures[k] OBJ_SightSet(tv_normal)
			
		 			@o_num_punchTextures[k] OBJ_RotateLocalZ(Cf_PiBy2)
		 			@o_num_punchTextures[k] OBJ_RotateLocalX(MATH_RandFloat(0.0,Cf_2Pi)) //randomly rotate the textures on the wall MATH_RandFloat(0.0,Cf_2Pi)
					k++
				}
				
				//START THE GFX
				for(i=0; i<i_number_GFX; i++)
			    {
				    if(o_WallPunchSoundID[i_soundID][i])
				    {   	                                                                  
				  		@o_WallPunchSoundID[i_soundID][i] OBJ_SightSet(tv_normal)	
				  		o_duplicatedGFX			= @o_WallPunchSoundID[i_soundID][i] OBJ_Duplicate( tv_pos )
						m_Msg.msg_sender	= o_duplicatedGFX
						Dispatch_Interaction( o_duplicatedGFX, m_Msg )
						//@o_WallPunchSoundID[i_soundID][i] OBJ_PosSet(tv_pos)  
						//@o_WallPunchSoundID[i_soundID][i] OBJ_SightSet(tv_normal)	 
				  		//f_WallPunchSoundID_StartTimes[i_soundID][i]  = TIME_Get()								  		
						//i_WallPunchSoundID_isActive[i_soundID][i] 		= vrai															
				  	}
				}

			break
			
		//When Kong lands on ground
		case SFX_ID_ImpactOnGround:
			
			//Start the GFX
			for(i=0; i<i_number_GFX; i++) 
			{
				//send a dispatch msg to destroy a duplicated GFX  thats is not needed anymore 
				if(o_GroundSoundID[i_soundID][i])
				 {	   		  
					@o_GroundSoundID[i_soundID][i] OBJ_SightSet(tv_normal+  cvector(0.1, 0.0, 0.0) )
				  	o_duplicatedGFX			= @o_GroundSoundID[i_soundID][i]  OBJ_Duplicate( tv_pos + cvector(0,0,0.1) )
				  	@o_duplicatedGFX OBJ_BankingSet(tv_normal +  cvector(0.1, 0.0, 0.0) )
					m_Msg.msg_sender	= o_duplicatedGFX
					Dispatch_Interaction( o_duplicatedGFX, m_Msg )
				  }
			 }

			//Display the texture	 
			if( i_displayTexture)
			{ 
		
				if(k <= i_numberGroundObjects-1)
				{
					if(o_num_GroundTextures[k])
					{
						m_Msg.msg_int1 = i_ground_impact_fade_delay
						Dispatch_Interaction(o_num_GroundTextures[k], m_Msg )  
						//@o_num_punchTextures[k] OBJ_Destroy()
					}
	 				o_num_GroundTextures[k] = @o_Ground_Impact_Textures[i_soundID]	OBJ_Duplicate(tv_pos)
	 			
	 			}
	 			else
	 			{
		 			k=0
		 			if(o_num_GroundTextures[k])
		 			{
			 			m_Msg.msg_int1 = i_ground_impact_fade_delay
			 			Dispatch_Interaction(o_num_GroundTextures[k], m_Msg )  
			 		}
					o_num_GroundTextures[k] = @o_Ground_Impact_Textures[i_soundID]	OBJ_Duplicate(tv_pos)
				}
	 		
	 			//set the position/sight/heirarchy of the texture
	 			@o_num_GroundTextures[k] OBJ_PosSet(tv_pos)	
				//@o_num_punchTextures[k] OBJ_HierarchySet(o_firstContact)
				
				//CHECK FOR NAN ERROR after setting sight! 
				if(  MATH_VecNull(MATH_VecCrossProduct(tv_normal, @o_num_GroundTextures[k] OBJ_HorizonGet()))  || MATH_VecNull(MATH_VecCrossProduct(tv_normal, @o_num_GroundTextures[k] OBJ_BankingGet())) 	)
					@o_num_GroundTextures[k] OBJ_SightSet(tv_normal + cvector(0.1, 0.1, 0.1))
				else
					@o_num_GroundTextures[k] OBJ_SightSet(tv_normal)
					
				
				@o_num_GroundTextures[k]	OBJ_RotateLocalX(Cf_PiBy2)  
				@o_num_GroundTextures[k]	OBJ_RotateLocalZ(MATH_RandFloat(0.0, Cf_2Pi))  //.0, 360.0 randomly rotate the texture about the X axis
				k++
			}
			
			break
			
		//When Kong runs
		case SFX_ID_ImpactOnRightFoot:
		case SFX_ID_ImpactOnLeftFoot:
		case SFX_ID_ImpactOnLeftHand:
		case SFX_ID_ImpactOnRightHand:
			m_Msg.msg_int1  = i_footsteps_fade_delay
			
			//start the GFX effects 
		    for(j=0; j<i_number_GFX; j++)
		    {
			    if(o_MovementSoundID[i_soundID][RUN_ID][j])
			    {   
			    		@o_MovementSoundID[i_soundID][RUN_ID][j]		OBJ_PosSet(tv_pos + cvector(0.0,0.0,0.1))                                                                 
			  		@o_MovementSoundID[i_soundID][RUN_ID][j]		OBJ_BankingSet(tv_normal +  cvector(0.1, 0.0, 0.0) )//OBJ_SightSet(tv_normal)	
			  		o_duplicatedGFX			=@o_MovementSoundID[i_soundID][RUN_ID][j]	  OBJ_Duplicate( @o_MovementSoundID[i_soundID][RUN_ID][j] OBJ_PosGet() )
					m_Msg.msg_sender	= o_duplicatedGFX
					Dispatch_Interaction( o_duplicatedGFX, m_Msg )	 	  			  		
			  	}
			}			

			break
		
//		case SFX_ID_ImpactOnLeftFoot:
//		
//			m_Msg.msg_int1  = i_footsteps_fade_delay
//			//start the GFX effects 
//		    for(j=0; j<i_number_GFX; j++)
//		    {
//			    if(o_WallingLeftSoundID[i_soundID][RUN_ID][j])
//			    {   
//			  		
//			  		@o_WallingLeftSoundID[i_soundID][RUN_ID][j]		OBJ_PosSet(tv_pos + cvector(0.0,0.0,0.1))                                                                 
//			  		@o_WallingLeftSoundID[i_soundID][RUN_ID][j]		OBJ_BankingSet(tv_normal)//OBJ_SightSet(tv_normal)	
//			  		f_WallingLeftSoundID_StartTimes[i_soundID][RUN_ID][j]	= TIME_Get()	
//					i_WallingLeftSoundID_isActive[i_soundID][RUN_ID][j]		= vrai
//			  	}
//			}
//	
//
//			break
//			
//		case SFX_ID_ImpactOnLeftHand:
//		
//			m_Msg.msg_int1  = i_footsteps_fade_delay
//			//start the GFX effects 
//		    for(j=0; j<i_number_GFX; j++)
//		    {
//			    if(o_WallingLeft1SoundID[i_soundID][RUN_ID][j])
//			    {   
//			  		
//			  		@o_WallingLeft1SoundID[i_soundID][RUN_ID][j]		OBJ_PosSet(tv_pos + cvector(0.0,0.0,0.1))                                                                 
//			  		@o_WallingLeft1SoundID[i_soundID][RUN_ID][j]		OBJ_BankingSet(tv_normal)//OBJ_SightSet(tv_normal)	
//			  		f_WallingLeft1SoundID_StartTimes[i_soundID][RUN_ID][j]	= TIME_Get()	
//					i_WallingLeft1SoundID_isActive[i_soundID][RUN_ID][j]		= vrai
//			  	}
//			}
//	
//			if( i_displayTexture)
//			{ 
//				if(o_Walling_Impact_Texture[i_soundID])
//				{
//					if(currentNum  <= i_numberWallObjects -1)
//					{
//						if(o_num_WallTextures[currentNum])
//						{
//							//Dispatch_Interaction(o_num_WallTextures[currentNum], m_Msg )  
//							@o_num_WallTextures[currentNum] OBJ_Destroy()
//						}
//		 				o_num_WallTextures[currentNum ] = @o_Walling_Impact_Texture[i_soundID] OBJ_Duplicate(tv_pos)
//		 			}
//		 			else
//		 			{
//			 			currentNum =0
//			 			if(o_num_WallTextures[currentNum] )
//			 			{
//				 			//Dispatch_Interaction(o_num_WallTextures[currentNum] ,m_Msg )  
//							@o_num_WallTextures[currentNum] OBJ_Destroy()
//						}
//		 				o_num_WallTextures[currentNum] = @o_Walling_Impact_Texture[i_soundID] OBJ_Duplicate(tv_pos)
//	 				}
//	 			
//		 			//set the position/sight/heirarchy of the texture
//		 			@o_num_WallTextures[currentNum ] OBJ_PosSet(tv_pos + cvector(0.0,0.0,0.1))	
//		 			@o_num_WallTextures[currentNum ] OBJ_BankingSet(tv_normal) 
//		 			@o_num_WallTextures[currentNum ] OBJ_RotateLocalZ(-MATH_VecAngle(v_actorSight, @o_num_WallTextures[currentNum ] OBJ_HorizonGet(), Cv_VerticalVector) ) //set the footsteps in the right direction
//					currentNum ++
//				}
//			}
//
//			break
//			
//		case SFX_ID_ImpactOnRightHand:
//		
//			m_Msg.msg_int1  = i_footsteps_fade_delay
//			//start the GFX effects 
//		    for(j=0; j<i_number_GFX; j++)
//		    {
//			    if(o_WallingRight1SoundID[i_soundID][RUN_ID][j])
//			    {   
//			  		
//			  		@o_WallingRight1SoundID[i_soundID][RUN_ID][j]		OBJ_PosSet(tv_pos + cvector(0.0,0.0,0.1))                                                                 
//			  		@o_WallingRight1SoundID[i_soundID][RUN_ID][j]		OBJ_BankingSet(tv_normal)//OBJ_SightSet(tv_normal)	
//			  		f_WallingRight1SoundID_StartTimes[i_soundID][RUN_ID][j]	= TIME_Get()	
//					i_WallingRight1SoundID_isActive[i_soundID][RUN_ID][j]		= vrai
//			  	}
//			}
//	
//			if( i_displayTexture)
//			{ 
//				if(o_Walling_Impact_Texture[i_soundID])
//				{
//					if(currentNum  <= i_numberWallObjects -1)
//					{
//						if(o_num_WallTextures[currentNum])
//						{
//							//Dispatch_Interaction(o_num_WallTextures[currentNum], m_Msg )  
//							@o_num_WallTextures[currentNum] OBJ_Destroy()
//						}
//		 				o_num_WallTextures[currentNum ] = @o_Walling_Impact_Texture[i_soundID] OBJ_Duplicate(tv_pos)
//		 			}
//		 			else
//		 			{
//			 			currentNum =0
//			 			if(o_num_WallTextures[currentNum] )
//			 			{
//				 			//Dispatch_Interaction(o_num_WallTextures[currentNum] ,m_Msg )  
//							@o_num_WallTextures[currentNum] OBJ_Destroy()
//						}
//		 				o_num_WallTextures[currentNum] = @o_Walling_Impact_Texture[i_soundID] OBJ_Duplicate(tv_pos)
//	 				}
//	 			
//		 			//set the position/sight/heirarchy of the texture
//		 			@o_num_WallTextures[currentNum ] OBJ_PosSet(tv_pos + cvector(0.0,0.0,0.1))	
//		 			@o_num_WallTextures[currentNum ] OBJ_BankingSet(tv_normal) 
//		 			@o_num_WallTextures[currentNum ] OBJ_RotateLocalZ(-MATH_VecAngle(v_actorSight, @o_num_WallTextures[currentNum ] OBJ_HorizonGet(), Cv_VerticalVector) ) //set the footsteps in the right direction
//					currentNum ++
//				}
//			}
//
//			break	
			
		//When kong walks
		case SFX_ID_ImpactOnLeftFoot_Walk:
		case SFX_ID_ImpactOnRightFoot_Walk:
		case SFX_ID_ImpactOnLeftHand_Walk:
		case SFX_ID_ImpactOnRightHand_Walk:
		
			//start the GFX effects 
		    for(j=0; j<i_number_GFX; j++)
		    {
			    if(o_MovementSoundID[i_soundID][WALK_ID][j]	)
			    {   
			 	
			  		@o_MovementSoundID[i_soundID][WALK_ID][j]		OBJ_PosSet(tv_pos + cvector(0.0,0.0,0.1))                                                                 
			  		@o_MovementSoundID[i_soundID][WALK_ID][j]		OBJ_BankingSet(tv_normal +   cvector(0.1, 0.0, 0.0) )//OBJ_SightSet(tv_normal)	
			 		o_duplicatedGFX			=@o_MovementSoundID[i_soundID][WALK_ID][j]	  OBJ_Duplicate( @o_MovementSoundID[i_soundID][WALK_ID][j] OBJ_PosGet() )
					m_Msg.msg_sender	= o_duplicatedGFX
					Dispatch_Interaction( o_duplicatedGFX, m_Msg )	 
			  
			  	}
			}
	
			break
//	 	case SFX_ID_ImpactOnRightFoot_Walk:
//	 	
//	 		//start the GFX effects 
//		    for(j=0; j<i_number_GFX; j++)
//		    {
//			    if(o_MovementSoundID[i_soundID][WALK_ID][j])
//			    {   
//				    @o_MovementSoundID[i_soundID][WALK_ID][j]		OBJ_PosSet(tv_pos + cvector(0.0,0.0,0.1))                                                                 
//			  		@o_MovementSoundID[i_soundID][WALK_ID][j]		OBJ_BankingSet(tv_normal)//OBJ_SightSet(tv_normal)		  			  		
//			  		f_MovementSoundID_StartTimes[i_soundID][WALK_ID][j]	= TIME_Get()			  			  		
//					i_MovementSoundID_isActive[i_soundID][WALK_ID][j]		= vrai
//			  	}
//			}		
//			
//	 		break
//		case SFX_ID_ImpactOnLeftHand_Walk:
//		
//			//start the GFX effects 
//		    for(j=0; j<i_number_GFX; j++)
//		    {
//			    if(o_WallingLeft1SoundID[i_soundID][WALK_ID][j])
//			    {   
//			  		
//			  		@o_WallingLeft1SoundID[i_soundID][WALK_ID][j]		OBJ_PosSet(tv_pos + cvector(0.0,0.0,0.1))                                                                 
//			  		@o_WallingLeft1SoundID[i_soundID][WALK_ID][j]		OBJ_BankingSet(tv_normal)//OBJ_SightSet(tv_normal)	
//			  		f_WallingLeft1SoundID_StartTimes[i_soundID][WALK_ID][j]	= TIME_Get()	
//					i_WallingLeft1SoundID_isActive[i_soundID][WALK_ID][j]		= vrai
//			  	}
//			}
//			
//			break
//			
//		case SFX_ID_ImpactOnRightHand_Walk:
//					//start the GFX effects 
//		    for(j=0; j<i_number_GFX; j++)
//		    {
//			    if(o_WallingRight1SoundID[i_soundID][WALK_ID][j])
//			    {   
//			  		
//			  		@o_WallingRight1SoundID[i_soundID][WALK_ID][j]		OBJ_PosSet(tv_pos + cvector(0.0,0.0,0.1))                                                                 
//			  		@o_WallingRight1SoundID[i_soundID][WALK_ID][j]		OBJ_BankingSet(tv_normal)//OBJ_SightSet(tv_normal)	
//			  		f_WallingRight1SoundID_StartTimes[i_soundID][WALK_ID][j]	= TIME_Get()	
//					i_WallingRight1SoundID_isActive[i_soundID][WALK_ID][j]		= vrai
//			  	}
//			}
//	
//			break

		//When kong is walling
		case SFX_ID_ImpactOnLeftFoot_Walling :
		case SFX_ID_ImpactOnRightFoot_Walling :
		case SFX_ID_ImpactOnLeftHand_Walling :
		case SFX_ID_ImpactOnRightHand_Walling :
			//start the GFX effects 
		    for(j=0; j<i_number_GFX; j++)
		    {
			    if(o_WallingSoundID[i_soundID][j])
			    {   
			  		                                                         
			  		@o_WallingSoundID[i_soundID][j]		OBJ_BankingSet(tv_normal +  cvector(0.1, 0.0, 0.0) )//OBJ_SightSet(tv_normal)	
			  		m_Msg.msg_sender = @o_WallingSoundID[i_soundID][j]	OBJ_Duplicate(tv_pos + cvector(0.0,0.0,0.1))     
			  		o_duplicatedGFX = m_Msg.msg_sender   
					Dispatch_Interaction(o_duplicatedGFX, m_Msg )  
			  	}
			}
	
			break
		
	
		}//end switch

}



