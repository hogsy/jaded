#include "KWC_Defines.var"

// Define at least one function in a track
// function track0 = "name"
// function track1 = "name"
function track2 = "KWC_Init.fct"
// function track3 = "name"
// function track4 = "name"

separator "Trigger"
	private int 			mi_TriggerType 										= enum( "Hybrid" 0 "Triggered" 1 "Timed" 2  )	//JIMINOTE:USELESS! how is the Digwazai state triggered.  Hybrid uses both time and the trigger.
	float					mf_SecondsBetweenTimedAttacks				= 1.5												// seconds between Digwazai attacks
	private float			mf_DigwazaiTimeStamp							= 0.0
	
	trigger				mt_Trigger																									// event to trigger Digwazai attack (e.g. when Kong is in BV, or when Kong is using a mashing object)
	
	private message	mm_Msg
	
	private int			mi_IsDWZActive 										= faux
	
	trigger				mt_StopTrigger																							// trigger to override normal Digwazai trigger and no longer enter active attack behaviour
	
	trigger				mt_AttackAnnTrigger																					// trigger check for Ann being targeted.  If none is supplied, the Digwaszai can always select her as a target if she is available
	
	trigger				mt_InstantAttackTrigger																				// a trigger here overides all timing and other triggers and immediately attacks
	private int			mi_IsAttackImmeditate 							= faux
	private int			mi_ImmediateAttackTriggered 					= faux
	float					mf_ImmediateAttackDelay 						= 0.5												// delay (usually very short) for the DWZ to launch in immediate mode
	
	trigger				mt_TriggerExec[C_Max_TriggerExecs]															// triggers to be launched when any Active DWZ attack is launched
	
	trigger				mt_PermaStopTrigger 																					// trigger to forever stop this instance of the DWZ
	private int			mi_DWZTriggered 									= faux
	private int			mi_WasDWZTriggered 								= faux
	
separator "Attack Behaviour"
	float					mf_DelayAfterYellForAttack						= 1.5												// number of seconds between Digwaszai yell and actual spear launch
	private float			mf_DigwazaiYellTimeStamp 						= 0.0
	
separator "Sound"
	trigger				tr_son																										// trigger check for sound (active zone)
	private int 			i_ref_son

separator "Debug"
	int						mi_DEBUG_MsgsOn								= vrai_faux
	
separator "State"
	private object		mo_ANN
	private object		mo_KONG
	private int			mi_NeverTriggerAnyMoreDWZ 					= faux

separator "Natives"
	object				mao_NativeGroup[C_Max_NativeGroups][C_Max_AIPerGrp]								// put PluieDesLances and/or native groups in this listrator "Distance"
	float					mf_MaxDistFromEachJavSrc						= 66.0											// max distance individual native groups and pluie des lances gaos must be from their target to throw when a Digwaszai is triggered
	float					mf_MinDistFromEachJavSrc						= 0.0												// min distance individual native groups and pluie des lances gaos must be from their target to throw when a Digwaszai is triggered
	int						mi_NumberOfNativeGroupsToDestroy 			= 33
	int						mi_AreSplitNativeGroupsDead 					= faux_vrai										// treat native groups with any dead guys as if they are totally dead.
	
separator "Targetting"
	int						mi_IsAnnMainTarget									= vrai_faux										// if 'vrai', the DWZ will always check to see if Ann is an available target and do so if she is
	private int			mi_NumberOfAttacksOnAnn						= 0
	int 					mi_NumberOfAttacksOnAnnBeforeAccurate	= 2												// before this attack, all attacks on Ann are very inaccurate, using the full radius on PDLs
	int						mi_UseStaticTargetting								= vrai_faux										// if you want the DWZ to target where Kong (or Ann) WAS when the yell happens.
	private int			mi_ImmediateAttackTargeting 					= faux
	
separator "Dependance Objects"
	object				mao_DependanceObject[C_Max_NativeGroups]												// if an object is specified here and is destroyed, the corresponding native group will no longer attack
	int						mi_NumberOfDependanceObjectsToDestroy = 9												// when this many dependance objects are destroyed, this WP's CAPA 0 will be 1.
	
separator "Inactive Mode"
	private int			mi_IsInactiveModeActive							= faux
	private float			mf_InactiveModeTimeStamp						= 0.0
	float					mf_DelayBetweenInactiveModeAttacks		= 8.0												// when inactive, the DWZ launches sporadic inaccurate spears at this interval
	
	private int			mi_CapaToSet											= OBJ_Capa_1
	
	float					mf_ChanceForEachSpearToInactiveLaunch	= 0.25											// percentage chance that each spear will be launched for the inactive mode attack (ex. 0.25 = 25%)