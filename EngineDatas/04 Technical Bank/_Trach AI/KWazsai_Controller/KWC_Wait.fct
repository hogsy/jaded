#include "KWC_Defines.var"

int i_ActivateAttackBhv
int i_IsStopped
int i_DependenceObjectsDestroyed
int i_Index
int i_Index2
int i_NativeGroupsKilled

i_DependenceObjectsDestroyed 	= 0
i_NativeGroupsKilled					= 0

i_IsStopped			= faux
i_ActivateAttackBhv	= faux

mi_DWZTriggered 	= vrai

// check to see if all dependence objects are destroyed
for ( i_Index = 0; i_Index < C_Max_NativeGroups; i_Index++ )
{
	if ( mao_DependanceObject[i_Index] )
	{
		if ( @mao_DependanceObject[i_Index] OBJ_CapaTest( OBJ_Capa_2 ) )
		{
			i_DependenceObjectsDestroyed++
		}
	}
}

// if all the native groups are marked as killed, then set the Capa to 0.
for ( i_Index = 0; i_Index < C_Max_NativeGroups; i_Index++ )
{
	for ( i_Index2 = 0; i_Index2 < C_Max_AIPerGrp; i_Index2++ )
	{
		if ( mao_NativeGroup[i_Index][i_Index2] ) 
		{
			if ( @mao_NativeGroup[i_Index][i_Index2] OBJ_CapaTest( OBJ_Capa_15 ) )
			{
				i_NativeGroupsKilled++
			}
			else if ( mi_AreSplitNativeGroupsDead && @mao_NativeGroup[i_Index][i_Index2] OBJ_CapaTest( OBJ_Capa_11 ) )
			{
				i_NativeGroupsKilled++
			}
		}
	}
}

// destroyed objects/native groups end condition
if ( ( i_DependenceObjectsDestroyed >= mi_NumberOfDependanceObjectsToDestroy ) || ( i_NativeGroupsKilled >= mi_NumberOfNativeGroupsToDestroy ) )
{
	OBJ_CapaSet( OBJ_Capa_0, none )
	AI_TrackCurStop()
	return
}

if ( ( AI_TriggerIsValid( mt_PermaStopTrigger ) ) )
{
	if ( call_trigger( mt_PermaStopTrigger ) )
	{
		mi_IsDWZActive		= faux
		
		i_IsStopped			= vrai
		
		mi_DWZTriggered	= faux
	
		AI_TrackStop( C_Track_Wait )
		AI_TrackCurStop()
		AI_TrackStop( C_Track_Inactive )
		
		AI_TrackStop( C_Track_Active )

		return
	}
}

// general target selection
if ( mi_IsAnnMainTarget && KWC_CanHaveFightActor_Ann() && mo_ANN )
{
	mm_Msg.msg_gao1	= mo_ANN						// target of spears
}
else
{
	mm_Msg.msg_gao1	= AI_MainActorGet(C_ID_Kong)		// target of spears
}

// stop trigger check
if ( ( AI_TriggerIsValid( mt_StopTrigger ) ) )
{
	if ( call_trigger( mt_StopTrigger ) )
	{
		mi_IsDWZActive		= faux
		
		i_IsStopped			= vrai
		
		mi_DWZTriggered	= faux
	}
}

// if not stopped, check triggers and timing for active mode attack
if ( !i_IsStopped )
{
	if ( ( AI_TriggerIsValid( mt_InstantAttackTrigger ) ) )
	{
		if ( call_trigger( mt_InstantAttackTrigger ) )
		{
			if ( !mi_ImmediateAttackTriggered )
			{
				mi_ImmediateAttackTriggered 	= vrai
				mi_IsAttackImmeditate 			= vrai
				i_ActivateAttackBhv 					= vrai
			}
		}
		else
		{
			mi_ImmediateAttackTriggered = faux
		}
	}
	
	if ( !mi_IsAttackImmeditate )
	{
		{
			if ( AI_TriggerIsValid( mt_Trigger ) )
			{
				if ( call_trigger( mt_Trigger ) )
				{
			 		if ( TIME_Get() - mf_DigwazaiTimeStamp > mf_SecondsBetweenTimedAttacks )
			 		{
						if ( !mi_IsDWZActive )
						{
							i_ActivateAttackBhv = vrai
						}
					}
					else
					{
						mi_IsDWZActive = faux
					}
				}
				else
				{
					mi_IsDWZActive = faux
					mi_DWZTriggered = faux
				}
			}
			else
			{
				if ( mi_ImmediateAttackTriggered )
				{
					mi_IsDWZActive = vrai
					mi_DWZTriggered = vrai
					i_ActivateAttackBhv = vrai
				}
			}
		}
	}
	
	if ( i_ActivateAttackBhv )
	{
		object o_Target
	
		mi_IsDWZActive 				= vrai
		mi_IsInactiveModeActive	= faux
		
		if ( mi_IsAttackImmeditate )
		{
			mf_DigwazaiYellTimeStamp		= ( TIME_Get() - mf_DelayAfterYellForAttack + mf_ImmediateAttackDelay )
			mi_ImmediateAttackTargeting 	= vrai
		}
		else
		{
			mf_DigwazaiYellTimeStamp		= TIME_Get()
			mi_ImmediateAttackTargeting	= faux
			
			// in static attack mode, the DWZ uses itself as a target of attacks on Kong so it can attack where the target was when the yell happened.
			o_Target = mm_Msg.msg_gao1
			
			OBJ_PosSet( @o_Target OBJ_PosGet() )
			
			if ( mi_UseStaticTargetting )
			{
				AI_Execute( "KWZ_SetKNGTarget_Exec.fct" )
			}
		}
		
		AI_Execute( "KWC_WazaiYell_Exec.fct" )
		
		AI_TrackChange( C_Track_Active, "KWC_Active_Bhv.fct" )
		
		mi_IsAttackImmeditate = faux
	}
}

// only send message to clear buffer of targets to native groups when necessary
{
	if ( !mi_DWZTriggered && mi_WasDWZTriggered != mi_DWZTriggered )
	{
		AI_Execute( "KWC_DeactivateNatives_Exec.fct" )
	}
	
	mi_WasDWZTriggered = mi_DWZTriggered
}

// if not active, execute inactive mode
if ( ! mi_IsDWZActive && ! mi_IsInactiveModeActive )
{
	mi_IsInactiveModeActive 		= vrai
	mf_InactiveModeTimeStamp	= TIME_Get()
	
	AI_TrackChange( C_Track_Inactive, "KWX_Inactive_Bhv.fct" )
}

if ( mi_IsDWZActive )
{
	AI_TrackStop( C_Track_Inactive )
}