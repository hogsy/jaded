object	to_obj, to_obj1, to_obj2, to_prev
vector	tv_temp
float		tf_tempX
int			i
vector	tv_sight, tv_posget, tv_sightget, tv_horizonget, tv_bankingget
int			i_rame
int			i_Gfx

tv_posget = OBJ_PosGet()
tv_sightget = OBJ_SightGet()
tv_horizonget = OBJ_HorizonGet()
tv_bankingget = OBJ_BankingGet()

if(o_splash) 
{
	@o_splash OBJ_PosSet(tv_posget + cvector(0,0,-2) + (tv_sightget * 5))
	f_time_must_splash -= TIME_GetDt()
	if(f_time_must_splash > 0)
	{
		@o_splash_sphere OBJ_PosSet(tv_posget + (tv_sightget * 10))
		@o_splash_sphere OBJ_SightGeneralSet(Cv_VerticalVector, tv_sightget)
	}
	else
	{
//		tv_temp.x = MATH_RandFloat(5, 10) * (1 - MATH_RandInt(0, 2))
//		tv_temp.y = MATH_RandFloat(5, 10) * (1 - MATH_RandInt(0, 2))
//		tv_temp.z = OBJ_PosGet().z - 2
		@o_splash_sphere OBJ_PosSet(tv_posget + (tv_sightget * 20) + cvector(0,0,10))
	}
}

if	(des_i_chaloupe_jack)
{
	//
	if	(OBJ_CapaTest(OBJ_Capa_11))
	{
		if	(f_temps_decal_jack_deb < 1)
		{
			f_temps_decal_jack_deb += TIME_GetDt() * 0.15
			tf_tempX = des_f_decal_jack_deb - (des_f_decal_jack_deb * f_temps_decal_jack_deb)
			
		}
		else
		{
			if	(f_temps_decal_jack_deb >= 1)
			{
				OBJ_CapaSet(0, OBJ_Capa_11)
				des_f_decal_jack_deb = 0
				tf_tempX = des_f_decal_jack_deb
			}
		}
	}
	else	tf_tempX = des_f_decal_jack_deb
	//
	to_obj = AI_MainActorGet(C_ID_Joueur)
	tv_temp = tv_posget - (tv_sightget * 2.5) + (tv_horizonget * tf_tempX)
	@to_obj OBJ_FlagInvisibleSet(vrai)
	@to_obj COL_StartMatrixSet(tv_temp)
	@to_obj OBJ_PosSet(tv_temp)
	@to_obj COL_ColSetActivationSet(0, C_bit_zdm_pied)
	@get_Humain_path to_obj v_ground_pos = tv_temp
	@get_camera OBJ_PosSet(tv_temp + cvector(0,0,1.4))
	
	if(!i_test_visee && (i_mode_cine == 1 || i_force_block))
	{
		tv_temp = OBJ_HorizonGet()
		tv_temp.z-=0.2
		@get_camera OBJ_SightGeneralSet(tv_temp, Cv_VerticalVector)
	}
	else
	{
		if(OBJ_CapaTest(OBJ_Capa_9))
		{
			tv_temp = @get_camera MATH_VecGlobalToLocal(tv_horizonget)
			if(tv_temp.z < -0.15) tv_temp.z = -0.15
			if(tv_temp.z > 0.15) tv_temp.z = 0.15
			angle_rot_cam = MATH_FloatBlend(angle_rot_cam, tv_temp.z, 3 * TIME_GetDt())
			@get_camera OBJ_RotateLocalY(angle_rot_cam + MATH_RandFloat(-f_rand_cam, f_rand_cam))
			@get_camera OBJ_RotateLocalX(MATH_RandFloat(-f_rand_cam, f_rand_cam)	)		
		}
	}
}

for(i = 0; i < 4; i++)
{
	if(!des_o_marins[i]) break
	
	if(des_i_mode_tomb)
	{
		switch(i)
		{
			case 0:	tv_temp = tv_posget + (tv_sightget * 0.9) + (tv_horizonget * 0.3) + (tv_bankingget * 0.2) break
			case 1:	tv_temp = tv_posget + (tv_sightget * 1.5) - (tv_horizonget * 0.0) + (tv_bankingget * 0.4) break
			case 2:	tv_temp = tv_posget - (tv_sightget * 0.4) - (tv_horizonget * 0.5) break
			case 3:	tv_temp = tv_posget - (tv_sightget * 0.4) - (tv_horizonget * 0.5) break
		}
	}
	else
	{
		switch(i)
		{
			case 0:	tv_temp = tv_posget + (tv_sightget * 0.9) + (tv_horizonget * 0.3) + (tv_bankingget * 0.2) break
			case 1:	tv_temp = tv_posget + (tv_sightget * 0.5) - (tv_horizonget * 0.2) + (tv_bankingget * 0.25) break
			case 2:	tv_temp = tv_posget - (tv_sightget * 0.4) - (tv_horizonget * 0.5) break
			case 3:	tv_temp = tv_posget - (tv_sightget * 0.4) - (tv_horizonget * 0.5) break
		}
	}
	
	i_rame = faux
	if(des_o_marins[i] == des_o_quirame[0])
	{
		if(des_i_mode_tomb)
			tv_temp = tv_posget - (tv_sightget * 1.8) - (tv_horizonget * 0.4) + (tv_bankingget * 0.2)
		else
			tv_temp = tv_posget - (tv_sightget * 1.8) + (tv_horizonget * 0.3) + (tv_bankingget * 0.2)
		i_rame = vrai
	}
	
	if(des_o_marins[i] == des_o_quirame[1])
	{
		if(des_i_mode_tomb)
			tv_temp = tv_posget + (tv_sightget * 0.1) + (tv_horizonget * 0.4) + (tv_bankingget * 0.2)
		else
			tv_temp = tv_posget - (tv_sightget * 1.8) - (tv_horizonget * 0.3) + (tv_bankingget * 0.2)
		i_rame = vrai
	}
	
	to_obj = des_o_marins[i]
	if(@to_obj OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Dyna))
		@to_obj DYN_GravitySet(Cv_NullVector)
	@to_obj OBJ_FlagInvisibleSet(faux)	
	@to_obj OBJ_FlagInactiveSet(faux)	
	@to_obj OBJ_PosSet(tv_temp)
	@to_obj COL_StartMatrixSet(tv_temp)
	@get_Humain_path to_obj v_ground_pos = tv_temp
	if(!@to_obj OBJ_CapaTest(OBJ_Capa_8))
	{
		if(i_rame)
		{
			tv_sight = -tv_sightget
			tv_temp = tv_bankingget
			@to_obj OBJ_SightGeneralSet(tv_sight, tv_temp)
		}
//		else if(to_obj == @"univ" ao_AllHumains[C_ID_Denham])
//		{
//			tv_sight = MATH_VecBlendRotate(@to_obj OBJ_SightGet(), tv_sightget, 3 * TIME_GetDt())
//			tv_temp = MATH_VecBlendRotate(@to_obj OBJ_BankingGet(), tv_bankingget, 3 * TIME_GetDt())
//			@to_obj OBJ_SightGeneralSet(tv_sight, tv_temp)
//		}
		else
		{
			tv_sight = tv_sightget
			tv_temp = MATH_VecBlendRotate(@to_obj OBJ_BankingGet(), tv_bankingget, 3 * TIME_GetDt())
			@to_obj OBJ_SightGeneralSet(tv_sight, tv_temp)
		}
	}
	else
	{
		tv_temp = tv_bankingget
		@to_obj OBJ_SightGeneralSet(@to_obj OBJ_SightGet(), tv_temp)
	}
	
	@to_obj COL_ColSetActivationSet(0, C_bit_zdm_pied)
	@to_obj COL_ColMapActivationSet(0, all)
}
// Cheat de Sun
//OBJ_Reinit(0)
// Cheat de Sun

// Rames
for(i = 0; i < 2; i++)
{
	to_obj = des_o_quirame[i]
	if(to_obj)
	{
		if(i == 1) 
		{
			to_prev = des_o_quirame[i - 1]
			if	(OBJ_CapaTest(OBJ_Capa_1))
			{
//				@to_obj ANI_CurrentFrameSet(0, @to_prev ANI_CurrentFrameGet(0) + 10)

				// Rajout du modulo par FRED
				@to_obj ANI_CurrentFrameSet(0, MATH_Modulo( @to_prev ANI_CurrentFrameGet(0) + 10, @to_obj ANI_NbFrameGet(0) ) )
			}
		}
		
		to_obj1 = @to_obj ANI_CanalObjectGet(128)
		if(to_obj1)
		{
			if(i == 1)
			{
				to_obj = des_o_rames_gauche[0]
				@to_obj OBJ_PosSet(@to_obj1 OBJ_PosGet())
				@to_obj OBJ_SightGeneralSet(@to_obj1 OBJ_SightGet(), -@to_obj1 OBJ_BankingGet())
				@to_obj BV_MinSet(cvector(-10, -10, -10))
				@to_obj BV_MaxSet(cvector(10, 10, 10))
			}
			else
			{			
				// Rames
				to_obj = des_o_quirame[i]
				to_obj1 = @to_obj ANI_CanalObjectGet(128)
				to_obj = des_o_rames_droite[0]
				@to_obj OBJ_PosSet(@to_obj1 OBJ_PosGet())
				@to_obj OBJ_SightGeneralSet(@to_obj1 OBJ_SightGet(), @to_obj1 OBJ_BankingGet())
				@to_obj BV_MinSet(cvector(-10, -10, -10))
				@to_obj BV_MaxSet(cvector(10, 10, 10))
			}
		}
	}
}


//if(TIME_Elapsed(f_time_goutte, 2.0))
//{
//	f_time_goutte = TIME_Get()
//	for(i = 0; i < 1; i++)
//	{
//		i_Gfx = GFX_Add(9)  // ajout de l’effet
//		GFX_FlagSet(i_Gfx,0,1) // activation de l’effet
//		GFX_FlagSet(i_Gfx, 2, 1) // matériau transparent
//		GFX_MaterialSet(i_Gfx, get_SFX_light_and_smoke,5)	// matériau
//		to_obj = des_o_rames_droite[i]
//		tv_temp = @to_obj OBJ_PosGet() - (@to_obj OBJ_HorizonGet() * 2)
//		tv_temp = WTR_GetDif(tv_temp)
//		GFX_Setv( i_Gfx, 9200, tv_temp) //position
//		GFX_Setv( i_Gfx, 9201, cvector( 0, 0.1, 0.2)) // axe du cone de vitesse
//		 GFX_Setv( i_Gfx, 9202, cvector( 0, 0, -2) )	 // gravité
//		 GFX_Seti( i_Gfx, 9100, 20)	 // nb max d’étincelles
//	 	GFX_Seti( i_Gfx, 9101, 0x73252525)	 // couleur
//		 GFX_Seti (i_Gfx, 9102, 24) // flags : 16 => bit 4 à 1 => temps de mort
//		 GFX_Setf( i_Gfx, 9000, 0.1 )	 // angle
//		 GFX_Setf( i_Gfx, 9001, 10) // speed min
//		 GFX_Setf( i_Gfx, 9002, 15) // speed max
//		 GFX_Setf( i_Gfx, 9003, 0.99) // friction
//		 GFX_Setf( i_Gfx, 9004, 0.1 ) // width
//		 GFX_Setf( i_Gfx, 9005, 0.1 ) // time min
//		 GFX_Setf( i_Gfx, 9006, 0.2 ) // time max
//		 GFX_Setf( i_Gfx, 9007, 2 ) // scale
//		 GFX_Setf( i_Gfx, 9008, 0.005  ) // period
//		 GFX_Setf( i_Gfx, 9009, 0.3  ) // temps de mort minimum
//		 GFX_Setf( i_Gfx, 9010, 0.5  ) // temps de mort maxi
//	}
//}