#include "KCG_Defines.var"

int 		i_Index
object 	o_Bone
object	o_SubObject
float		f_AbsDistance
float 		f_DT

f_DT = TIME_GetDt()

// make it so swing falls faster at first
mf_StartingFallSpeed -= ( mf_DecelRate * f_DT )

// make sure the swing always goes at least the minimum speed
if ( mf_StartingFallSpeed < mf_MinimumDecelFactor )
{
	mf_StartingFallSpeed = mf_MinimumDecelFactor
}

for ( i_Index = C_FirstBone; i_Index <= C_LastBone; i_Index++ )
{
	// get the bone/gao of the object to rotate
	o_Bone 			= ANI_CanalObjectGet( i_Index )
	o_SubObject	= mao_SubObjects[( i_Index - C_FirstBone + 1 )]
	
	if ( o_SubObject )
	{
		@o_SubObject OBJ_PosSet( @o_Bone OBJ_PosGet( ) )
	}
	
	// depending on which side of the system Kong is, start fall in the correct direction
	if ( mi_ReverseBendDirection )
	{
		@o_Bone OBJ_BankingSet( ( MATH_VecBlend( ( @o_Bone OBJ_BankingGet() ), ( OBJ_SightGet() * -1.0 ), ( 0.1 * mf_StartingFallSpeed * f_DT ) ) ) )
		
		if ( o_SubObject )
		{
			@o_SubObject OBJ_BankingSet( ( MATH_VecBlend( ( @o_Bone OBJ_BankingGet() ), ( OBJ_SightGet() * -1.0 ), ( 0.1 * mf_StartingFallSpeed * f_DT ) ) ) )
		}
	}
	else
	{
		@o_Bone OBJ_BankingSet( ( MATH_VecBlend( ( @o_Bone OBJ_BankingGet() ), OBJ_SightGet(), ( 0.1 * mf_StartingFallSpeed * f_DT ) ) ) )
		
		if ( o_SubObject )
		{
			@o_SubObject OBJ_BankingSet( ( MATH_VecBlend( ( @o_Bone OBJ_BankingGet() ), OBJ_SightGet(), ( 0.1 * mf_StartingFallSpeed * f_DT ) ) ) )
		}
	}
}

// re-orient the swing to be in the initial direction
@mo_Swing OBJ_SightSet( mv_InitialSwingSight )

f_AbsDistance = MATH_AbsFloat( MATH_VecDistance( mv_InitialSwingPosition, @mo_Swing OBJ_PosGet() ) )

// check for the bounds of the swing fall
if ( f_AbsDistance >= ( mf_MaxDistanceTraveledBySwing * 0.75 ) )	// for first run of swing, only swing 0.75 of total
{
	mi_IsAtMaxDistance = vrai
		
	AI_TrackCurChange( "KCG_Wait" )
}

// Kong is not on, wait for him to get back on.
if ( !@mo_Kong Proc_KK_Test_Mode( ETAT_Kong_swing_arch ) || ( @mo_Kong Proc_KK_HotSpotGet() != mo_Swing ) )
{
	AI_TrackCurChange( "KCG_Wait" )
}