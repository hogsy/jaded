#include "Lance_defs.var"

vector			tv_normal
vector			tv_impact_pos
vector			tv_temp
vector			tv_temp1
vector			tv_sight
vector			tv_real_sight
vector			tv_pos
vector			tv_posgrid

object 			to_obj
object 			to_obj2
object			to_target
object			to_gao

int					ti_plug
int					ti_canal
int					ti_snd
int					ti_forceplug
float					ti_paf
int					ti_what
int					ti_ok
int					ti_number
int					ti_capa

float				tf_temp
float				tf_dist
float				tf_range

messageid		tmid_paf
message		t_msg

//--------( Init )------------------------------------------
if( mi_State != Ci_bambou_state_launch )
{
	mi_State = Ci_bambou_state_launch
	
	// Position globale envoie
	if(mo_LockObj)
		mv_LockObjGlobal = @mo_LockObj MATH_VecLocalToGlobal(mv_LockObj) + @mo_LockObj OBJ_PosGet()
	
	// si le javelot vient d une PluieDeLances, il ne devient visible qu au moment ou il est lance
	if( OBJ_CapaTest(Capa_KJavelin_PluieDeLances) )
		OBJ_FlagInvisibleSet(faux)
		
	i_snd_lauch_done = faux
}


// snd javelin throw -------------------------------------
if( ! i_snd_lauch_done )
{
	if( ! mo_LockObj )
	{
		// si pas de target on différencie si c'est Ann ou un Native qui lance le javelot
		if( OBJ_CapaTest(Capa_KJavelin_NativeLaunch) )
		{
			// c'est un tir de Native : son en fonction de la distance à Kong
			if( @get_global i_Player_is_Kong )
				to_gao = o_kong
			else
				to_gao = o_joueur
			tf_dist = MATH_RandFloat(8.0, 12.0)
		}
		else
		{
			// jouer le son tout de suite si c Ann qui jète le javelot
			if( @get_global i_Player_is_Kong )
				to_gao = o_kong
			else
				to_gao = o_joueur
			tf_dist = 999.0
		}
	}
	else if( o_kong && mo_LockObj == o_kong )
	{
		// Kong
		to_gao = o_kong
		tf_dist = MATH_RandFloat(8.0, 12.0)
	}
	else
	{
		// ann ou autre
		to_gao = mo_LockObj
		tf_dist = MATH_RandFloat(4.0, 6.0)
	}
	// test snd ---------------
	if( OBJ_SqrDist(to_gao) < (tf_dist * tf_dist) )
	{
		i_snd_lauch_done = vrai
		SND_RequestPlay( SND_launch )
	}
}

ti_forceplug = faux
ti_plug = faux
o_plug_to = nobody
to_target = nobody

switch(mi_TypeLance)
{ 
case 0:	ti_what = Ci_weapon_ID_bambou break
case 1:	ti_what = Ci_weapon_ID_ossement break
//case 1:	ti_what = Ci_weapon_ID_bambou_moy break
//case 2:	ti_what = Ci_weapon_ID_bambou_petit break
}


//--------( Lancers de rayon sur les objects qui sont susceptibles d'avoir des obbox )--------------------
if( ! MATH_VecNullEpsilon(OBJ_PosGet() - v_last_pos) )
{
//	tv_temp1 = mf_ContactPointDistance* OBJ_SightGet()
//	tv_temp = v_last_pos + ( mf_ContactPointDistance * v_last_sight )
//	tv_temp1 += OBJ_PosGet() 

//	tv_temp1 = mf_ContactPointDistance* OBJ_SightGet() + v_last_pos
//	tv_temp = v_last_pos
	
	tv_temp1 = OBJ_PosGet() + (mf_ContactPointDistance * OBJ_SightGet())
	tv_temp = v_last_pos
	
	DBG_RenderVector( tv_temp, tv_temp1 - tv_temp, color_rouge) 
	
	if(mo_Sender && o_joueur && mo_Sender == o_joueur)
	{
		@mo_Sender OBJ_FlagsControlSet(OBJ_C_ControlFlag_RayInsensitive, 0)
		if( Lance_DoNotHitKong() )
			@o_kong OBJ_FlagsControlSet(OBJ_C_ControlFlag_RayInsensitive, 0)
	}
	
//	if (mo_Sender)
//		to_obj = @mo_Sender COL_RayObject_Vector(tv_temp, tv_temp1 - tv_temp, all, none, Ci_Filter_IdentityFlag, i_LRay_type)
//	else
		to_obj = COL_RayObject_Vector(tv_temp, tv_temp1 - tv_temp, all, none, Ci_Filter_IdentityFlag, i_LRay_type)
	
	if (to_obj && COL_RayObject_ActorGet() != mo_Sender) 
	{
		o_plug_to = to_obj
		tv_impact_pos = COL_RayObject_PosGet()
		to_obj = COL_RayObject_ActorGet()
		i_plug_canal = COL_RayObject_CanalGet()
		v_plug_normal = COL_RayObject_NormalGet()
		to_target = to_obj
		o_plug_to_master = to_obj

		// SET FIRE
//		DBG_TraceString("PLUG :feu a mettre :")
//		DBG_TraceObject(to_obj)
//		DBG_TraceEOL()
		if (mi_flamme && ! i_fire_deja)
		{
			i_fire_deja = vrai
//			DBG_TraceString("PLUG: feu mis")
//			DBG_TraceVector( OBJ_PosGet())
//			DBG_TraceEOL()
			if ( ! mo_Sender || ! @mo_Sender AI_IsModel(get_PNJ_KNative_path))
				LIBGFX_GridFire(OBJ_PosGet(), vrai)
		}
				
		EVENT_AddEventSound(C_EVENT_FILTER_Tir, OBJ_Me(), Cf_EVENT_Duree_1Trame, OBJ_PosGet(), 5.0)
		
		ti_snd = COL_RayObject_SoundGet()
		if (ti_snd)
			SND_RequestPlay( ti_snd )
		else
		{
			ti_snd = SND_plante_dirt
			ti_canal = COL_RayObject_CanalGet()
			if (ti_canal != -1)
			{
				ti_snd = SND_plante_flesh
				ti_forceplug = 1
			}
			SND_RequestPlay( ti_snd )
		}
		switch( ti_snd )
		{
			case COL_C_Snd_None :
			case COL_C_Snd_Dirt :
			case COL_C_Snd_Veget : 
			case COL_C_Snd_Wood : 
				i_GFX_impactcolor = 0xFF808080
				ti_plug = vrai
				break
			case COL_C_Snd_Flesh :
				//i_GFX_impactcolor = 0xFF
				i_GFX_impactcolor = 0x04050E30
				ti_plug = vrai
				break
			case COL_C_Snd_Stone	: 
			case COL_C_Snd_Steel	: 
				i_GFX_impactcolor = 0xFF808080
				Lance_GFX_Impact()
				break
			case COL_C_Snd_Water	:
				if (o_bidoche)
					@get_PNJ_Bidoche_path o_bidoche f_water_Z = tv_impact_pos.z
				if(mi_flamme)
					SND_RequestPlay(17)
				Lance_SetOnFire(faux)
				Lance_SetPoisonned(faux)
				to_target = nobody
				break
		}
	}
	tv_temp = OBJ_PosGet() - v_pos_de_lancement
	tf_dist = MATH_VecDotProduct(tv_temp,tv_temp)
//	tf_range = @"univ" Weapon_af_pointblankrange[ ti_what ]
//	if ( tf_dist < (tf_range * tf_range) ) 
//		ti_paf = @"univ" Weapon_af_Damage[ ti_what ][ 0 ]
//	else
//	{
//		tf_range = @"univ" Weapon_af_middlerange[ ti_what ]
//		if ( tf_dist < (tf_range * tf_range) ) 
//			ti_paf = @"univ" Weapon_af_Damage[ ti_what ][ 1 ]
//		else
//			ti_paf = @"univ" Weapon_af_Damage[ ti_what ][ 2 ]
//	}
	
	//////////////// KING KONG 2 ////////////////////
	
	if(mo_Sender && o_joueur && mo_Sender == o_joueur)
	{
		@mo_Sender OBJ_FlagsControlSet(0, OBJ_C_ControlFlag_RayInsensitive)
		if( Lance_DoNotHitKong() )
			@o_kong OBJ_FlagsControlSet(0, OBJ_C_ControlFlag_RayInsensitive)
	}
	
	tf_range = 15.0
	if ( tf_dist < (tf_range * tf_range) ) 
		ti_paf = 10.0
	else
		ti_paf = 5.0
	
	// Pas de paf => pas de plug	
	if( OBJ_CapaGet() & Capa_KJavelin_DoNotPaf )
		ti_plug = faux
	
	if (mi_flamme)
		ti_paf += 10
}

if (mo_Sender && to_target && @mo_Sender AI_IsModel(get_PNJ_KNative_path) && @to_target AI_IsModel(get_PNJ_KNative_path) )
{
	ti_plug = faux
	to_target = nobody
}

tv_real_sight = OBJ_SightGet()

//---------( plug ? )---------
if ( ti_plug && i_cpt_plug < PLUG_CASSE)
{
	if(mi_TypeLance == 0)
		i_cpt_plug++
	
	OBJ_PosSet( tv_impact_pos -  (OBJ_SightGet()*0.6) )
	
//JIMI_NOTE: to avoid the later DBG_Err
#ifndef _FINAL_
	if ( MATH_VecNullToler( tv_real_sight, 0.01 ) )
	{
		DBG_Error( "Null Vector in Javelin Sight.  Contact an Engineer." )
		tv_real_sight = cvector(1.0, 0.0, 0.0)
	}
#endif
	
	if ( o_plug_to_master != o_plug_to)
	{
		tv_temp = @o_plug_to OBJ_PosGet()
		tv_temp += @o_plug_to MATH_VecLocalToGlobal(@o_plug_to BV_OBBoxMinGet())
		tv_temp += @o_plug_to MATH_VecLocalToGlobal(@o_plug_to BV_OBBoxMaxGet() - @o_plug_to BV_OBBoxMinGet()) * 0.5

		tv_temp -= tv_impact_pos
		if ( MATH_AbsFloat(MATH_VecDotProduct(OBJ_SightGet(), @o_plug_to OBJ_BankingGet())) <= Cf_Cos60 )
			tv_temp -= MATH_VecDotProduct(tv_temp, @o_plug_to OBJ_BankingGet()) * @o_plug_to OBJ_BankingGet()
		
		OBJ_SightSet(tv_temp)
		OBJ_PosSet(tv_impact_pos)
	}

	v_plug_local = @o_plug_to MATH_VecGlobalToLocal(OBJ_PosGet() - @o_plug_to OBJ_PosGet())
	v_plug_sight = @o_plug_to MATH_VecGlobalToLocal(OBJ_SightGet())
	v_plug_banking = @o_plug_to MATH_VecGlobalToLocal(OBJ_BankingGet())
	
	DYN_SpeedSetVector( Cv_NullVector )
	DYN_GravitySet( Cv_NullVector )
	DYN_TractionSet( Cv_NullVector )
	DYN_FrictionVectorSet( Cv_NullVector )
	
	macro_del_callback_tir("Lance_ETAT_cb_Launched")
	
	if( o_joueur && to_target == o_joueur )
		f_plug_timer = 0.0
	else if ( o_kong && to_target == o_kong )
		f_plug_timer = MATH_RandFloat( 0.2, 0.7)
	else
		f_plug_timer = MATH_RandFloat( mf_MinPlugTime, mf_MaxPlugTime )
	
	if( Lance_Javelin_Can_Paf(o_plug_to_master, ti_canal) )
	{
		tmid_paf = EVENT_AddEventPafCanal( C_EVENT_FILTER_All, Lance_Javelin_PafTypeGet(), mo_Sender, Cf_EVENT_Duree_1Trame, to_target, ti_canal, ti_paf, tv_real_sight, OBJ_PosGet())
		EVENT_Gao2Set( tmid_paf, OBJ_Me() )
	}
	mi_DigwaszaiPaf = faux
	mi_ColCount = 0
	
	// send a message to master
	if ( @o_plug_to_master OBJ_FlagsIdentityTest( OBJ_C_IdentityFlag_Msg ) )
	{
		MSG_SetNull( t_msg )
		t_msg.msg_id = msg_id_projectile_plugto
		t_msg.msg_gao1 = OBJ_Me()
		@o_plug_to_master MSG_Send( t_msg )
	}
	
	AI_RunContext(CTX_Normal )
	macro_add_callback_after_cam("Lance_ETAT_cb_Plugged")
	Lance_GFX_Impact()
	AI_TrackCurStop()
	return
}	

//---------( tomber trop bas ? )---------
if ( MATH_AbsFloat( OBJ_PosGet().z - mf_ZInit) > 50)
{
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" etat launched, tombe trop bas = destroy\n")
	OBJ_Destroy()
}

//---------( choc )---------
if ( to_target )
{
	OBJ_CapaSet(none, Capa_KJavelin_PluieDeLances)
	
	// si capa3 est a vrai, le javelin ne doit pas faire de paf
	if (! (OBJ_CapaGet() & OBJ_Capa_3) )
	{
		// Humain : si capa 5, alors un humain capa 1 peut paffer un humain non capa 1, et vice & versa
		ti_ok = faux
		if( ! (OBJ_CapaGet() & OBJ_Capa_5) )
			ti_ok = vrai
		
		//JIMI_NOTE: to avoid the later DBG_Err
		#ifndef _FINAL_
		if ( MATH_VecNullToler( tv_real_sight, 0.01 ) )
		{
			tv_real_sight = OBJ_SightGet()
			
			if ( MATH_VecNullToler( tv_real_sight, 0.01 ) )
			{
				DBG_Error( "Null Vector in Javelin Sight.  Contact an Engineer.(2)" )
				tv_real_sight = cvector(1.0, 0.0, 0.0)
			}
		}
		#endif
		
		if( OBJ_CapaGet() & Capa_KJavelin_DoNotPaf )
			ti_ok = faux
		if ( ti_ok )
		{
//			if(i_cpt_plug < PLUG_CASSE)
//			{
				if( Lance_Javelin_Can_Paf(to_target, ti_canal) )
				{
					tmid_paf = EVENT_AddEventPafCanal( C_EVENT_FILTER_All, Lance_Javelin_PafTypeGet(), mo_Sender, Cf_EVENT_Duree_1Trame, to_target, ti_canal, ti_paf, tv_real_sight, OBJ_PosGet())
					EVENT_Gao2Set( tmid_paf, OBJ_Me() )
				}
//			}
			f_plug_timer = -1
		}
		OBJ_CapaSet(0,OBJ_Capa_3 | OBJ_Capa_5)
	}
	
	mi_ColCount = 0
	COL_ColSetActivationSet( all, none)
	OBJ_PosSet( v_last_pos )
	tv_temp = DYN_SpeedGetVector() * 0.1
	tv_normal = COL_RayObject_NormalGet()
	if (MATH_VecNull(tv_normal))
		tv_normal = -OBJ_SightGet()
	tv_temp -= (2 * MATH_VecDotProduct(tv_temp,tv_normal) / MATH_VecDotProduct(tv_normal,tv_normal)) * tv_normal
	DYN_SpeedSetVector( tv_temp )
	DYN_GravitySet( Cv_NormalGravity )
	macro_del_callback_tir("Lance_ETAT_cb_Launched")
	AI_TrackChange(2, "Lance_ETAT_Ground" )
	return
}

// ----( si enflammé et sender = jack alors détection buisson )----
if ( mi_flamme && (mo_Sender == AI_MainActorGet(C_ID_Joueur)) && GRID_Has(1))
{
	tv_temp = OBJ_PosGet() - v_last_pos
	if ( MATH_AbsFloat( tv_temp.x ) > MATH_AbsFloat( tv_temp.y ) )
		tf_temp = MATH_AbsFloat( tv_temp.x )
	else if (MATH_AbsFloat( tv_temp.y ))
		tf_temp = MATH_AbsFloat( tv_temp.y )
	else
		goto findecemerdier
	
	ti_number = tf_temp + 1
	tv_temp /= tf_temp
	tv_pos = v_last_pos
	while ( ti_number > 0 )
	{
		tv_posgrid = GRID_PosGet( tv_pos )
		if ( tv_posgrid != v_last_tested_grid_pos)
		{
			v_last_tested_grid_pos = tv_posgrid
			tv_posgrid.z = tv_pos.z
			
			ti_capa = GRID_CapaGet(tv_posgrid )
			if ( (ti_capa & tag_grid_terrain) == Ci_sol_herbe_ronce) 
			{
				GRID_CurrentSet(1)
				ti_capa = GRID_CapaGet( tv_posgrid ) 
				GRID_CurrentSet(0)
				if(((ti_capa & tag_grid_terrain) == Ci_Grid2_Inflammable) && !(ti_capa & 64) && !(ti_capa & 128))
				{
					tv_posgrid.z = tv_pos.z
					to_obj = COL_RayObject_Vector(tv_pos, -Cv_VerticalVector, all, OBJ_C_IdentityFlag_Dyna | OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, i_LRay_type)
					if ( to_obj )
					{
						OBJ_PosSet( tv_pos )
						DYN_SpeedSetVector(cvector(0, 0, 0) )			
					}
				}
			}
		}

		tv_pos += tv_temp
		ti_number--
	}
}
findecemerdier:


// Orientation -------------------------
v_last_pos = OBJ_PosGet()
v_last_sight = OBJ_SightGet()
v_last_speed = DYN_SpeedGetVector()
if ( ! MATH_VecNull( v_last_speed ) )
{
	if (OBJ_CapaTest(Capa_KJavelin_NativeLaunch))
	{
		tv_temp = OBJ_PosGet() + OBJ_SightGet()
		if (tv_temp.z < OBJ_PosGet().z)
			OBJ_CapaSet(OBJ_Capa_2, none)
	}
	if( (OBJ_CapaGet() & OBJ_Capa_2) && mo_LockObj)
	{
		to_obj = mo_LockObj
		if( OBJ_CapaTest(Capa_KJavelin_NativeLaunch) )		// K Native Javelin
		{
			to_obj2 = @mo_LockObj ANI_CanalObjectGet(Anim_Canal_Tete)
			if (to_obj2)
				to_obj = to_obj2
		}
		tv_temp = @to_obj MATH_VecLocalToGlobal(mv_LockObj)
		tv_temp += @to_obj OBJ_PosGet()
		tv_temp1 = mv_LockObjGlobal - OBJ_PosGet()
		tv_temp1.z = 0.0
		tv_sight = OBJ_SightGet()
		tv_sight.z = 0.0
		if(MATH_VecDotProduct(tv_temp1, tv_sight) > 0)
		{
			tf_temp = MATH_VecNorm(tv_temp - OBJ_PosGet())
			tv_temp -= OBJ_PosGet()
			MATH_VecSetNorm(tv_temp, MATH_VecNorm(v_last_speed))
			if ( o_kong && mo_LockObj == o_kong)
			{
				v_last_speed = MATH_VecBlend(v_last_speed, tv_temp, 0.8 * TIME_GetDt())
				DYN_SpeedSetVector(v_last_speed)
			}
			else
			{
				v_last_speed = MATH_VecBlend(v_last_speed, tv_temp, 100 * TIME_GetDt())
				v_last_speed = tv_temp
				DYN_SpeedSetVector(v_last_speed)
			}
		}
	}
	OBJ_SightSet( v_last_speed )
}

#ifndef _FINAL_
if( ti_dbg )
{
	tv_pos = VIEW_3dWorldTo2d(0, OBJ_PosGet())
	Str_DisplayTextOnce("cb Launched", tv_pos)
	if( mo_LockObj )
		Str_DisplayGaoOnce(mo_LockObj, tv_pos + cvector(0,0.05,0))
	if( OBJ_CapaTest(Capa_KJavelin_NativeLaunch) )
		Str_DisplayTextOnce("Native", tv_pos + cvector(0,0.1,0))
}
#endif


//Str_DisplayIntOnce(i_LRay_type, VIEW_3dWorldTo2d(0,OBJ_PosGet()))
