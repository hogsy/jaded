#include "Lance_defs.var"

//---------( init dyna )--------
DYN_On()
DYN_FlagsSet( DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_HorizontalGrounds, none)
DYN_FrictionVectorSet( mv_LaunchFriction )
DYN_GravitySet( mv_LaunchGravity )

DYN_SpeedSetVector( mv_LaunchSpeed )
if( ! mi_fall && ! MATH_VecNullToler(mv_LaunchSpeed, 0.01) )
{
	// lancé
	OBJ_SightSet( mv_LaunchSpeed )
	v_GFX_lastsight = mv_LaunchSpeed
}

v_last_speed = DYN_SpeedGetVector()

//DYN_LIB_Display_Trajectory(OBJ_PosGet(), DYN_SpeedGetVector(), DYN_GravityVectorGet(), DYN_FrictionVectorGet(), 0.2, 20, 0.0)

//--------( init collision ) --------
if ( mo_Sender )
	COL_UnCollidableAdd( mo_Sender )

//--------( init vars ) --------
mf_ZInit = OBJ_PosGet().z
v_last_pos = OBJ_PosGet()
v_last_sight = OBJ_SightGet()


if( mi_fall )
{
	// -----( lâché )-----
	f_rotate_fall = MATH_RandInt(-3, 3)
	COL_ColSetActivationSet( all, none)
	AI_TrackCurChange( "Lance_ETAT_Ground" )
	if(mi_flamme)
		f_fire_time = JAVELIN_FireTimeWhenFixed
}
else
{
	// -----( lancé )------
	macro_add_callback_tir("Lance_ETAT_cb_Launched")	
	mi_State = -1
	AI_TrackCurStop()
}

