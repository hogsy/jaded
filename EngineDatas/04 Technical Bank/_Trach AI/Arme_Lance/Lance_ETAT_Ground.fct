#include "Lance_defs.var"

vector 	n, z
vector	tv_speed
float		tf_speed
object	o_tmp

#define COLCOUNT_1	10
#define COLCOUNT_2	20


// TEST GRAB
i_pas_les_compagnons = vrai
AI_Execute("Lance_exec_Wait_Taken")
i_pas_les_compagnons = faux


if( o_rack_de_lances )
	return


//---------( tomber trop bas ? )---------
if ( MATH_AbsFloat( OBJ_PosGet().z - mf_ZInit) > 50 )
{
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" etat ground, tombe trop bas = destroy\n")
	OBJ_Destroy()
}

if( mi_fall && mi_TypeLance == 2 )
{
	OBJ_RotateGlobalZ(f_rotate_fall * TIME_GetDt())
	OBJ_PosSet(OBJ_PosGet() + (OBJ_SightGet() * f_rotate_fall * TIME_GetDt() * 0.5))
}

OBJ_BankingGeneralSet( OBJ_SightGet(), MATH_VecBlendRotate( OBJ_BankingGet(), Cv_VerticalVector, f_KK_horiz_blend * TIME_GetDt()))


//--------( detection de la flotte )--------
if (COL_CollideType(COL_C_Ground + COL_C_crossable))
{
	if ( COL_GMAT_FlagsGet(COL_C_Ground + COL_C_crossable) & Gmat_KK_Face_eau )
	{
		Lance_SetOnFire(faux)
		Lance_SetPoisonned(faux)
		mi_ColCount--
		if (mi_ColCount < 0 )
			mi_ColCount = 0
	}
}
//---------( compte le nombre de collision pour atteindre l'équilibre )---------
else if (COL_CollideType(COL_C_Ground ))
{
	// enflamme -> disparait à travers le sol
	if (mi_flamme && mi_ColCount == 0 && ! i_snd_impact)
	{
		if( ! i_fire_deja )
		{
			i_fire_deja = vrai
			LIBGFX_GridFire(OBJ_PosGet(), vrai)
			COL_ColSetActivationSet(none, all)
		}
	}
	
	if (mi_ColCount == 0 && !i_snd_impact)
	{
		i_snd_impact = vrai
		SND_RequestPlay( SND_rebond_dirt )
	}
	
	n = COL_NormalGet( COL_C_Ground )
	z = OBJ_BankingGet()
	z = z + n
	OBJ_BankingSet( z )
	mi_ColCount += 2
	
	if ( o_joueur && mo_Sender == o_joueur )
	{
		if( mi_ColCount >= 200 )
			COL_ColSetActivationSet(none, all)
	}
	else
	{
		if( mi_ColCount >= 20 )
			COL_ColSetActivationSet(none, all)
	}
}
else
{
	mi_ColCount--
	if (mi_ColCount < 0) mi_ColCount = 0
}

//i_pas_les_compagnons = vrai
//AI_Execute("Lance_exec_Wait_Taken")
//i_pas_les_compagnons = faux

//---------( amortissement )---------
tf_speed = 1
if (mi_ColCount < COLCOUNT_1)
	tf_speed = 1
else if (mi_ColCount < COLCOUNT_2)
{
	tf_speed = mi_ColCount - COLCOUNT_1
	tf_speed /= COLCOUNT_2 - COLCOUNT_1
	tf_speed = 1.0 - tf_speed
}
else
{
	//DYN_Off()
	DYN_SpeedSetVector( Cv_NullVector )
	DYN_GravitySet( Cv_NullVector )
	DYN_TractionSet( Cv_NullVector )
	DYN_FrictionVectorSet( Cv_NullVector )
	COL_UnCollidableReset()
}

//---------( déplacement )---------
tv_speed = DYN_SpeedGetVector()
tv_speed *= tf_speed
DYN_SpeedSetVector(tv_speed)


#ifndef _FINAL_
if( ti_dbg )
	Str_DisplayTextOnce("Ground", VIEW_3dWorldTo2d(0, OBJ_PosGet()))
#endif

