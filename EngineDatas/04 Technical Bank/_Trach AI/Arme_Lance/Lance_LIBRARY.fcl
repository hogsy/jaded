#include "Lance_defs.var"
Include_UltraProcedure_Header

procedure_local int Lance_Javelin_PafTypeGet()
{
	int		ti_type
	ti_type = C_PAF_KK_Javelin
	if( mi_DigwaszaiPaf )
		ti_type |= C_PAF_KK_Digwazai + C_PAF_KK_Micro
	if( mi_flamme )
		ti_type |= C_PAF_KK_Fire
	if( mi_poison )
		ti_type |= C_PAF_KK_Poison
	return ti_type
}


procedure_local int Lance_Javelin_Can_Paf(object to_actor, int ti_canal)
{
	// pour les KNatives (capa 10), ne paffer Ann / Kong que si c'est une wave qui peut la tuer (mo_LockObj != nobody)
	int		ti_paf
	int		ti_type
	ti_paf = faux
	DBG_TraceString("Frame ")
	DBG_TraceInt(@get_global i_frame_nbr)
	DBG_TraceString(" : ")
	DBG_TraceObject(OBJ_Me())
	if( ! OBJ_CapaTest(Capa_KJavelin_NativeLaunch) )
	{
		DBG_TraceString(" n'a pas la capa 10")
		ti_paf = vrai
	}
	else
	{
		DBG_TraceString(" a la capa 10 (Native) et avait locké ")
		DBG_TraceObject(mo_LockObj)
		if( mo_LockObj && mo_LockObj == to_actor)
			ti_paf = vrai
		else
			ti_paf = faux
	}
	if( ti_paf )
	{
		DBG_TraceString(" -> paffe ")
		DBG_TraceObject(to_actor)
		DBG_TraceString("(")
		ti_type = Lance_Javelin_PafTypeGet()
		if( ti_type & C_PAF_KK_Javelin )
			DBG_TraceString("C_PAF_KK_Javelin ")
		if( ti_type & C_PAF_KK_Micro)
			DBG_TraceString("+C_PAF_KK_Micro ")
		if( ti_type & C_PAF_KK_Digwazai )
			DBG_TraceString("+C_PAF_KK_Digwazai ")
		if( ti_type & C_PAF_KK_Fire )
			DBG_TraceString("+C_PAF_KK_Fire ")
		if( ti_type & C_PAF_KK_Poison )
			DBG_TraceString("+C_PAF_KK_Poison ")
		DBG_TraceString(") - canal n°")
		DBG_TraceInt(ti_canal)
	}
	else
	{
		DBG_TraceString(" -> ne paffe pas ")
		DBG_TraceObject(to_actor)
		DBG_TraceString(" ... :(")
	}
	DBG_TraceEOL()
	return ti_paf
}

procedure_local void Lance_GFX_Impact()
{
	int			ti_GFX_Impact

	// Etincelles
	ti_GFX_Impact = GFX_Add(9)
	GFX_FlagSet(ti_GFX_Impact , 0, 1)
	GFX_FlagSet(ti_GFX_Impact , 2, 1)
	GFX_MaterialSet(ti_GFX_Impact , get_SFX_light_and_smoke, 5)
	GFX_Setf(ti_GFX_Impact, 9000, Cf_PiBy2)									// angle d'ouverture
	GFX_Setf(ti_GFX_Impact, 9001, 1.0)											// vitesse initiale minimum
	GFX_Setf(ti_GFX_Impact, 9002, 3.0)											// vitesse initiale maximum
	GFX_Setf(ti_GFX_Impact, 9003, 0.95 )											// friction
	GFX_Setf(ti_GFX_Impact, 9004, 0.02)											// épaisseur
	GFX_Setf(ti_GFX_Impact, 9005, 0.2)											// durée de vie minimum
	GFX_Setf(ti_GFX_Impact, 9006, 0.4)											// durée de vie maximum
	GFX_Setf(ti_GFX_Impact, 9007, 4.0 )											// multiplicateur de longueur
	GFX_Setf(ti_GFX_Impact, 9008, 0.005 )										// generation périod
	GFX_Setf(ti_GFX_Impact, 9009, 0.2)											// durée de mort minimun
	GFX_Setf(ti_GFX_Impact, 9010, 0.4)											// durée de mort maximun
	GFX_Seti(ti_GFX_Impact, 9100, 5)												// Nombre
	GFX_Seti(ti_GFX_Impact, 9102, 0b11000)									// Flags (1 => agrandissement centré)
	GFX_Setv(ti_GFX_Impact, 9200, OBJ_PosGet() + (OBJ_SightGet() * 0.25))			// Origine des étincelles
	GFX_Setv(ti_GFX_Impact, 9201, -OBJ_SightGet())							// Direction
	GFX_Setv(ti_GFX_Impact, 9202, cvector(0.0, 0.0, -2.0) )					// gravity
	GFX_Seti(ti_GFX_Impact, 9101, i_GFX_impactcolor ) 		
}



procedure_ultra void Lance_LRay_Type_Set(int ti_type)
{
//	i_LRay_type = ti_type
}


procedure_local int Lance_DoNotHitKong()
{
	if( o_joueur && mo_Sender == o_joueur )
		if( @get_global i_Player_on_KK_Shoulder )
			if( ! @o_kong Proc_KK_Test_Mode(ETAT_Kong_finished) )
				return vrai
	return faux
}


//==================================================================
// WORLD JAVELIN STORAGE
//==================================================================
procedure_local int Lance_IsInWorld()
{
	int		ti_i
	for( ti_i = 0; ti_i < @get_global i_LanceNb; ti_i++)
	{
		if( @get_global ao_Lances[ti_i] == OBJ_Me() )
		{
			return vrai
		}
	}
	return faux
}

procedure_local void Lance_RemoveFromWorld()
{
	int		ti_i
	for(ti_i = 0; ti_i < @get_global i_LanceNb; ti_i++)
	{
		if( @get_global ao_Lances[ti_i] == OBJ_Me() )
		{
			@get_global ao_Lances[ti_i] = nobody
		}
	}
}

procedure_local void Lance_AddInWorld()
{
	int 		i, ti_nb, best, ti_etat
	object	o, mainactor
	float		dist, bestdist
	
	if( Lance_IsInWorld() )
		return

//	@get_global o_last_lance_jack = OBJ_Me()
	ti_nb = @get_global i_LanceNb
	if (ti_nb == Ci_bambou_maxinmap)
	{
		bestdist = 0
		best = 0
		for (i = 0; i < Ci_bambou_maxinmap; i++)
		{
			o = @get_global ao_Lances[ i ]
			if ( !o )
			{
				best = i
				break
			}
			
			ti_etat = @get_Arme_Lance_path o mi_State
		    if ( (ti_etat == Ci_bambou_state_launch) || (ti_etat == -1) )
		    		continue
			
			if( o_joueur )
				dist = @o OBJ_SqrDist(o_joueur)
			else
				dist = 0.0
			if (dist > bestdist)
			{
				best = i
				bestdist = dist
			}
		}
		
		o = @get_global ao_Lances[ best ]
		if ( o )
		{
//			@o Lance_SetFireOff()
//			@o macro_del_callback_after_cam("Lance_ETAT_cb_Plugged")
//			@o macro_del_callback_tir("Lance_ETAT_cb_Launched")
			@o OBJ_Destroy()
		}
		
		@get_global ao_Lances[ best ] = OBJ_Me()
	}
	else
	{
		ti_nb++
		@get_global i_LanceNb = ti_nb
		@get_global ao_Lances[ ti_nb - 1 ] = OBJ_Me()
	}
}
//==================================================================
// WORLD JAVELIN STORAGE
//==================================================================




//===============================================================
// FIRE & POISON
//===============================================================
procedure_ultra int Lance_IsOnFire()
{
	return mi_flamme
}
procedure_ultra void Lance_SetOnFire(int ti_on)
{
	if( ti_on )
	{
		mi_flamme = vrai
	}
	else
	{
		mi_flamme = faux
		if (i_GFX_Fire != -1)
		{
			GFX_Seti( i_GFX_Fire, 13106, 0)	
			i_GFX_Fire = -1
		}
		if( o_mfire )
			@o_mfire OBJ_Destroy()
		if(i_snd_flamme != -1)
		{
			SND_Stop(i_snd_flamme)
			i_snd_flamme = -1
		}
	}
	if( ti_on) 
		Lance_SetPoisonned(faux)
}
procedure_local void Lance_TestFireOff()
{
	if( OBJ_CapaTest(Capa_KJavelin_TurnFireOff) )
	{
		Lance_SetOnFire(faux)
	}
}
procedure_ultra int Lance_IsPoisonned()
{
	return mi_poison
}
procedure_ultra void Lance_SetPoisonned(int ti_on)
{
	mi_poison = ti_on
	if( ti_on )
		Lance_SetOnFire(faux)
}
//===============================================================
// FIRE & POISON
//===============================================================



procedure_ultra void Lance_SetGrabbed(object to_grab_actor)
{
	i_Spawned_Grabbed = vrai
	o_Spawned_Grabbed_Actor = to_grab_actor
}

