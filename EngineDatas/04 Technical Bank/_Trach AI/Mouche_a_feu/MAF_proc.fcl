#include "MAF_Defines.var"


//procedure int EVENT_Info_StalkGet(messageid EVT_ID)
//{
//	return(MSG_GlobalGetInt( EVT_ID, INT4))
//}



//procedure int AddMouche( )
//{
//	return 0
//}

procedure void ChooseRandomSpeedVector( byref vector v_spdVec, float f_limitX, float f_limitY, float f_limitZ )
{
	v_spdVec.x = MATH_RandFloat(0.2,f_limitX)
	v_spdVec.y = MATH_RandFloat(0.2,f_limitY)
	v_spdVec.z = MATH_RandFloat(0.2,f_limitZ)
	
	if (MATH_RandInt(0,2) == 1)
		v_spdVec.x *= -1
	if (MATH_RandInt(0,2) == 1)
		v_spdVec.y *= -1
	if (MATH_RandInt(0,2) == 1)
		v_spdVec.z *= -1
}

procedure void ComputeOrbitPos
( 
	float f_timelinePos,	// a total goes from 0 to 1
	float f_radius, 
	float f_z,
	byref vector v_result
)
{
	float tf_curAngle
	float tf_curRadius
	float tf_curZ
	
	tf_curAngle = f_timelinePos * Cf_2Pi
	tf_curRadius = f_radius
	tf_curZ = f_z

	v_result.x = tf_curRadius * MATH_Cos(tf_curAngle)
	v_result.y = tf_curRadius * MATH_Sin(tf_curAngle)
	v_result.z = tf_curZ
	
}

// when poping a mouche around target, we need a timeline value that is outside it's vision
procedure void FindOrbitTimeLineNotVisible( vector v_sight, byref float f_timelineRes )
{
	if (v_sight.x >= 0)
	{
		if (v_sight.y >= 0)
		{
			// quad 1
			f_timelineRes = 0.625	// bottom left
		}
		else
		{
			// quad 4
			f_timelineRes = 0.375	// top left
		}
	}
	else
	{
		if (v_sight.y >= 0)
		{
			// quad 2
			f_timelineRes = 0.875	// bottom right
		}
		else
		{
			// quad 3
			f_timelineRes = 0.125	// top right
		}
	}
}

procedure void ComputeOrbitVector
(
	float f_timelinePos,
	vector v_direction,
	float f_radius,
	byref vector v_result
)
{
	float tf_curAngle
	float tf_curRadius
	float tf_curZ
	vector tv_vecToRotate
	
	tf_curAngle = f_timelinePos * Cf_2Pi
	tf_curRadius = f_radius
	
	tv_vecToRotate.x = -v_direction.y
	tv_vecToRotate.y = v_direction.x
	tv_vecToRotate.z = -v_direction.z
	tv_vecToRotate *= tf_curRadius
	
	v_result = MATH_VecRotate(tv_vecToRotate,v_direction,tf_curAngle)
	v_result.z = 0
//	v_result = cvector(0,0,0)
}

procedure int IsMoucheActive(object to_mouche)
{
#ifdef MAF_DUPLICATE_AT_INIT	
	if ( to_mouche && (@to_mouche OBJ_FlagsStatusGet() & OBJ_C_StatusFlag_Visible) )
		return 1
#endif
#ifndef MAF_DUPLICATE_AT_INIT
	if (to_mouche)
		return 1
#endif
	return 0
}
