//==========================================================================
// Mouches a feu
//
// Les insectes mouche a feu: ils agissent dans une zone, leur generatrice est indestructible
// ils deviennent agressives un temps annoncé (nbr de créature devant la cam). Ils piquent-> vision
// floue... plein de picures = blessure sang.
//
// La condition d'énervement est allumée/éteinte par le o_exciteTrigger. Ce trigger est testé a chaque
// trame. Par contre les mouches deviennent enervées/calmes qu'apres un certain temps random
// configurable.
//
// Les mouches sortent du generator a la position generator+offset. Ceci permet de reutiliser un objet
// existant (morceau de viande, buche, trou dans la terre, etc.) comme generator et de placer le point d'ou les mouches
// sortent de facon précise (avec le offset).
//
//=======================================================
// Pour le son:
//
// (voir MAF_Defines)
// MAF_SND_HOME_BUZZ = buzz des mouches autour de leur nid
// MAF_SND_TGT_HOVER_BUZZ  = buzz de mouche qui passe autour de leur target
//
// INSERTS:
//
// Variable 0 : la distance du nid
// Variable 1 : l'énervement des mouches
//=======================================================
//
// Donc à setter:
//
// 1- o_generateur
// 2- v_generateurOffset (au besoin)
// 3- o_moucheModel (le gao utilisé pour cloner des mouches)
// 4- Le excite trigger (pour nrv les mouches!)
// 5- (optionnel) o_currentTarget (par défaut c'est le resultat de get_camera)
// 6- (optionnel) o_targetToPaf (par défaut c'est le main actor 0 : jack )
//
//==========================================================================

#include "MAF_Defines.var"


// Define at least one function in a track
// function track0 = "name"
// function track1 = "name"
function track2 = "MAF_Init"
// function track3 = "name"
// function track4 = "name"

//============================================
separator "General"
object	o_generateur								// the gao where mouches come from
vector	v_generateurOffset = cvector(0,0,0)	// mouches come out at this offset from the generator gao
private vector	v_generateurPos					// o_generateur.pos + v_generateurOffset
private vector	v_generateurToTgt				// vector from generatorPos to target
private float		f_generateurToTgtDst
object	o_homeBV									// bounding volume where mouches hover when home (calm or excited)
int			i_nbMouchesStart	= 10				// number of flies at start (non agressive) flying around source
int 		i_nbMouchesMax	 = MAF_Ci_MaxNbMouches	// number of mouches total that can be reached when camping forever
object	o_moucheModel	// the gao that is used to clone new mouches (the mother of all mouches)
trigger	o_exciteTrigger	// trigger checked at each frame to know if mouches should be excited or not

object 	o_currentTarget = nobody			// target they are attacking now (if left at nobody, the camera is taken)
object	o_targetToPaf = nobody			// if left at nobody, AI_MainActorGet(0) is used

//============================================
separator "Attitude"
float		f_timeBeforeAggressive = 5.0				// when calm, time before flies become aggressive after beeing triggered
float		f_timeBeforeAggressiveVariation = 1.0	// variation of Time Before Aggressive
private float f_curTimeBeforeAggressive = 0.0

float		f_timeBeforeCalm	 = 1.0					// when aggressive, time before flies become calm
float		f_timeBeforeCalmVariation = 0.5			// variation of Time Before Calm
private float f_curTimeBeforeCalm = 0.0

float		f_timeForStrikeDizzy = 1.0			// after this amount of time strikes incur dizziness
float		f_timeForStrikeWounds = 3.0			// after this amount of time strikes incur blood wounds
float		f_timeBetweenStrikes = 0.7   		// mouches will wait this amount of time before hitting again
float		f_variationBetweenStrikes = 0.3

private float f_aggressivityMeter					// goes between 0.0 and 1.0 = totally aggressive

//============================================
separator "Mouche movement"
float		f_moucheTopSpeed = 20.0		// in meters per second, this controls the mouches traveling btw home and the target
float		f_moucheOrbitSpdMin = 0.5		// minimum number of orbits per second flies make when home
float		f_moucheOrbitSpdMax = 1.0		// maximum number of orbits per second flies make when home
float		f_orbitRadiusMin = 0.5				// minimum hovering radius used by mouches when home
float		f_orbitRadiusMax = 2.0				// maximum hovering radius used by mouches when home
float		f_orbitZmin = 0.0						// minimum hovering z distance from the center
float		f_orbitZmax = 2.0						// maximum hovering z distance from the center
float		f_orbitTgtZmin = -0.7					// minimum hovering z distance from the center when around target
float		f_orbitTgtZmax = 0.7					// maximum hovering z distance from the center when around target
float		f_orbitRadTgtMin = 1.5				// minimum hovering radius used by mouches when around target
float		f_orbitRadTgtMax = 2.0				// maximum hovering radius used by mouches when around target



//============================================
separator "Gestion Etats"

// ETAT
private int				i_etat_courant				= enum ( "calm"0  "aggressive"1"pissed"2 )
private int				i_dernier_etat				= -1
private int				i_sort_etat
private int				i_flag_reinit_etat

private float				f_time_start_etat

private function		fct_last_etat 

// private globals



//=======================================================
// The mouches

private int				i_lastAddedMoucheIdx = -1	// idx of the last added mouche
private int				i_nbMouches = 0
private int				i_curMouche	// used as a function parameter to process a specific mouche
private int				i_curMoucheState	// used as a function parameter (see AddMouche)
private object			ao_moucheList[MAF_Ci_MaxNbMouches]	// all the mouche objects
private int				ai_moucheState[MAF_Ci_MaxNbMouches]	// see MAF_MoucheState_xxx
private vector			av_moucheSpd[MAF_Ci_MaxNbMouches]	// speed vector of the mouche
private vector			av_moucheOldPos[MAF_Ci_MaxNbMouches]	// used for sight orienteering
// orbit values
private vector			av_moucheOrbitCenter[MAF_Ci_MaxNbMouches]	// usually goes on a straight line
private float				af_moucheOrbitRadius[MAF_Ci_MaxNbMouches]	// current radius (may varry in time)
private float				af_moucheOrbitRadiusDir[MAF_Ci_MaxNbMouches]	// affects the current radius by this amount per second
private float				af_moucheOrbitZ[MAF_Ci_MaxNbMouches]		// current orbits z value
private float				af_moucheOrbitZDir[MAF_Ci_MaxNbMouches]	// affects orbit's z value by this amount per seocnd
private float				af_moucheOrbitTimeline[MAF_Ci_MaxNbMouches]	// stays within [0,1] 1=full circle (2 pi)
private float				af_moucheOrbitSpeed[MAF_Ci_MaxNbMouches]		// nb orbits per second
private int				ai_moucheOrbitWay[MAF_Ci_MaxNbMouches]	// 0 means timeline = 0..1     1 means timeline = 1..0
private float				af_moucheBirth[MAF_Ci_MaxNbMouches]	// the time this mouche was born

// when it is time to sting, those are used
private int				i_nbMouchesThatCanHit			// how many mouches are hovering around the player
private float				f_timeSinceMoucheCanHit	
private float				f_timeOfNextMoucheHit
private float				f_timeUntilNextMoucheAdd = 0.0
private float				f_timeOfLastDelMouche = 0.0
private float				f_timeUntilNextTravelingMouche = 0.0

//=======================================
// Sound
private int				i_homeBuzzInstance = -1
//private int				i_homeBuzzPlaying = 0
private int				i_tgtHoverBuzzInstance = -1
//private int				i_tgtHoverBuzzPlaying = 0
private int				i_moucheWithSpeaker = -1		// the index of the mouche hovering around target generating the wouz sound
