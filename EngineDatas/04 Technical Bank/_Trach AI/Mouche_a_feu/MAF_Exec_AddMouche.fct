//==========================================================
// creates a new mouche if the limit wasn't reached
//
//==========================================================

#include "MAF_Defines.var"

int ti_i

if (i_nbMouches == i_nbMouchesMax)
	return

// find the next available slot
i_lastAddedMoucheIdx = -1
for (ti_i = 0; ti_i < i_nbMouchesMax; ti_i++)
{
	if (!IsMoucheActive(ao_moucheList[ti_i]))
	{
		i_lastAddedMoucheIdx = ti_i
		break
	}
}

if (i_lastAddedMoucheIdx == -1)
{
	DBG_TraceString("Trying to add a mouche when there are no more slots available")
	return
}

// determine where the mouche should be put
// just inside a random sphere

ai_moucheState[i_lastAddedMoucheIdx] = i_curMoucheState
af_moucheBirth[i_lastAddedMoucheIdx] = TIME_Get()
#ifndef MAF_DUPLICATE_AT_INIT
ao_moucheList[i_lastAddedMoucheIdx] = @o_moucheModel OBJ_Duplicate(cvector(0,0,0))
OBJ_RegisterKill(ao_moucheList[i_lastAddedMoucheIdx],&ao_moucheList[i_lastAddedMoucheIdx])
#endif
@ao_moucheList[i_lastAddedMoucheIdx] OBJ_FlagInvisibleSet(faux)

i_curMouche = i_lastAddedMoucheIdx
AI_Execute("MAF_Exec_SpawnMouche")	// puts the mouche 

i_nbMouches++
