procedure_local void Ragdoll_Renormalisation(int ti_first_index, int ti_last_index, int ti_iteration_nb)
{
	int			ti_i
	int			ti_k
	int			ti_link_nb

	float		tf_norm
	float		tf_dot_product
	float		tf_tolerance
	float		tf_Z_offset
	
	vector	tv_renormalisation[50]
	vector	tv_temp	
	vector	tv_col_pos
	vector	tv_col_normal

	tf_tolerance = 0.0 // 0.04 * f_size_coef

	// LES POINTS ONT BOUGE
	for (ti_k = 0; ti_k < ti_iteration_nb; ti_k++)
	{
		for (ti_i = ti_first_index; ti_i <= ti_last_index; ti_i++)
		{
			tv_renormalisation[ti_i] = Cv_NullVector

			ti_link_nb = 0
			while(ti_link_nb < 5 && ai_modules_neighbour[ti_i][ti_link_nb] != -1)
			{
				tv_temp = av_modules_last_pos[ai_modules_neighbour[ti_i][ti_link_nb]]
				tv_temp -= av_modules_last_pos[ti_i]

				tf_norm = MATH_VecDotProduct(tv_temp, tv_temp)
				if (tf_norm)
				{
					tf_norm = MATH_FloatSqrt(tf_norm)
					tv_temp /= tf_norm
					
					tf_norm -= af_modules_length[ti_i][ti_link_nb]
						
					if (MATH_AbsFloat(tf_norm) < tf_tolerance)	
						tv_temp = Cv_NullVector
					else
						tv_temp  *= tf_norm
				}
				else
				{
					tv_temp = @ao_modules[ti_i] OBJ_BankingGet()
					tv_temp *= af_modules_length[ti_i][ti_link_nb]
				}
	
				tv_renormalisation[ti_i] += tv_temp * 0.5
				
				ti_link_nb++
			}
			
			tv_renormalisation[ti_i] -= MATH_FloatMin(MATH_VecDotProduct(tv_renormalisation[ti_i], av_bone_col_normal[ti_i]), 0.0) * av_bone_col_normal[ti_i]
		}
		
		for (ti_i = ti_first_index; ti_i <= ti_last_index; ti_i++)
			av_modules_last_pos[ti_i] += tv_renormalisation[ti_i]
	}
	
	return
}


procedure_local void Ragdoll_Compute_Module_Speed()
{
	int				ti_i	

	float			tf_friction
	float			tf_ground_friction
	float			tf_dt
	float			tf_exp
	float			tf_ground_exp

	vector		tv_temp
	
	tf_dt = TIME_GetDt()

	tf_friction = 1.0
	tf_exp = MATH_Exp(-tf_dt * tf_friction)

	tf_ground_friction = 6.0
	tf_ground_exp = MATH_Exp(-tf_dt * tf_ground_friction)

	for (ti_i = 0; ti_i < i_modules_nb; ti_i++)
	{
		DBG_RenderVector(av_modules_last_pos[ti_i], av_modules_forces[ti_i], color_cyan)	
	
		tv_temp = av_modules_forces[ti_i]
		
		if (af_bone_ground_col_timer[ti_i] < 0.1)
		{
			tv_temp /= tf_ground_friction

			av_modules_speed[ti_i] = tv_temp - ( (tv_temp - av_modules_speed[ti_i]) * tf_ground_exp )

//			av_modules_speed[ti_i].x = tv_temp.x - ( (tv_temp.x - av_modules_speed[ti_i].x) * tf_ground_exp )
//			av_modules_speed[ti_i].y = tv_temp.y - ( (tv_temp.y - av_modules_speed[ti_i].y) * tf_ground_exp )
//			av_modules_speed[ti_i].z += av_modules_forces[ti_i].z * tf_dt
		}
		else
		{
			tv_temp /= tf_friction
			
			av_modules_speed[ti_i] = tv_temp - ( (tv_temp - av_modules_speed[ti_i]) * tf_exp )
	
//			av_modules_speed[ti_i].x = tv_temp.x - ( (tv_temp.x - av_modules_speed[ti_i].x) * tf_exp )
//			av_modules_speed[ti_i].y = tv_temp.y - ( (tv_temp.y - av_modules_speed[ti_i].y) * tf_exp )
//			av_modules_speed[ti_i].z += av_modules_forces[ti_i].z * tf_dt
		}
	}
	
	return
}

//procedure_local void Ragdoll_Do_Spring()
//{
//	int			ti_i
//
//	float		tf_norm
//	float		tf_dt
//	float		tf_attenuation
//	float		tf_spring
//	float		tf_friction
//	float		tf_exp
//
//	vector	tv_force
//	vector	tv_delta_pos
//	vector	tv_delta_speed
//	vector	tv_temp
//	
//	tf_dt = TIME_GetDt()
//
//	for (ti_i = 0; ti_i < i_modules_nb; ti_i++)
//	{
//		av_modules_forces[ti_i] = Cv_NullVector
//
//		if (ti_i)
//		{
//			tv_delta_pos = @ao_modules[ti_i] OBJ_PosGet()
//			tv_delta_pos -= @ao_modules[ti_i - 1] OBJ_PosGet()
//		
//			tv_delta_speed = av_modules_speed[ti_i]
//			tv_delta_speed -= av_modules_speed[ti_i - 1]
//			
//			tv_force = tv_delta_pos
//			tf_norm = MATH_VecDotProduct(tv_force, tv_force)
//			if (tf_norm)
//			{
//				tf_norm = MATH_FloatSqrt(tf_norm)
//				tv_force /= tf_norm
//
//				tf_attenuation = (MATH_VecDotProduct(tv_delta_speed, tv_delta_pos) / tf_norm) * f_damping_coef
//			}
//			else
//			{
//				tv_force = @ao_modules[ti_i] OBJ_SightGet()
//				
//				tf_attenuation = 0.0
//			}
//
//			tf_spring = (tf_norm - dist_between_module) * f_spring_coef
//
//			tv_force *= tf_attenuation - tf_spring
//
//			av_modules_forces[ti_i] += tv_force
//			av_modules_forces[ti_i - 1] -= tv_force
//		}
//	}
//
//	tf_friction = 6.0
//	tf_exp = MATH_Exp(-tf_dt * tf_friction)
//
//	for (ti_i = 0; ti_i < i_modules_nb; ti_i++)
//	{
//		av_modules_forces[ti_i] -= MATH_FloatMin(MATH_VecDotProduct(av_modules_forces[ti_i], av_bone_col_normal[ti_i]), 0.0) * av_bone_col_normal[ti_i]
//		DBG_RenderVector(@ao_modules[ti_i] OBJ_PosGet(), av_modules_forces[ti_i], color_cyan)
//
//		tv_temp = av_modules_forces[ti_i]
//		tv_temp /= tf_friction
//
//		av_modules_speed[ti_i] = tv_temp - ( (tv_temp - av_modules_speed[ti_i]) * tf_exp )
//		@ao_modules[ti_i] OBJ_PosSet( @ao_modules[ti_i] OBJ_PosGet() + (av_modules_speed[ti_i] * tf_dt) )
//	}
//}

procedure_local void Ragdoll_Rag_Doll(int ti_first_index)
{
	int			ti_i
	int			ti_k
	int			ti_iterations
	int			ti_flag_last_bone_collide
	int			ti_bone_index	
	int			tai_bone_collision[50]

	float		tf_norm
	float		tf_Z_offset
	float		tf_dot_product
	float		tf_dt
	float		tf_inv_dt
	float		tf_sqr_n2_dist
	float		tf_sqr_n3_dist
	float		tf_sqr_n5_dist
	float		tf_attenuation
	float		tf_spring

	vector	tav_last_pos[50]
	vector	tv_temp
	vector	tv_col_pos
	vector	tv_col_normal
	vector	tv_force
	vector	tv_dest_banking
	vector	tv_delta_pos
	vector	tv_delta_speed
	vector	tv_A
	vector	tv_B
	vector	tv_prec
	vector	tv_next
	
	if (ti_first_index == i_modules_nb - 1)
		return

	tf_sqr_n2_dist = f_n2_dist * f_n2_dist 
	tf_sqr_n3_dist = f_n3_dist * f_n3_dist 
	tf_sqr_n5_dist = f_n5_dist * f_n5_dist

	tf_Z_offset = 0.25

	tf_dt = TIME_GetDt()
	tf_inv_dt = 1.0 / tf_dt

	for (ti_i = 0; ti_i < i_modules_nb; ti_i++)
	{
		ti_k = 0
		while (ti_k < 5 && ai_modules_neighbour[ti_i][ti_k] != -1)
		{
			DBG_RenderVector(av_modules_last_pos[ti_i], av_modules_last_pos[ai_modules_neighbour[ti_i][ti_k]] - av_modules_last_pos[ti_i], color_rouge)
			ti_k++
		}
	}

	// DYNAMIQUE DES MODULES
	for (ti_i = ti_first_index; ti_i < i_modules_nb; ti_i++)
	{
//		if (ti_i == i_snaped_bone_index)
//			continue

		tav_last_pos[ti_i] = av_modules_last_pos[ti_i]

		// GRAVITY
		av_modules_forces[ti_i] = cvector(0.0, 0.0, f_gravity)

		// PAFs
		if (i_flag_paf)
		{
			if (ti_i == i_modules_pafed_index)
			{
				av_modules_speed[ti_i].x = v_module_paf_dir.x
				av_modules_speed[ti_i].y = v_module_paf_dir.y

				if (af_bone_ground_col_timer[ti_i] < 0.1 || av_modules_speed[ti_i].z < 0.0)
					av_modules_speed[ti_i].z = MATH_FloatMax(v_module_paf_dir.z, 4.0)
				else
					av_modules_speed[ti_i].z = v_module_paf_dir.z
					
				af_bone_ground_col_timer[ti_i] = 1000.0
			}
			else
			{
				av_modules_speed[ti_i].x += v_module_paf_dir.x * 0.1
				av_modules_speed[ti_i].y += v_module_paf_dir.y * 0.1

				if (af_bone_ground_col_timer[ti_i] < 0.1 || av_modules_speed[ti_i].z < 0.0)
					av_modules_speed[ti_i].z = MATH_FloatMax(v_module_paf_dir.z * 0.1, MATH_RandFloat(1.0, 2.0))
				else
					av_modules_speed[ti_i].z += v_module_paf_dir.z * 0.1

				af_bone_ground_col_timer[ti_i] = 1000.0
			}

			av_modules_speed[ti_i] -= MATH_FloatMin(MATH_VecDotProduct(av_modules_speed[ti_i], av_bone_col_normal[ti_i]), 0.0) * av_bone_col_normal[ti_i]
		}
		else
		{
//			// SPRING
//			if (0)
//			{
//				if (ti_i)
//				{
//					tv_delta_pos = tav_last_pos[ti_i]
//					tv_delta_pos -= tav_last_pos[ti_i - 1]
//				
//					tv_delta_speed = av_modules_speed[ti_i]
//					tv_delta_speed -= av_modules_speed[ti_i - 1]
//					
//					tv_force = tv_delta_pos
//					tf_norm = MATH_VecDotProduct(tv_force, tv_force)
//					if (tf_norm)
//					{
//						tf_norm = MATH_FloatSqrt(tf_norm)
//						tv_force /= tf_norm
//	
//						tf_attenuation = (MATH_VecDotProduct(tv_delta_speed, tv_delta_pos) / tf_norm) * f_damping_coef
//					}
//					else
//					{
//						tv_force = @ao_modules[ti_i] OBJ_SightGet()
//						
//						tf_attenuation = 0.0
//					}
//	
//					tf_spring = (tf_norm - dist_between_module) * f_spring_coef
//	
//					tv_force *= tf_attenuation - tf_spring
//	
//	//				DBG_RenderVector(tav_last_pos[ti_i], tv_force, color_cyan)
//	//				DBG_RenderVector(tav_last_pos[ti_i - 1], -tv_force, color_cyan)
//				
//					av_modules_forces[ti_i] += tv_force
//					av_modules_forces[ti_i - 1] -= tv_force
//				}
//			}
		}
	}

	if (1)
	{
		// TENSION
		tv_next = av_modules_last_pos[1]
		tv_next  -= av_modules_last_pos[0]
		MATH_VecSetNormalize(tv_next)
	
		for (ti_i = 1; ti_i < i_modules_nb - 1; ti_i++)
		{
			tv_prec = -tv_next

			tv_next = av_modules_last_pos[ti_i + 1]
			tv_next -= av_modules_last_pos[ti_i]
			MATH_VecSetNormalize(tv_next)

			switch(ti_i)
			{
				case 1 :
				case 2 :
				case 3 :
				case 6 :
				case 9 :
				case 12 :
				case 15 :

					tf_dot_product = 1.0 + MATH_VecDotProduct(tv_prec, tv_next)	
					tf_dot_product *= 0.5
		//			tf_dot_product *= tf_dot_product
								
					tv_temp = MATH_VecCrossProduct(tv_prec, tv_next)
					if ( ! MATH_VecDotProduct(tv_temp, tv_temp) )
						tv_temp = @ao_modules[ti_i] OBJ_HorizonGet()
					
					tv_A = MATH_VecCrossProduct(tv_prec, tv_temp)
					MATH_VecSetNormalize(tv_A)
		
					tv_B = MATH_VecCrossProduct(tv_temp, tv_next)
					MATH_VecSetNormalize(tv_B)
					
					tv_A *= tf_dot_product * 60.0
					tv_B *= tf_dot_product * 60.0
					
					av_modules_forces[ti_i - 1] += tv_A
					av_modules_forces[ti_i] -= tv_A + tv_B
					av_modules_forces[ti_i + 1] += tv_B
					
					break
			}
		}
	}

	// CALCUL DE LA DYNAMIQUE
	Ragdoll_Compute_Module_Speed()

	// DEPLACEMENT
	for (ti_i = ti_first_index; ti_i < i_modules_nb; ti_i++)
	{
		af_bone_ground_col_timer[ti_i] += TIME_GetDt()
		av_modules_last_pos[ti_i] += av_modules_speed[ti_i] * tf_dt
	}

//	for (ti_i = 0; ti_i < i_modules_nb; ti_i++)
//	{
//		ti_k = 0
//		while (ti_k < 5 && ai_modules_neighbour[ti_i][ti_k] != -1)
//		{
//			DBG_RenderVector(av_modules_last_pos[ti_i], av_modules_last_pos[ai_modules_neighbour[ti_i][ti_k]] - av_modules_last_pos[ti_i], color_vert)
//			ti_k++
//		}
//	}

//	Ragdoll_Do_Spring()

	// COLLISIONS
	if (1)
	{
		for (ti_i = ti_first_index; ti_i < i_modules_nb; ti_i++)
		{
			av_bone_col_normal[ti_i] = Cv_NullVector
			tai_bone_collision[ti_i] = faux
		
			tv_temp = av_modules_last_pos[ti_i]
			tv_temp -= tav_last_pos[ti_i]
//				tv_temp -= av_modules_last_pos[ti_i]
			tf_norm = MATH_VecNorm(tv_temp)

			if (tf_norm)
			{
				tv_temp /= tf_norm
				COL_SpecificCrossableSet(COL_CrossableGet() - Gmat_RM_Face_de_mort)
				if (COL_RayObject_Dist(tav_last_pos[ti_i], tv_temp, tf_norm + tf_Z_offset + 0.05, all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable | COL_C_Ray_use_SpecificCrossableSet))
				{
					if (COL_GMAT_FlagsGet(COL_C_Ray) & Gmat_RM_Face_de_mort)
						OBJ_Destroy()

					ti_flag_last_bone_collide = vrai
					tai_bone_collision[ti_i] = vrai

					tv_col_pos = COL_RayObject_PosGet()
					tv_col_normal = COL_RayObject_NormalGet()
					
					av_modules_speed[ti_i]	-= MATH_FloatMin(MATH_VecDotProduct(av_modules_speed[ti_i], tv_col_normal), 0.0) * tv_col_normal
				
					if (tv_col_normal.z > Cf_Cos45)
					{
						af_bone_ground_col_timer[ti_i] = 0.0	

						tv_col_normal = Cv_VerticalVector
						av_modules_speed[ti_i].z = 0.0
					}
		
					av_bone_col_normal[ti_i] = tv_col_normal

					tf_dot_product = MATH_VecDotProduct(tv_temp, -tv_col_normal)
					if (tf_dot_product > 0.3)
						tf_dot_product = -tf_Z_offset / tf_dot_product
					else
						tf_dot_product = 1000.0
						
					if (tf_dot_product < tf_norm + tf_Z_offset)
					{
						tv_temp *= tf_dot_product
						tv_temp += tv_col_pos
					
						av_modules_last_pos[ti_i] = tv_temp
					}
					else
					{
						tv_temp = tv_col_pos
						tv_temp += tv_col_normal * tf_Z_offset
						
						av_modules_last_pos[ti_i] = tv_temp
					}
				}
				else
				{
					ti_flag_last_bone_collide = faux
				}
			}
		}
	}

//	for (ti_i = ti_first_index; ti_i < i_modules_nb; ti_i++)
//		av_modules_last_pos[ti_i] = @ao_modules[ti_i] OBJ_PosGet()

	// RENORMALISATION
	Ragdoll_Renormalisation(ti_first_index, i_modules_nb - 1, 10)

	for (ti_i = 0; ti_i < i_modules_nb; ti_i++)
	{
		ti_k = 0
		while (ti_k < 5 && ai_modules_neighbour[ti_i][ti_k] != -1)
		{
			DBG_RenderVector(av_modules_last_pos[ti_i], av_modules_last_pos[ai_modules_neighbour[ti_i][ti_k]] - av_modules_last_pos[ti_i], color_bleu)
			ti_k++
		}
	}

	// CALCUL DES SPEED ET DES ORIENTATIONS

	for (ti_i = ti_first_index; ti_i < i_modules_nb; ti_i++)
	{
		tv_temp = av_modules_last_pos[ti_i] - tav_last_pos[ti_i]
		tv_temp *= tf_inv_dt
		tv_temp -= MATH_VecDotProduct(tv_temp, av_bone_col_normal[ti_i]) * av_bone_col_normal[ti_i]
			
		av_modules_speed[ti_i] = tv_temp
	}

	@ao_modules[0] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[0] MATH_VecGlobalToLocal(av_modules_last_pos[1] - av_modules_last_pos[0]))
	@ao_modules[0] OBJ_PosSet(av_modules_last_pos[0])
	
	@ao_modules[1] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[1] MATH_VecGlobalToLocal(av_modules_last_pos[2] - av_modules_last_pos[1]))
	@ao_modules[1] OBJ_PosSet(av_modules_last_pos[1])
	@ao_modules[2] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[2] MATH_VecGlobalToLocal(av_modules_last_pos[3] - av_modules_last_pos[2]))
	@ao_modules[2] OBJ_PosSet(av_modules_last_pos[2])
	@ao_modules[3] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[3] MATH_VecGlobalToLocal(av_modules_last_pos[4] - av_modules_last_pos[3]))
	@ao_modules[3] OBJ_PosSet(av_modules_last_pos[3])
	@ao_modules[4] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[4] MATH_VecGlobalToLocal(av_modules_last_pos[4] - av_modules_last_pos[3]))
	@ao_modules[4] OBJ_PosSet(av_modules_last_pos[4])

	@ao_modules[5] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[5] MATH_VecGlobalToLocal(av_modules_last_pos[6] - av_modules_last_pos[5]))
	@ao_modules[5] OBJ_PosSet(av_modules_last_pos[5])	
	@ao_modules[6] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[6] MATH_VecGlobalToLocal(av_modules_last_pos[7] - av_modules_last_pos[6]))
	@ao_modules[6] OBJ_PosSet(av_modules_last_pos[6])
	@ao_modules[7] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[7] MATH_VecGlobalToLocal(av_modules_last_pos[7] - av_modules_last_pos[6]))
	@ao_modules[7] OBJ_PosSet(av_modules_last_pos[7])

	@ao_modules[8] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[8] MATH_VecGlobalToLocal(av_modules_last_pos[9] - av_modules_last_pos[8]))
	@ao_modules[8] OBJ_PosSet(av_modules_last_pos[8])
	@ao_modules[9] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[9] MATH_VecGlobalToLocal(av_modules_last_pos[10] - av_modules_last_pos[9]))
	@ao_modules[9] OBJ_PosSet(av_modules_last_pos[9])
	@ao_modules[10] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[10] MATH_VecGlobalToLocal(av_modules_last_pos[10] - av_modules_last_pos[9]))
	@ao_modules[10] OBJ_PosSet(av_modules_last_pos[10])

	@ao_modules[11] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[11] MATH_VecGlobalToLocal(av_modules_last_pos[12] - av_modules_last_pos[11]))
	@ao_modules[11] OBJ_PosSet(av_modules_last_pos[11])
	@ao_modules[12] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[12] MATH_VecGlobalToLocal(av_modules_last_pos[13] - av_modules_last_pos[12]))
	@ao_modules[12] OBJ_PosSet(av_modules_last_pos[12])
	@ao_modules[13] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[13] MATH_VecGlobalToLocal(av_modules_last_pos[13] - av_modules_last_pos[12]))
	@ao_modules[13] OBJ_PosSet(av_modules_last_pos[13])

	@ao_modules[14] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[14] MATH_VecGlobalToLocal(av_modules_last_pos[15] - av_modules_last_pos[14]))
	@ao_modules[14] OBJ_PosSet(av_modules_last_pos[14])
	@ao_modules[15] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[15] MATH_VecGlobalToLocal(av_modules_last_pos[16] - av_modules_last_pos[15]))
	@ao_modules[15] OBJ_PosSet(av_modules_last_pos[15])
	@ao_modules[16] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_modules[16] MATH_VecGlobalToLocal(av_modules_last_pos[16] - av_modules_last_pos[15]))
	@ao_modules[16] OBJ_PosSet(av_modules_last_pos[16])

	return
}

