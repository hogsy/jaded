// MY RAG DOLL
#include "KAnn_defines.var"

int			ti_i
int			ti_index
int			ti_iterations
int			ti_flag_up
int			ti_special_normalize

float		tf_norm
float		tf_hor_norm
float		tf_dist_min
float		tf_angle
float		tf_length_1
float		tf_length_2
float		tf_length_3
float		tf_X
float		tf_Y
float		tf_Z

vector	tv_X
vector	tv_Y
vector	tv_add_speed
vector	tav_last_pos[Ci_nb_bone]
vector	tv_precedent
vector	tv_precedent_Z0
vector	tv_temp
vector	tv_new_sight
vector	tv_new_banking

vector	tv_ground_pos
vector	tv_ground_normale

object	to_head
object	to_bone
object	to_cuisse_gauche
object	to_ground_col

if (o_grabbed_bat_actor )
	to_head = @o_grabbed_bat_actor ANI_CanalObjectGet(Anim_Canal_OrteilDroit)		// Bat 
else if( o_grabbed_raptor_actor )
	to_head = @o_grabbed_raptor_actor ANI_CanalObjectGet(Anim_Canal_Machoire)		// Raptor
else
	return

to_cuisse_gauche = ANI_CanalObjectGet(Anim_Canal_CuisseGauche)

af_bone_length[2] = MATH_VecNorm(@ao_bones[2] OBJ_PosGet() - @ao_bones[1] OBJ_PosGet())

if (MATH_VecNull(av_rd_pos[0]))
{
	for (ti_i = 1; ti_i < Ci_nb_bone; ti_i++)
		av_rd_pos[ti_i] = @ao_bones[ti_i] OBJ_PosGet()
}

av_rd_pos[0] = @to_head OBJ_PosGet()
av_rd_pos[0] += @to_head OBJ_BankingGet() * 0.75
av_rd_pos[0] -= @to_head OBJ_SightGet() * 0.1

OBJ_PosSet(av_rd_pos[0])

tv_new_sight = -@to_head OBJ_BankingGet()
tv_new_banking = Cv_VerticalVector
OBJ_BankingGeneralSet(tv_new_sight, tv_new_banking)

tv_ground_pos = av_rd_pos[Ci_nb_bone - 1]
tv_ground_pos.z += 3.0
to_ground_col = COL_RayObject_Dist(tv_ground_pos, -Cv_VerticalVector, 10.0, all, OBJ_C_IdentityFlag_Anims | OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
if (to_ground_col)
{
	tv_ground_normale = COL_RayObject_NormalGet()
	tv_ground_pos = COL_RayObject_PosGet()
	DBG_RenderVector(tv_ground_pos, tv_ground_normale * 10.0, color_bleu)
	tv_ground_pos += tv_ground_normale * 0.15

	tf_Z = MATH_VecDotProduct(av_rd_pos[0] - tv_ground_pos, tv_ground_normale)
	if (tf_Z < 0.0)
		av_rd_pos[0] -= tf_Z * tv_ground_normale
}

for (ti_i = 1; ti_i < Ci_nb_bone; ti_i++)
{
	tav_last_pos[ti_i] = av_rd_pos[ti_i]	

	av_rd_pos[ti_i].z -= 2.0 * TIME_GetDt()
	av_rd_pos[ti_i] += av_rd_speed[ti_i] * (TIME_GetDt() * 0.25)

	tv_new_banking = av_rd_pos[ti_i] - av_rd_pos[ti_i - 1]

	tf_norm = MATH_VecNorm(tv_new_banking)

	if (tf_norm)
		tv_new_banking /= tf_norm
	
	if (ti_i == 1)
		tv_new_banking = MATH_VecBlendRotate(tv_new_banking, @to_head OBJ_BankingGet(), 12.0 * TIME_GetDt())
	else if (ti_i == 2)
		tv_new_banking = MATH_VecBlendRotate(tv_new_banking, cvector(0.0, 0.0, -1.0), 6.0 * TIME_GetDt())
	else if (ti_i == 3)
		tv_new_banking = MATH_VecBlendRotate(tv_new_banking, MATH_VecNormalize(av_rd_pos[2] - av_rd_pos[0]), 6.0 * TIME_GetDt())
	else
		tv_new_banking = MATH_VecBlendRotate(tv_new_banking, MATH_VecNormalize(av_rd_pos[ti_i - 1] - av_rd_pos[ti_i - 2]), 6.0 * TIME_GetDt())

	tf_norm = af_bone_length[ti_i] 
	tv_new_banking *= tf_norm
	
	av_rd_pos[ti_i] = av_rd_pos[ti_i - 1]
	av_rd_pos[ti_i] += tv_new_banking

	if (to_ground_col)
	{
		tf_Z = MATH_VecDotProduct(av_rd_pos[ti_i] - tv_ground_pos, tv_ground_normale)
		if (tf_Z < 0.0)
		{	
//			DBG_RenderVector(av_rd_pos[ti_i - 1], tv_new_banking, color_rouge)
			tv_temp = MATH_VecCrossProduct(tv_new_banking, tv_ground_normale)
			tv_temp = MATH_VecCrossProduct(tv_ground_normale, tv_temp)
			MATH_VecSetNormalize(tv_temp)
		
			tf_Z = MATH_VecDotProduct(tv_ground_pos - av_rd_pos[ti_i - 1], tv_ground_normale)
	
			tf_X = af_bone_length[ti_i] * af_bone_length[ti_i]
			tf_X -= tf_Z * tf_Z
			if (tf_X >= 0.0)
			{
				tf_X = MATH_FloatSqrt(tf_X)
				
				tv_new_banking = tv_temp * tf_X
				tv_new_banking += tv_ground_normale * tf_Z

//				DBG_RenderVector(av_rd_pos[ti_i - 1], tv_new_banking, color_vert)
		
				av_rd_pos[ti_i] = av_rd_pos[ti_i - 1]
				av_rd_pos[ti_i] += tv_new_banking
			}
		}
	}
}

// POSITIONNEMENT BASSIN QUI EST LE PERE DE TOUT
to_bone = ao_bones[2] 
@to_bone OBJ_PosSet(av_rd_pos[2])
@to_bone OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @to_bone MATH_VecGlobalToLocal(av_rd_pos[3] - av_rd_pos[2]))

// CONSTRAINT SUR LA JAMBE POUR LE SENS DE TORSION
tf_length_1 = af_IK_bones_length[Ci_IK_pied_gauche][0]
tf_length_2 = af_IK_bones_length[Ci_IK_pied_gauche][1]
tf_length_3 = MATH_VecNorm(av_rd_pos[0] -  @to_cuisse_gauche OBJ_PosGet())

tv_X = av_rd_pos[0] - @to_cuisse_gauche OBJ_PosGet()
MATH_VecSetNormalize(tv_X)

tv_Y = @to_cuisse_gauche OBJ_SightGet()
tv_Y = MATH_VecCrossProduct(tv_Y, tv_X)
MATH_VecSetNormalize(tv_Y)

tf_X = tf_length_2 * tf_length_2
tf_X -= tf_length_1 * tf_length_1
tf_X -= tf_length_3 * tf_length_3
tf_X /= -2.0 * tf_length_3

tf_Y = tf_length_1 * tf_length_1
tf_Y -= tf_X * tf_X
tf_Y = MATH_FloatMax(tf_Y, 0.0)
tf_Y = MATH_FloatSqrt(tf_Y)

av_rd_pos[1] = @to_cuisse_gauche OBJ_PosGet()
av_rd_pos[1] += tf_X * tv_X
av_rd_pos[1] += tf_Y * tv_Y

//DBG_EraseAllVectors()
//for (ti_i = 0; ti_i < Ci_nb_bone - 1; ti_i++)
//	DBG_RenderVector(av_rd_pos[ti_i], av_rd_pos[ti_i + 1] - av_rd_pos[ti_i], color_bleu)	

@ao_bones[2] OBJ_PosSet(av_rd_pos[2])

@ao_bones[2] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_bones[2] MATH_VecGlobalToLocal(av_rd_pos[3] - av_rd_pos[2]))
@ao_bones[3] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_bones[3] MATH_VecGlobalToLocal(av_rd_pos[4] - av_rd_pos[3]))
@ao_bones[4] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_bones[4] MATH_VecGlobalToLocal(av_rd_pos[5] - av_rd_pos[4]))
@to_cuisse_gauche OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @to_cuisse_gauche MATH_VecGlobalToLocal(av_rd_pos[1] - @to_cuisse_gauche OBJ_PosGet()))
@ao_bones[1] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_bones[1] MATH_VecGlobalToLocal(av_rd_pos[0] - av_rd_pos[1]))

@ao_bones[0] OBJ_BankingSet(av_rd_pos[0] - av_rd_pos[1])
//@ao_bones[0] OBJ_Rotate_FromTo(cvector(0.0, 0.0, 1.0), @ao_bones[0] MATH_VecGlobalToLocal(av_rd_pos[0] - av_rd_pos[1]))

// CALCUL DES SPEED
for (ti_i = 1; ti_i < Ci_nb_bone; ti_i++)
{
	av_rd_speed[ti_i] = av_rd_pos[ti_i] - tav_last_pos[ti_i]
	av_rd_speed[ti_i] /= TIME_GetDt()
}

ti_i = ti_i
 
 
