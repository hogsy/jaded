#include "KAnn_defines.var"

int			ti_i
vector	tv_temp
object	to_ray_object
int			ti_pt_dmg
float		tf_projete_hauteur
int			ti_perso_stunned
float		tf_liferatio
int			ti_context
int			ti_ANN_KK


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	COL_ColMapActivationSet(all, none)
	DYN_FrictionVectorSet(cvector(1.0, 1.0, 0.0))
	
	i_sort_etat = faux
	return
}


// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_projete)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_projete

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()

	// AUTORISATIONS DES GRABS
	for (ti_i = 0; ti_i < Ci_LNK_TYPE_NB; ti_i++)
		ai_SRV_ENABLE[ti_i] = faux
	
	COL_ColMapActivationSet(none, all)
	
	if( i_dernier_etat == ETAT_grabbed_KK )
	{
		DYN_GravitySet(Cv_NormalGravity)
		//ACT_ActionSet(Ann_grabed_raptor_bras)
//		DYN_Impulsion( @o_grab_actor OBJ_PosGet() + (@o_grab_actor OBJ_SightGet()* 30.0), 3.0)
	}
	else if (i_dernier_etat == ETAT_grabbed_raptor)
	{
		// On ne touche pas aux paramètres de la dynamique, le raptor a calculé une impulsion
	}
	
	f_time_start_etat = 0.0
	i_projete_mode = Ci_projete_tombe
}
else
{
	f_time_start_etat += TIME_GetDt()
}


// ANALYSE  =====================================================================

AI_Execute("KAnn_exec_CHECK_paf")
o_paf_sender = nobody			// pafs ignorés

if( i_projete_mode == Ci_projete_stunned ) 
{
	ai_SRV_ENABLE[Ci_LNK_GRAB_RAPTOR] = vrai
	ai_SRV_ENABLE[Ci_LNK_GRAB_TRANSPORTE] = vrai
	ai_SRV_ENABLE[Ci_LNK_KKGRAB_OBJECT] = vrai
}

// SERVEURS ===================================================================
AI_Execute("KAnn_exec_serveur_get")
if(ao_SRV[Ci_LNK_KKGRAB_OBJECT])
	macro_change_etat("KAnn_ETAT_grabbed_KK")
if(ao_SRV[Ci_LNK_GRAB_TRANSPORTE])
	macro_change_etat("KAnn_ETAT_grabbed_bat")	

// COMPORTEMENT ===============================================================

i_au_sol_flag = vrai		// elle est en train de tomber, on considère qu'elle est au sol

switch( i_projete_mode )
{
	case Ci_projete_tombe :
		// perso en train de voler
		if( COL_CollideType( COL_C_Ground))
		{
			// collision sol / plafond
			tv_temp = COL_NormalGet(COL_C_Ground)
			if(tv_temp.z > 0)
			{
				// Je touche le sol : fin du vol plané	
//				KAnn_Texte(Gene_C_blow_take)		// outch !
				KAnn_Life_Set(Life_ETAT_Agonisant)
				i_projete_mode = Ci_projete_stunned
				f_time_start_etat = 0.0
				ACT_ActionSet( Ann_mort )
			}
		}
		else if( f_time_start_etat >= 5.0 )
		{
			DBG_TraceString("ANN morte après une projection de 5.0 sec")
			DBG_TraceEOL()
			macro_change_etat("KAnn_ETAT_mort")
		}
		break
	case Ci_projete_stunned :
		// réception au sol effectuée et perso stunned : délai avant de se relever	
		OBJ_BankingGeneralSet(OBJ_SightGet(), MATH_VecBlendRotate(OBJ_BankingGet(),Cv_VerticalVector,3 * TIME_GetDt()))
		if( f_time_start_etat > 0.5 )
			macro_change_etat("KAnn_ETAT_follow_network")
		//	macro_change_etat("KAnn_ETAT_au_sol")
		break
}

