// Define at least one function in a track
// function track0 = "name"
// function track1 = "name"
// function track2 = "name"
// function track3 = "name"
// function track4 = "name"

// function track0 = "name"
// function track1 = "name"
function track2 = "BT_init"
// function track3 = "name"
// function track4 = "name"

#include "IO_BentTree_Defines.var"

separator "Bend Settings"
	int					mi_IsSwing													= enum( "No" 0 "Wood Swing" 1 "Rock Swing" 2 "Wood Pillar" 3 "Rock Pillar" 4 )	// designate the type of swing	
	private float		mf_OldSensSqrd

	float				f_sensibility													= 50.0		// distance in meters that Kong starts effecting the tree
		
	private float		mf_TimeToReachFullBend								= 0.5			// time, in seconds, for the tree to reach its max bank if Kong is at middle of sensitivty zone
	
	float				mf_TreeBendFrequency								= 360.0		// the frequency at which the tree bends (frequency of sine wave)
	
	float				mf_MaxTotalBendAngle								= 30.0		// number of degrees that the tree can bend from its initial position

	float				mf_MaxTreeBend											= 1.0			// the maximum amount the tree should bend from its last bend.  1.0 is parallel to ground, less than 1.0 is closer to straight up
	
	float				mf_MaxBendBackPercent 							= 0.5			// the proportional upper limit of the total bend that the tree will come back to rest at (1.0  is no bend back, 0.0 is go all the way back)
	float				mf_MinBendBackPercent								= 0.25		// the proportional lower limit of the total bend that the tree will come back to rest at (1.0  is no bend back, 0.0 is go all the way back)
		
separator "Seperate ODE Objects"
	float				mf_FallingItemTriggerDistance 						= 4.0			// distance from individual ODE objects that Kong will knock them off their hierarchies
	private float		mf_SqrOfFallingSensitiveDist 

	
separator "Storage"
	private float		f_SensitivitySqrd
	private vector	v_init_banking
	private float		mf_BankingCoef											= 0.0
	private float		mf_MyLastBankCoef									= 0.0
	private vector	mv_InititalBank
	private float		mf_SineWave
	private float		tf_LastDistance
	private float		mf_MaxTotalBendAngleInRads
	private int		mi_LoopStopper											= 0
	
separator "Vine Wave"
	object 			mao_Vine[C_Max_Vines]												// each vine object on the tree should be entered here
	
	private vector	mav_InitialVineRotation[C_Max_Vines]
	private int 		mi_IsVineWaveActive									= faux
	private float		mf_VineWaveStartTime[C_Max_Vines]
	private vector	mav_VineMoveDirection[C_Max_Vines]
	private float		mf_VineBankingCoef  									= 0.0
	
	float				mf_VineBankingCoefMax								= 0.2			// amount the vine should be allowed to bank
	
	float				mf_AmplitudeDeceleration								= 0.025		// rate of decay of the max vine wave angle per full wave
	
	private float		mf_VineBankingCoefCurrentMax[C_Max_Vines]
	private int		mi_HasDecayedThisPass[C_Max_Vines]
	
	float				mf_VineWaveFrequency[C_Max_Vines]							// the frequency of the sine wave to be applied to the vines
	
	float				mf_RandomTimeToAddToVineWaveStart			= 0.5			// max random (plus or minus) time that will be added to vine wave start time to make them wave at slightly different times
	
	private int		mi_IsNewVineWaveTriggered 						= faux
	private float		mf_ActualTimeOfLastVineWaveStart 				= 0.0
	
	float				mf_MinIntervalBetweenVineWaveStarts 			= 1.0			// time that must elapse before a new vinew wave is triggered (to avoid jiggle)

separator "Internal Status"
	private vector	mv_CurrentBank
	private float		mf_TimeInSensitivityRadius 							= 0.0
	private float		mf_GradualBankingStartTimeStamp 				= 0.0
	private vector	mv_StartingBank
	private vector	mv_EndingBank
	private int		mi_IsActivelyBanking									= FALSE
	private int		mi_IsOnBankBack 										= FALSE
	
separator "Branch Settings"
	object			mo_Branch[C_Max_Branches]										// breakable branches
	int					mi_IsBranchGradualBendable[C_Max_Branches]				// for each branch, is it gradual bend to break(1), or just instant break (0)

	private int		mi_IsBranchBending[C_Max_Branches]
	private float		mf_BranchBendTimeStamp[C_Max_Branches]
	float				mf_MaxBranchBend											= 0.1		// max bend angle as a proportion of 360.0 degrees (so, 0.5 = 180.0 degrees).
	private float		mf_LastSineWaveModifiedCoef[C_Max_Branches]
	private int		mi_IsBranchBroken[C_Max_Branches]
	private float		mf_BranchHitDirection[C_Max_Branches]
	float				mf_BranchBendFreq											= 360.0	// magnitude of branch bend
	float				mf_BranchTranslationDistance							= 0.3		// distance in meters that each branch travels during bend
	private vector	mv_BranchInitPos[C_Max_Branches]
	private float		mf_BranchForce 												= 60.0	// meters per second that the branch will travel away from Kong when its ODE is activated
	
separator "Particle Systems"
	object			mao_TreeHitParticleSystem[C_MaxHitPAGS]					// GFX objects that will be duplicated when the tree is hit
	
	private int		mai_IsPAGActiveForLocation[C_MaxHitPAGS]
	private float		maf_PAGStartTime[C_MaxHitPAGS]
	
	float		maf_PAGDuration[C_MaxHitPAGS]										// put in approximation of lognest pag	
	private float		maf_PAGFrequency[C_MaxHitPAGS]								//JD: useless now...kept for backwards compatibility how much time to play and replay the particle system animation (100.0 seems like a good default)
	private float		mf_MyCurrentCoef											= 0.0
	
	object			mao_TreeHitPartSysLocation[C_MaxHitPAGS]					// the WP that will be used as the location for the GFX.  (if none is supplied, it will default to the location of the source object)
	
separator "Debug"
	int 				mi_DEBUGInt
	float 				mf_DEBUGFloat
	
separator "Kong Specific"
	private int		mi_KongExists 												= vrai_faux
	private int		mi_LastIsKongSwinging									= vrai
	private int		mi_KongIsSwinging											= vrai

	float				mf_CurrTreeBendFrequency								= 0.0
	
	object			mo_SwingPivotPoint											= nobody