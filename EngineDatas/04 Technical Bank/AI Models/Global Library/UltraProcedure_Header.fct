// RAYMAN ==================================================================================================
procedure_ultra vector PROC_RM_GroundNormalGet();
procedure_ultra object PROC_RM_MontureGet();
procedure_ultra int PROC_RM_MontureIDGet();
procedure_ultra int PROC_RM_Mode();
procedure_ultra int PROC_RM_ModeLookON();
procedure_ultra object PROC_RM_Current_HotSpot_Get();
procedure_ultra int  PROC_RM_Type_HotspotGet();
procedure_ultra int PROC_RM_NAGE();
procedure_ultra int PROC_RM_ITEM_Get();
procedure_ultra object PROC_RM_ITEM_Has_Key();
procedure_ultra int PROC_RM_ModeLookORIENT();
procedure_ultra vector PROC_RM_ApplyTension( vector	pv_tension);
procedure_ultra int PROC_RM_Paf_Mode_Get();
procedure_ultra int PROC_RM_Can_I_Ride( object po_rider);
procedure_ultra int PROC_RM_CHEAT_Mode();
procedure_ultra void PROC_RM_Grappin_Destroy();
procedure_ultra int PROC_RM_Dodge();
procedure_ultra int Proc_RM_FullDeguisementGet();
procedure_ultra int PROC_RM_Just_JUMP_FromGround();
procedure_ultra int Proc_RM_Attack_DIVE();
procedure_ultra int PROC_RM_FreeFall();
procedure_ultra void PROC_RM_KeepHierarchy();
procedure_ultra int PROC_RM_Danse();
procedure_ultra void PROC_RM_SetDisguise( int pi_shape);
procedure_ultra void PROC_RM_Teleported();
procedure_ultra void	Proc_RM_DisguiseReinit();
procedure_ultra int Proc_RM_Cancel_Danse();
procedure_ultra int Proc_RM_Start_Danse();
procedure_ultra int Proc_RM_Jump( vector	pv_power);

// CAMERA ==========================================================================================
procedure_ultra object Proc_CameraGet();
procedure_ultra void Proc_CameraSet(object gao);

// PNJ LAPIN ===================================================================================================
procedure_ultra int Proc_PNJ_Lapin_GetRopeTractionCategory(int ti_monture_ID);
procedure_ultra float Proc_PNJ_Lapin_GetRopeDistRenormalisation(int ti_monture_ID);
procedure_ultra int Proc_PNJ_Lapin_Grappin_Dodge();
procedure_ultra int Proc_PNJ_Lapin_Grappin_Protege();
procedure_ultra vector Proc_PNJ_Lapin_RidedPosGet();
procedure_ultra vector Proc_PNJ_Lapin_RidedSightGet();
procedure_ultra vector Proc_PNJ_Lapin_RidedBankingGet();
procedure_ultra vector Proc_PNJ_Lapin_HotSpot_PosGet();
procedure_ultra int Proc_PNJ_Lapin_Is_Ride_Enabled();
procedure_ultra int Proc_Lapin_ModeCompagnon_Get();
procedure_ultra void Proc_Lapin_ModeCompagnon_Set(int ti_on);
procedure_ultra int Proc_Lapin_Grappin_GogoMode();
procedure_ultra int Proc_Lapin_Type_Get();
procedure_ultra float Proc_Lapin_Trampoline_Enabled();
procedure_ultra int Proc_PNJ_Lapin_NearDistGet();
procedure_ultra vector Proc_PNJ_Lapin_JoyGetMove();
procedure_ultra vector Proc_PNJ_Lapin_VirtualSightGet();
procedure_ultra object Proc_PNJ_Lapin_MontureGet();
procedure_ultra int Proc_PNJ_Lapin_MontureIDGet();
procedure_ultra int Proc_PNJ_Lapin_MontureIDTest(int ti_id);
procedure_ultra void Proc_PNJ_Lapin_Push(vector tv_traction);
procedure_ultra int Proc_PNJ_Lapin_Can_Dodge_Weapon(object to_sender, int ti_weapon_ID);
procedure_ultra void Proc_PNJ_Lapin_Dodge_Actor_Set(object to_actor, int ti_mode);
procedure_ultra int Proc_PNJ_Lapin_Can_Protect_Weapon(object to_sender, int ti_weapon_ID);
procedure_ultra void Proc_PNJ_Lapin_Protect_Actor_Set(object to_actor, int ti_mode);
procedure_ultra int Proc_PNJ_Lapin_Paf_Jauge_is_Ready();
procedure_ultra int Proc_PNJ_Lapin_Paf_Combo_Waiting_for_Finish();
procedure_ultra int Proc_PNJ_Lapin_ModeTest(int ti_test_etat);
procedure_ultra int Proc_PNJ_Lapin_ETAT_Courant_Get();
procedure_ultra int Proc_PNJ_Lapin_Best_Interet_Get(byref messageid tmid_interet);
procedure_ultra float Proc_PNJ_Lapin_LIFE_Get();
procedure_ultra void Lapin_TYPE_Set(int ti_type);
procedure_ultra void Proc_PNJ_Lapin_COMMANDER_Set(object to_actor);
procedure_ultra int Proc_PNJ_Lapin_COMMANDER_Etat_Commandant();
procedure_ultra object Proc_PNJ_Lapin_COMMANDER_Target_Get();
procedure_ultra void Proc_PNJ_Lapin_COMMANDER_Target_Set(object to_actor);
procedure_ultra void Lapin_Mode_TRANSPORT_de_TROUPE_Init(object to_bascule);
procedure_ultra void Lapin_APPARITION_Monture_Set(object to_monture, int ti_duplicate, int ti_dont_modify);
procedure_ultra void Lapin_APPARITION_Item_Set(object to_item, int ti_duplicate);


// SPLINTER BUNNY ===================================================================================
procedure_ultra vector Splinter_Bunny_RidedPosGet();
procedure_ultra vector Splinter_Bunny_RidedSightGet();
procedure_ultra vector Splinter_Bunny_RidedBankingGet();

// KAMERA ==================================================================================================
procedure_ultra void Proc_Kam_FinishMode_Set( int ti_finish_ID, object to_gao );
procedure_ultra int Proc_Kam_KamModifierID_Get();
procedure_ultra int Proc_Kam_IsInFIGHT_Get();
procedure_ultra void Proc_Kam_RumbleSet(float tf_ramble, float tf_speed);
procedure_ultra int Proc_Kam_IsInGame();
procedure_ultra int Proc_Kam_FamilyGet();
procedure_ultra void Proc_Kam_FPSMode_Set();
procedure_ultra int Proc_Kam_FPSMode_Get();
procedure_ultra float Proc_Kam_FPSMode_DurationGet();
procedure_ultra void Proc_Kam_Position_and_Orientation_Set(vector tv_pos, vector tv_sight, vector tv_banking);
procedure_ultra vector Proc_Kam_FPS_SightContraintConeGet();
procedure_ultra void Proc_Kam_RewardMode_Set(int ti_reward, object to_actor);
procedure_ultra float Proc_Kam_SpeedGet();
procedure_ultra void Proc_Kam_ComboFinish(object to_actor);


// KAM_MODIFIER ==============================================================================================
procedure_ultra void	Proc_Kam_SpecialParameterSet(object tSpecialParameterGao1, object tSpecialParameterGao2, vector tSpecialParameterVec1, vector tSpecialParameterVec2 );

// AFTER EFFECTS ====================================================================================
procedure_ultra void Proc_AE_BlackAndWhiteSet(float AFE_Param);
procedure_ultra float Proc_AE_BlackAndWhiteGet();
procedure_ultra float Proc_AE_BlackAndWhiteDefaultGet();
procedure_ultra void Proc_AE_BlurSet(float AFE_Param);
procedure_ultra float Proc_AE_BlurGet();
procedure_ultra float Proc_AE_BlurDefaultGet();
procedure_ultra void Proc_AE_BrightnessSet(float AFE_Param);
procedure_ultra float Proc_AE_BrightnessGet();
procedure_ultra float Proc_AE_BrightnessDefaultGet();
procedure_ultra void Proc_AE_ColorBalanceSet(float AFE_Param1, float AFE_Param2);
procedure_ultra float Proc_AE_ColorBalance1Get();
procedure_ultra float Proc_AE_ColorBalance2Get();
procedure_ultra float Proc_AE_ColorBalance1DefaultGet();
procedure_ultra float Proc_AE_ColorBalance2DefaultGet();
procedure_ultra void Proc_AE_ContrasteSet(float AFE_Param);
procedure_ultra float Proc_AE_ContrasteGet();
procedure_ultra float Proc_AE_ContrasteDefaultGet();
procedure_ultra void Proc_AE_MotionBlurSet(float AFE_Param);
procedure_ultra float Proc_AE_MotionBlurGet();
procedure_ultra float Proc_AE_MotionBlurDefaultGet();
procedure_ultra void Proc_AE_MotionSmoothSet(float AFE_Param);
procedure_ultra float Proc_AE_MotionSmoothGet();
procedure_ultra float Proc_AE_MotionSmoothDefaultGet();
procedure_ultra void Proc_AE_RemanenceSet(float AFE_Param);
procedure_ultra float Proc_AE_RemanenceGet();
procedure_ultra float Proc_AE_RemanenceDefaultGet();
procedure_ultra void Proc_AE_RotationSmoothSet(float AFE_Param);
procedure_ultra float Proc_AE_RotationSmoothGet();
procedure_ultra float Proc_AE_RotationSmoothDefaultGet();
procedure_ultra void Proc_AE_WrapSet(float AFE_Param);
procedure_ultra float Proc_AE_WrapGet();
procedure_ultra float Proc_AE_WrapDefaultGet();
procedure_ultra void Proc_AE_ZoomSmoothSet(float AFE_Param);
procedure_ultra float Proc_AE_ZoomSmoothGet();
procedure_ultra float Proc_AE_ZoomSmoothDefaultGet();
procedure_ultra void Proc_AE_GlowSet(float AFE_Param);
procedure_ultra float Proc_AE_GlowGet();
procedure_ultra float Proc_AE_GlowDefaultGet();
procedure_ultra void Proc_AE_ZoomSmoothCenterSet(float AFE_Param, vector AFE_Vector);
procedure_ultra float Proc_AE_ZoomSmoothCenterGet();
procedure_ultra float Proc_AE_ZoomSmoothCenterDefaultGet();

// SUR GST_GLOBAL =================================================================================
procedure_ultra int Proc_Fire_State( vector	tv_watch_pos);
procedure_ultra int GG_SNP_AddGao(object to_gao);
procedure_ultra int Proc_Global_SND_BeatGet();
procedure_ultra int Proc_Global_SND_BeatTempoGet();
//procedure_ultra void Proc_Global_OBJECTIF_Activation(int ti_num, object to_pos, object to_visuel, color tc_color);
//procedure_ultra void Proc_Global_OBJECTIF_Validation(int ti_num);

// SUR OBJECTIF MANAGER ===========================================================================
procedure_ultra void PROC_OBJECTIF_Manager_Activation(int ti_num, object to_pos, object to_visuel, color tc_color);
procedure_ultra void PROC_OBJECTIF_Manager_Validation(int ti_num);

// SFX DECOMPOSTION ===============================================================================
procedure_ultra void Proc_Decomposition_Init(object destinataire, float duree, int couche_viande, int couche_peau1, int couche_peau2);

// RAPTOR SLIM ===============================================================================================
//procedure_ultra vector Proc_PRS_RidedPosGet();
//procedure_ultra vector Proc_PRS_RidedSightGet();
//procedure_ultra vector Proc_PRS_RidedBankingGet();
//procedure_ultra vector Proc_PRS_Traction_Add(vector tv_traction);
//procedure_ultra vector Proc_PRS_HotSpot_PosGet();
		
// Montures_Manager ====================================================================================================
procedure_ultra void Montures_Manager_Add_Gao(object to_gao, float tf_size, byref int ti_car_index);
procedure_ultra void Montures_Manager_Remove_Gao(object to_gao, byref int ti_car_index);
procedure_ultra void Montures_Manager_Del_Gao(int ti_car_index);
procedure_ultra int Montures_Manager_Main_Wp_Nb_Get();
procedure_ultra int Montures_Manager_Wp_Nb_Get(int ti_index);

// PNJ_Quadri ==================================================================================================
procedure_ultra vector Proc_PNJ_Quadri_RidedPosGet();
procedure_ultra vector Proc_PNJ_Quadri_RidedSightGet();
procedure_ultra vector Proc_PNJ_Quadri_RidedBankingGet();
procedure_ultra vector Proc_PNJ_Quadri_Traction_Add(vector tv_traction);
procedure_ultra vector Proc_PNJ_Quadri_HotSpot_PosGet();
procedure_ultra int Proc_PNJ_Quadri_GetRopeTractionCategory(int ti_perso_ID);
procedure_ultra float Proc_PNJ_Quadri_GetRopeDistRenormalisation(int ti_monture_ID);
procedure_ultra int Proc_PNJ_Quadri_CreatureTypeGet();

// PNJ SNAKE ==================================================================================================
procedure_ultra vector Proc_PNJ_Snake_RidedPosGet();
procedure_ultra vector Proc_PNJ_Snake_RidedSightGet();
procedure_ultra vector Proc_PNJ_Snake_RidedBankingGet();
procedure_ultra vector Proc_PNJ_Snake_Rided_HotSpot_PosGet();
procedure_ultra int Proc_PNJ_Snake_CreatureTypeGet();
procedure_ultra void Proc_PNJ_Snake_External_Pilot(vector tv_dest_pos, float tf_wanted_speed);
procedure_ultra void Proc_PNJ_Snake_External_Jump();
procedure_ultra void Proc_PNJ_Snake_ChargeAttack(object to_target);
procedure_ultra float Proc_PNJ_Snake_ChargeAttack_DureeGet();
procedure_ultra float Proc_PNJ_Snake_ChargeAttack_RangeGet();
procedure_ultra int Proc_PNJ_Snake_No_Col();

// PNJ VOLANT ==================================================================================================
procedure_ultra vector Proc_PNJ_Volant_RidedPosGet();
procedure_ultra vector Proc_PNJ_Volant_RidedSightGet();
procedure_ultra vector Proc_PNJ_Volant_RidedBankingGet();
procedure_ultra vector Proc_PNJ_Volant_HotSpot_PosGet();
procedure_ultra int Proc_PNJ_Volant_CreatureTypeGet();

// PNJ SHARK ==================================================================================================
procedure_ultra vector Proc_PNJ_Shark_RidedPosGet();
procedure_ultra vector Proc_PNJ_Shark_RidedSightGet();
procedure_ultra vector Proc_PNJ_Shark_RidedBankingGet();
procedure_ultra vector Proc_PNJ_Shark_VirtualSightGet();
procedure_ultra int Proc_PNJ_Shark_StatusGet();
procedure_ultra vector Proc_PNJ_Shark_HotSpot_PosGet();
procedure_ultra int Proc_PNJ_Shark_CreatureTypeGet();
procedure_ultra vector PROC_Shark_StreamGet( vector	pv_pos, byref int pi_asp, object to_gao);

// RM_BOX ================================================================================================
procedure_ultra vector Proc_Box_Traction_Add(vector tv_traction);
procedure_ultra vector Proc_Box_HotSpot_PosGet();
procedure_ultra int Proc_Box_GetRopeTractionCategory(int ti_perso_ID);
procedure_ultra int Proc_Box_GetRopeDistRenormalisation(int ti_perso_ID);
procedure_ultra void Proc_Box_Push(vector tv_traction);
procedure_ultra int Proc_Box_TypeMetalGet();
procedure_ultra int Proc_Box_Grappin_GogoMode();
procedure_ultra int Proc_Box_Explose_Si_Coup();
procedure_ultra int Proc_Box_Explose_Activee();
procedure_ultra int Proc_Box_Explosive();
procedure_ultra void Proc_Box_Propulse( vector pv_sens);

// ROPE MANAGER ==============================================================================================
procedure_ultra int Rope_Manager_Get_Corde_Index(object to_gao_A, object to_gao_B);
procedure_ultra int Rope_Manager_Add(object to_gao_A, object to_gao_B, float tf_rope_dest_length, float tf_rope_speed_length, float tf_ratio_A_vs_B);
procedure_ultra int Rope_Manager_Del(int ti_i);
procedure_ultra object Rope_Manager_Get_Linked_Gao(object to_gao_A, byref float tf_rope_length, byref float tf_rope_ratio, byref vector tv_offset_A, byref vector tv_offset_B);
procedure_ultra void Rope_Manager_Update(int ti_index, object to_gao_A, object to_gao_B, float tf_length, float tf_ratio, float tf_rope_inc_speed, float tf_rope_dec_speed);
procedure_ultra void Rope_Manager_ModeSet(int ti_index, int ti_mode);
procedure_ultra float Rope_Manager_RopeLengthGet(int ti_index);
procedure_ultra void Rope_Manager_Enable_Offset(int ti_index, int ti_offset_A, vector tv_offset_A, int ti_offset_B, vector tv_offset_B);
procedure_ultra int Rope_Manager_RopeTendue(int ti_index);
procedure_ultra void Rope_Manager_RopeLastTrameTractionGet(int ti_index, byref vector tv_traction_A, byref vector tv_traction_B);

// STREAM FACTORY =============================================================================================
procedure_ultra vector	PROC_StreamGet( vector	pv_pos, byref int pi_asp);
procedure_ultra void	PROC_StreamSet( float pf_stream);


// WEAPONS ===================================================================================================
procedure_ultra int PROC_WEAPON_TypeGet();
procedure_ultra int PROC_KEY_TypeGet();
procedure_ultra int PROC_KEY_Objectif_IDGet();
procedure_ultra void PROC_KEY_Objectif_ID_Display(int ti_on);
procedure_ultra int PROC_WEAPON_Use(vector pv_sens, object po_target);
procedure_ultra float PROC_WEAPON_RangeGet();
procedure_ultra void PROC_WEAPON_Drop( );
procedure_ultra int PROC_WEAPON_Grenade_Type_Timer_Activee();
procedure_ultra vector PROC_WEAPON_HotSpot_PosGet();
procedure_ultra void PROC_WEAPON_Miss();
procedure_ultra void PROC_WEAPON_Projectile( float pf_distance, vector pv_target);
procedure_ultra int PROC_KEY_SouffrantGet();

// OCCLUDERS ==================================================================================================
procedure_ultra void WAY_LIB_Del_Occluder( object to_occl);
procedure_ultra void WAY_LIB_Add_Occluder( object to_occl);

// SND_MUSIC ==================================================================================================
procedure_ultra void Proc_Mus_Played(object to_gao);
procedure_ultra int Proc_SND_PlayingInstanceGet();
procedure_ultra int Proc_SND_Juice();

// LEVIER ======================================================================================================
procedure_ultra vector Proc_Levier_HotSpot_PosGet();
procedure_ultra float Proc_Levier_GetRopeDistRenormalisation(int ti_monture_ID);

// PNJ_BUNNY_SAUCER ===========================================================================================
procedure_ultra vector Proc_PNJ_Bunny_Saucer_RidedPosGet();
procedure_ultra vector Proc_PNJ_Bunny_Saucer_RidedSightGet();
procedure_ultra vector Proc_PNJ_Bunny_Saucer_RidedBankingGet();
procedure_ultra vector Proc_PNJ_Bunny_Saucer_Traction_Add(vector tv_traction);
procedure_ultra vector Proc_PNJ_Bunny_Saucer_HotSpot_PosGet();
procedure_ultra int Proc_PNJ_Bunny_Saucer_GetRopeTractionCategory(int ti_perso_ID);
procedure_ultra float Proc_PNJ_Bunny_Saucer_GetRopeDistRenormalisation(int ti_monture_ID);
procedure_ultra int Proc_PNJ_Bunny_Saucer_CreatureTypeGet();

// MINI ROBOT ==================================================================================================
procedure_ultra vector	Proc_PNJ_MiniRobot_HotSpot_PosGet();
procedure_ultra float	Proc_PNJ_MiniRobot_GetRopeDistRenormalisation();
procedure_ultra int Proc_PNJ_MiniRobot_Grappin_GogoMode();
procedure_ultra float	Proc_PNJ_MiniRobot_GetRopeTractionCategory(int pi_monture);

// RM_PRUNE ==================================================================================================
procedure_ultra vector Proc_RM_Prune_HotSpot_PosGet();
procedure_ultra float	Proc_RM_Prune_GetRopeDistRenormalisation();
procedure_ultra int Proc_RM_Prune_Grappin_GogoMode();
procedure_ultra vector Proc_RM_Prune_RidedPosGet();
procedure_ultra vector Proc_RM_Prune_RidedSightGet();
procedure_ultra vector Proc_RM_Prune_RidedBankingGet();
procedure_ultra int Proc_RM_Prune_GetRopeTractionCategory(int pi_Monture);
procedure_ultra int Proc_RM_Prune_Dismount();

// MINE ========================================================================================================
procedure_ultra void Proc_Mine_Propulse( vector pv_sens);

// ENVIRONMENT ================================================================================================
procedure_ultra void PROC_RLI_DEST_SET(color tc_rli_dest);

// DEBRIS AUTONOMES ===========================================================================================
procedure_ultra void PROC_SFX_DEBRIS_SET(vector tv_pos, vector tv_dir, vector tv_gravite, vector tv_rot, float tf_timer, float tf_taille, float tf_haut);
procedure_ultra void PROC_SFX_DEBRIS_RLI_SET(color tc_rli_dest);

// GST_SECTO ==================================================================================================
procedure_ultra void Proc_Sec_AISecto_ADD();

// CHAMP DE FORCE =============================================================================================
procedure_ultra void PROC_ACTIVE_CHAMP(int ti_active);

// RM PLATEFORME =============================================================================================
procedure_ultra void PROC_PF_Goto(object po_WP);

// RM BASCULE ================================================================================================
procedure_ultra void RM_Bascule_Add(object to_actor, vector tv_speed, float tf_weight);
procedure_ultra void RM_Bascule_Add_Force(object to_actor, vector tv_force);
procedure_ultra void RM_Bascule_Add_Force_At_Pos(vector tv_pos, vector tv_force);

//// GST LIST MANAGER =============================================================================================
//procedure_ultra void GST_List_Manager_Add_Fairy_Info(object to_object, vector tv_offset, int ti_canal, float tf_size, float tf_extrusion, int ti_type, text txt_0, text txt_1, text txt_2, text txt_3, text txt_4);

// LUM =======================================================================================================
procedure_ultra void Proc_LUMS_CageSet(object to_cage);
procedure_ultra void Proc_LUMS_MedaillonSet(object to_gao, vector tv_pos);

// LUMS CAGE ==================================================================================================
//procedure_ultra vector Proc_LUMS_CAGE_LumPositionGet();
//procedure_ultra void Proc_LUMS_CAGE_LumOrientationGet(byref vector tv_sight, byref vector tv_banking);
//

// RM_ChampiSatelliseur ==========================================================================================
procedure_ultra vector	PROC_Champi_StreamGet( vector	pv_pos, byref int pi_asp);

// PNJ_Pigeon ==================================================================================================
procedure_ultra vector Proc_PNJ_Pigeon_RidedPosGet();
procedure_ultra vector Proc_PNJ_Pigeon_RidedSightGet();
procedure_ultra vector Proc_PNJ_Pigeon_RidedBankingGet();
