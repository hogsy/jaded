procedure float VIEW_LIB_Pourcent_On_Screen(vector tv_pos, float tf_size, float tf_X_size, float tf_Y_size, byref vector tv_2D_center_pos, int ti_draw_debug_info)
{
	int			ti_i	
	int			ti_flag_zone_in_zone

	float		tf_X_min
	float		tf_X_max
	float		tf_Y_min
	float		tf_Y_max

	float		tf_test_zone_surface
	float		tf_zone_surface
	float		tf_inside_surface

	vector	tv_point_A	
	vector	tv_point_B

	vector	tv_upper_left_corner
	vector	tv_bottom_right_corner
	vector	tv_clipped_upper_left_corner
	vector	tv_clipped_bottom_right_corner


	object	to_camera	

	color		tc_color

	tf_test_zone_surface = tf_X_size * tf_Y_size

	tf_X_size *= 0.5
	tf_Y_size *= 0.5

	tf_X_min = 0.5 - tf_X_size
	tf_X_max = 0.5 + tf_X_size
	tf_Y_min = 0.5 - tf_Y_size
	tf_Y_max = 0.5 + tf_Y_size

	to_camera = VIEW_GetObject(0)

	tv_upper_left_corner = tv_pos
	tv_upper_left_corner += @to_camera OBJ_HorizonGet() * tf_size
	tv_upper_left_corner += @to_camera OBJ_BankingGet() * tf_size

	tv_bottom_right_corner = tv_pos
	tv_bottom_right_corner -= @to_camera OBJ_HorizonGet() * tf_size
	tv_bottom_right_corner -= @to_camera OBJ_BankingGet() * tf_size

	tv_upper_left_corner = VIEW_3dWorldTo2d(0, tv_upper_left_corner)
	tv_bottom_right_corner = VIEW_3dWorldTo2d(0, tv_bottom_right_corner)

	if (tv_upper_left_corner.x < 0.0 && tv_bottom_right_corner.x < 0.0)
		return(-1.0)

	if (tv_upper_left_corner.x > 1.0 && tv_bottom_right_corner.x > 1.0)
		return(-1.0)

	if (tv_upper_left_corner.y < 0.0 && tv_bottom_right_corner.y < 0.0)
		return(-1.0)

	if (tv_upper_left_corner.y > 1.0 && tv_bottom_right_corner.y > 1.0)
		return(-1.0)

	tf_zone_surface = tv_bottom_right_corner.x - tv_upper_left_corner.x
	tf_zone_surface *= tv_bottom_right_corner.y - tv_upper_left_corner.y

	if (tf_zone_surface < 0.001)
		return(-1.0)

	if (tf_zone_surface > tf_test_zone_surface)
	{
		tc_color = 0x00008000
		tf_zone_surface = tf_test_zone_surface
	}
	else
	{
		tc_color = 0x00FFFFFF
	}

#ifndef _FINAL_
	if (ti_draw_debug_info)
	{
		// Affichage de la zone ok
		DBG_Render2DRect(tv_upper_left_corner, tv_bottom_right_corner, 0x00FFFFFF)
	}
#endif

	tv_clipped_upper_left_corner.x = MATH_FloatLimit(tv_upper_left_corner.x, tf_X_min, tf_X_max)
	tv_clipped_upper_left_corner.y = MATH_FloatLimit(tv_upper_left_corner.y, tf_Y_min, tf_Y_max)
	tv_clipped_upper_left_corner.z = 0.01

	tv_clipped_bottom_right_corner.x = MATH_FloatLimit(tv_bottom_right_corner.x, tf_X_min, tf_X_max)
	tv_clipped_bottom_right_corner.y = MATH_FloatLimit(tv_bottom_right_corner.y, tf_Y_min, tf_Y_max)
	tv_clipped_bottom_right_corner.z = 0.01

	tf_inside_surface = tv_clipped_bottom_right_corner.x - tv_clipped_upper_left_corner.x
	tf_inside_surface *= tv_clipped_bottom_right_corner.y - tv_clipped_upper_left_corner.y

	tf_inside_surface /= tf_zone_surface

#ifndef _FINAL_
	if (ti_draw_debug_info)
	{
		if (tf_inside_surface)
		{
			// Affichage de la zone ok
			DBG_Render2DRect(tv_clipped_upper_left_corner, tv_clipped_bottom_right_corner, 0x80008000)
		}
		else
		{
			// Affichage de la zone ok
			DBG_Render2DRect(tv_upper_left_corner, tv_bottom_right_corner, 0x800000FF)
		}
	
		DBG_Render2DRect(cvector(tf_X_min, tf_Y_min, 0.0), cvector(tf_X_max, tf_Y_max, 0.0), tc_color)
	}
#endif

	tv_2D_center_pos = tv_clipped_upper_left_corner
	tv_2D_center_pos += (tv_clipped_bottom_right_corner - tv_clipped_upper_left_corner) * 0.5

	return(tf_inside_surface)
}
