
///TrigExec_PlayMusic
//============================================================
// Param IN:
//	Mode                           (Mode_Delay.x)      => 0 chain, 1 cut
//	MusRank                                              => rang dans la snk, -1 pour du silence
//	MusRank_Injure                                     => rang dans la snk, -1 pour du silence, -10 ignoré
//	MusRank_Ann                                       => rang dans la snk, -1 pour du silence, -10 ignoré
//	MusRank_Mas                                      => rang dans la snk, -1 pour du silence, -10 ignoré
//	Delay	                          (Mode_Delay.y)   => delay pour la musique (seulement en mode cut)
//
//	TransitionDelay 		     (Mode_Delay.z)    => delay pour la transition
//
//
//	WaitTime1             (Automation_N1.x) => temps d'attente avant la 1ere action sur le volume
//	NewVol1                (Automation_N1.y) => 1er volume
//	FadeTime1             (Automation_N1.z) => duree du fade vol courant -> 1er volume
//	WaitTime2             (Automation_N2.x) => duree du palier a la valeur 1er volume (si -1.0 = infini)
//	NewVol2                (Automation_N2.y) => duree du fade 1er volume -> volume de fin
//	FadeTime2             (Automation_N2.z) => volume de fin
//
//
//	WaitTime1_Ann      (Automation_A1.x) => temps d'attente avant la 1ere action sur le volume
//	NewVol1_Ann         (Automation_A1.y) => 1er volume
//	FadeTime1_Ann      (Automation_A1.z) => duree du fade vol courant -> 1er volume
//	WaitTime2_Ann      (Automation_A2.x) => duree du palier a la valeur 1er volume (si -1.0 = infini)
//	NewVol2_Ann         (Automation_A2.y) => duree du fade 1er volume -> volume de fin
//	FadeTime2_Ann      (Automation_A2.z) => volume de fin
//
// Param OUT (none)
// retourne vrai (pour les exec, vrai indique que le trigger est terminé)
//============================================================
procedure_trigger int TrigExec_PlayMusic(byref message m_msg) // int1 MusRank_Injure int2 MusRank int3 MusRank_Ann int4 MusRank_Mas vec1 Mode_Delay vec2 Automation_N1 vec3 Automation_N2 vec4 Automation_A1 vec5 Automation_A2
{
	object	to_sender
	int 		ti_new_instance
	int 		ti_old_instance
	int			ti_cut_mode
	int 		ti_transition, ti_transition_rank
	float		tf, tf_transition_delay, tf_ChainDelay
	vector	Mode_Delay, Automation_N1, Automation_N2, Automation_A1, Automation_A2
	int			ti_index, ti_force_cut, ti_ann_automation

	// local input	
	Mode_Delay = m_msg.msg_vec1
	Automation_N1 = m_msg.msg_vec2
	Automation_N2 = m_msg.msg_vec3
	Automation_A1 = m_msg.msg_vec4
	Automation_A2 = m_msg.msg_vec5
	to_sender = OBJ_Me()
	ti_ann_automation = 0
	

	// check new state while running
	ti_force_cut = 0
	if( @"Sound/SND_Kong_MusManager" to_sender mi_NewSignal  && m_msg.msg_int5 )
	{
		m_msg.msg_int5 = 0
		ti_force_cut = 1
	}
	@"Sound/SND_Kong_MusManager" to_sender mi_NewSignal = 0

	
	if( ! m_msg.msg_int5 )
	{
			//******************************
			// first call => record this
			//******************************
			m_msg.msg_int5 = 1
		

			// play
			//-------
			
			// get musique instance 
			if( @"Sound/SND_Kong_MusManager" to_sender mi_InjureSignal && (m_msg.msg_int1 != -10) )
				ti_index = m_msg.msg_int1 // injure
			else if( @"Sound/SND_Kong_MusManager" to_sender mi_MashingSignal && (m_msg.msg_int4 != -10) )
				ti_index = m_msg.msg_int4 // mashing
			else if( @"Sound/SND_Kong_MusManager" to_sender mi_AnnSignal && (m_msg.msg_int3 != -10) )
			{
				ti_index = m_msg.msg_int3 // ann 
				ti_ann_automation = 1
			}
			else
				ti_index = m_msg.msg_int2 // normal
			
			if(ti_index == -1)
				ti_new_instance = -1
			else
				ti_new_instance = @"Sound/SND_Kong_MusManager" to_sender mai_Instance[ti_index]
				
			ti_old_instance = @"Sound/SND_Kong_MusManager" to_sender mi_CurrentPlayingInstance
		
			// get transition instance
			if( ti_index  == -1)
					ti_transition_rank = -1
			else
					ti_transition_rank = ti_index + 1
					
			tf_transition_delay = Mode_Delay.z
				
			ti_cut_mode = Mode_Delay.x
			if(ti_cut_mode || ti_force_cut)
			{
					// CUT MODE
					//------------------
					
					// stop previous instance
					if(ti_new_instance == -1)
					{
						// no next instance => play the end + stop
						SND_Stop(ti_old_instance)
//						SND_TrackChain(ti_old_instance, ti_old_instance, SND_Cte_TrackRq_ModeWaitMarker, SND_Cte_TrackRq_TagEnd , 0)
					}
					else
					{
						// there is a next instance => stop & play
						SND_Stop(ti_old_instance)
			
						// get delay
						tf = Mode_Delay.y
						
						// play new instance
						SND_InstanceSetf(ti_new_instance, SND_Cte_SetInstDelay, tf)
						SND_Play(ti_new_instance)
						
						if(ti_ann_automation)
						{
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[0] = Automation_A1.x
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[1] = Automation_A1.y
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[2] = Automation_A1.z
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[3] = Automation_A2.x
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[4] = Automation_A2.y
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[5] = Automation_A2.z
						}
						else
						{
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[0] = Automation_N1.x
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[1] = Automation_N1.y
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[2] = Automation_N1.z
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[3] = Automation_N2.x
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[4] = Automation_N2.y
							@"Sound/SND_Kong_MusManager" to_sender maf_Automation[5] = Automation_N2.z
						}
						@"Sound/SND_Kong_MusManager" to_sender mi_VolState = 0
						
					}
					@"Sound/SND_Kong_MusManager" to_sender mf_ChainDelay = 0.0
					
					// play transitions
					if( ti_transition_rank >= 0 )
					{
							ti_transition = @"Sound/SND_Kong_MusManager" to_sender mai_Instance[ti_transition_rank]
							SND_InstanceSetf(ti_transition, SND_Cte_SetInstDelay, tf_transition_delay)
							SND_Play(ti_transition)		
							
							ti_transition = @"Sound/SND_Kong_MusManager" to_sender mai_Instance[ti_transition_rank+1]
							SND_InstanceSetf(ti_transition, SND_Cte_SetInstDelay, tf_transition_delay)
							SND_Play(ti_transition)		
					}
			}
			else
			{
					// CHAIN MODE
					//---------------------
					
					// chain
					if(ti_new_instance == -1)
					{
						// -1 => play silence
						SND_TrackChain(ti_old_instance, ti_old_instance, SND_Cte_TrackRq_ModeWaitMarker, SND_Cte_TrackRq_TagEnd , 0)
						tf = 0.0
					}
					else
					{
						tf = SND_TrackChain(ti_old_instance, ti_new_instance, SND_Cte_TrackRq_ModeWaitMarker, SND_Cte_TrackRq_TagStart, 0)
					}

					@"Sound/SND_Kong_MusManager" to_sender mf_ChainDelay = tf
					
					if(ti_ann_automation)
					{
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[0] = Automation_A1.x
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[1] = Automation_A1.y
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[2] = Automation_A1.z
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[3] = Automation_A2.x
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[4] = Automation_A2.y
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[5] = Automation_A2.z
					}
					else
					{
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[0] = Automation_N1.x
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[1] = Automation_N1.y
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[2] = Automation_N1.z
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[3] = Automation_N2.x
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[4] = Automation_N2.y
						@"Sound/SND_Kong_MusManager" to_sender maf_Automation[5] = Automation_N2.z
					}
					@"Sound/SND_Kong_MusManager" to_sender mi_VolState = 0
		
					// play transitions
					if(tf >= 0.0)
					{
							if( tf  < tf_transition_delay )  
									tf_transition_delay = 0.0
							
							if( ti_transition_rank >= 0 )
							{
									ti_transition = @"Sound/SND_Kong_MusManager" to_sender mai_Instance[ti_transition_rank]
									SND_InstanceSetf(ti_transition, SND_Cte_SetInstDelay, tf - tf_transition_delay)
									SND_Play(ti_transition)		
									
									ti_transition = @"Sound/SND_Kong_MusManager" to_sender mai_Instance[ti_transition_rank+1]
									SND_InstanceSetf(ti_transition, SND_Cte_SetInstDelay, tf - tf_transition_delay)
									SND_Play(ti_transition)		
							}
					}				
			}
				
			// register the current playing instance
			@"Sound/SND_Kong_MusManager" to_sender mi_CurrentPlayingInstance = ti_new_instance 
	}
	else
	{
			//******************************
			// all frames
			//******************************
			
			// TRANSITION
			//--------------------
			tf_ChainDelay = @"Sound/SND_Kong_MusManager" to_sender mf_ChainDelay
			if( tf_ChainDelay < 0.0 )
			{
					tf = SND_TrackGeti(SND_Cte_Track_B,SND_Cte_TrackRq_ChainDelay)
					if( tf > 0.0 )
					{
							@"Sound/SND_Kong_MusManager" to_sender mf_ChainDelay = 0.0
							
							tf /= 1000.0
							
							if( @"Sound/SND_Kong_MusManager" to_sender mi_InjureSignal && (m_msg.msg_int1 != -10) )
								ti_index = m_msg.msg_int1 // injure
							else if( @"Sound/SND_Kong_MusManager" to_sender mi_MashingSignal && (m_msg.msg_int4 != -10) )
								ti_index = m_msg.msg_int4 // mashing
							else if( @"Sound/SND_Kong_MusManager" to_sender mi_AnnSignal && (m_msg.msg_int3 != -10) )
								ti_index = m_msg.msg_int3 // ann 
							else
								ti_index = m_msg.msg_int2 // normal
							
							if( ti_index  == -1)
									ti_transition_rank = -1
							else
									ti_transition_rank = ti_index + 1
									
							tf_transition_delay = Mode_Delay.z
							
							if( tf  < tf_transition_delay )  
									tf_transition_delay = 0.0
							
							if( ti_transition_rank >= 0 )
							{
									ti_transition = @"Sound/SND_Kong_MusManager" to_sender mai_Instance[ti_transition_rank]
									SND_InstanceSetf(ti_transition, SND_Cte_SetInstDelay, tf - tf_transition_delay)
									SND_Play(ti_transition)		
									
									ti_transition = @"Sound/SND_Kong_MusManager" to_sender mai_Instance[ti_transition_rank+1]
									SND_InstanceSetf(ti_transition, SND_Cte_SetInstDelay, tf - tf_transition_delay)
									SND_Play(ti_transition)		
							}
					}
			}
	}
	
	return vrai
}


///TrigExec_SNDInitKongMus
//============================================================
// Param IN:
//			mus_current_line 			=> index de la ligne du TrigExec_PlayMusic a activer (impair)
//			obj_mus_kong_manager 	=> gao ayant l IA SND_Kong_MusManager
//			init_silence_time.x			=> durée silence au début de la map
// Param OUT (none)
// retourne vrai (pour les exec, vrai indique que le trigger est terminé)
//============================================================
procedure_trigger int TrigExec_SNDInitKongMus(byref message m_msg) // int1 mus_current_line object1 obj_mus_kong_manager vec1 init_silence_time
{
	object	to_sender
	int			mus_current_line
	int 		i_CurrentActiveTriggerExec
	int 		i_CurrentLine
	int			ti_Line
	vector	tv_init_silence_time

	to_sender = m_msg.msg_gao1 
	mus_current_line = m_msg.msg_int1
	tv_init_silence_time = m_msg.msg_vec1
	
	if(tv_init_silence_time.x < 0.0) tv_init_silence_time.x = 0.0
	
	i_CurrentActiveTriggerExec = mus_current_line  // 2*ti_Line + 1
	ti_Line = (mus_current_line  - 1) / 2
	i_CurrentLine = ti_Line + 1				


#ifndef _FINAL_
			if(@"Sound/SND_Kong_MusManager" to_sender i_DebugMode)
			{
				DBG_TraceString("[MUS] ### TrigExec_SNDInitKongMus force play line : ")
				DBG_TraceInt(i_CurrentActiveTriggerExec)
				DBG_TraceString(" from ")
				DBG_TraceObject(OBJ_Me())
				DBG_TraceString(" ###")
				DBG_TraceEOL()
			}
#endif


	@"univ" SND_SKMM_mi_CurrentLine = i_CurrentLine 
	@"univ" SND_SKMM_mi_CurrentActiveTriggerExec = i_CurrentActiveTriggerExec 

	@"Sound/SND_Kong_MusManager" to_sender mi_CurrentLine = @"univ" SND_SKMM_mi_CurrentLine // 0
	@"Sound/SND_Kong_MusManager" to_sender mi_CurrentActiveTriggerExec = @"univ" SND_SKMM_mi_CurrentActiveTriggerExec //-1
	@"Sound/SND_Kong_MusManager" to_sender mf_InitTimer = tv_init_silence_time.x
	
	return vrai
}

