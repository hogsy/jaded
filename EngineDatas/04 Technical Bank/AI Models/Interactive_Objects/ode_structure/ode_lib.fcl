#include "ode_defs.var"

// ------- ACTIVATION DE TOUS LES JOINTS DE LA STRUCTURE
procedure_local void ODE_Structure_Joint_Activation()
{
//----------------------
	int			i
//----------------------

	i = 0
	while(ao_ode_joints[i])
	{
		@ao_ode_joints[i] OBJ_FreezeModifier(29, 0)
		i ++
	}	
}

// ------- ACTIVATION/DESACTIVATION DE TOUS LES ELEMENTS ODE -------
procedure_local void ODE_Structure_Activation_OnOFF(int on)
{
//----------------------
	int			i
//----------------------

	i = 0
	while(ao_ode_elements[i])
	{	
		// Element détruit, on skip ...
		if(ai_ode_elements_etat[i] == ODE_Element_Etat_Detruit)
		{
			i ++
			continue
		}
				
		@ao_ode_elements[i] ODE_Enable(on)
		
		if(on)
			ai_ode_elements_etat[i] = ODE_Element_Etat_Actif	
		else
			ai_ode_elements_etat[i] = ODE_Element_Etat_Inactif
		
		i++
	}	
}

// ------- FLAG FORCE IMMOVABLE
procedure_local void ODE_Structure_Immovable_OnOFF(int on)
{
//--------------------------------
	int			i
	int			control_flag
//--------------------------------
	
	i = 0	
	while(ao_ode_elements[i])
	{	
		// Element détruit, on skip ...
		if(ai_ode_elements_etat[i] == ODE_Element_Etat_Detruit)
		{
			i ++
			continue
		}
				
		control_flag = @ao_ode_elements[i] ODE_Geti(0)
		
		if(on)
			control_flag |= 0x20
		else
			control_flag &= ~0x20
			
		@ao_ode_elements[i] ODE_Seti(0, control_flag)
				
		i++
	}	
}

// ------- FLAG PAUSE
procedure_local void ODE_Structure_Pause_OnOFF(int on)
{
//--------------------------------
	int			i
	int			control_flag
//--------------------------------
	
	i = 0	
	while(ao_ode_elements[i])
	{	
		// Element détruit, on skip ...
		if(ai_ode_elements_etat[i] == ODE_Element_Etat_Detruit)
		{
			i ++
			continue
		}
							
		@ao_ode_elements[i] ODE_Pause(on)		
		ai_ode_elements_etat[i] = ODE_Element_Etat_Actif	
		
		i++
	}	
}

// ------- TEST SI L'OBJECT APPARTIENT BIEN A LA STRUCTURE
procedure_local int ODE_Structure_GetObjectRank(object go2test, byref int rank)
{
//--------------------------------	
	int 	i
//--------------------------------	
	
	i = 0
	rank = 0
	while(ao_ode_elements[i])
	{
		if(ao_ode_elements[i] == go2test)
		{
			rank = i
			return 1
		}
		i ++
	}	
	
	return 0
}


// ------- TEST ELEMENT INACTIF/INVISIBLE
procedure_local int ODE_Structure_TestElementRemoved()
{
//--------------------------------	
	int 	i, flags, flags2
//--------------------------------	
	
	i = 0
	while(ao_ode_elements[i])
	{
		// On skip les élements déjà détruit ...
		if(ai_ode_elements_etat[i] == ODE_Element_Etat_Detruit) 
		{
			i++
			continue
		}
	
		flags = @ao_ode_elements[i] OBJ_FlagsStatusGet()
		flags2 = @ao_ode_elements[i] OBJ_FlagsControlGet()

		if( ! (flags  & OBJ_C_StatusFlag_Visible) && ! (flags & OBJ_C_StatusFlag_Active) && ! (flags2 & OBJ_C_ControlFlag_SectoInactive))
		{
				// Tag l'élément comme détruit ...
				ai_ode_elements_etat[i] = ODE_Element_Etat_Detruit
				@ao_ode_elements[i] ODE_Enable(0)								
				return 1
		}
		i++
	}
	
	return 0
}

// ------- TEST SI TOUS LES ELEMENTS SONT DETRUITS/INACTIFS
procedure_local int ODE_Structure_ToutFini()
{
//--------------------------------		
	int					i
	int					flags
//--------------------------------		
	
	i = 0
	while(ao_ode_elements[i])
	{	
		// on ne teste pas le GO vase s'il fait partie de la structure ...
		if(ao_ode_elements[i] == o_vase || ao_ode_elements[i] == o_vase2 )
		{
			i++
			continue
		}
		if
		(
			(ai_ode_elements_etat[i] == ODE_Element_Etat_Detruit)
		||   (ai_ode_elements_etat[i] == ODE_Element_Etat_Inactif)
		)
		{
			i ++
			continue
		}
		
		// SI L'OBJET N'A PAS DE RIGID BODY, SON ETAT N'EST PAS IMPORTANT
		// DANS LA DETERMINATION DE LA DESTRUCTION TOTALE DE LA STRUCTURE
		flags = @ao_ode_elements[i] ODE_Geti(0)
		
		if (flags & ODE_HasRigidBody)	
				return 0
		else
				i ++			
	}
	
	return 1
}
// ------- DESACTIVE ODE POUR UN GOA ET FAIT PASSER SON ETAT A "DETRUIT" S'IL FAIT PARTIE DE LA STRUCTURE
procedure_local void ODE_Object_Kill(object o_gao)
{
//--------------------------------		
	int					i
//--------------------------------		

	@o_gao ODE_Enable(0)
	
	i = 0
	while(ao_ode_elements[i])
	{	
		if(ao_ode_elements[i] == o_gao)
		{
			ai_ode_elements_etat[i] = ODE_Element_Etat_Detruit
			return
		}
		i ++
	}	
}

// ------- SET/RESET LE  FLAG ODE IMMOVABLE POUR UN OBJECT
procedure void ODE_Object_ImmovableOnOFF(object o_gao, int on)
{
//--------------------------------
		int			control_flag
//--------------------------------
	
		control_flag = @o_gao ODE_Geti(0)
		
		if(on)
			control_flag |= 0x20
		else
			control_flag &= ~0x20

		@o_gao ODE_Seti(0, control_flag)
}

// ------- RETOURNE LE NOMBRE D'ELEMENTS UNPAUSED DE LA STRUCTURE AINSI QUE LE NOMBRE TOTAL DE RIGID BODIES
procedure_local int ODE_b_Structure_Is_UnPaused(byref int i_num_unpaused, byref int i_num_total)
{
//----------------------
	int			i
	int			flags
//----------------------

	i_num_unpaused = 0
	i_num_total = 0
	i = 0
	while(ao_ode_elements[i])
	{	
		// Element détruit, on skip ...
		if(ai_ode_elements_etat[i] == ODE_Element_Etat_Detruit)
		{
			i ++
			continue
		}
		
		flags = @ao_ode_elements[i] ODE_Geti(0)
		
		if (flags & ODE_HasRigidBody)
			i_num_total ++
		
		if
		(
				  (flags & ODE_HasRigidBody)
		&&    ! (flags & ODE_ForceImmovable)
		&& 	  (@ao_ode_elements[i] ODE_Pause(-1) == 0)
		&&      (ai_ode_elements_etat[i] != ODE_Element_Etat_DansLaVase)
		)
		{
			i_num_unpaused ++
		}
		
		i++
	}
	
	return i_num_unpaused
}