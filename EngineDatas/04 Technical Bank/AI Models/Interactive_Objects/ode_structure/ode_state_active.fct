#include "ode_defs.var"

vector	tv_offset, tv_speed
float		tf_time_since_activation,tf_impulsion
int			i

// TIME SOUND FOR MAX NUMBER OF SECOND INSTANCES SOUND MANAGEMENT
f_time_sound += TIME_GetDt()

// ------- UPDATE DES VITESSES DE LA FRAME COURANTE -------
i = 0
while(ao_ode_elements[i])
{
	af_ode_vitesseL_frame[i] = @ao_ode_elements[i] ODE_Getf(2)
	af_ode_deriveeL_frame[i] = (af_ode_vitesseL_frame[i] - af_ode_vitesseL_old_frame[i]) / TIME_GetDt()
	
	af_ode_vitesseA_frame[i] = @ao_ode_elements[i] ODE_Getf(3)
	af_ode_deriveeA_frame[i] = (af_ode_vitesseA_frame[i] - af_ode_vitesseA_old_frame[i]) / TIME_GetDt()

	i ++
}

// ------- GESTION DU FEU -------
AI_Execute("ode_exec_gestion_feu")


// ------- GESTION DU SON -------
AI_Execute("ode_exec_gestion_son")

// ------- SAUVEGARDE DES VITESSES  -------
i = 0
while(ao_ode_elements[i])
{
	af_ode_vitesseL_old_frame[i] = af_ode_vitesseL_frame[i]
	af_ode_deriveeL_old_frame[i] = af_ode_deriveeL_frame[i]
	af_ode_vitesseA_old_frame[i] = af_ode_vitesseA_frame[i]
	af_ode_deriveeA_old_frame[i] = af_ode_deriveeA_frame[i]
	
	i ++
}


tf_time_since_activation = TIME_Get() - f_time_at_activation

// Trigger Exec après un certain delai d'activation (pour synchro avec d'autres IA?)
if((tf_time_since_activation > f_delai_avant_trig_exec) && AI_TriggerIsValid(trig_exec))
{
	call_trigger(trig_exec)
	AI_TriggerSetInvalid(trig_exec)
}

// ------- GESTION DES PAFs EXTERNES -------
AI_Execute("ode_exec_gestion_paf_externes")

// ------- FIN GESTION DES PAFs EXTERNES -------

// ------- PROJECTILE -------
if(o_projectile_cine)
{
	if(f_projectile_distance_max)
	{
		tv_offset	= @o_projectile_cine OBJ_PosGet() - v_pos_init_projectile		
		if(MATH_VecNorm(tv_offset) > f_projectile_distance_max)
		{
			ODE_Object_Kill(o_projectile_cine)			
		}
	}

	if(o_projectile_gao_stop)
	{
		if(@o_projectile_cine COL_ObjectCollide(o_projectile_gao_stop))
		{
			ODE_Object_Kill(o_projectile_cine)
		}
	}
}

// ------- TOUS LES ELEMENTS DE LA STRUCTURE SONT DETRUITS/DESACTIVES ? -------
if(ODE_Structure_ToutFini())
	AI_TrackCurChange("ode_state_end")


// ------- FLAG ECROULEMENT -------
if( ! (i_flag_ecroulement_detecte) && o_element_test_ecroulement )
{
	tv_offset = @o_element_test_ecroulement OBJ_PosGet() - v_pos_init_element_test_ecroulement

	if(MATH_VecNorm(tv_offset)	> f_deplacement_max_autorise)
	{
		i_flag_ecroulement_detecte = 1
		OBJ_CapaSet(OBJ_Capa_8,none)
	}
}

// ------- TIME TO LIVE -------
if(f_time_to_live_after_activation)
{
	if(tf_time_since_activation > (f_time_to_live_after_activation + f_ttlaa_additional_random_cur) )
	{
		AI_TrackCurChange("ode_state_end")
	}	
}
	
// ------- DESACTIVATION AUTOMATIQUE DES ELEMENTS EN Z -------
if(o_z_desactivation)
{
	i = 0
	while(ao_ode_elements[i])
	{
		tv_offset = @o_z_desactivation OBJ_PosGet() - @ao_ode_elements[i] OBJ_PosGet()
		if(tv_offset.z > f_offset_z_desactivation)
		{
			@ao_ode_elements[i] ODE_Enable(0)
			@ao_ode_elements[i] OBJ_FlagsControlSet(OBJ_C_ControlFlag_ForceInvisible | OBJ_C_ControlFlag_ForceInactive, none)
			ai_ode_elements_etat[i] = ODE_Element_Etat_Detruit
		}
		i++
	}	
}

// ------- GESTION VASE -------
if(o_vase || o_vase2 )
{
	AI_Execute("ode_exec_gestion_vase")
}

// ------- GESTION INSTABILITE FORCEE -------
if(o_element_action)
{
	AI_Execute("ode_exec_gestion_instabilite")
}

// ------- ELEMENT ENLEVE ?-------
if(ODE_Structure_TestElementRemoved()) 
	ODE_Structure_Activation_OnOFF(1)

// ------- AUTRE TRIGGER DETECTE (PROJECTILE/NOUVEAU PAF) ??-------
i_trig_paf_active = 0
i_trig_projectile_active = 0
AI_Execute("ode_check_trigger")
if(!i_trig_paf_active && !i_trig_projectile_active) return

// Trigger Projectile activé
if(i_trig_projectile_active && o_projectile_cine)
{
	@o_projectile_cine ODE_Enable(1)
	tv_speed = @o_projectile_cine OBJ_BankingGet()
	tv_speed *= f_vitesse_init_projectile
	
	@o_projectile_cine ODE_Setv(0, tv_speed)
}


// ------- IMPULSION SUR PAF?-------
if(o_element_paf && i_genere_impulsion_si_paf)
{
	if(f_force_valeur_impulsion)
		tf_impulsion = f_force_valeur_impulsion * MATH_RandFloat(0.7,1.1)
	else
		tf_impulsion = 1000.0 * MATH_RandFloat(0.7,1.1)
	
	@o_element_paf ODE_ForceAtPosSet(v_dir_paf * tf_impulsion, v_pos_paf)	
}
