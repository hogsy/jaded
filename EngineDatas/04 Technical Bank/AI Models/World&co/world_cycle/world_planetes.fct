#include "world_defines.var"

vector	tv_temp
float		f_scal, f_normvais
float		tf_angle
float		f, tf_coef_jour_nuit
int			ti_SF, i_loop, ti_SFtime
color		col

// Arrete le temps si le SF est a VRAI
ti_SFtime = 0


f_coef_attaque = 0

if ( @get_global i_world_stopped)
{
	f_blend_stop= 1.0
	return
}
else
	f_blend_stop -= MATH_FloatMin( TIME_GetDt(), f_blend_stop )


// Mouvement des planetes
//******************************

//if (!ti_SFtime||f_firstnorm)
//{	
//	// Si le temps n'est pas figé on passe dans le mvt des planetes.
//	if(f_firstnorm||@des_o_teleport DYN_SpeedGet()) 
//	{
//		if(f_firstnorm)
//		{
//			f_normvais = (des_f_distance * 2) / f_firstnorm
//			f_normvais *= TIME_GetDt()
//			tv_temp = v_normvais
//		}
//		else
//		{
//			f_normvais = (des_f_distance * 2) / @des_o_teleport DYN_SpeedGet()
//			tv_temp = @des_o_teleport OBJ_SightGet()
//			tv_temp.z = 0
//		}
//		f_firstnorm = 0
//		
//		f_scal = TIME_GetDt() / f_normvais
//		f_scal = Cf_2Pi * f_scal
//		
//		if(tv_temp != Cv_NullVector)
//		{
//			tv_temp = MATH_VecNormalize(tv_temp)
//			tv_temp = MATH_VecCrossProduct(tv_temp, cvector(0, 0, 1))
//			tv_temp = @des_o_env MATH_VecGlobalToLocal(tv_temp)
//			@des_o_env OBJ_RotateAroundVec(tv_temp,f_scal)
//		}
//	}
//}

// Soleil
//*******
if(des_o_sun)
{
	tv_temp = @des_o_sun OBJ_PosGet()
	
	// Nuit pleine
	if(tv_temp.z < des_f_Z_nuit)
	{
		@des_o_sun LIGHT_FlagSet(3,0)	// Plus de soleil
		@des_o_stars MAT_MT_SetLocalAlpha( 0, 0, 255)		
		if(i_soleil_ok) f_time_moon = TIME_Get()
		i_soleil_ok = faux
		
		LIGHT_RLIFactorSet(des_f_RLI_nuit)

		// Couleur condition normal
		for (i_loop = 0; i_loop<10 ; i_loop++)
			ac_color[i_loop] = des_ac_nuit[i_loop]
		@des_o_env MAT_MT_SetLocalAlpha(0, 1, 127)
	}
	else if (tv_temp.z < des_f_Z_aurore)
	{
		@des_o_sun LIGHT_FlagSet(3,0)	// Plus de soleil		
		if(i_soleil_ok) f_time_moon = TIME_Get()
		i_soleil_ok = faux

		f_scal = (tv_temp.z - des_f_Z_nuit) / (des_f_Z_aurore - des_f_Z_nuit)

		c_moon_light = COLOR_Blend(c_moon_light, 0, 1 - f_scal)

		LIGHT_RLIFactorSet(des_f_RLI_aurore)

		// Couleur condition normal
		for (i_loop = 0; i_loop<10 ; i_loop++)
			ac_color[i_loop] = COLOR_Blend(des_ac_nuit[i_loop], des_ac_aurore[i_loop], f_scal)

		@des_o_env MAT_MT_SetLocalAlpha(0,1,(127* f_scal) +127)
	}
	else if (tv_temp.z < des_f_Z_lever)
	{
		@des_o_sun LIGHT_FlagSet(3,1)	// Soleil présent

		if(!i_soleil_ok) f_time_moon = TIME_Get()
		i_soleil_ok = vrai

		f_time = TIME_Get()

		f_scal = (tv_temp.z - des_f_Z_aurore) / (des_f_Z_lever - des_f_Z_aurore)
//		@des_o_stars MAT_MT_SetLocalAlpha( 0, 0, (f_scal - 1.0)* 255)		
		LIGHT_RLIFactorSet(des_f_RLI_coucher)

		// Couleur condition normal
		if (f_coef_attaque < 1)
		{
			for (i_loop = 0; i_loop<10 ; i_loop++)
				ac_color[i_loop] = COLOR_Blend(des_ac_aurore[i_loop], des_ac_coucher[i_loop], f_scal)
		}
					
		@des_o_env MAT_MT_SetLocalAlpha(0,1,255)
	}
	else if (tv_temp.z < des_f_Z_jour)
	{
		@des_o_sun LIGHT_FlagSet(3,1)	// Soleil présent
		if(!i_soleil_ok) f_time_moon = TIME_Get()
		i_soleil_ok = vrai

		f_time = TIME_Get()

		f_scal = (tv_temp.z - des_f_Z_lever) / (des_f_Z_jour - des_f_Z_lever)
		@des_o_stars MAT_MT_SetLocalAlpha( 0, 0, (1.0 - f_scal) * 255.0)	
		LIGHT_RLIFactorSet(des_f_RLI_coucher)

		// Couleur condition normal
		if (f_coef_attaque < 1)
		{
			for (i_loop = 0; i_loop<10 ; i_loop++)
				ac_color[i_loop] = COLOR_Blend(des_ac_coucher[i_loop], des_ac_jour[i_loop], f_scal)
		}
						
		@des_o_env MAT_MT_SetLocalAlpha(0,1,255)
	}
	else
	{
		@des_o_sun LIGHT_FlagSet(3,1)	// Soleil présent
		@des_o_stars MAT_MT_SetLocalAlpha( 0, 0, 0)		
		if(!i_soleil_ok) f_time_moon = TIME_Get()
		i_soleil_ok = vrai

		f_time = TIME_Get()

		LIGHT_RLIFactorSet(des_f_RLI_jour)

		// Couleur condition normal
		if (f_coef_attaque < 1)
		{
			for (i_loop = 0; i_loop<10 ; i_loop++)
				ac_color[i_loop] = des_ac_jour[i_loop]
		}
		
		@des_o_env MAT_MT_SetLocalAlpha(0,1,255)
	}
}

// Lune
//******
if(des_o_moon_light)
{
	//tv_temp = @des_o_moon MATH_VecLocalToGlobal(v_rel_lune_lgt)
	// tv_temp.z = -tv_temp.z
	//@des_o_moon_light OBJ_PosSet(tv_temp)
	
	if(i_soleil_ok)
	{
		c_moon_light = COLOR_Blend(des_c_moon_light, 0, TIME_Get() - f_time_moon)
		if(c_moon_light == 0) @des_o_moon_light LIGHT_FlagSet(3,0)
	}
	else
	{
		@des_o_moon_light LIGHT_FlagSet(3, 1)
		c_moon_light = COLOR_Blend(0, des_c_moon_light, TIME_Get() - f_time_moon)
		tv_temp = @des_o_moon OBJ_PosGet()
		if(tv_temp.z < des_f_Z_aurore)
			@des_o_moon_light LIGHT_FlagSet(3,0)
				
	}
}


for (i_loop = 0; i_loop<10 ; i_loop++)
{
	ac_color_final[i_loop] = ac_color[i_loop]
}

if ( !MATH_FloatNullEpsilon( f_coef_jour_nuit) && 
@"univ" Planetes_CurHour > des_f_fog_time_jour && @"univ" Planetes_CurHour < des_f_fog_time_nuit )
	f_coef_jour_nuit = MATH_FloatBlend( f_coef_jour_nuit, 0.0, des_f_fog_blend_jour * TIME_GetDt())
else if ( !MATH_FloatNullEpsilon( f_coef_jour_nuit - 1.0) && 
@"univ" Planetes_CurHour > des_f_fog_time_nuit || @"univ" Planetes_CurHour < des_f_fog_time_jour )
	f_coef_jour_nuit = MATH_FloatBlend( f_coef_jour_nuit, 1.0, des_f_fog_blend_nuit * TIME_GetDt())
if ( des_o_fog)
	@des_o_fog LIGHT_NearFarSet(MATH_FloatBlend(des_f_fog_near,des_f_fog_near_nuit, f_coef_jour_nuit), MATH_FloatBlend(des_f_fog_far,des_f_fog_far_nuit,f_coef_jour_nuit))		// FOG

// Application des COULEURS --------------------------------------------------------------------

WOR_AmbiantColSet(WOR_CurIndexGet(), COLOR_Blend(ac_color_final[Ci_wc_ambient_1] , WOR_AmbiantColGet(WOR_CurIndexGet()), f_blend_stop) )
WOR_Ambiant2ColSet(WOR_CurIndexGet(), COLOR_Blend(ac_color_final[Ci_wc_ambient_2], WOR_AmbiantColGet(WOR_CurIndexGet()), f_blend_stop))

LIGHT_RLIDestColorSet(COLOR_Blend(ac_color_final[Ci_wc_rli], WOR_AmbiantColGet(WOR_CurIndexGet()), f_blend_stop))
if ( des_o_fog)
	@des_o_fog LIGHT_ColorSet(COLOR_Blend(ac_color_final[Ci_wc_fog], WOR_AmbiantColGet(WOR_CurIndexGet()), f_blend_stop))

@des_o_env MAT_ConstantSet(COLOR_Blend(ac_color_final[Ci_wc_atmo_1], WOR_AmbiantColGet(WOR_CurIndexGet()), f_blend_stop), 0)
@des_o_env MAT_ConstantSet(COLOR_Blend(ac_color_final[Ci_wc_atmo_2], WOR_AmbiantColGet(WOR_CurIndexGet()), f_blend_stop), 1)

@des_o_sky MAT_ConstantSet(COLOR_Blend(ac_color_final[Ci_wc_sky], WOR_AmbiantColGet(WOR_CurIndexGet()), f_blend_stop), 0)

@des_o_sun LIGHT_ColorSet(COLOR_Blend(ac_color_final[Ci_wc_sun], WOR_AmbiantColGet(WOR_CurIndexGet()), f_blend_stop))
col = COLOR_Blend(COLOR_Blend(ac_color_final[Ci_wc_sun], WOR_AmbiantColGet(WOR_CurIndexGet()), f_blend_stop), 0, 0.8)
@"SFX/SFX_Sun" des_o_sun c_Color = col

@des_o_moon MAT_ConstantSet(COLOR_Blend(ac_color_final[Ci_wc_moon], WOR_AmbiantColGet(WOR_CurIndexGet()), f_blend_stop), 0)
//@des_o_moon_light LIGHT_ColorSet(c_moon_light)


// Mouvement propre
//**********************
if (!ti_SFtime)
{	
	// On arrete le Mvt propre si le temps est bloqué
	tf_angle = Cf_Rotation_Planete
	f = @"univ" Planetes_CurHour
	if(f > 6 && f < 18) 
		tf_angle *= 2
	else 
		tf_angle *= 3
	tf_angle *= TIME_GetDt()
	@des_o_env OBJ_RotateLocalZ(tf_angle)
}
