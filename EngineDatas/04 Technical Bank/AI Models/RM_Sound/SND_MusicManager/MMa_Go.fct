Include_UltraProcedure_Header

int					ti_rank
messageid		EVT_ID 
int					tf_priomax 
vector			tv_vec 
object			to_music
int					ti_instance
int					ti_txtindice
message		tm_music
float				tf_ChainDelai
int					ti_line
float				tf_duration


// DBG ============================================================
ti_line = 0
// DBG ============================================================


if ( !Proc_MMa_GroovyBaby() )
{
	// Recuperation des le LOCKABLE Target ----------------------------------------------------------------------------------------------------------------------------------
	ti_rank = -1
	EVT_ID = MSG_GlobalScan(C_EVENT_TYPE_Music, &ti_rank)
	
	if (MSG_GlobalIsValid(EVT_ID))
	{
		i_flag_zic = vrai
	
		// DBG ============================================================
		if (@"univ" i_cheat_page == 4)
			Str_DisplayTextOnce("\h0.05\Requettes:", cvector(0.0, 0.35, 0.0))
		// DBG ============================================================
	
		tf_priomax = -1.0
		while(MSG_GlobalIsValid(EVT_ID))
		{
			
			// DBG ============================================================
			if (@"univ" i_cheat_page == 4)
			{
				tm_music = MSG_GlobalGetMsg(EVT_ID)
		
				if (ti_line&0b1)
					ti_txtindice = STR_CreateText("\cFFFF\",cvector(0.17, 0.4+(ti_line*0.03),0), 0)	
				else
					ti_txtindice = STR_CreateText("\cFFFFFF\",cvector(0.17, 0.4+(ti_line*0.03),0), 0)	
				STR_AppendText(ti_txtindice, "GAO: ")	
				STR_AppendGao(ti_txtindice, tm_music.msg_sender)
		
				if (ti_line&0b1)
					ti_txtindice = STR_CreateText("\cFFFF\",cvector(0.05, 0.4+(ti_line*0.03),0), 0)	
				else
					ti_txtindice = STR_CreateText("\cFFFFFF\",cvector(0.05, 0.4+(ti_line*0.03),0), 0)	
				STR_AppendText(ti_txtindice, "Prio: ")	
				tv_vec = tm_music.msg_vec1
				STR_AppendFloat(ti_txtindice, tv_vec.x, 1)
		
				ti_line++
			}
			// DBG ============================================================
	
			tv_vec = EVENT_Vec1Get(EVT_ID)
			if (tv_vec.x > tf_priomax)
			{
				tf_priomax = tv_vec.x
				m_music = MSG_GlobalGetMsg(EVT_ID)
			}
			EVT_ID = MSG_GlobalScan(C_EVENT_TYPE_Music, &ti_rank)
		}
	}
	else
		i_flag_zic = faux
}

if (f_music_before_play)
{
	f_music_before_play -= MATH_FloatMin(f_music_before_play,TIME_GetDt())
	DBG_SND_Display()
	return
}

// Markers =======================================================
if (i_wait_marker && f_ChainDelai<=0)
{
	f_ChainDelai = SND_TrackGeti(SND_Cte_Track_B, SND_Cte_TrackRq_ChainDelay)
	f_ChainDelai/= 1000
	if (f_ChainDelai>0)
		i_wait_marker = faux	// Reset de la recherche du marker
}

tf_ChainDelai = f_ChainDelai
if (f_ChainDelai)
	f_ChainDelai -= MATH_FloatMin(f_ChainDelai,TIME_GetDt())
	
if (f_music_delay_wav >= 0)
{
	if ( (tf_ChainDelai >= 0 && f_ChainDelai >=0) && (f_music_delay_wav > f_ChainDelai && f_music_delay_wav <= tf_ChainDelai ) )
	{
		f_music_delay_wav = -1
		ti_instance = @o_music_playing SND_MdFInstanceGet(1)
		if (ti_instance >= 0)
		{
			tf_duration = SND_InstanceGetf(SND_Cte_GetInstDuration, ti_instance )

			// DBG ===========================================
			ti_txtindice = STR_CreateText("\cFF00\PlayTransitionSound",cvector(0.05, 0.22, 0.0), tf_duration)
			// DBG ===========================================
				
			@o_music_playing SND_MdFPlay(1)
			@o_music_playing SND_MdFPlay(2)
		}
		else
		{
			DBG_TraceObjectCanal(o_music_playing, 5)
			DBG_TraceStringCanal(" demande un son de transition (modifier 1 & 2) mais il n'y a pas ce modifier son sur ce GAO",5)
			DBG_TraceEOLCanal(5)
		}
	}
}

// Markers =======================================================

if (i_music_playing_instance != -1)
{
	// Il y a deja une instance qui se joue.
	if (!f_music_before_play && f_music_playing_duree_min)
	{
		// La durée min n'est pas fini
		f_music_playing_duree_min-= MATH_FloatMin(f_music_playing_duree_min,TIME_GetDt())
		DBG_SND_Display()
		return
	}
	else
	{
		// Apres la durée mini
		if (i_flag_zic && m_music.msg_sender == o_music_playing)
		{
			f_music_filtre_off_cur = f_music_filtre_off		// Pas de Zic demandé ou une Zic differente (j'attend le filtre Off avant d'en changer)
		}
		else if (f_music_filtre_off_cur)
		{
			// Filtre Off non terminé
			f_music_filtre_off_cur -= MATH_FloatMin(f_music_filtre_off_cur,TIME_GetDt())
			tv_vec = m_music.msg_vec1
			tf_priomax = tv_vec.x
			if (i_flag_zic && tf_priomax > f_music_prio)
			{}
			else
			{
				DBG_SND_Display()
				return
			}
		}
	}
}

// Durée min OK
if (i_flag_zic)
{
	to_music = m_music.msg_sender
	if (	o_music_playing != to_music )
	{

		tv_vec = m_music.msg_vec1
		f_music_prio = tv_vec.x
		f_music_before_play = tv_vec.y
		f_music_delay_wav = tv_vec.z
		
		if (i_music_playing_instance != -1 && f_music_before_play)					// Si delay alors il faut que je stoppe l'autre.
		{
			SND_Stop(i_music_playing_instance)
			i_music_playing_instance = -1
		}
		
		tv_vec = m_music.msg_vec2
		f_music_playing_duree_min = tv_vec.x
		f_music_filtre_off = tv_vec.y
		f_music_filtre_off_cur = f_music_filtre_off


		o_music_playing = to_music

		i_must_play = vrai
	}
}
else if (i_music_playing_instance != -1)
{
	// Si avec Fade Out alors Stop sinon elle continue...
	if ( SND_InstanceGeti(i_music_playing_instance, SND_Cte_GetInstFadeOut) )
	{
		SND_Stop(i_music_playing_instance)
		o_music_playing = nobody
		i_music_playing_instance = -1
	}
}

if (i_must_play && !f_music_before_play)
{
	int		ti_old_instance 
	
	i_must_play = faux
	ti_old_instance = i_music_playing_instance

	i_music_playing_instance = @o_music_playing SND_MdFInstanceGet(0)		// 0 = Zic

	@o_music_playing Proc_Mus_Played(OBJ_Me())
	if (m_music.msg_int1)
	{
		f_ChainDelai = SND_TrackChain(-1, i_music_playing_instance, SND_Cte_TrackRq_ModeWaitMarker, SND_Cte_TrackRq_TagStart, -1)
		f_ChainDelai/= 1000
		if (f_ChainDelai<=0 && ti_old_instance != -1)
			i_wait_marker = vrai
	}
	else
	{
		SND_TrackChain(-1, i_music_playing_instance, SND_Cte_TrackRq_ModeNoWait, SND_Cte_TrackRq_TagStart, -1)
		i_wait_marker = faux
		f_ChainDelai = 0
	}
}

DBG_SND_Display()


