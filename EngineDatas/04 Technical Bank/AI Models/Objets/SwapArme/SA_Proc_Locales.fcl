//
//procedure_local vector SA_CheckPaf()
//{
//
//	message		tm_filter
//	int					ti_rank	
//	messageid		tmid_paf
//	int					ti_paf_type
//	vector			tv_paf_dir
//	int					ti_puissance 
//	vector			tv_paf_pos
//	vector			tv_pos, tv_axis
//	float				tf_dot 
//
//	tv_paf_dir	= Cv_NullVector
//	
//	MSG_SetNull( tm_filter )
//	tm_filter.msg_gao1 = OBJ_Me()
//	
//	ti_rank = -1
//	for(	tmid_paf = MSG_GlobalSearchIntGao( C_EVENT_TYPE_Paf, &ti_rank, tm_filter);
//			MSG_GlobalIsValid(tmid_paf);
//			tmid_paf = MSG_GlobalSearchIntGao( C_EVENT_TYPE_Paf, &ti_rank, tm_filter))
//	{
//		// Loop in the messages...
//
//		SND_RequestPlay( 0 )
//	
//		ti_paf_type = EVENT_PafTypeGet(tmid_paf)
//
//		// Dir
//		tv_paf_dir = EVENT_PafDirGet( tmid_paf)
//		MATH_VecNormalize(tv_paf_dir)
//
//		// Point
//		tv_pos = OBJ_PosGet() + cvector(0,0,0.4)
//		tv_paf_pos = EVENT_PafPositionGet( tmid_paf)
//		tv_axis = MATH_VecNormalize(tv_paf_pos - tv_pos)
//
//		tf_dot = MATH_VecAngle(tv_axis, -tv_paf_dir, Cv_VerticalVector)
//		f_rotate = -tf_dot / 2.5
//
//		tv_paf_dir *= 5.0
//
//		ti_puissance = EVENT_PafPuisGet(tmid_paf)
//	
//		if (ti_paf_type & C_PAF_KK_Repousse)
//		{
//			ti_puissance = 100000		// Ca chute tout de suite.
//			break
//		}
//		f_life_cur = MATH_FloatMax(0,f_life_cur -ti_puissance)
//	}
//
//	return ( tv_paf_dir )
//}
//
//procedure_local void SA_Rope_check_paf()
//{
//	message		tm_filter
//	int					ti_rank	
//	messageid		tmid_paf
//	int					ti_paf_type
//	vector			tv_paf_dir
//	vector			tv_paf_dir2
//	int					ti_puissance 
//	int					ti_canal
//
//	tv_paf_dir	= Cv_NullVector
//	
//	MSG_SetNull( tm_filter )
//	tm_filter.msg_gao1 = des_o_parachute
//	
//	ti_rank = -1
//	for(	tmid_paf = MSG_GlobalSearchIntGao( C_EVENT_TYPE_Paf, &ti_rank, tm_filter);
//			MSG_GlobalIsValid(tmid_paf);
//			tmid_paf = MSG_GlobalSearchIntGao( C_EVENT_TYPE_Paf, &ti_rank, tm_filter))
//	{
//		// Loop in the messages...
//
//		ti_paf_type = EVENT_PafTypeGet(tmid_paf)
//		ti_canal = EVENT_PafCanalGet(tmid_paf)
//		
//		if (ti_canal == -1)
//			continue	
//
//		if (ti_paf_type & (C_PAF_KK_Weapon | C_PAF_KK_Javelin))
//		{
//			// Dir
//			tv_paf_dir2 = EVENT_PafDirGet( tmid_paf)
//			MATH_VecNormalize(tv_paf_dir2)
//			
//			tv_paf_dir = tv_paf_dir2
//			ti_puissance = EVENT_PafPuisGet(tmid_paf)
//			tv_paf_dir *= ti_puissance * 5.0
//			
//			tv_paf_dir2 = MATH_VecCrossProduct(tv_paf_dir2, Cv_VerticalVector)
//			tv_paf_dir2 *= MATH_FloatSign(MATH_RandFloat(-1.0, 1.0))
//			MATH_VecSetNormalize(tv_paf_dir2)
//			tv_paf_dir += tv_paf_dir2
//	
//			av_modules_speed[ti_canal] += tv_paf_dir
//
//			if (! i_paf_done)
//			{
//				i_paf_done = vrai
//				v_start_speed = av_modules_speed[i_modules_nb - 1]
//			}
//		}
//	}
//	
//	OBJ_LIB_Detach_Javelin(des_o_parachute)
//}
//
//procedure_local void SA_Init_Rope()
//{
//	int		ti_i
//	vector	tv_pos
//
//	f_ragdoll_damping = 1.0
//	i_modules_nb = 6
//	f_gravity = -20.0
//
//	for (ti_i = 0; ti_i < i_modules_nb; ti_i++)
//	{
//		ao_modules[ti_i] = @des_o_parachute ANI_CanalObjectGet(ti_i)
//
////		tv_pos = @ao_modules[ti_i] OBJ_PosGet()
//		@ao_modules[ti_i] OBJ_HierarchyResetCurrent()
////		@ao_modules[ti_i] OBJ_PosSet(tv_pos)
//
//		if (ti_i)
//		{
//			DBG_RenderVector(@ao_modules[ti_i - 1] OBJ_PosGet(), @ao_modules[ti_i] OBJ_PosGet() - @ao_modules[ti_i - 1] OBJ_PosGet(), color_blanc)
//			af_modules_length[ti_i] = MATH_VecNorm(@ao_modules[ti_i] OBJ_PosGet() - @ao_modules[ti_i - 1] OBJ_PosGet())
//			af_modules_length[ti_i] *= des_length_coef
//		}
//			
////		av_modules_speed[ti_i] = cvector((1 + ti_i) * 2.0, 0.0, 0.0)
//	}
//
//	af_modules_length[i_modules_nb] = MATH_VecNorm(@ao_modules[i_modules_nb - 1] OBJ_PosGet() - OBJ_PosGet())
//
//	@ao_modules[0] OBJ_FlagsIdentitySet(none, OBJ_C_IdentityFlag_OBBox)
//
//	for (ti_i = 1; ti_i < i_modules_nb; ti_i++)
//	{
//		DBG_RenderVector(@ao_modules[ti_i] OBJ_PosGet(), @ao_modules[ti_i] OBJ_HorizonGet(), color_rouge)
//		DBG_RenderVector(@ao_modules[ti_i] OBJ_PosGet(), @ao_modules[ti_i] OBJ_SightGet(), color_vert)
//		DBG_RenderVector(@ao_modules[ti_i] OBJ_PosGet(), @ao_modules[ti_i] OBJ_BankingGet(), color_bleu)
//
//		@ao_modules[ti_i] OBJ_FlagsIdentitySet(OBJ_C_IdentityFlag_OBBox, none)
//		@ao_modules[ti_i] BV_OBBoxMinSet(cvector(-1.0 + (0.15 * ti_i), -1.0  + (0.15 * ti_i), -0.25))
//		@ao_modules[ti_i] BV_OBBoxMaxSet(cvector(1.0 - (0.15 * ti_i), 1.0 - (0.15 * ti_i), af_modules_length[ti_i]))
//	}
//	
//	return
//}
//
//procedure_local void SA_Renormalisation(int ti_first_index, int ti_last_index, int ti_iteration_nb)
//{
//	int			ti_i
//	int			ti_k
//
//	float		tf_norm
//	float		tf_dot_product
//	float		tf_inv_dt
//	float		tf_move_length
//
//	vector	tv_renormalisation[15]
//	vector	tv_temp	
//	vector	tv_col_pos
//	vector	tv_col_normal
//
//	tf_inv_dt = 1.0 / f_dt
//
//	// LES POINTS ONT BOUGE
//	for (ti_k = 0; ti_k < ti_iteration_nb; ti_k++)
//	{
//		for (ti_i = ti_first_index + 1; ti_i <= ti_last_index; ti_i++)
//		{
//			tv_renormalisation[ti_i] = Cv_NullVector
//
//			tv_temp = @ao_modules[ti_i - 1] OBJ_PosGet() - @ao_modules[ti_i] OBJ_PosGet()
//			tf_norm = MATH_VecDotProduct(tv_temp, tv_temp)
//			if (tf_norm > 0.001)
//			{
//				tf_norm = MATH_FloatSqrt(tf_norm)
//				tv_temp /= tf_norm
//				tf_norm -= af_modules_length[ti_i]
//				tv_temp  *= tf_norm
//			}
//			else
//			{
//				tv_temp = @ao_modules[ti_i] OBJ_BankingGet()
//				tv_temp *= af_modules_length[ti_i]
//			}
//
////			if (ti_i == i_modules_nb - 1)
////			{
////				tv_renormalisation[ti_i - 1] -= tv_temp * 0.8
////				tv_renormalisation[ti_i] += tv_temp * 0.2
////			}
////			else
//			{
//				tv_renormalisation[ti_i - 1] -= tv_temp * 0.5
//				tv_renormalisation[ti_i] += tv_temp * 0.5
//			}
//
//			DBG_RenderVector(@ao_modules[ti_i] OBJ_PosGet(), tv_renormalisation[ti_i], color_rouge)
//		}
//		
//		for (ti_i = ti_first_index; ti_i <= ti_last_index; ti_i++)
//		{
//			if (!ai_modules_locked[ti_i])
//				@ao_modules[ti_i] OBJ_PosSet(@ao_modules[ti_i] OBJ_PosGet() + tv_renormalisation[ti_i])
//		}
//	}
//
//	return
//}
//
//
//procedure_local void SA_Compute_Module_Speed()
//{
//	int				ti_i	
//
//	float			tf_friction
//	float			tf_dt
//	float			tf_exp
//
//	vector		tv_temp
//	
//	tf_dt = f_dt
//
//	tf_friction = 0.25
//	
//	if (tf_friction)
//	{
//		tf_exp = MATH_Exp(-tf_dt * tf_friction)
//	
//		if (i_flag_start_ragdoll_damping)
//			f_ragdoll_damping -= MATH_FloatMin(f_ragdoll_damping, TIME_GetDt())
//		else
//			f_ragdoll_damping = 1.0
//	
//		for (ti_i = 0; ti_i < i_modules_nb; ti_i++)
//		{
//	//		DBG_RenderVector(@ao_modules[ti_i] OBJ_PosGet(), av_modules_forces[ti_i], color_cyan)	
//		
//			if (ai_modules_locked[ti_i])
//			{
//				av_modules_speed[ti_i] = Cv_NullVector
//				continue
//			}	
//	
//			tv_temp = cvector(0.0, 0.0, f_gravity)
//			tv_temp /= tf_friction
//			av_modules_speed[ti_i] = tv_temp - ( (tv_temp - av_modules_speed[ti_i]) * tf_exp )
//		
//			av_modules_speed[ti_i] *= f_ragdoll_damping
//		}
//	}
//	else
//	{
//		if (i_flag_start_ragdoll_damping)
//			f_ragdoll_damping -= MATH_FloatMin(f_ragdoll_damping, TIME_GetDt())
//		else
//			f_ragdoll_damping = 1.0
//	
//		for (ti_i = 0; ti_i < i_modules_nb; ti_i++)
//		{
//	//		DBG_RenderVector(@ao_modules[ti_i] OBJ_PosGet(), av_modules_forces[ti_i], color_cyan)	
//		
//			if (ai_modules_locked[ti_i])
//			{
//				av_modules_speed[ti_i] = Cv_NullVector
//				continue
//			}	
//	
//			av_modules_speed[ti_i] += cvector(0.0, 0.0, f_gravity)
//			av_modules_speed[ti_i] *= f_ragdoll_damping
//		}
//	}
//}
//
//procedure_local void SA_Rag_Doll(int ti_first_index)
//{
//	int			ti_i
//	int			ti_iterations
//	int			ti_bone_index
//
//	float		tf_norm
//	float		tf_dot_product
//	float		tf_dt
//	float		tf_inv_dt
//	float		tf_move_length
//	float		tf_LOD
//
//	vector	tav_last_pos[15]
//	vector	tv_temp
//	vector	tv_col_pos
//	vector	tv_col_normal
//	vector	tv_force
//	vector	tv_dest_banking
//	vector	tv_delta_pos
//	vector	tv_delta_speed
//	vector	tv_A
//	vector	tv_B
//	vector	tv_prec
//	vector	tv_next
//	
//	object	to_collided_object
//
//	if (ti_first_index == i_modules_nb - 1)
//		return
//
//	tf_LOD = @des_o_parachute OBJ_LodVisGet()
//	if (tf_LOD == -1)
//		return	
//
//	tf_LOD /= 0.6
//	tf_LOD = MATH_FloatMin(tf_LOD, 1.0)
//	tf_LOD *= tf_LOD
//	
//	tf_LOD = 1.0 / tf_LOD
//
////	f_dt += 1.0 / 30.0
//	f_dt = 1.0 / 30.0
//
//	ti_i = tf_LOD + 0.5
//	ti_i--
//
////	ti_iterations = STR_CreateText("LOD : ", cvector(0.01, 0.1, 0.0), 0.0)
////	STR_AppendInt(ti_iterations, ti_i)
//
//	i_trame_modulo = MATH_Modulo(i_trame_modulo + 1, ti_i)
//	if ( i_trame_modulo )
//		return
//
//	tf_dt = f_dt
//	tf_inv_dt = 1.0 / tf_dt
//
//	// DYNAMIQUE DES MODULES
//	for (ti_i = ti_first_index; ti_i < i_modules_nb; ti_i++)
//		tav_last_pos[ti_i] = @ao_modules[ti_i] OBJ_PosGet()
//
//	if (f_ragdoll_damping)
//	{
//		// CALCUL DE LA DYNAMIQUE
//		SA_Compute_Module_Speed()
//	
//		// DEPLACEMENT
//		for (ti_i = ti_first_index; ti_i < i_modules_nb; ti_i++)
//		{
//			@ao_modules[ti_i] OBJ_PosSet(tav_last_pos[ti_i] + (av_modules_speed[ti_i] * tf_dt)) 
//			DBG_RenderVector(@ao_modules[ti_i] OBJ_PosGet(), av_modules_speed[ti_i], color_jaune)
//		}
//			
//		SA_Renormalisation(ti_first_index, i_modules_nb - 1, 20)
//	}
//
//	// CALCUL DES SPEED ET DES ORIENTATIONS
//	for (ti_i = ti_first_index; ti_i < i_modules_nb; ti_i++)
//	{
//		tv_temp = @ao_modules[ti_i] OBJ_PosGet() - tav_last_pos[ti_i]
//		tv_temp *= tf_inv_dt
//
//		if (ti_i)
//			@ao_modules[ti_i] OBJ_BankingGeneralSet(@ao_modules[ti_i] OBJ_SightGet(), @ao_modules[ti_i -1 ] OBJ_PosGet() - @ao_modules[ti_i] OBJ_PosGet())
//			
////		tv_temp = MATH_VecBlend(av_modules_speed[ti_i], tv_temp, 0.5)
//		av_modules_speed[ti_i] = tv_temp
//	}
//
//	@ao_modules[0] OBJ_BankingGeneralSet(@ao_modules[0] OBJ_SightGet(), @ao_modules[0] OBJ_PosGet() - @ao_modules[1] OBJ_PosGet())
//	
////	if (!i_flag_start_ragdoll_damping && i_on_ground_modules_nb == 15)
////		i_flag_start_ragdoll_damping = vrai
//
////	f_dt = 0.0
//
//	return
//}
//