
///////////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTION PAS DE STATS mais sont bien la car lib utilisé par IA qui 
// ont besoin de cette fonction
// index = index de la map pour laquelle on doit initialiser les munitions
///////////////////////////////////////////////////////////////////////////////////////////////////////
procedure void UNIV_SetReplayAmmo( int index )
{
	int  i, perso, weapon, munition
	
	// erase all previous munition and ammo
//	for ( perso = 0; perso <= C_ID_Jimmy; perso++)
	for ( perso = 0; perso < C_ID_Last_Compagnon; perso++)
	{
		@"univ" i_weapon_ID[ perso ] = 0
		@"univ" i_weapon_ID_Save[ perso ] = 0
		@"univ" i_weapon_ID_second[ perso ] = 0
		for ( i = 0; i < 20; i++)			
		{
			@"univ" i_weapon_ammunition[ i ][ perso ] = 0
			@"univ" i_weapon_ammunition_reserve[ i ][ perso   ] = 0
		}
	}
		
	// set jack initial weapon state
	weapon = @"univ" PROG_ai_MapJackArme[ index ]
	@"univ" i_weapon_ID[ C_ID_Joueur ] = weapon
	switch( weapon )
	{
//		case Ci_weapon_ID_colt				: munition = Ci_colt_clip_size break
//		case Ci_weapon_ID_tommy_gun	: munition = Ci_tommy_gun_clip_size break				
//		case Ci_weapon_ID_shotgun			: munition = Ci_shotgun_clip_size break
//		case Ci_weapon_ID_sniper_rifle		: munition = Ci_sniper_rifle_clip_size break
		default: munition = 0
	}
		
	if (@"univ" PROG_ai_MapJackMunition[ index ] <= munition ) 
		@"univ" i_weapon_ammunition[weapon][ C_ID_Joueur ] = @"univ" PROG_ai_MapJackMunition[ index ]
	else
	{
		@"univ" i_weapon_ammunition[weapon][ C_ID_Joueur ] = munition
		@"univ" i_weapon_ammunition_reserve[weapon][ C_ID_Joueur ] = @"univ" PROG_ai_MapJackMunition[ index ] - munition
	}

	// set hayes initial weapon state
//	weapon = @"univ" PROG_ai_MapHayesArme[ index ]
//	@"univ" i_weapon_ID[ C_ID_Hayes ] = weapon
//	switch( weapon )
//	{
//		case Ci_weapon_ID_colt				: munition = Ci_colt_clip_size break
//		case Ci_weapon_ID_tommy_gun	: munition = Ci_tommy_gun_clip_size break				
//		case Ci_weapon_ID_shotgun			: munition = Ci_shotgun_clip_size break
//		case Ci_weapon_ID_sniper_rifle		: munition = Ci_sniper_rifle_clip_size break
//		default: munition = 0
//	}
//		
//	if (@"univ" PROG_ai_MapHayesMunition[ index ] <= munition ) 
//		@"univ" i_weapon_ammunition[weapon][ C_ID_Hayes ] = @"univ" PROG_ai_MapHayesMunition[ index ]
//	else
//	{
//		@"univ" i_weapon_ammunition[weapon][ C_ID_Hayes ] = munition
//		@"univ" i_weapon_ammunition_reserve[weapon][ C_ID_Hayes  ] = @"univ" PROG_ai_MapHayesMunition[ index ] - munition
//	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// SPECIAL FUNCTION FOR DEMO AND EVENTUALLY FOR STATS AFTER
///////////////////////////////////////////////////////////////////////////////////////////////////////

#define STATS_Current( _index) @"univ" STATS[ @"univ" STATS_WorldID ][ _index ]

///////////////////////////////////////////////////////////////////////////////////////////////////////
// INIT STATS
// called when entering a map (in ES model)
///////////////////////////////////////////////////////////////////////////////////////////////////////
//procedure void STATS_Init()
//{
//	int i
//	
//	// get map ID
//	for (i = 0; i < @"univ" PROG_i_MapNumber; i++ )
//	{
//		if ( @"univ" world_ID == @"univ" PROG_ai_MapId[ i ] )
//		{
//			@"univ" STATS_WorldID = i
//			break
//		}
//	}
//	
//	// pas une map de stats, met les infos en fin de tableau et basta
//	if ( i == @"univ" PROG_i_MapNumber)
//		@"univ" STATS_WorldID = STATS_NbMaps - 1
//	
//	// reset stats
//	for (i = 0; i < STATS_NbVal; i++)
//		STATS_Current( i ) = 0
//}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// CLOSE STATS
// called when leaving  a map (in ES model)
///////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////
// Called before wor is reinit when player dye
// pi_mode = 
//			0 : Jack
//			1 : compagnon de Jack
//			2 : Kong
//			3 : Ann of Kong (KAnn )
///////////////////////////////////////////////////////////////////////////////////////////////////////
procedure void STATS_Dying( int pi_mode )
{
//	if (@"univ" MENUDEMO_QuitWhenDying)
//	{
//		if ( ( @"univ" world_ID == @"univ" MENUDEMO_DyeMap ) && ( @"univ" world_entrance_ID == @"univ" MENUDEMO_DyeES ) )
//		{
//			@"univ" MENUDEMO_DyeNumber++
//			if (@"univ" MENUDEMO_DyeNumber == 3)
//				IO_DemoSeti( 6 )
//		}
//		else
//		{
//			@"univ" MENUDEMO_DyeMap = @"univ" world_ID
//			@"univ" MENUDEMO_DyeES = @"univ" world_entrance_ID
//			@"univ" MENUDEMO_DyeNumber = 1
//		}
//	}
	
	switch( pi_mode )
	{
		// JACK
		case 0: 
					@"univ" i_deathplayer_counter++
					if (STATS_Current( STATS_NbMortJoueur ) < 99)
						STATS_Current( STATS_NbMortJoueur )++
					
		// COMPAGNON DE JACK
		case 1:
					if (!@"univ" PROG_i_MapReplay)
						@"univ"	PROG_GameCumul_JackMort++
					if (STATS_Current( STATS_NbMort ) < 99)
						STATS_Current( STATS_NbMort )++
					@"univ" i_death_counter++
					@"univ" i_death_shield++
					break
					
		// KONG
		case 2:
				if (STATS_Current( STATS_NbMortJoueur ) < 99)
					STATS_Current( STATS_NbMortJoueur )++
					
		// ANN with KONG
		case 3:
					if (!@"univ" PROG_i_MapReplay)
						@"univ"	PROG_GameCumul_KongMort++
					if (STATS_Current( STATS_NbMort ) < 99)
						STATS_Current( STATS_NbMort )++
					break
	}
	
	// save cumulable stats
	@"univ" STATS_f_Time = STATS_Current( STATS_DureeMap )
	@"univ" STATS_f_Mort = STATS_Current( STATS_NbMort )
	@"univ"	STATS_f_MortJoueur = STATS_Current( STATS_NbMortJoueur )
	SAVE_ValidateAl()
	WOR_Reinit()
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
// STATS FUNCTIONS
///////////////////////////////////////////////////////////////////////////////////////////////////////

procedure void STATS_IncDureeMap( )
{
	object	to_main
	to_main = @"univ" ao_AllHumains[C_ID_Kong]
	if( to_main && ! @"univ" PROG_i_MapReplay )
		@"univ" PROG_GameCumul_KongTime += TIME_GetDt()
	STATS_Current( STATS_DureeMap ) += TIME_GetDt()
	if (STATS_Current( STATS_DureeMap ) > 3600 )
		STATS_Current( STATS_DureeMap ) = 3600
}

procedure void STATS_IncPaf( )
{
	if ( STATS_Current( STATS_NbCoup ) < 999)
		STATS_Current( STATS_NbCoup )++
}

procedure void STATS_IncBullet( )
{
	if ( !@"univ" PROG_i_MapReplay )
		@"univ" PROG_GameCumul_JackBullet++
	STATS_Current( STATS_NbBullet )++
}

procedure void STATS_IncSpears( )
{
	if ( STATS_Current( STATS_NbSpears ) < 99)
		STATS_Current( STATS_NbSpears )++
	
}

procedure void STATS_IncInjuries( int pi_joueur, int pi_idhumain )
{
	if (@"univ" LIFE_HumainEtat[ pi_idhumain ] == Life_ETAT_Agonisant)
		return
		
	if (pi_joueur)
	{
		if ( STATS_Current( STATS_Injuries ) < 99)
			STATS_Current( STATS_Injuries )++
	}
//	else
//	{
//		if (
//			( STATS_Current( STATS_BuddyInjured ) < 99) &&
//			(
//				(pi_idhumain == C_ID_Ann) ||
//				(pi_idhumain == C_ID_Hayes) ||
//				(pi_idhumain == C_ID_Denham) ||
//				(pi_idhumain == C_ID_Jimmy)
//			)
//		)
//		{
//			STATS_Current( STATS_BuddyInjured )++
//		}
//	}
}

//procedure void STATS_IncBuddyInjured()
//{
//	if ( STATS_Current( STATS_BuddyInjured ) < 99)
//		STATS_Current( STATS_BuddyInjured )++
//}

procedure void STATS_IncAttack()
{
	if ( STATS_Current( STATS_BuddyInjured ) < 999)
		STATS_Current( STATS_NbAttack )++
}

procedure void STATS_IncEnemyKilled_New( object po_Sender, int pi_Type, int pi_Param )
{
	int i_Stat, i_Text
	object	to_main
	
	if (!po_Sender) 
		return
	
	to_main = AI_MainActorGet( 0 )
	
	if (po_Sender != to_main )
	{
// FRED
//		if(@po_Sender AI_IsModel(get_Humain_path) && !@po_Sender OBJ_CapaTest(OBJ_Capa_1))
//		{
//			if (STATS_Current( STATS_KilledNPC ) < 99)
//				STATS_Current( STATS_KilledNPC ) ++
//		}
		return
	}
	
	if (STATS_Current( STATS_KilledJack ) < 999)	
		STATS_Current( STATS_KilledJack )++
	
	i_Stat = -1
//	if (@"univ" i_jack )

// FRED
//	if( @to_main AI_IsModel(get_Humain_path) )
//	{
//		if ( !@"univ" PROG_i_MapReplay )
//			@"univ" PROG_GameCumul_JackKll ++
//			
//		switch ( pi_Type )
//		{
//		case  C_EnemyType_Bat_Noire	:
//		case  C_EnemyType_Crabe_Gros :
//		case  C_EnemyType_Raptor :
//		case  C_EnemyType_Trex	 :
//					i_Stat = STATS_KilledGroup0
//					break
//
//		case  C_EnemyType_Bat_Normale :
//		case  C_EnemyType_Scolo_Noir :
//		case  C_EnemyType_Scolo_Normal :
//					i_Stat = STATS_KilledGroup1
//					break
//
//		case  C_EnemyType_Bat_Rouge :
//		case  C_EnemyType_Crabe :
//		case  C_EnemyType_Gallimini :
//		case  C_EnemyType_Scorpion :
//		case  C_EnemyType_Swamp :
//					i_Stat = STATS_KilledGroup2
//					break
//		}
//	}
//	else
	{
		if ( !@"univ" PROG_i_MapReplay )
			@"univ" PROG_GameCumul_KongKill ++
			
//		switch ( pi_Type )
//		{
//		case  C_EnemyType_Bat_Grosse :	
//		case  C_EnemyType_Scolo_Gros :
//		case  C_EnemyType_Trex	 :
//					i_Stat = STATS_KilledGroup3
//					break
//
//		case  C_EnemyType_Bat_Normale :
//		case  C_EnemyType_Native :
//		case  C_EnemyType_Raptor :
//		case  C_EnemyType_Gallimini :
//		case  C_EnemyType_Scolo_Noir :
//		case  C_EnemyType_Scolo_Normal :
//		case  C_EnemyType_Voiture :
//					i_Stat = STATS_KilledGroup4
//					break
//		}
	}
	
	if (i_Stat == -1 )
	{
		#ifndef _FINAL_
		if (@"univ" Cheat_i_Flags & CHEAT_DumpStats )
		{
			i_Stat = STR_CreateText( "Ennemy killed but not counted in stats : ", cvector( 0, 0.05, 0), 2 )
			STR_AppendInt( i_Stat, pi_Type )
		}
		#endif
		return
	}
	if (STATS_Current( i_Stat ) < 99)
		STATS_Current( i_Stat )++
	
#ifndef _FINAL_
	if (@"univ" Cheat_i_Flags & CHEAT_DumpStats )
	{
	 	i_Text = STR_CreateText( "Ennemy killed : group =  ", cvector( 0, 0.05, 0), 2 )
	 	STR_AppendInt( i_Text, i_Stat - STATS_KilledGroup0 )
	 	STR_AppendText( i_Text, ", type = " )
//	 	switch( pi_Type )
//	 	{
//			case  C_EnemyType_Bat_Grosse :	STR_AppendText( i_Text, ", Grosse bat" ) break
//			case  C_EnemyType_Bat_Noire :		STR_AppendText( i_Text, ", Bat noire" ) break
//			case  C_EnemyType_Bat_Normale :	STR_AppendText( i_Text, ", Bat" ) break
//			case  C_EnemyType_Bat_Rouge :		STR_AppendText( i_Text, ", Bat rouge" ) break
//			case  C_EnemyType_Crabe :				STR_AppendText( i_Text, ", Crabe" ) break
//			case  C_EnemyType_Crabe_Gros :	STR_AppendText( i_Text, ", Gros Crabe" ) break
//			case  C_EnemyType_Gallimini :			STR_AppendText( i_Text, ", Galimini" ) break
//			case  C_EnemyType_Native	:			STR_AppendText( i_Text, ", Native" ) break
//			case  C_EnemyType_Raptor	 :			STR_AppendText( i_Text, ", Raptor" ) break
//			case  C_EnemyType_Scolo_Gros :		STR_AppendText( i_Text, ", Gros scolo" ) break
//			case  C_EnemyType_Scolo_Noir :		STR_AppendText( i_Text, ", Scolo noir" ) break
//			case  C_EnemyType_Scolo_Normal :	STR_AppendText( i_Text, ", Scolo" ) break
//			case  C_EnemyType_Scorpion :			STR_AppendText( i_Text, ", Scorpion" ) break
//			case  C_EnemyType_Swamp :			STR_AppendText( i_Text, ", Swamp" ) break
//			case  C_EnemyType_Trex :				STR_AppendText( i_Text, ", TRex" ) break
//			case  C_EnemyType_Voiture :			STR_AppendText( i_Text, ", Voiture" ) break
//		}
	}
#endif
}
	
	
//procedure float STATS_ScoreMap( )
//{
//	float tf_shoot, tf_paf, tf_mort, tf_duree
//	
//	tf_shoot = STATS_Current( STATS_NbBullet )
//	tf_paf = STATS_Current( STATS_NbCoup ) * 2
//	tf_mort = STATS_Current( STATS_NbMort ) * 3
//	tf_duree = STATS_Current( STATS_DureeMap )
//	
//	tf_duree *= (tf_shoot + tf_mort + tf_paf + 1)
//	return tf_duree
//}

procedure void STATS_Dump()
{
	int 		texte, i, stat, stat_val, stat_prev, count
	object	to_main	
	float		y
	
	if ( @"univ" STATS_WorldID == 49 )
		return

	to_main = AI_MainActorGet( 0 )
	if (!to_main) return
// FRED
//	if ( @to_main AI_IsModel( "KingKong/Humain") )
//	{
//		for (i = 0; i < 8; i++)
//		{
//			y = 0.1 + (i * 0.05)
//			switch( i )
//			{
//			case 0: STR_CreateText( "BigK", cvector( 0, y, 0), 0)  stat = STATS_KilledGroup0 break
//			case 1: STR_CreateText( "PredK", cvector( 0, y, 0), 0)  stat = STATS_KilledGroup1 break
//			case 2: STR_CreateText( "PestK", cvector( 0, y, 0), 0)  stat = STATS_KilledGroup2 break
//			case 3: STR_CreateText( "Bullet", cvector( 0, y, 0), 0)  stat = STATS_NbBullet break
//			case 4: STR_CreateText( "Spears", cvector( 0, y, 0), 0)  stat = STATS_NbSpears break
//			case 5: STR_CreateText( "Death", cvector( 0, y, 0), 0)  stat = STATS_NbMort break
//			case 6: STR_CreateText( "Injur.", cvector( 0, y, 0), 0)  stat = STATS_Injuries break
//			case 7: STR_CreateText( "BudInj", cvector( 0, y, 0), 0)  stat = STATS_BuddyInjured break
//			}
//			
//			texte = STR_CreateText( "\jr\", cvector( 0.15, y, 0), 0)
//			stat_val = @"univ" STATS[ @"univ" STATS_WorldID ][stat ]
//			STR_AppendInt(texte, stat_val )
//			stat_val *= 100
//			stat_prev = @"univ" STATS[ @"univ" STATS_WorldID + 1 ][ stat ]
//			if (stat_prev < stat_val )
//			{
//				stat_prev += TIME_GetDt() * 200
//				@"univ" STATS[ @"univ" STATS_WorldID + 1 ][ stat ] = stat_prev
//				if (stat_prev < stat_val)
//				{
//					count = 0
//					texte = STR_CreateText( "", cvector( 0.16, y, 0), 0)
//					while (stat_prev < stat_val )
//					{
//						stat_prev += 100
//						STR_AppendText( texte, "+" )
//						count++
//						if (count == 20)
//							break
//					}
//				}
//			}
//			else
//				@"univ" STATS[ @"univ" STATS_WorldID + 1 ][ stat ] = stat_val
//		}
//	}
//	else
	{
		for (i = 0; i < 5; i++)
		{
			y = 0.1 + (i * 0.05)
			switch( i )
			{
			case 0: STR_CreateText( "BigK", cvector( 0, y, 0), 0)  stat = STATS_KilledGroup3 break
			case 1: STR_CreateText( "PestK", cvector( 0, y, 0), 0)  stat = STATS_KilledGroup4 break
			case 2: STR_CreateText( "Attak", cvector( 0, y, 0), 0)  stat = STATS_NbAttack break
			case 3: STR_CreateText( "Time", cvector( 0, y, 0), 0)  stat = STATS_DureeMap break
			case 4: STR_CreateText( "Death", cvector( 0, y, 0), 0)  stat = STATS_NbMort break
			}
			
			texte = STR_CreateText( "\jr\", cvector ( 0.1, y, 0), 0)
			stat_val = @"univ" STATS[ @"univ" STATS_WorldID ][stat ]
			STR_AppendInt(texte, stat_val )
			
			if (stat == STATS_DureeMap)
				continue
				
			stat_val *= 100
			stat_prev = @"univ" STATS[ @"univ" STATS_WorldID + 1 ][ stat ]
			if (stat_prev < stat_val )
			{
				stat_prev += TIME_GetDt() * 50
				@"univ" STATS[ @"univ" STATS_WorldID + 1 ][ stat ] = stat_prev
				if (stat_prev < stat_val)
				{
					count = 0
					texte = STR_CreateText( "", cvector (0.11, y, 0), 0)
					while (stat_prev < stat_val )
					{
						stat_prev += 100
						STR_AppendText( texte, "+" )
						count++
						if (count == 20 ) break
					}
				}
			}
			else
				@"univ" STATS[ @"univ" STATS_WorldID + 1 ][ stat ] = stat_val
		}

	}

//	
//	texte = STR_CreateText( "Map : ", cvector( 0, 0, 0), 0 )
//	STR_AppendInt( texte, @"univ" STATS_WorldID )
//	STR_AppendText( texte, " - " )
//	STR_AppendInt( texte, @"univ" PROG_i_MapCur )
//	STR_AppendText( texte, " - " )
//	if ( (@"univ" PROG_i_MapCur  >= 0 ) && (@"univ" PROG_i_MapCur < @"univ" PROG_i_MapNumber) )
//	{
//		STR_AppendInt( texte, @"univ" PROG_ai_MapId[ @"univ" PROG_i_MapCur ] )
//		STR_AppendText( texte, " - " )
//	}
//	STR_AppendInt( texte, @"univ" world_ID )
//	STR_AppendText( texte, " - " )
//	STR_AppendInt( texte, @"univ" world_entrance_ID )
//	STR_AppendText( texte, " - " )
//	STR_AppendInt( texte, @"univ" PROG_i_MapReplay )
//	
//	texte = STR_CreateText( "Time", cvector( 0, 0.1, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.1, 0), 0 )
//	STR_AppendFloat( texte, STATS_Current( STATS_DureeMap ), 2 )
//	
//	texte = STR_CreateText( "Coup", cvector( 0, 0.15, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.15, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_NbCoup) )
//
//	texte = STR_CreateText( "Mort", cvector( 0, 0.2, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.2, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_NbMort) )
//
//	texte = STR_CreateText( "Bullet", cvector( 0, 0.25, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.25, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_NbBullet) )
//
//	texte = STR_CreateText( "Spears", cvector( 0, 0.3, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.3, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_NbSpears) )
//
//	texte = STR_CreateText( "MortP", cvector( 0, 0.35, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.35, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_NbMortJoueur ) )
//
//	texte = STR_CreateText( "KillP", cvector( 0, 0.4, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.4, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_KilledJack) )
//
//	texte = STR_CreateText( "KillNP", cvector( 0, 0.45, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.45, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_KilledNPC) )
//
//	texte = STR_CreateText( "Kill0", cvector( 0, 0.5, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.5, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_KilledGroup0) )
//	
//	texte = STR_CreateText( "Kill1", cvector( 0, 0.55, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.55, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_KilledGroup1) )
//
//	texte = STR_CreateText( "Kill2", cvector( 0, 0.6, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.6, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_KilledGroup2) )
//
//	texte = STR_CreateText( "Kill3", cvector( 0, 0.65, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.65, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_KilledGroup3) )
//
//	texte = STR_CreateText( "Kill4", cvector( 0, 0.7, 0 ), 0 )
//	texte = STR_CreateText( "", cvector( 0.1, 0.7, 0), 0 )
//	STR_AppendInt( texte, STATS_Current( STATS_KilledGroup4) )
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Add debug data
//	type is the type of object that generate the Dump
//		0 : ES d'entrée
//		1 : ES checkpoint
//		2 : ES de sortie
//		3 : swap d'arme avec caisse
//		4 : échange d'arme avec hayes
///////////////////////////////////////////////////////////////////////////////////////////////////////
procedure void	STATS_DumpDebugData( int pi_type, object po_object )
{
//	int	i, weapon, munition
//	
//	for (i = 10; i <= 28; i++)
//		STATS_Set( i, 0)
//		
//	STATS_Set( 10, pi_type)
//	STATS_Set( 11, @"univ" STATS_f_TempsTotal )
//	STATS_Set( 12, @"univ" STATS_f_TempsDeJeu )
//	STATS_Set( 13, @"univ" world_cur_ID )
//	STATS_Set( 14, @"univ" world_entrance_ID )
//	if ( @"univ" ai_HumainIsHere[ C_ID_Joueur ] )
//	{
//		weapon = @"univ" i_weapon_ID[ C_ID_Joueur ]
//		munition = @"univ" i_weapon_ammunition[ weapon ][ C_ID_Joueur ] + @"univ" i_weapon_ammunition_reserve[ weapon ][ C_ID_Joueur ]
//		STATS_Set( 15, weapon )
//		STATS_Set( 18, munition )
//		weapon = @"univ" i_weapon_ID_Save[ C_ID_Joueur ]
//		munition = @"univ" i_weapon_ammunition[ weapon ][ C_ID_Joueur ] + @"univ" i_weapon_ammunition_reserve[ weapon ][ C_ID_Joueur ]
//		STATS_Set( 16, weapon )
//		STATS_Set( 19, munition )
//		weapon = @"univ" i_weapon_ID_second[ C_ID_Joueur ]
//		munition = @"univ" i_weapon_ammunition[ weapon ][ C_ID_Joueur ] + @"univ" i_weapon_ammunition_reserve[ weapon ][ C_ID_Joueur ]
//		STATS_Set( 17, weapon )
//		STATS_Set( 20, munition )
//	}
//	if ( @"univ" ai_HumainIsHere[ C_ID_Hayes ] )
//	{
//		weapon = @"univ" i_weapon_ID[ C_ID_Hayes ]
//		munition = @"univ" i_weapon_ammunition[ weapon ][ C_ID_Hayes] + @"univ" i_weapon_ammunition_reserve[ weapon ][ C_ID_Hayes ]
//		STATS_Set( 21, weapon )
//		STATS_Set( 24, munition )
//		weapon = @"univ" i_weapon_ID_Save[ C_ID_Joueur ]
//		munition = @"univ" i_weapon_ammunition[ weapon ][ C_ID_Hayes ] + @"univ" i_weapon_ammunition_reserve[ weapon ][ C_ID_Hayes ]
//		STATS_Set( 22, weapon )
//		STATS_Set( 25, munition )
//		weapon = @"univ" i_weapon_ID_second[ C_ID_Joueur ]
//		munition = @"univ" i_weapon_ammunition[ weapon ][ C_ID_Hayes] + @"univ" i_weapon_ammunition_reserve[ weapon ][ C_ID_Hayes]
//		STATS_Set( 23, weapon )
//		STATS_Set( 26, munition )
//	}
//	STATS_Set( 27, @"univ" i_death_counter )
//	STATS_Set( 28, @"univ" i_deathplayer_counter )
//	STATS_Set( 1, 0)
//	
//	if (pi_type == 2)
//		STATS_Set( 0, 0 )
}