int				ti_i, i
int				ti_k
int				ti_string_ID
int				ti_loop 
float			tf_angle
object		to_obj
object		to_enemy
vector		tv_temp
int				ti_last
int				ti_rank
int				ti_texte
int				ti_humain
message	tmsg_filter
messageid tmsg_id
float			f, f1

DBG_EraseAllVectors()

i_cam_joueur_accroupi = faux
i_cam_joueur_plaque_contre = faux

// Backup des modes de Camera --------------------------------------
i_kong_camera_status_old = i_kong_camera_status
mid_kong_camera_status_old = mid_kong_camera_status
m_cam_plan.msg_id = 0		// Kill the message
o_kong_finish_target = nobody
// Backup des modes de Camera --------------------------------------

// Backup du FEU ------------------------------------------------------------
i_nbr_de_feux_en_cours = i_nbr_de_feux_en_cours_now
i_nbr_de_feux_en_cours_now = 0
// Backup du FEU ------------------------------------------------------------

// Angle MUR/SOL dependante du perso qu'on controle ------------------
COL_GlobalWallCosAngleSet(Cf_Kong_Angle_Mur_sol)
ODE_WorldGravitySet(cvector(0,0,-30))

// READ MESSAGES
AI_Execute("GG_Exec_ReadMsg")

// SELECT CHEAT PAGE
AI_Execute("GG_Exec_Cheat")

// DISPLAY STATS
#ifndef _FINAL_
if (@"univ" Cheat_i_Flags & CHEAT_DumpStats )
	STATS_Dump()
#endif

// GAME SPEED
AI_Execute("GG_Exec_Game_Speed")

// LECTURE DU JOY
AI_Execute("GG_Exec_Joy")

// AFTER FX
AI_Execute("GG_Exec_AFX")

i_frame_nbr++

// Cumul du temps de jeu...
@"univ" STATS_f_TempsDeJeu += TIME_GetDt()


// VENT
f_wind_timer -= TIME_GetDt()
if (f_wind_timer <= 0.0)
{
	f_wind_timer = MATH_RandFloat(0.5, 2.0)
	f_wind_duration = f_wind_timer

	v_wind_last = v_wind_current
	v_wind_next = MATH_VecRotate(cvector(1.0, 0.0, 0.0), Cv_VerticalVector, MATH_RandFloat(-Cf_PiBy4, Cf_PiBy4))
	v_wind_next *= f_wind_timer
}
v_wind_current = MATH_VecBlend(v_wind_next, v_wind_last, f_wind_timer / f_wind_duration)

// Backup & Reset des compteurs pour les ennemis. -------------------------
for (ti_loop = 0; ti_loop<9; ti_loop++)
{
	i_ennemi_counter_old[ti_loop] = i_ennemi_counter_new[ti_loop]
	i_ennemi_counter_new[ti_loop] = 0
}

///////////////// TRAJECTOIRE
to_obj = AI_MainActorGet(0)
if(!to_obj) return
tv_temp = @to_obj OBJ_PosGet()
ti_last = i_oldest_pos_main - 1
if(ti_last < 0) ti_last = i_max_pos_main - 1
if(MATH_VecNorm(tv_temp - av_all_pos_main[ti_last]) > 2)
{
	av_all_pos_main[i_oldest_pos_main] = tv_temp
	i_oldest_pos_main = MATH_Modulo(i_oldest_pos_main + 1, i_max_pos_main)
}

// RASTER
if (!i_GST_Climb_NearestSightReachableWaypoint_Warning && i_GST_Climb_NearestSightReachableWaypoint_Invalid_Pos_nb)
{
	i_GST_Climb_NearestSightReachableWaypoint_Warning = vrai
	DBG_Warning("UNE POSITION EST INACCESSIBLE, REGARDEZ LES VECTEURS")
}

for (ti_i = 0; ti_i < i_GST_Climb_NearestSightReachableWaypoint_Invalid_Pos_nb; ti_i++)
{
	DBG_RenderVector(av_GST_Climb_NearestSightReachableWaypoint_Invalid_Pos[ti_i], Cv_VerticalVector * 10000000.0, 0x80C002)
	DBG_RenderVector(av_GST_Climb_NearestSightReachableWaypoint_Invalid_Pos[ti_i], Cv_VerticalVector * -10000000.0, 0x80C002)
	DBG_RenderVector(@ao_GST_Climb_NearestSightReachableWaypoint_Invalid_Pos_Nearest_Wp[ti_i] OBJ_PosGet(), av_GST_Climb_NearestSightReachableWaypoint_Invalid_Pos[ti_i] - @ao_GST_Climb_NearestSightReachableWaypoint_Invalid_Pos_Nearest_Wp[ti_i] OBJ_PosGet(), 0x80C002)
}


if (i_GST_Climb_Territory_Get_Call)
{
//	DBG_TraceFloat(TIME_Get())
//	DBG_TraceString(" => GST_Climb_Territory_Get a été appelée ")
//	DBG_TraceInt(i_GST_Climb_Territory_Get_Call)
//	DBG_TraceString(" fois")
//	DBG_TraceEOL()

	i_GST_Climb_Territory_Get_Call = 0
}

if (i_raptor_ray_on_visual_nb)
{
//	DBG_TraceFloat(TIME_Get())
//	DBG_TraceString(" => ")
//	DBG_TraceInt(i_raptor_precal_pos_used)
//	DBG_TraceString(" lancers de rayon sur visuel")
//	DBG_TraceEOL()

	i_raptor_ray_on_visual_nb = 0
}

if (i_raptor_ray_on_colmap_nb)
{
//	DBG_TraceFloat(TIME_Get())
//	DBG_TraceString(" => ")
//	DBG_TraceInt(i_raptor_ray_on_colmap_nb)
//	DBG_TraceString(" lancers de rayon sur colmap")
//	DBG_TraceEOL()

	i_raptor_ray_on_colmap_nb = 0
}

if (i_raptor_way_precal_wp_used)
{
//	DBG_TraceFloat(TIME_Get())
//	DBG_TraceString(" => ")
//	DBG_TraceInt(i_raptor_way_precal_wp_used)
//	DBG_TraceString(" positions précalculées utilisées")
//	DBG_TraceEOL()
	
	i_raptor_way_precal_wp_used = 0
}

if (i_raptor_net_way_precal_used)
{
//	DBG_TraceFloat(TIME_Get())
//	DBG_TraceString(" => ")
//	DBG_TraceInt(i_raptor_net_way_precal_used)
//	DBG_TraceString(" chemin précalculés utilisées")
//	DBG_TraceEOL()
	
	i_raptor_net_way_precal_used = 0
}


if (i_reachable_from_call_nb)
{
//	DBG_TraceInt(i_reachable_from_call_nb)
//	DBG_TraceString(" tests de lignes droites pour un total de ")
//	DBG_TraceInt(i_reachable_from_case_nb)
//	DBG_TraceString(" cases testées => ")
//	DBG_TraceFloat(TIME_GetDt())
//	DBG_TraceEOL()

	i_reachable_from_call_nb = 0
	i_reachable_from_case_nb = 0
}

//if (i_raptor_precal_pos_used_nb)
//{
//	DBG_TraceInt(i_raptor_precal_pos_used_nb)
//	DBG_TraceString(" position pré-évaluées utilisées => ")
//	DBG_TraceFloat(TIME_GetDt())
//	DBG_TraceEOL()
//
//	i_raptor_precal_pos_used_nb = 0
//}

if (i_raptor_short_way_call_nb)
{
//	DBG_TraceFloat(TIME_Get())
//	DBG_TraceString("  => ")
//	DBG_TraceInt(i_raptor_short_way_call_nb)
//	DBG_TraceString(" calculs de chemins => ")
//	DBG_TraceFloat(TIME_GetDt())
//	DBG_TraceEOL()

	i_raptor_short_way_call_nb = 0
}

if (i_quick_sort_call_nb)
{
//	DBG_TraceInt(i_quick_sort_call_nb)
//	DBG_TraceString(" appels de quick sort avec ")
//	DBG_TraceInt(i_quick_sort_wp_nb)
//	DBG_TraceString(" wps traites => ")
//	DBG_TraceFloat(TIME_GetDt())
//	DBG_TraceEOL()

	i_quick_sort_call_nb = 0
	i_quick_sort_wp_nb = 0
}

if (i_refresh_territory_call_nb)
{
//	DBG_TraceString("Refresh territory a été appelée ")
//	DBG_TraceInt(i_refresh_territory_call_nb)
//	DBG_TraceString(" fois => ")
//	DBG_TraceInt(i_refresh_territory_iteration_nb)
//	DBG_TraceString(" iterations => ")
//	DBG_TraceFloat(TIME_GetDt())
//	DBG_TraceEOL()
	
	i_refresh_territory_call_nb = 0
	i_refresh_territory_iteration_nb = 0
}

// PRECAL GALIMINUS
for (ti_i = 0; ti_i < i_galiminus_precal_nb; ti_i++)
{
	i_perceived_actor_nb[ti_i] = 0
	i_budy_nb[ti_i] = 0
}
i_galiminus_precal_nb = 0


for (ti_i = 0; ti_i < i_grid_line_nb; ti_i++)
	ai_grid_line_tested_nb[ti_i] = 0
i_grid_line_nb = 0

///////// HUMAINS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////:

f_time_rage -= TIME_GetDt()
if(f_time_rage < 0) f_time_rage = 0


i_CB_way_num = 0
i_jack_grab = faux
o_qqun_grab = nobody
o_qqun_carry = nobody
o_qqun_walkstunned = nobody
i_qqun_marasme = faux
i_humain_opt_enn = faux
i_humain_teleport--
if(i_humain_teleport < 0) i_humain_teleport = 0
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////:

///////// SCORPIONS
f_delay_since_last_scorpion_dash += TIME_GetDt()


///////// ULTRA TAG
if (i_ultra_tag_touched)
{
	i_ultra_tag_touched = faux

	for (ti_i = 0; ti_i < 3; ti_i++)
	{
		if ( ! o_hyper_tag_actor[ti_i])
			break
	
		for (ti_k = 0; ti_k < 25; ti_k++)
			ai_hyper_tag_recompute_bloc[ti_i][ti_k] = vrai
	}
}

while(i_ultra_tag_nb)
{
	i_ultra_tag_nb--
	@ao_ultra_tag[i_ultra_tag_nb] AI_CBExecute(CallBack_TagOff, 0)
	ao_ultra_tag[i_ultra_tag_nb] = nobody
}
i_ultra_tag_last_id = -1

///////// SPIDER
i_spider_sound_done = faux
i_spider_perceived_actor_nb = -1
i_spider_budy_nb = 0
i_spider_dist_computed = faux

/////////// PLUIE
ENV_pluie_interdit = faux

/////////// FIRE
i_fire_flag_already_checked = faux
i_fire_gao_nb = 0

/////////// BATS
f_bat_plongeon_delay -= MATH_FloatMin(f_bat_plongeon_delay, TIME_GetDt())

/////////// CRABS
f_CRAB_idle_net_intimidation -= MATH_FloatMin(f_CRAB_idle_net_intimidation, TIME_GetDt())

////////// K Ann
i_KAnn_check_paf_on_network = faux

////////// KONG
i_Kong_ignore_paf = faux

////////// Optimim Recompute Network
if (i_BVTerritory_LinkHasChanged)
	i_BVTerritory_LinkHasChanged --

/////////// IK
i_IK_LEG_Target = @"univ" Cheat_i_Flags & CHEAT_IKOnVisuel
i_IK_LEG_Off =  @"univ" Cheat_i_Flags & CHEAT_IK_LEG_Off
i_IK_NECK_Off =  @"univ" Cheat_i_Flags & CHEAT_IK_NECK_Off

////////// SOFT COL BAT
i_soft_col_bat_computed = faux

if ( ! i_world_stopped)
{
	
	// PLANETES ============================
	tf_angle = Cf_Rotation_Planete
	f = @"univ" Planetes_CurHour
	if(f > 6 && f < 18) 
		tf_angle *= 2
	else 
		tf_angle *= 3
	tf_angle *= TIME_GetDt()
	@"univ" Planetes_CurRotation[0] += tf_angle
	
	
	// Calcul heure courante =====================
	f = @"univ" Planetes_CurRotation[0]
	f /= Cf_PiBy2
	i = (f - 0.5)
	f1 = i * Cf_PiBy2
	i  = MATH_Modulo(i, 4)
	f = @"univ" Planetes_CurRotation[0]
	f1 = f - f1
	
	if(i == 0)
		i = 12
	else if(i == 1)
		i = 18
	else if(i == 2)
		i = 0
	else
		i = 6
	
	f1 = i + ((f1 * 6) / Cf_PiBy2)
	@"univ" Planetes_CurHour = f1
	if( @"univ" i_cheat_page == 5 )	
		Str_DisplayFloatOnce(f1, cvector( 0.8,0.05,0))
}

// PATH LIB OPTIMISATION
PATH_LIB_main_actor_wp = nobody
if (PATH_LIB_current_client_ID < PATH_LIB_new_client_ID)
	PATH_LIB_current_client_ID++
if (PATH_LIB_dodge_current_client_ID < PATH_LIB_dodge_new_client_ID)
	PATH_LIB_dodge_current_client_ID++

// WAY LIB
WAY_LIB_Main_Actor_Occluder_index = -1


// CHEATS
if( @"univ" i_cheat_page == 1 )
{
	// ON OFF
	if( IO_ButtonJustPressed(joy_button_Up) )
		i_DBG_PNJ_Lapin = 1 - i_DBG_PNJ_Lapin
	if( IO_ButtonJustPressed(joy_button_Right) )
		i_DBG_PNJ_MiniRobot = 1 - i_DBG_PNJ_MiniRobot
	if( IO_ButtonJustPressed(joy_button_Down) )
		i_DBG_Grappin = 1 - i_DBG_Grappin
	
	// DISPLAY
	if( i_DBG_PNJ_Lapin )
		Str_DisplayTextOnce("\cFFFF\\h0.05\Up : Lapinous", cvector(0.0, 0.1,0.0))
	else
		Str_DisplayTextOnce("Up : Lapinous", cvector(0.0, 0.1,0.0))
	if( i_DBG_PNJ_MiniRobot )
		Str_DisplayTextOnce("\cFFFF\\h0.05\Right : Mini-Robots", cvector(0.0, 0.15,0.0))
	else
		Str_DisplayTextOnce("Right : Mini-Robots", cvector(0.0, 0.15,0.0))
	if( i_DBG_Grappin )
	{
		Str_DisplayTextOnce("\cFFFF\\h0.05\Down : Grappin", cvector(0.0, 0.2,0.0))
		if( i_GRAPPIN_OutOfControl_flag )
			Str_DisplayTextOnce("\cFF\\h0.04\Grappin Control : NO", cvector(0.0, 0.25, 0))
		else
			Str_DisplayTextOnce("\cFF00\\h0.04\Grappin Control : YES", cvector(0.0, 0.25, 0))
	}
	else
		Str_DisplayTextOnce("Down : Grappin", cvector(0.0, 0.2,0.0))
}


// SNP
GG_SNP_InsertionSort()
//GG_SNP_Display_BVBVCol()

//// CRICKET
//i_cricket_dist_computed = faux
i_cricket_respawn = 0

// Mashing actions
o_mashing_action = nobody

// WEARSHOP
//if( IO_ButtonJustPressed(joy_button_Start) )
//	i_wearshop_active_flag = 1 - i_wearshop_active_flag
i_lums_absorbes = 0
i_lums_generes = 0

// CANCEL GRAPPIN ?
if( i_grappin_hotspot_nmi_died )
{
	i_grappin_hotspot_nmi_died++
	if( i_grappin_hotspot_nmi_died == 2 )
	{
		i_grappin_hotspot_nmi_died = faux			// 1 trame plus tard - tous les raymans doivent le lire -
	}
}

// DANSE
i_Danse_Actors_pos_recompute = faux



