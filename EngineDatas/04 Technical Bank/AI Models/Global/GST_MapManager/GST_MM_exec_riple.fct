int			ripple 
vector 	tv_temp
object	to_obj, to_obj1
int			ti_capa
int			i_Gfx
int			i

#define des_f_minlife 0.5
#define des_f_maxlife 0.8
#define des_c_ripple 0x731B1E15

if(TIME_Elapsed(f_last_gen_ripple, f_next_freq_ripple))
{
	COL_CrossableSet(0, 0)
	to_obj = AI_MainActorGet(0)
	tv_temp = @to_obj OBJ_PosGet() + (@to_obj OBJ_SightGet() * MATH_RandInt(2, 7))
	tv_temp += ( @to_obj OBJ_HorizonGet() * MATH_RandInt(-4, 4) )
	
	for(i = 0; i < 20; i++)
	{
		if(!o_zone_interdit[i]) break
		to_obj1 = o_zone_interdit[i]
		if(@to_obj1 COL_BV_PointCollide(tv_temp)) return
	}

	to_obj1 = COL_RayObject_Vector(tv_temp + cvector(0,0,2), cvector(0,0,-3), all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
	if(!to_obj1) return
	tv_temp = COL_RayObject_PosGet()
	
	/////////////////////////
	i_Gfx = GFX_Add(9)  // ajout de l’effet
	GFX_FlagSet(i_Gfx,0,1) // activation de l’effet
	GFX_FlagSet(i_Gfx, 2, 1) // matériau transparent
	GFX_MaterialSet(i_Gfx, get_SFX_light_and_smoke,5)	// matériau
	GFX_Setv( i_Gfx, 9200, tv_temp) //position
//	DBG_RenderVector(tv_temp, cvector(0,0,10), 255)
	GFX_Setv( i_Gfx, 9201, cvector( 0, 0, 0.1)) // axe du cone de vitesse
	 GFX_Setv( i_Gfx, 9202, cvector( 0, 0, -5) )	 // gravité
	 GFX_Seti( i_Gfx, 9100, 10)	 // nb max d’étincelles
 	GFX_Seti( i_Gfx, 9101, 0x73151515)	 // couleur
	 GFX_Seti (i_Gfx, 9102, 24) // flags : 16 => bit 4 à 1 => temps de mort
	 GFX_Setf( i_Gfx, 9000, 0.1 )	 // angle
	 GFX_Setf( i_Gfx, 9001, 15) // speed min
	 GFX_Setf( i_Gfx, 9002, 25) // speed max
	 GFX_Setf( i_Gfx, 9003, 0.99) // friction
	 GFX_Setf( i_Gfx, 9004, 0.02 ) // width
	 GFX_Setf( i_Gfx, 9005, 0.1 ) // time min
	 GFX_Setf( i_Gfx, 9006, 0.2 ) // time max
	 GFX_Setf( i_Gfx, 9007, 2 ) // scale
	 GFX_Setf( i_Gfx, 9008, 0.01  ) // period
	 GFX_Setf( i_Gfx, 9009, 0.2  ) // temps de mort minimum
	 GFX_Setf( i_Gfx, 9010, 0.3  ) // temps de mort maxi
	
	/////////////////////////
//	tv_temp = @to_obj OBJ_PosGet()
//	tv_temp += @to_obj OBJ_SightGet() * MATH_RandFloat(2, 7)
//	tv_temp += @to_obj OBJ_HorizonGet() * MATH_RandFloat(-5, 5)
//	tv_temp.z = des_f_zsol
//	ti_capa = GRID_CapaGet(tv_temp) & tag_grid_terrain
//	if(ti_capa == Ci_sol_eau || ti_capa == Ci_sol_eau_herbe || ti_capa == Ci_sol_eau_mouche_feu || ti_capa == Ci_sol_eau_basse_herbe || ti_capa == Ci_sol_eau_basse)
//	{
//		f_last_gen_ripple = TIME_Get()
//		ripple = GFX_Add(20)
//		GFX_MaterialSet(ripple, get_SFX_light_and_smoke, 16 )
//		GFX_Setf(ripple,20000, MATH_RandFloat(des_f_minlife, des_f_maxlife))		// durée de vie
//		GFX_Setf(ripple,20001,2.0 + MATH_RandFloat(0.8, 1.2))		// vitesse 
//		GFX_Setf(ripple,20002,0)		// frequence gen sprites
//		GFX_Setf(ripple,20003,0)		// speed
//		
//		GFX_Seti(ripple, 20100, 1)		// Nbre
//		GFX_Seti(ripple, 20100, -2)	// Pour destruction auto
//		GFX_Seti(ripple, 20101, des_c_ripple)
//		GFX_Seti(ripple, 20102, 0x00000000)
//		
//		DBG_RenderVector(tv_temp, cvector(0,0,10), 25502)
//		GFX_Setv(ripple,20200, tv_temp)	// pos			
//		GFX_Setv(ripple,20201, Cv_VerticalVector)	// pos		
//		GFX_Setv(ripple,20202, cvector(1,0,0))	// pos		
//	}
}
