//---------------------------------------------------------------------------------------------------------------------------
// INCLUDE
//---------------------------------------------------------------------------------------------------------------------------
#include "SPEECH_Constant.var"


//---------------------------------------------------------------------------------------------------------------------------
// VAR
//---------------------------------------------------------------------------------------------------------------------------
int i, j, ti_rq
object	to_sender
object		to_target
text 		tt_text
int 		ti_priority
float		tf_timeout
int		ti_flag
int		ti_listid
int		ti_listindex


//---------------------------------------------------------------------------------------------------------------------------
// CODE
//---------------------------------------------------------------------------------------------------------------------------

//
// clear old block request (it is supposed to be registered in only one frame)
//
for(i=0;  i<Cte_StackSize; i++)
{
	if( ai_tmp_dialoglist[i] == 0) continue
	
	if( ai_tmp_dialoglist[i] & 0x70000000 )
	{
				
		// content is valid
		ti_rq = ai_tmp_dialoglist[i] & 0x0FFFFFFF
		
		// delete the request from data array
		SPEECH_DeleteDataRq(ti_rq)
	}
 
	ai_tmp_dialoglist[i] = 0
}

//
// update time out
//
for(i=0;  i<i_request_number; i++)
{
	if(ai_current_listid[0] && (ai_data_listid[ai_request_sortedlist[i]] == ai_current_listid[0]) )
	{
		continue
	}
	if(ai_current_listid[1] && (ai_data_listid[ai_request_sortedlist[i]] == ai_current_listid[1]) )
	{
		continue
	}
	
	af_data_timeout[ai_request_sortedlist[i]] -= 	TIME_GetDt()
	if(af_data_timeout[ai_request_sortedlist[i]] > 0.0) continue
	
	SPEECH_ReadDataRq
	(
		ai_request_sortedlist[i],
		to_sender,
		to_target,
 		tt_text,
 		ti_priority,
		tf_timeout,
		ti_flag,
		ti_listid,
		ti_listindex
	)
	speech_dbg_printtxt("RqCanceled : time is out !", to_sender, tt_text, -1)
	
	SPEECH_DeleteDataRq(ai_request_sortedlist[i])
	
	for(j=i; j<i_request_number; j++)
	{
		ai_request_sortedlist[j] = ai_request_sortedlist[j+1]
		ai_request_sortedlist[j+1] = -1
	}
	
	i_request_number--
	i-- // now the next elem is at rank (i)
}


