#include "ROOT/EngineDatas/04 Technical Bank/AI Models/Global Library/menu_constant.var"
#include "Interface_MenuInGame_defs.var"

vector 	v
int			ti_index, ti_exitpage
object	to_texte, to_obj

//@"univ" Cheat_i_Flags |= CHEAT_UnlockAllMaps
//@"univ" Cheat_i_Flags |= CHEAT_UnlockAllBonus

//ti_index = STR_CreateTextGroup( "run = ", cvector(0.1, 0.1, 0), 0, 1 )
//STR_AppendHexa( ti_index,mi_MC_running)
//ti_index = STR_CreateTextGroup( "msg = ", cvector(0.1, 0.15, 0), 0, 1 )
//STR_AppendHexa( ti_index,mi_MC_msg)
//
//ti_index = STR_CreateTextGroup( "profile = ", cvector(0.1, 0.2, 0), 0, 1 )
//STR_AppendInt( ti_index,@"univ" MENU_ProfileIndex)
//ti_index = STR_CreateTextGroup( "PWS = ", cvector(0.1, 0.25, 0), 0, 1 )
//STR_AppendInt( ti_index,@"univ" MENU_PlayWithoutSaving)


IO_SetControlMode( 2 )

IntMIG_MoveBoat()

// apparition du menu
if ( mi_MenuState == 0)
{
	if ( !IntMIG_BG_Appear() )
	{
		mf_BG_State[ 0 ] =  1
		mf_BG_State_new[ 0 ] =  1
		mi_MenuState = 1
	}
	else
		return
}
else
{
	if (mi_ChangePage_First)
		mi_ChangePage_First--
}

// management sound
IntMIG_ManageSound()

// sortie du menu
if ( OBJ_CapaTest( OBJ_Capa_8 ) )
{
	mi_ExitAsked = 1
	OBJ_CapaSet( 0, OBJ_Capa_8)
}
else if ( !OBJ_CapaTest( OBJ_Capa_15) && !OBJ_CapaTest( OBJ_Capa_14) && IO_ButtonJustPressed( joy_button_Start ) )
	mi_ExitAsked = 1

ti_exitpage = 0
if ( mi_ExitAsked )
{
	mi_ExitAsked = 0
	if (!mi_Exit)
	{
		mi_Exit = 1
		mf_GenLumStart = 1
		mf_GenLumEnd = 0
		mf_GenLumTime = 0.1
		mf_GenLumTimeCur = 0
		for (ti_index = 0; ti_index < 10; ti_index++)
			mf_BG_State_new[ ti_index ] = 0
		ti_exitpage = 1
	}
	IntMIG_PlaySound( INTMIG_SOUND_MENUOUT )
}

if (mf_GenLumTime > 0)
{
	if (mf_GenLumTimeCur != mf_GenLumTime )
	{
		mf_GenLumTimeCur += TIME_GetDt()
		if (mf_GenLumTimeCur > mf_GenLumTime )
			mf_GenLumTimeCur = mf_GenLumTime
		AI_Execute( "IntMIG_colorize" )
		if (mi_Exit)
			IntMIG_BG_Show( 1.0 -(mf_GenLumTimeCur / mf_GenLumTime) )
	}
	else
	{
		mf_GenLumTime = 0
		if (mi_Exit)
		{
			SND_M_SetGameMode(SND_Cte_ModePlaying)
			OBJ_CapaSet( 0, OBJ_Capa_9 )
			WOR_UnPause(0,0xFFFFFFFF)
			IntMIG_TimeUnlock()
			@"univ" PROG_ES_0to1 = faux
			
			// ----( show game text )----
			if ( @"univ" Texte_InGame )
			{
				to_texte = @"univ" Texte_InGame
				@to_texte OBJ_FlagInvisibleSet( 0 )
			}
			
			// ----( hide object )----
			to_obj = mao_BG[ 0 ]
			if (to_obj ) @to_obj OBJ_FlagInvisibleSet( 1 )
			to_obj = mao_BG[ 1 ]
			if (to_obj ) @to_obj GRP_FlagInvisibleSet( 1 )
			to_obj = mao_BG[ 6 ]
			if (to_obj ) @to_obj GRP_FlagInvisibleSet( 1 )
			to_obj = mao_BG[ 7 ]
			if (to_obj ) @to_obj GRP_FlagInvisibleSet( 1 )


			OBJ_FlagInvisibleSet( 1 )
			OBJ_PosSet( cvector(-10, -1, 0 ) )
			AI_TrackStop(  2 ) 
			AI_TrackStop(  3 ) 
			STR_GroupDisplaySet(0xFFFFFFFF,0)
			AI_TrackCurChange( "IntMIG_wait" )
			if (mo_Texte)
				@mo_Texte OBJ_TextReset()
			
			//procedure void LIBGFX_Fade( int mat, int col1, int col2, float t0, float t1, float t2, float t3, float t4, int prio )
			GFX_AddSorted(11, 10)
			GFX_FlagSet( 10, 0, 1)          										// active l'effet
			GFX_FlagSet( 10, 2, 1 )          										// met le flag materiau transparent a vrai
			GFX_MaterialSet( 10, mo_SFXLightAndSmoke, 31)   	// met le materiau
			GFX_Seti( 10, 11100, 0xFF000000)        	// couleur 0
			GFX_Seti( 10, 11101, 0)    		// couleur 1
			GFX_Setf( 10, 11000, 0.1)         	// t0
			GFX_Setf( 10, 11001, 0.1)         	// t1
			GFX_Setf( 10, 11002, 0)         	// t2
			GFX_Setf( 10, 11003, 0)         	// t3
			GFX_Setf( 10, 11004, 0)      		// t4
		
			return
		}
	}
}

v = IO_JoyGetMove()
IntMIG_UpdateJoy( INTMIG_JOY_DOWN, -v.y, IO_ButtonPressed( joy_button_Down ) )
IntMIG_UpdateJoy( INTMIG_JOY_UP,  v.y, IO_ButtonPressed( joy_button_Up ) )
IntMIG_UpdateJoy( INTMIG_JOY_RIGHT, v.x, IO_ButtonPressed( joy_button_Right ) )
IntMIG_UpdateJoy( INTMIG_JOY_LEFT, -v.x, IO_ButtonPressed( joy_button_Left ) )
v = IO_JoyGetMove1()
IntMIG_UpdateJoy( INTMIG_JOY1_DOWN, -v.y, 0 )
IntMIG_UpdateJoy( INTMIG_JOY1_UP,  v.y, 0 )
IntMIG_UpdateJoy( INTMIG_JOY1_RIGHT, v.x, IO_ButtonJustPressed( joy_button_R ) )
IntMIG_UpdateJoy( INTMIG_JOY1_LEFT, -v.x,  IO_ButtonJustPressed( joy_button_L ))

if ( mi_ChangePage  )
{
	if ( mi_ChangePage_End )
	{
		mi_ChangePage_End = 0
		mi_ChangePage = 0
		mi_Cur = mi_ChangePageCur 
		mf_ChangePageTimer = INTMIG_ChangePageTimer
		if (AI_TrackGet( 2 ))
			AI_TrackChange( 3, AI_TrackGet( 2 ) )
		mai_PageString[ 1 ] = mai_PageString[ 0 ]
		AI_TrackStop( 2 )
	}
	else
	{
		if ( mf_ChangePageTimer == INTMIG_ChangePageTimer )
			mi_ChangePage_Start = 1
		else
			mi_ChangePage_Start = 0
			
		mf_ChangePageTimer -= TIME_GetDt()
		
		if ( mf_ChangePageTimer <= 0 )
		{
			mi_ChangePage_End = 1
			mf_ChangePageTimer = 0
		}
		else
			mi_ChangePage_End = 0
	}
}
else
{
	mi_ChangePage_End = 0
	mi_ChangePage_Start = 0
}

if (ti_exitpage)
	mi_ChangePage_Start = 1

if (mf_BG_State[0] != mf_BG_State_new[ 0 ] )
{
	if (mf_BG_State[0] < mf_BG_State_new[ 0 ])
	{
		mf_BG_State[0] += 2 * TIME_GetDt()
		if (mf_BG_State[0] > mf_BG_State_new[ 0 ])
			mf_BG_State[0] = mf_BG_State_new[ 0 ]
	}
	else
	{
		mf_BG_State[0] -= 2 * TIME_GetDt()
		if (mf_BG_State[0] < mf_BG_State_new[ 0 ])
			mf_BG_State[0] = mf_BG_State_new[ 0 ]
	}
	IntMIG_BG_Show( mf_BG_State[0] )
}

// CHEAT
//if (!mi_Cheat) mi_CheatCode = 0
if (IO_ButtonPressed( joy_button_L ) && IO_ButtonPressed( joy_button_R ) )
{
	mi_Cheat = 0
	if (IO_ButtonJustPressed( joy_button_Down )) mi_CheatCode = (mi_CheatCode * 10) + 1
	//if (IO_ButtonJustPressed( joy_button_B ) || IO_ButtonJustPressed( joy_button_Right )) mi_CheatCode = (mi_CheatCode * 10) + 2
	if (IO_ButtonJustPressed( joy_button_B )) mi_CheatCode = (mi_CheatCode * 10) + 2
	//if (IO_ButtonJustPressed( joy_button_C ) || IO_ButtonJustPressed( joy_button_Left )) mi_CheatCode = (mi_CheatCode * 10) + 3
	if (IO_ButtonJustPressed( joy_button_C )) mi_CheatCode = (mi_CheatCode * 10) + 3
	if (IO_ButtonJustPressed( joy_button_Up )) mi_CheatCode = (mi_CheatCode * 10) + 4
}
else if (mi_CheatCode != 0)
{
	mi_Cheat = 0
	
	// FINAL CHEAT : display page with characters to enter another bugs
	if (mi_CheatCode == CC_CheatFINAL )
	{
		mi_Page_Refresh = 1
		UNIV_SwapCheatFlags( CHEAT_MenuCheatFinal )
	}
	
	// ----( sort de la map )----
	if (mi_CheatCode == 44113421)
	{
		IntMIG_Cheat_ExitMap()
		mi_CheatCode = 0
	}
	
	// ----( affiche / desaffichee les stats )----
//	if ( mi_CheatCode == CC_DumpStats )
//	{
//		UNIV_SwapCheatFlags( CHEAT_DumpStats )
//		mi_CheatCode = 0
//	}

	
	// Mode final : annule tous les autres cheat codes				
#ifdef _FINAL_
	mi_CheatCode = 0
#endif

#ifndef _FINAL_
	// mode non final mais sans cheat : annule tout les autres cheat codes
	if ( MENU_NOCHEAT )
		mi_CheatCode = 0
	
	// ----( cheat show version )----	
	if (mi_CheatCode == CC_ShowVersion)
		UNIV_SwapCheatFlags( CHEAT_ShowVersion )
	
	// ----( cheat ES 0 to 1 )----	
	if (mi_CheatCode == CC_ES0to1) 
		@"univ" PROG_ES_0to1 = !@"univ" PROG_ES_0to1
		
	// ----( cheat show subtitle )----	
	if (mi_CheatCode == CC_ShowSubtitle)
	{
		if (@"univ" SND_gi_ShowSubtitle)
			@"univ" SND_gi_ShowSubtitle = 0
		else
			@"univ" SND_gi_ShowSubtitle = 1
	}
	
	// ----( add/delete cheat debug menu )----
	if (mi_CheatCode == CC_MenuCheat )
	{
		mi_Page_Refresh = 1
		UNIV_SwapCheatFlags( CHEAT_MenuCheat )
	}
	
	// ----( add/delete reinit  debug menu )----
	if (mi_CheatCode == CC_MenuReinit )
	{
		mi_Page_Refresh = 1
		UNIV_SwapCheatFlags( CHEAT_MenuReinit )
	}
	
	// ----( cheat unlock maps )----	
	if (mi_CheatCode == CC_UnlockMaps )
		UNIV_SwapCheatFlags( CHEAT_UnlockAllMaps )
		
	// ----( cheat unlock bonus )----	
	if (mi_CheatCode == CC_UnlockBonus )
		UNIV_SwapCheatFlags( CHEAT_UnlockAllBonus )
		
	// ----( sort du menu pour retourner au menu de base )----	
	if (mi_CheatCode == CC_MenuDeBase )
	{
		OBJ_CapaSet( OBJ_Capa_8, 0 )
		mi_CheatCode = 0
	}
	
	// ----( sort de la map )----
	if (mi_CheatCode == CC_ExitMap )
		IntMIG_Cheat_ExitMap()
		
	// ----( show mode neuneu/normal/exploit )----
	if (mi_CheatCode == CC_ShowModeNeuneu )
		UNIV_SwapCheatFlags( CHEAT_ShowModeNeuneu)
		
	// ----( force mode neuneu/normal/exploit )----
	if ( mi_CheatCode == CC_ModeNeuneu )
		@"univ" Cheat_i_ModeNeuneuExploit = MATH_Modulo( @"univ" Cheat_i_ModeNeuneuExploit + 1, 4 )		
	
	// ----( affiche / desaffichee les stats )----
	if ( mi_CheatCode == CC_DumpStats )
		UNIV_SwapCheatFlags( CHEAT_DumpStats )
		
	// ----( display on/off info slot )----
	if (mi_CheatCode == CC_ShowSlotInfo)
		UNIV_SwapCheatFlags( CHEAT_ShowSlotInfo )
		
	mi_CheatCode = 0
#endif
}

#ifndef _FINAL_

if (@"univ" Cheat_i_Flags & CHEAT_ShowVersion )
{
	@mo_Texte OBJ_TextSet( 9, VERSION_STRING )
	if ( @"univ" MENU_NZ )
	{
		@mo_Texte OBJ_TextInsert( 9, -1, " - " )
		switch( @"univ" MENU_NZ )
		{
		case 1: @mo_Texte OBJ_TextInsert( 9, -1, MENU_DEMO1_NAME ) break
		case 2: @mo_Texte OBJ_TextInsert( 9, -1, MENU_DEMO2_NAME ) break
		case 3: @mo_Texte OBJ_TextInsert( 9, -1, MENU_DEMO3_NAME ) break
		case 4: @mo_Texte OBJ_TextInsert( 9, -1, MENU_DEMO4_NAME ) break
		default: @mo_Texte OBJ_TextInsert( 9, -1, "??" ) break
		}
	}
	if ( @"univ" PROG_ES_0to1 )
	{
		@mo_Texte OBJ_TextInsert( 9, -1,  " - ES021" )
	}
	if ( @"univ" SND_gi_ShowSubtitle )
		@mo_Texte OBJ_TextInsert( 9, -1, " - SubOn" )
	else
		@mo_Texte OBJ_TextInsert( 9, -1, " - SubOff" )
		
	if (@"univ" Cheat_i_Flags & CHEAT_ShowModeNeuneu )
		@mo_Texte OBJ_TextInsert( 9, -1, "- show mode" )
		
	switch (@"univ" Cheat_i_ModeNeuneuExploit )
	{
		case 1:	@mo_Texte OBJ_TextInsert( 9, -1, "- force exploit" ) break
		case 2: 	@mo_Texte OBJ_TextInsert( 9, -1, "- force normal" ) break
		case 3:	@mo_Texte OBJ_TextInsert( 9, -1, "- force neuneu" ) break
	}
					
	IntMIG_CreateText_End( 9, cvector(0, 0, 0),  0.6, 0, -1, 0x002391E6, 0, 0 )
}
else
	@mo_Texte OBJ_TextSet( 9, "" )

#endif // _FINAL_