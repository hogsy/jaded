//#include "Interface_MenuInGame_defs.var"
//
//int			ti_Line, ti_cross, ti_Group, ti_InHOF, ti_neg, ti_Factor, ti_Val
//int			ti_Texte, ti_Who, ti_FirstText
//int			ti_Col
//int			ti_SaveCur
//float		tf_Val
//vector	tv_Pos
//int			ti_Count
//int			tai_Factor[ 10 ]
//
//if (!IntMIG_SetPageParams())
//	return
//if (!mo_Texte)
//	return
//	
//if (INTMIG_EnterPage_Start)
//{
//	ti_InHOF = 0
//	IntMIG_ResetTexte( mi_PageString, 30 )
//	ti_Texte = 10
//	
//	IntMIG_SetText( ti_Texte, INTMIG_TXG, INTMIG_TEXT_SCOREGEN, cvector(0.5, 0.02, 0),  1.2, 1, -1, 0xFFFFFF, 0 )
//	ti_Texte++
//	if (mi_StartMenu)
//	{
//		IntMIG_SetText( ti_Texte, INTMIG_MAPNAME_TXG, INTMIG_MAPNAME_TXT + @"univ" PROG_ai_MapTexte[ mi_HOF_Map ], cvector(0.5, 0.1, 0),  1.2, 1, -1, 0xFFFFFF, 0 )
//		ti_Texte++
//	}
//	else
//	{
//		ti_Count = IntMIG_HOF_GetPlayerScore( @"univ" PROG_i_MapReplayIndex )
//		if (ti_Count > 0)
//		{
//			@mo_Texte OBJ_TextSet( ti_Texte, TEXT_Get(INTMIG_TXG, INTMIG_TEXT_SCOREGEN + 5) )
//			@mo_Texte OBJ_TextIntInsert(ti_Texte, -1, ti_Count)
//			IntMIG_CreateText_End( ti_Texte, cvector(0.5, 0.1, 0),  1.2, 1, -1, 0xFFFFFF, 0, 0 )
//		}
//		ti_Texte++
//	}
//	
//	if ( mi_ScoreJack )
//	{
//		ti_Count = 8
//		tai_Factor[ 0 ] = SCOREFACTOR_Jack_BigKills 
//		tai_Factor[ 1 ] = SCOREFACTOR_Jack_PredatorKill 
//		tai_Factor[ 2 ] = SCOREFACTOR_Jack_PestKill
//		tai_Factor[ 3 ] = SCOREFACTOR_Jack_Bullets 
//		tai_Factor[ 4 ] = SCOREFACTOR_Jack_Spears 
//		tai_Factor[ 5 ] = SCOREFACTOR_Jack_Deaths 
//		tai_Factor[ 6 ] = SCOREFACTOR_Jack_Injuries 
//		tai_Factor[ 7 ] = SCOREFACTOR_Jack_BuddyInjured
//		ti_FirstText = INTMIG_TEXT_SCORE + 0
//	}
//	else
//	{
//		ti_Count = 4
//		tai_Factor[ 0 ] = SCOREFACTOR_Kong_BeastKill
//		tai_Factor[ 1 ] = SCOREFACTOR_Kong_PestKill
//		tai_Factor[ 2 ] = SCOREFACTOR_Kong_Attacks
//		tai_Factor[ 3 ] = SCOREFACTOR_Kong_Time
//		ti_FirstText = INTMIG_TEXT_SCORE + 10
//	}
//	
//	tv_Pos = cvector( 0, 0.24, 0)
//	ti_neg = 0
//	mi_ScoreMap = 0
//	ti_Col = 0x7FFF7F
//	
//	tv_Pos.x = 0.5
//	IntMIG_SetText( ti_Texte, INTMIG_TXG, INTMIG_TEXT_SCOREGEN + 6, tv_Pos,  0.0, 6, -1, ti_Col, 0 )
//	ti_Texte++
//	
//	if (	mi_HOF_ScoreMapBonus )
//		mi_ScoreMap += mi_HOF_MapBonus
//	else
//		ti_Col = 0x808080
//		
//	tv_Pos.x = 0.6
//	IntMIG_CreateText_Start( ti_Texte )
//	@mo_Texte OBJ_TextIntInsert( ti_Texte, -1, mi_ScoreMap )
//	IntMIG_CreateText_End( ti_Texte, tv_Pos,  0.0, 6, -1, ti_Col, 0, 0 )
//	ti_Texte++
//	tv_Pos.y += 0.06
//	ti_Col = 0x7FFF7F
//		
//	for (ti_Line = 0; ti_Line < ti_Count; ti_Line ++ )
//	{
//		if ( (ti_Line == 2) && !IntMIG_HOF_PestKill( mi_HOF_Map) )
//			continue
//		
//		ti_Factor = tai_Factor[ ti_Line ]
//		if (ti_Factor < 0)
//		{
//			if ( !ti_neg )
//			{
//				ti_neg = 1
//				tv_Pos.y += 0.05
//				ti_Col = 0x7F7FFF
//			}
//			ti_Factor = -ti_Factor * mi_HOF_MulSub
//		}
//		else
//		{
//			ti_Factor *= mi_HOF_MulAdd
//		}
//			
//		tv_Pos.x = 0.5
//		IntMIG_SetText( ti_Texte, INTMIG_TXG, ti_FirstText + ti_Line, tv_Pos,  0.0, 6, -1, ti_Col, 0 )
//		ti_Texte++
//		
//		tv_Pos.x = 0.6
//		IntMIG_CreateText_Start( ti_Texte )
//		@mo_Texte OBJ_TextIntInsert( ti_Texte, -1, mai_ScoreVal[ ti_Line ] )
//		IntMIG_CreateText_End( ti_Texte, tv_Pos,  0.0, 6, -1, ti_Col, 0, 0 )
//		ti_Texte++
//
//		tv_Pos.x = 0.62
//		IntMIG_CreateText_Start( ti_Texte )
//		@mo_Texte OBJ_TextInsert( ti_Texte, -1, "x ")
//		@mo_Texte OBJ_TextIntInsert( ti_Texte, -1, ti_Factor )
//		IntMIG_CreateText_End( ti_Texte, tv_Pos,  0.5, 4, -1, ti_Col, 0, 0 )
//		ti_Texte++
//			
//		ti_Val = ti_Factor * mai_ScoreVal[ ti_Line ]
//		if (ti_neg)
//			mi_ScoreMap -= ti_Val
//		else
//			mi_ScoreMap += ti_Val
//				
//		tv_Pos.x = 0.8
//		IntMIG_CreateText_Start( ti_Texte )
//		if (ti_neg && ti_Val ) @mo_Texte OBJ_TextInsert( ti_Texte, -1, "- ")
//		@mo_Texte OBJ_TextIntInsert( ti_Texte, -1, ti_Val )
//		IntMIG_CreateText_End( ti_Texte, tv_Pos,  0.0, 4, -1, ti_Col, 0, 0 )
//		ti_Texte++
//			
//		tv_Pos.y += 0.06
//	}
//		
//	if (mi_ScoreMap < 0) mi_ScoreMap = 0
//			
//	tv_Pos.x = 0.8
//	tv_Pos.y += 0.05
//	IntMIG_CreateText_Start( ti_Texte )
//	@mo_Texte OBJ_TextIntInsert( ti_Texte, -1, mi_ScoreMap )
//	IntMIG_CreateText_End( ti_Texte, tv_Pos,  0.0, 4, -1, 0xFFFFFF, 0, 0 )
//	ti_Texte++
//	
//	mi_ScoreSave = 0
//	if (@"univ" PROG_i_MapReplay && mi_StartMenu )
//	{
//		IntMIG_SetText( ti_Texte, INTMIG_TXG, INTMIG_TEXT_Xcontinue, cvector( 0.5, 0.95, 0),  0.0, 5, -1, 0x808080, 0 )
//		if (mi_ScoreMap > SAVE_HeaderGetScore( @"univ" MENU_ProfileIndex, mi_HOF_Map ) )
//			mi_ScoreSave = 1
//	}
//	else
//	{
//		IntMIG_SetText( ti_Texte, INTMIG_TXG, INTMIG_TEXT_Xcontinue, cvector( 0.4, 0.95, 0),  0.0, 6, -1, 0x808080, 0 )
//		IntMIG_SetText( ti_Texte + 1, INTMIG_TXG, INTMIG_TEXT_Tback, cvector( 0.6, 0.95, 0),  0.0, 4, -1, 0x808080, 0 )
//	}
//			
//	IntMIG_Text_FadeInMulti( 10, 40, 0.5, 0.0 )
//}
//else if (INTMIG_LeavePage_Start)
//{
//	IntMIG_Text_FadeOutMulti( 10, 40, 0.5 )
//}
//
//IntMIG_RestorePageParams()
//
//if ( mi_Exit || mi_ChangePage || mi_Cheat)
//	return
//
//if ( joy_cancel  )
//{
//	if (@"univ" PROG_i_MapReplay && mi_StartMenu)
//	{
//		IntMIG_PlaySound( INTMIG_SOUND_VALIELOCK )
//	}
//	else
//	{
//		IntMIG_PlaySound( INTMIG_SOUND_CANCEL )
//		INTMIG_ChangePage(  "IntMIG_Page_ScoreLeaveToMap" , mi_Cur )
//	}
//	return
//}
//	
//if ( joy_valide )
//{
//	IntMIG_PlaySound( INTMIG_SOUND_VALIDE )
//	mi_HOF_Goto = 1
//	INTMIG_ChangePage( "IntMIG_Page_ScoreChange" , mi_Cur )
//}
//