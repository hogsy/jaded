#include "Interface_MenuInGame_defs.var"


//============================================
// Profile data 
//============================================

procedure_local void IntMIG_ProfileGetData()
{
	int 		i, j 
	string		asz_Name
	int 		i_Slot, i_Time, ul_GameTime, i_Map, i_WP, i_DeathNumber
	int			best, besttime, morerecent
	int			ai_Time[ 5 ], ai_LastTime[ 5 ]
	
	mi_Profile_Nb = 0
	mi_Profile_Empty = -1
	morerecent = 0
	
	for(i_Slot = 0; i_Slot<5; i_Slot++)
	{
		i_Time = 0
		SAVE_HeaderGet( i_Slot, &i_Time, &ul_GameTime, &i_Map, &i_WP, &i_DeathNumber)
		if ( i_Time )
		{
			if ( ul_GameTime > morerecent )
			{
				morerecent = ul_GameTime
				mi_Profile_MoreRecent = i_Slot
			}
			mi_Profile_Index[ mi_Profile_Nb ] = i_Slot 
			ai_Time[ mi_Profile_Nb ] = i_Time
			ai_LastTime[ mi_Profile_Nb ] = ul_GameTime
			mi_Profile_Nb++
		}
		else if (mi_Profile_Empty == -1)
			mi_Profile_Empty = i_Slot
	}
	
	// sort profile 
	for (i_Slot = 0; i_Slot < mi_Profile_Nb; i_Slot++ )
	{
		best = i_Slot
		besttime = ai_Time[ i_Slot ]
		for (i = i_Slot + 1; i < mi_Profile_Nb; i++)
		{
			if (ai_Time[ i ] > besttime )
			{
				best = i
				besttime = ai_Time[ i ]
			}
		}
		if (best != i_Slot )
		{
			i = ai_Time[ best ]
			ai_Time[ best ] = ai_Time[ i_Slot ]
			ai_Time[ i_Slot ] = i
			i = mi_Profile_Index[ best ]
			mi_Profile_Index[ best ] = mi_Profile_Index[ i_Slot ]
			mi_Profile_Index[ i_Slot ] = i
		}
	}
}

procedure_local void IntMIG_ProfileGet_MapES( int i_Slot )
{
	string	asz_Name
	int i_Time, ul_GameTime,  i_DeathNumber, i_Map, i_ES
	
	if (@"univ" MENU_ProfileIndex == -1 )
		return

	i_Time = 0
	SAVE_HeaderGet( i_Slot, &i_Time, &ul_GameTime, &i_Map, &i_ES, &i_DeathNumber)
	@"univ" PROG_i_Map = i_Map
	@"univ" PROG_i_ES = i_ES
	
	// update map cur of normal game
	@"univ" PROG_i_MapCur = 0
	for (i_Map = 0; i_Map < @"univ" PROG_i_MapNumber; i_Map++)
	{
		if ( @"univ" PROG_ai_MapId[ i_Map ] == @"univ" PROG_i_Map )
		{
			@"univ" PROG_i_MapCur = i_Map
			break
		}
	}
}

procedure_local void IntMIG_Debug_SlotTimeDisplay( int i_Slot, vector V )
{
	int 		i_Time, ul_GameTime, i_Map, i_WP, i_DeathNumber
	int			i_Hour, i_Day, i_Min, i_Sec
	int			ti_texte
		
	if ( ( @"univ" Cheat_i_Flags & CHEAT_ShowSlotInfo) && (i_Slot != -1) )
	{
		i_Time = 0
		SAVE_HeaderGet( i_Slot, &i_Time, &ul_GameTime, &i_Map, &i_WP, &i_DeathNumber)
		
		i_Sec = MATH_Modulo( i_Time, 60 )
		i_Time = (i_Time - i_Sec) / 60
		i_Min = MATH_Modulo( i_Time, 60 )
		i_Time = ( i_Time - i_Min ) / 60
		i_Hour = MATH_Modulo( i_Time, 24 )
		i_Day = (i_Time - i_Hour) / 24
		ti_texte = STR_CreateTextGroup( "creation; ", V, 0, 1)
		STR_AppendInt( ti_texte, i_Day )
		STR_AppendText( ti_texte, " - " )
		STR_AppendInt( ti_texte, i_Hour )
		STR_AppendText( ti_texte, ":" )
		STR_AppendInt( ti_texte, i_Min )
		STR_AppendText( ti_texte, ":" )
		STR_AppendInt( ti_texte, i_Sec )

		i_Time = ul_GameTime
		i_Sec = MATH_Modulo( i_Time, 60 )
		i_Time = (i_Time - i_Sec) / 60
		i_Min = MATH_Modulo( i_Time, 60 )
		i_Time = ( i_Time - i_Min ) / 60
		i_Hour = MATH_Modulo( i_Time, 24 )
		i_Day = (i_Time - i_Hour) / 24		
		ti_texte = STR_CreateTextGroup( "save; ", V + cvector( 0, 0.04, 0) , 0, 1)
		STR_AppendInt( ti_texte, i_Day )
		STR_AppendText( ti_texte, " - " )
		STR_AppendInt( ti_texte, i_Hour )
		STR_AppendText( ti_texte, ":" )
		STR_AppendInt( ti_texte, i_Min )
		STR_AppendText( ti_texte, ":" )
		STR_AppendInt( ti_texte, i_Sec )
		
		i_Time = -3
		SAVE_HeaderGet( i_Slot, &i_Time, &ul_GameTime, &i_Map, &i_WP, &i_DeathNumber)
		ti_texte = STR_CreateTextGroup( "tick: ", V + cvector( 0, 0.08, 0) , 0, 1)
		STR_AppendInt( ti_texte, ul_GameTime )
		ti_texte = STR_CreateTextGroup( "score: ", V + cvector( 0, 0.12, 0) , 0, 1)
		STR_AppendInt( ti_texte, i_Map)
		ti_texte = STR_CreateTextGroup( "ID: ", V + cvector( 0, 0.16, 0) , 0, 1)
		STR_AppendInt( ti_texte, i_WP)
		ti_texte = STR_CreateTextGroup( "prog: ", V + cvector( 0, 0.2, 0) , 0, 1)
		STR_AppendInt( ti_texte, i_DeathNumber)
		
		i_Time = -1
		SAVE_HeaderGet( i_Slot, &i_Time, &ul_GameTime, &i_Map, &i_WP, &i_DeathNumber)
		ti_texte = STR_CreateTextGroup( "JD: ", V + cvector( 0, 0.25, 0) , 0, 1)
		STR_AppendInt( ti_texte, ul_GameTime )
		ti_texte = STR_CreateTextGroup( "JB: ", V + cvector( 0, 0.29, 0) , 0, 1)
		STR_AppendInt( ti_texte, i_Map)
		ti_texte = STR_CreateTextGroup( "JK: ", V + cvector( 0, 0.34, 0) , 0, 1)
		STR_AppendInt( ti_texte, i_WP)
		
		i_Time = -2
		SAVE_HeaderGet( i_Slot, &i_Time, &ul_GameTime, &i_Map, &i_WP, &i_DeathNumber)
		ti_texte = STR_CreateTextGroup( "KD: ", V + cvector( 0.15, 0.25, 0) , 0, 1)
		STR_AppendInt( ti_texte, ul_GameTime )
		ti_texte = STR_CreateTextGroup( "KT: ", V + cvector( 0.15, 0.29, 0) , 0, 1)
		STR_AppendInt( ti_texte, i_Map)
		ti_texte = STR_CreateTextGroup( "KK: ", V + cvector( 0.15, 0.34, 0) , 0, 1)
		STR_AppendInt( ti_texte, i_WP)
	}
}

//============================================
// Test en boucle la présence d'une mémory card
//============================================
procedure_local int IntMIG_MC_TestPresence()
{
	mi_MC_running = SAVE_Request(INO_e_SavRq_Status, 0)
	if (mi_MC_running)
	{
		mi_MC_TestState = 1
		return 1
	}
		
	if ( mi_MC_TestState == 0)
	{
		mi_MC_TestState = 1
		SAVE_Request(INO_e_SavRq_FreeRessource, 0)
		SAVE_Request(INO_e_SavRq_TestMemCard, 0)
		return 1
	}
	
	mi_MC_TestState = 0
	mi_MC_msg = SAVE_Request(INO_e_SavRq_UserMessageId, 0)
	if (mi_MC_msg != INO_e_SavMsg_None )
		return 0

	return 1
}

//============================================
// Affichage d'un texte pour la fonctions suivante
//============================================
procedure_local void IntMIG_MC_GotoSave( int pi_ExitAfterSave )
{
	int i, i_Score[ 50 ]
	
	if ( (pi_ExitAfterSave == 0 ) || (pi_ExitAfterSave == 1) )
	{
		@"univ" PROG_i_Map = @"univ" world_ID
		@"univ" PROG_i_ES = @"univ" world_entrance_ID
	}
	else if (pi_ExitAfterSave == 4)
	{
		@"univ" PROG_i_Map = 7
		@"univ" PROG_i_ES = 0
	}
	
	for ( i = 0; i < @"univ" PROG_i_MapNumber; i++)
	{
		if (@"univ" PROG_i_Map == @"univ" PROG_ai_MapId[ i ] )
		{
			@"univ" PROG_i_MapCur = i
			break
		}
	}
	
	for (i = 0; i < @"univ" PROG_i_MapNumber; i++)
		i_Score[ i ] = SAVE_HeaderGetScore(@"univ" MENU_ProfileIndex, i )
	
	SAVE_HeaderSet(@"univ" MENU_ProfileIndex, -3, 0, 0, 0, @"univ" PROG_i_MapCur )
	SAVE_HeaderSet
		( 
			@"univ" MENU_ProfileIndex,
			1,
			0,
			@"univ" PROG_i_Map,
			@"univ" PROG_i_ES,
			@"univ" PROG_i_MapCur
		)

	for (i = 0; i < @"univ" PROG_i_MapNumber; i++)
		SAVE_HeaderSetScore(@"univ" MENU_ProfileIndex, i , i_Score[ i ])
		
	mi_MC_Slot = @"univ" MENU_ProfileIndex
	mi_MC_Mode = INTMIG_MCMode_Save
	mi_MC_State = 0
	mi_MC_ExitAfterSave = pi_ExitAfterSave
	
	switch (mi_MC_ExitAfterSave)
	{
	case 0 : mi_MC_PageAfterCancelSave = INTMIG_MCPage_GOTO_GameMenu break
	case 1 : mi_MC_PageAfterCancelSave = INTMIG_MCPage_GOTO_GameMenu break
	case 2 :	mi_MC_PageAfterCancelSave = INTMIG_MCPage_GOTO_Map break
	case 3 : mi_MC_PageAfterCancelSave = INTMIG_MCPage_GOTO_MainMenu_Options break
	case 4 : mi_MC_PageAfterCancelSave = INTMIG_MCPage_GOTO_MainMenu_XTra break
	}
	
	INTMIG_ChangePage( "IntMIG_Page_Memcard", mi_Cur )
}


//============================================
// Affichage d'un texte pour la fonctions suivante
//============================================
procedure_local void	IntMIG_MC_DisplayTexte( int pi_TextId )
{
	vector size
	
	@mo_Texte OBJ_TextMaxWidthSet( 0.8 )
	IntMIG_SetText( mi_PageString , mi_MC_Txg, mi_MC_Texte + pi_TextId, cvector( 0.5, 0.45, 0), 0.0, 1, 0, 0xFFFFFFFF, 0 )
	@mo_Texte OBJ_TextMaxWidthSet( 0 )
	size = @mo_Texte OBJ_TextSizeGet( mi_PageString, 0, -1)
	if (0.45 + size.y > 0.95 )
	{
		@mo_Texte OBJ_TextFlagSet( mi_PageString, 25 )
		@mo_Texte OBJ_TextPivotSet(mi_PageString, cvector( 0.5, 0.95, 0) )
	}
	
	IntMIG_Text_SetFrame( mi_PageString + 1, 0xFFFFFFFF, 0.02, mi_PageString, -1, -1, -1, -1, -1, 33 )
	//@mo_Texte OBJ_TextMaxWidthSet( 0 )
	//IntMIG_Text_FadeInMulti( mi_PageString, 2, 0.1, 0.0 )
}

//============================================
// Affichage d'un texte pour la fonctions suivante
//============================================
procedure_local void	IntMIG_MC_HideTexte()
{
	//IntMIG_Text_FadeOutMulti( mi_PageString, 2, 0.1 )
	@mo_Texte OBJ_TextSet( mi_PageString, "" )
	@mo_Texte OBJ_TextSet( mi_PageString + 1, "" )
}

//============================================
// FONCTION D'AFFICHAGE des PAGES MEMCARD
//============================================
procedure_local void IntMIG_MC_Display( )
{
	if ( mi_MC_PageDisplayed == -1)
	{
		mi_MC_PageDisplayed = mi_MC_Page
		mi_MC_PageChange = 0
	}
	else if (mi_MC_PageDisplayed != mi_MC_Page)
	{
//		if (mi_MC_PageChange == 0)
//		{
//			IntMIG_MC_HideTexte()
//			mi_MC_PageChange = 1
//			mf_MC_PageChangeTimer = 0.1
//			return
//		}
//		else
//		{
//			mf_MC_PageChangeTimer -= TIME_GetDt()
//			if (mf_MC_PageChangeTimer > 0)
//				return
//			mi_MC_PageChange = 0
//			mi_MC_PageDisplayed = mi_MC_Page
//		}
		IntMIG_MC_HideTexte()
		mi_MC_PageDisplayed = mi_MC_Page
	}
	else
		return
		
	//-------------------------------( GET PROFILE )----------------------------------
	if (mi_MC_Page == INTMIG_MCPage_ProfileGet)
	{
		IntMIG_MC_DisplayTexte( 0 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_ProfileGet_Error)
	{
		IntMIG_MC_DisplayTexte( 1 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_ProfileGet_Ok ) 
	{
		mi_MC_Page = INTMIG_MCPage_GOTO_Profile
		return
	}
	//-------------------------------( CREATE PROFILE )----------------------------------
	if (mi_MC_Page == INTMIG_MCPage_ProfileCreate	)
	{
		IntMIG_MC_DisplayTexte( 5 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_ProfileCreate_Error)
	{
		IntMIG_MC_DisplayTexte( 6 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_ProfileCreate_OK)
	{
		IntMIG_MC_DisplayTexte( 7 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_ProfileCreate_OKX)
	{
		SAVE_Unvalidate()
		IntMIG_RestoreOptions()
		IntMIG_ProfileGet_MapES( mi_MC_Slot )
		mi_MC_Page = INTMIG_MCPage_GOTO_LoadProfileAfterCreate
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_ProfileCreate_ErrorX)
	{
		if ( mi_MC_msg == INO_e_SavMsg_NoCard)
			mi_MC_Page = INTMIG_MCPage_GOTO_MainMenuNoSave
		else
			mi_MC_Page = INTMIG_MCPage_GOTO_Profile
		return
	}
	//-------------------------------( DELETE PROFILE )----------------------------------
	if (mi_MC_Page == INTMIG_MCPage_ProfileDelete)
	{		
		IntMIG_MC_DisplayTexte( 10 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_ProfileDelete_Error)
	{
		IntMIG_MC_DisplayTexte( 11 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_ProfileDelete_OK)
	{
		IntMIG_MC_DisplayTexte( 12 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_ProfileDelete_OKX)
	{
		mi_MC_Page = INTMIG_MCPage_GOTO_Profile
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_ProfileDelete_ErrorX)
	{
		mi_MC_Page = INTMIG_MCPage_GOTO_Profile
		return
	}
	//-------------------------------( LOAD PROFILE )----------------------------------
	if (mi_MC_Page == INTMIG_MCPage_Load	)
	{
		IntMIG_MC_DisplayTexte( 15 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Load_Error	)
	{
		IntMIG_MC_DisplayTexte( 16 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Load_OK)
	{
		IntMIG_MC_DisplayTexte( 17 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Load_OKX)
	{
		SAVE_Unvalidate()
		IntMIG_RestoreOptions()
		IntMIG_ProfileGet_MapES( mi_MC_Slot )
		mi_MC_Page = INTMIG_MCPage_GOTO_MainMenu
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Load_ErrorX	)
	{
		//mi_MC_Page = INTMIG_MCPage_GOTO_MainMenuNoSave
		mi_MC_Mode = INTMIG_MCMode_ProfileGet
		mi_MC_State = 0
		return
	}

	//-------------------------------( SAVE PROFILE )----------------------------------
	if (mi_MC_Page == INTMIG_MCPage_Save)
	{
		if ( mi_MC_ExitAfterSave == 3)	
			IntMIG_MC_DisplayTexte( 5 )
		else
			IntMIG_MC_DisplayTexte( 20 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Save_Error)
	{
		IntMIG_MC_DisplayTexte( 21 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Save_OK)
	{
		//DBG_TraceString( "Save Buffer : Save7" ) DBG_TraceEOL()
		SAVE_Request( INO_e_SavRq_SaveSaveBuffer, 7)
		IntMIG_MC_DisplayTexte( 22 )
		return
	}
	if ( mi_MC_Page == INTMIG_MCPage_Save_Cancel )
	{
		if (mi_MC_Mode == INTMIG_MCMode_ProfileDelete)
			IntMIG_MC_DisplayTexte( 13 )
		else
			IntMIG_MC_DisplayTexte( 23 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Save_ConfirmOverwriting)
	{
		IntMIG_MC_DisplayTexte( 24 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Save_ConfirmSave)
	{
		IntMIG_MC_DisplayTexte( 9 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Save_OKX)
	{
		switch (mi_MC_ExitAfterSave)
		{
			case 0: mi_MC_Page = INTMIG_MCPage_GOTO_Game break
			case 1: mi_MC_Page = INTMIG_MCPage_GOTO_LoadGameMenu break
			case 2: mi_MC_Page = INTMIG_MCPage_GOTO_Map break 
			case 3: mi_MC_Page = INTMIG_MCPage_GOTO_MainMenu_Options break
			case 4: mi_MC_Page = INTMIG_MCPage_GOTO_MainMenu_XTra break
		}
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Save_Error)
	{
		mi_MC_Page = INTMIG_MCPage_GOTO_GameMenu
		return
	}
	//-------------------------------( FORMAT )----------------------------------
	if (mi_MC_Page == INTMIG_MCPage_Format)
	{
		IntMIG_MC_DisplayTexte( 25 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_FormatConfirm)
	{
		IntMIG_MC_DisplayTexte( 36 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Format_Error)
	{
		IntMIG_MC_DisplayTexte( 26 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Format_OK)
	{
		IntMIG_MC_DisplayTexte( 27 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Format_OKX)
	{
	}
	if (mi_MC_Page == INTMIG_MCPage_Format_ErrorX)
	{
	}
	//-------------------------------( ERRORS )----------------------------------
	if (mi_MC_Page == INTMIG_MCPage_NoMemCard)
	{
		IntMIG_MC_DisplayTexte( 30 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_NotFormated)
	{
		IntMIG_MC_DisplayTexte( 32 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_Error	)
	{
		IntMIG_MC_DisplayTexte( 33 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_NotEnoughSpace)
	{
		IntMIG_MC_DisplayTexte( 34 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_NoSaving )
	{
		IntMIG_MC_DisplayTexte( 35 )
		return
	}
	//-------------------------------( ERRORS GC )----------------------------------	
	if (mi_MC_Page == INTMIG_MCPage_WrongFormatCard )
	{
		IntMIG_MC_DisplayTexte( 43 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_WrongDevice  )
	{
		IntMIG_MC_DisplayTexte( 38 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_NotFunctionnalCard )
	{
		IntMIG_MC_DisplayTexte( 39 )
		return
	}
	if (mi_MC_Page == INTMIG_MCPage_BadFileOnMC )
	{
		IntMIG_MC_DisplayTexte( 1 )
		return
	}
	//-------------------------------( AVANT ACCES  )----------------------------------	
	if (mi_MC_Page == INTMIG_MCPage_BeforeAccessing)
	{
		IntMIG_MC_DisplayTexte( 2 )
		return
	}
	
	//-------------------------------( Message non traité )----------------------------------
	if (mi_MC_Page < 10000 )
	{
		DBG_TraceString( "page non affiches" )
		DBG_TraceEOL()
		DBG_BreakPoint()
	}
}

procedure_local void IntMIG_MC_ProcessDbg()
{
#ifndef _FINAL_
	int 		i, ti_texte, i_new
	vector	tv_pos

	i_new = 0
	if ( ( mi_MC_msg != mai_MC_msg[0] ) || (mi_MC_running != mai_MC_running[ 0 ] )	 )
	{
		i_new = 1
		for (i = 9; i > 0; i--)
		{
			mai_MC_msg[ i ] = mai_MC_msg[ i - 1 ]
			mai_MC_running[ i ] = mai_MC_running[ i - 1 ]
		}
		mai_MC_msg[ 0 ] = mi_MC_msg
		mai_MC_running[ 0 ] = mi_MC_running
	}
	if (mai_MC_dbgpage[0] != mi_MC_Page)
	{
		i_new = 1
		for (i = 9; i > 0; i--)
			mai_MC_dbgpage[ i ] = mai_MC_dbgpage[ i - 1 ]
		mai_MC_dbgpage[ 0 ] = mi_MC_Page
	}
	
	if (mi_MC_Debug)
	{
		tv_pos = cvector( 0.98, 0.1, 0)
		
		for (i = 0; i < 9; i++)
		{
			if (mai_MC_dbgpage[ i ] == -1)
				break
			ti_texte = IntMIG_AddText_dbg( -1,  -1, tv_pos, 0.05, 2, 0xFFFFFFFF, 0 )
			tv_pos.y += 0.05
			STR_AppendInt( ti_texte, mai_MC_dbgpage[ i ] )
		}

		tv_pos = cvector( 0.9, 0.1, 0)

		for (i = 0; i < 9; i++)
		{
			if (mai_MC_running[ i ] == -1)
				break
			ti_texte = IntMIG_AddText_dbg( -1,  -1, tv_pos, 0.05, 2, 0xFFFFFFFF, 0 )
			tv_pos.y += 0.05
			if ( mai_MC_msg[ i ] == INO_e_SavMsg_None)
				STR_AppendText( ti_texte, "none " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_Accessing)
				STR_AppendText( ti_texte, "accessing " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_NoCard)
				STR_AppendText( ti_texte, "no card " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_UnformattedCard)
				STR_AppendText( ti_texte, "unformatted card " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_NoSaving)
				STR_AppendText( ti_texte, "no saving " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_NoMoreSpace)
				STR_AppendText( ti_texte, "no more space " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_ErrorWhileSaving)
				STR_AppendText( ti_texte, "error while saving " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_ErrorWhileLoading)
				STR_AppendText( ti_texte, "error while loading " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_ErrorWhileFormating)
				STR_AppendText( ti_texte, "error while formating " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_SuccessWhileSaving)
				STR_AppendText( ti_texte, "success while saving " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_SuccessWhileLoading)
				STR_AppendText( ti_texte, "success while loading " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_SuccessWhileFormating)
				STR_AppendText( ti_texte, "success while formating " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_Retrying)
				STR_AppendText( ti_texte, "retrying " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_Formating)
				STR_AppendText( ti_texte, "formating " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_FormatConfirmation )
				STR_AppendText( ti_texte, "format ? " )
			else if ( mai_MC_msg[ i ] == INO_e_SavMsg_CancelSave)
				STR_AppendText( ti_texte, "cancel save ? " )
			else
			{
				STR_AppendHexa( ti_texte, mai_MC_msg[ i ] )
				STR_AppendText( ti_texte, " " )
			}			
			STR_AppendInt( ti_texte, mai_MC_running[ i ] )
		}
	}
	if (i_new && mi_MC_BreakWhenChangeState )
		DBG_BreakPoint()
#endif // _FINAL_
}

procedure_local void IntMIG_MC_Process( )
{
	int 		i_ok
	
	mi_MC_msg = SAVE_Request(INO_e_SavRq_UserMessageId, 0)
	mi_MC_running = SAVE_Request(INO_e_SavRq_Status, 0)
	i_ok = 0
	
	//mi_MC_Debug = 1
	//IntMIG_MC_ProcessDbg()
	
	// fini
	if (mi_MC_running == 0)
	{
		OBJ_CapaSet( 0, OBJ_Capa_14)

		if ( mi_MC_msg == INO_e_SavMsg_None )
		{
			mi_MC_Page = mi_MC_PageAfterError
			i_ok = 1
		}
		if ( mi_MC_msg == INO_e_SavMsg_NoCard)
		{
			mi_MC_Page = mi_MC_PageAfterError
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_UnformattedCard)
		{
			mi_MC_Page = mi_MC_PageAfterError
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_NoSaving)
		{
			mi_MC_Page = mi_MC_PageAfterNoSaving
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_NoMoreSpace)
		{
			mi_MC_Page = mi_MC_PageAfterError
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_ErrorWhileSaving)
		{
			mi_MC_Page = mi_MC_PageAfterError
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_ErrorWhileLoading)
		{
			mi_MC_Page = mi_MC_PageAfterError
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_SuccessWhileSaving)
		{
			mi_MC_Page = mi_MC_PageAfterSuccess
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_SuccessWhileLoading)
		{
			mi_MC_Page = mi_MC_PageAfterSuccess
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_SuccessWhileFormating)
		{
			mi_MC_Page = mi_MC_PageAfterSuccess
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_Retrying)
		{
			mi_MC_Page = mi_MC_PageRetrying
			mi_MC_State = 0
			i_ok = 1
		}
		else if (mi_MC_msg == INO_e_SavMsg_CancelSave )
		{
			mi_MC_Page = mi_MC_PageAfterCancelSave
			if (mi_MC_Page == INTMIG_MCPage_ProfileGet)
			{
				mi_MC_Mode = INTMIG_MCMode_ProfileGet
				mi_MC_State = 0
			}
			i_ok = 1
		}
		else if (mi_MC_msg == INO_e_SavMsg_WrongFormatCard )
		{
			mi_MC_Page = mi_MC_PageAfterError
			i_ok = 1
		}		
		else if (mi_MC_msg == INO_e_SavMsg_WrongDevice )
		{
			mi_MC_Page = mi_MC_PageAfterError
			i_ok = 1
		}		
		else if (mi_MC_msg == INO_e_SavMsg_NotFunctionnalCard )
		{
			mi_MC_Page = mi_MC_PageAfterError
			i_ok = 1
		}		
		else if (mi_MC_msg == INO_e_SavMsg_BadFileOnMc )
		{
			mi_MC_Page = mi_MC_PageAfterError
			i_ok = 1
		}	
		else if (mi_MC_msg == INO_e_SavMsg_BeforeAccessing )
		{
			mi_MC_Page = mi_MC_PageAfterSuccess
			i_ok = 1
		}	
	}
	else
	{
		if ( mi_MC_msg == INO_e_SavMsg_Accessing)
		{
			mi_MC_Page = mi_MC_PageAccessing
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_NoCard)
		{
			mi_MC_Page = INTMIG_MCPage_NoMemCard
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_UnformattedCard)
		{
			mi_MC_Page = INTMIG_MCPage_NotFormated
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_NoSaving)
		{
			mi_MC_Page = INTMIG_MCPage_NoSaving
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_NoMoreSpace)
		{
			mi_MC_Page = INTMIG_MCPage_NotEnoughSpace
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_ErrorWhileSaving)
		{
			mi_MC_Page = mi_MC_PageError
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_ErrorWhileLoading)
		{
			mi_MC_Page = mi_MC_PageError
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_ErrorWhileFormating)
		{
			mi_MC_Page = INTMIG_MCPage_Format_Error
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_SuccessWhileSaving)
		{
			mi_MC_Page = mi_MC_PageSuccess
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_SuccessWhileLoading)
		{
			mi_MC_Page = mi_MC_PageSuccess
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_SuccessWhileFormating)
		{
			mi_MC_Page = INTMIG_MCPage_Format_OK
			mi_MC_Retry = 0
			i_ok = 1
		}
		else if ( mi_MC_msg == INO_e_SavMsg_Retrying)
		{
		}
		else if ( mi_MC_msg == INO_e_SavMsg_Formating)
		{
			mi_MC_Page = INTMIG_MCPage_Format
			i_ok = 1
		}
		else if (mi_MC_msg == INO_e_SavMsg_FormatConfirmation)
		{
			mi_MC_Page = INTMIG_MCPage_FormatConfirm
			i_ok = 1
		}
		else if (mi_MC_msg == INO_e_SavMsg_CancelSave )
		{
			mi_MC_Page = INTMIG_MCPage_Save_Cancel
			i_ok = 1
		}
		else if (mi_MC_msg == INO_e_SavMsg_ConfirmOverwriting )
		{
			mi_MC_Page = INTMIG_MCPage_Save_ConfirmOverwriting
			i_ok = 1
		}
		else if (mi_MC_msg == INO_e_SavMsg_ConfirmSave )
		{
			mi_MC_Page = INTMIG_MCPage_Save_ConfirmSave
			i_ok = 1
		}
		else if (mi_MC_msg == INO_e_SavMsg_Saving )
		{
			mi_MC_Page = mi_MC_PageSaving
			i_ok = 1
		}
		else if (mi_MC_msg == INO_e_SavMsg_Loading )
		{
			mi_MC_Page = mi_MC_PageLoading
			i_ok = 1
		}
		else if (mi_MC_msg == INO_e_SavMsg_WrongFormatCard )
		{
			mi_MC_Page = INTMIG_MCPage_WrongFormatCard
			i_ok = 1
		}		
		else if (mi_MC_msg == INO_e_SavMsg_WrongDevice )
		{
			mi_MC_Page = INTMIG_MCPage_WrongDevice 
			i_ok = 1
		}		
		else if (mi_MC_msg == INO_e_SavMsg_NotFunctionnalCard )
		{
			mi_MC_Page = INTMIG_MCPage_NotFunctionnalCard
			i_ok = 1
		}		
		else if (mi_MC_msg == INO_e_SavMsg_BadFileOnMc )
		{
			mi_MC_Page = INTMIG_MCPage_BadFileOnMC
			i_ok = 1
		}			
		else if (mi_MC_msg == INO_e_SavMsg_BeforeAccessing )
		{
			mi_MC_Page = INTMIG_MCPage_BeforeAccessing
			i_ok = 1
		}	
	}
	
	if (!i_ok)
	{
		DBG_TraceString( "traitement message non prévu" )
		DBG_TraceEOL()
		DBG_BreakPoint()
	}

}
