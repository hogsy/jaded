//#include "Interface_MenuInGame_defs.var"
//
//int			ti_Line
//int			ti_Texte
//int			ti_Col
//int			ti_Count
//int			ti_SaveCur
//vector	tv_Pos
//
//if (!IntMIG_SetPageParams())
//	return
//if (!mo_Texte)
//	return
//	
//tv_Pos = cvector( 0.8, 0.35, 0)
//ti_Count = 3
//
//// avirer après demo
////tv_Pos = cvector( 0.8, 0.5, 0)
////ti_Count = 1
//// fin avirer après demo
//
//if (INTMIG_EnterPage_Start)
//{
//	IntMIG_ResetTexte( mi_PageString, 20 )
//	ti_Texte = mi_PageString
//
//	IntMIG_SetText( ti_Texte, INTMIG_TXG, INTMIG_TEXT_OptionsInterface, cvector(0.5, 0.1, 0),  1.5, 5, -1, 0xFFFFFF, 0 )
//	ti_Texte++
//	
//	for (ti_Line = 0; ti_Line < ti_Count; ti_Line++)
//	{
//		ti_Col = IntMIG_GetTextLineColor( ti_Line )
//		IntMIG_SetText( ti_Texte, INTMIG_TXG, INTMIG_TEXT_OptionsInterface + 1 + ti_Line, tv_Pos,  0.0, 6, -1, ti_Col, 0 )
//		ti_Texte++
//		
//		tv_Pos.x = 0.2
//		switch ( ti_Line )
//		{
//		case 0: IntMIG_OptionsInterfaceString_Viseur( mi_PageString + 10 + ti_Line, tv_Pos, ti_Col) break
//		case 1: IntMIG_OptionsInterfaceString_Ammo( mi_PageString + 10 + ti_Line, tv_Pos, ti_Col) break
//		case 2: IntMIG_OptionsInterfaceString_Inventory( mi_PageString + 10 + ti_Line, tv_Pos, ti_Col) break
//		//case 3: IntMIG_OptionsInterfaceString_LifeBar( mi_PageString + 10 + ti_Line, tv_Pos, ti_Col) break
//		}
//		tv_Pos.x = 0.8
//		
//		tv_Pos.y += 0.08
//	}
//	
//	IntMIG_SetText( ti_Texte, INTMIG_TXG, INTMIG_TEXT_ChangeX, cvector( 0.4, 0.95, 0),  0.0, 6, -1, 0x808080, 0 )
//	IntMIG_SetText( ti_Texte + 1, INTMIG_TXG, INTMIG_TEXT_BackT, cvector( 0.6, 0.95, 0),  0.0, 4, -1, 0x808080, 0 )
//	
//	IntMIG_Text_FadeInMulti( mi_PageString, 20, 0.5, 0.0 )
//
//}
//else if (INTMIG_LeavePage_Start)
//{
//	IntMIG_Text_FadeOutMulti( mi_PageString, 20, 0.5 )
//}
//
//IntMIG_RestorePageParams()
//
//if ( mi_Exit || mi_ChangePage || mi_Cheat )
//	return
//	
//ti_SaveCur = mi_Cur
//IntMIG_UpdateCur_Vertical( ti_Count, 1 )
//if (mi_Cur != ti_SaveCur )
//{
//	IntMIG_Text_ChangeColor( mi_PageString + 1 + ti_SaveCur, INTMIG_Color_Sel, INTMIG_Color_NotSel, 0.25, 0.0 )
//	IntMIG_Text_ChangeColor( mi_PageString + 1 + mi_Cur, INTMIG_Color_NotSel, INTMIG_Color_Sel, 0.25, 0.0 )
//	IntMIG_Text_ChangeColor( mi_PageString + 10 + ti_SaveCur, INTMIG_Color_Sel, INTMIG_Color_NotSel, 0.25, 0.0 )
//	IntMIG_Text_ChangeColor( mi_PageString + 10 + mi_Cur, INTMIG_Color_NotSel, INTMIG_Color_Sel, 0.25, 0.0 )
//	IntMIG_PlaySound( INTMIG_SOUND_SELECTION )
//}
//
//if ( joy_cancel  )
//{
//	IntMIG_PlaySound( INTMIG_SOUND_CANCEL )
//	SAVE_ValidateAl()
//	INTMIG_ChangePage(  "IntMIG_Page_Options" , 3 )
//	return
//}
//	
//if ( joy_valide )
//{
//	tv_Pos.x = 0.2
//	tv_Pos.y += (mi_Cur * 0.08)
//	switch ( mi_Cur )
//	{
//		case 0:
//				if (	@"univ" CAM_Viseur )
//					@"univ" CAM_Viseur = 0
//				else
//					@"univ" CAM_Viseur = 1
//				IntMIG_OptionsInterfaceString_Viseur( mi_PageString + 10 + mi_Cur, tv_Pos, 0xFFFFFF)
//				SAVE_ValidateAl()
//				break
//			
//		case 1:
//				if (	@"univ" MENU_i_ShowAmmoLeft )
//					@"univ" MENU_i_ShowAmmoLeft = 0
//				else
//					@"univ" MENU_i_ShowAmmoLeft = 1
//				IntMIG_OptionsInterfaceString_Ammo( mi_PageString + 10 + mi_Cur, tv_Pos, 0xFFFFFF)
//				SAVE_ValidateAl()
//				break
//
//		case 2:
//				if (	@"univ" MENU_i_ShowInventory )
//					@"univ" MENU_i_ShowInventory = 0
//				else
//					@"univ" MENU_i_ShowInventory = 1
//				IntMIG_OptionsInterfaceString_Inventory( mi_PageString + 10 + mi_Cur, tv_Pos, 0xFFFFFF)
//				SAVE_ValidateAl()
//				break
//
////		case 3: 
////				if (	@"univ" MENU_i_ShowLifeBar )
////					@"univ" MENU_i_ShowLifeBar = 0
////				else
////					@"univ" MENU_i_ShowLifeBar = 1
////				IntMIG_OptionsInterfaceString_LifeBar( mi_PageString + 10 + mi_Cur, tv_Pos, 0xFFFFFF)
////				SAVE_ValidateAl()
////				break
//
//	}
//	IntMIG_PlaySound( INTMIG_SOUND_VALIDE )
//}
//