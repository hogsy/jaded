// ######################
// ##### ALL LINKS #######
// ######################

// USED ! SENDER == CLIENT QUI PROPOSE
// USED ! GAO1 == SERVEUR
// USED ! GAO2 == CLIENT
// USED ! VEC1 == PONDERATION

#define DGB_Grab_Kong						\
	#ifndef _FINAL_								\
		if (! MSG_GlobalIsValid(LNK_ID))	\
			DBG_BreakPoint()					\
		else if (MSG_GlobalGetType(LNK_ID) != ( Ci_LNK_EVENT_OFFSET + Ci_LNK_GRAB_KONG))\
			DBG_BreakPoint()					\
	#endif

#define DGB_KKGrabObject					\
	#ifndef _FINAL_								\
		if (! MSG_GlobalIsValid(LNK_ID))	\
			DBG_BreakPoint()					\
		else if (MSG_GlobalGetType(LNK_ID) != ( Ci_LNK_EVENT_OFFSET + Ci_LNK_GRAB_OBJECT))\
			DBG_BreakPoint()					\
	#endif

#define DGB_GrabTransporte					\
	#ifndef _FINAL_								\
		if (! MSG_GlobalIsValid(LNK_ID))	\
			DBG_BreakPoint()					\
		else if (MSG_GlobalGetType(LNK_ID) != ( Ci_LNK_EVENT_OFFSET + Ci_LNK_GRAB_TRANSPORTE))\
			DBG_BreakPoint()					\
	#endif


// ################################
// #### LNK TYPE INTERACTION #####
// ################################

// USED ! Int1 = Type de l'interaction
// USED ! Int2 = Status du client
// USED ! Vec2 = Position
// USED ! Gao3 = Gao utilisé pour certaines interactions


//#ifdef _FINAL_
//#define M_LNK_InteractionCheck
//#endif
//
//#ifndef _FINAL_
//#define M_LNK_InteractionCheck\
//	if (! MSG_GlobalIsValid(LNK_ID))\
//		DBG_BreakPoint()\
//	else if (MSG_GlobalGetType(LNK_ID)	!= Ci_LNK_EVENT_OFFSET + Ci_LNK_INTERACTION)\
//		DBG_BreakPoint()\
//#endif
//
//// --------( set type : indicate type of interaction )---------
//procedure void LNK_InteractionTypeSet(messageid LNK_ID, int ti_type)
//{
//	M_LNK_InteractionCheck
//	MSG_GlobalSetInt(LNK_ID, ti_type, INT1)
//}
//
//// --------( get type : get the type of interaction )---------
//procedure int LNK_InteractionTypeGet(messageid LNK_ID)
//{
//	M_LNK_InteractionCheck
//	return(MSG_GlobalGetInt(LNK_ID, INT1))
//}
//
//// --------( set client satus : indicate client status of link )---------
//procedure void LNK_InteractionCStatusSet(messageid LNK_ID, int ti_type)
//{
//	M_LNK_InteractionCheck
//	MSG_GlobalSetInt(LNK_ID, ti_type, INT2)
//}
//
//// --------( get client satus : get the client status of link )---------
//procedure int LNK_InteractionCStatusGet(messageid LNK_ID)
//{
//	M_LNK_InteractionCheck
//	return(MSG_GlobalGetInt(LNK_ID, INT2))
//}
//
//// --------( set manual : indicate an interaction manually launched by player )---------
//procedure void LNK_InteractionSetManual(messageid LNK_ID )
//{
//	M_LNK_InteractionCheck
//	MSG_GlobalSetInt(LNK_ID, 1, INT3)
//}
//
//procedure void LNK_InteractionResetManual(messageid LNK_ID )
//{
//	M_LNK_InteractionCheck
//	MSG_GlobalSetInt(LNK_ID, 0, INT3)
//}
//
//// --------( set auto : indicate an interaction automatically done by AI )---------
//procedure void LNK_InteractionSetAuto(messageid LNK_ID )
//{
//	M_LNK_InteractionCheck
//	MSG_GlobalSetInt(LNK_ID, 0, INT3)
//}
//
//// --------( set auto : indicate an interaction automatically done by AI )---------
//procedure int LNK_InteractionIsManual(messageid LNK_ID )
//{
//	M_LNK_InteractionCheck
//	if ( MSG_GlobalGetInt(LNK_ID, INT3) & 1 )
//		return 1
//	return 0
//}
//
//// --------( set auto : indicate an interaction automatically done by AI )---------
//procedure int LNK_InteractionIsAuto(messageid LNK_ID )
//{
//	M_LNK_InteractionCheck
//	if ( MSG_GlobalGetInt(LNK_ID, INT3) & 1 )
//		return 0
//	return 1
//}
//
//// --------( set param : indicate a param. it's value depend on the type of interaction )---------
//procedure void LNK_InteractionParamSet(messageid LNK_ID, int ti_type)
//{
//	M_LNK_InteractionCheck
//	MSG_GlobalSetInt(LNK_ID, ti_type, INT4)
//}
//
//// --------( get param : get the interaction parameter )---------
//procedure int LNK_InteractionParamGet(messageid LNK_ID)
//{
//	M_LNK_InteractionCheck
//	return(MSG_GlobalGetInt(LNK_ID, INT4))
//}
//
//procedure void LNK_InteractionGaoSet(messageid LNK_ID, object to_gao)
//{
//	M_LNK_InteractionCheck
//	MSG_GlobalSetGao(LNK_ID, to_gao, GAO3)
//}
//
//procedure void LNK_InteractionDestGaoSet(messageid LNK_ID, object to_gao)
//{
//	M_LNK_InteractionCheck
//	MSG_GlobalSetGao(LNK_ID, to_gao, GAO4)
//}
//
//procedure object LNK_InteractionDestGaoGet(messageid LNK_ID)
//{
//	M_LNK_InteractionCheck
//	return MSG_GlobalGetGao(LNK_ID, GAO4)
//}
//
//procedure void LNK_InteractionPositionSet(messageid LNK_ID, vector tv_pos)
//{
//	M_LNK_InteractionCheck
//	MSG_GlobalSetVector(LNK_ID, tv_pos, VEC2, VEC_ALL)
//}
//
//procedure vector LNK_InteractionPositionGet(messageid LNK_ID)
//{
//	M_LNK_InteractionCheck
//	return MSG_GlobalGetVector(LNK_ID, VEC2)
//}
//
//procedure object LNK_InteractionGaoGet(messageid LNK_ID, int ti_type)
//{
//	object	to_gao	
//
//	to_gao = nobody
//
//	M_LNK_InteractionCheck
//	if (LNK_InteractionTypeGet(LNK_ID) == ti_type)
//	{
//		to_gao = MSG_GlobalGetGao(LNK_ID, GAO3)
//		if (!to_gao)
//			to_gao = MSG_GlobalGetGao(LNK_ID, SERVEUR)
//	}
//	
//	return(to_gao)
//}

// LNK TYPE GRAB =============================================================================
#ifdef _FINAL_
#define M_LNK_GrabCheck
#endif

#ifndef _FINAL_
#define M_LNK_GrabCheck																\
{																									\
	int	ti_LNK_ID																				\
	if (! MSG_GlobalIsValid(LNK_ID))													\
	{																								\
		DBG_BreakPoint()																	\
	}																								\
	else																							\
	{																								\
		ti_LNK_ID = MSG_GlobalGetType(LNK_ID)									\
		ti_LNK_ID -= Ci_LNK_EVENT_OFFSET										\
		switch(ti_LNK_ID)																	\
		{																							\
			case Ci_LNK_GRAB_EAGLE :												\
//			case Ci_LNK_GRAB_KONG :												\
			case Ci_LNK_GRAB_OBJECT :												\
//			case Ci_LNK_GRAB_TRANSPORTE :									\
//			case Ci_LNK_KKGRAB_COMBAT :										\
//			case Ci_LNK_KKGRAB_OBJECT :											\
//			case Ci_LNK_KKGRAB_FORCE :											\
//			case Ci_LNK_RIDE_DINO :													\
			case Ci_LNK_RIDE_ON_NMI :												\
				break																				\
			default:																				\
				DBG_BreakPoint()															\
		}																							\
	}																								\
}
#endif

procedure void LNK_GrabStatusSet(messageid LNK_ID, int ti_status)
{
	M_LNK_GrabCheck
	MSG_GlobalSetInt(LNK_ID, ti_status, INT1)
}

procedure int LNK_GrabStatusGet(messageid LNK_ID)
{
	M_LNK_GrabCheck
	return(MSG_GlobalGetInt(LNK_ID, INT1))
}

procedure void LNK_GrabServeurVisionIDSet(messageid LNK_ID, int ti_vision_ID)
{
	M_LNK_GrabCheck
	MSG_GlobalSetInt(LNK_ID, ti_vision_ID, INT2)
}

procedure int LNK_GrabServeurVisionIDGet(messageid LNK_ID)
{
	M_LNK_GrabCheck
	return(MSG_GlobalGetInt(LNK_ID, INT2))
}

procedure void LNK_GrabBoneIdSet(messageid LNK_ID, int ti_bone_id)
{
	M_LNK_GrabCheck
	MSG_GlobalSetInt(LNK_ID, ti_bone_id, INT3)
}

procedure int LNK_GrabBoneIdGet(messageid LNK_ID)
{
	M_LNK_GrabCheck
	return (MSG_GlobalGetInt(LNK_ID, INT3))
}

procedure void LNK_GrabObjectIdSet(messageid LNK_ID, int ti_id)
{
	M_LNK_GrabCheck
	MSG_GlobalSetInt(LNK_ID, ti_id, INT4)
}

procedure int LNK_GrabObjectIdGet(messageid LNK_ID)
{
	M_LNK_GrabCheck
	return (MSG_GlobalGetInt(LNK_ID, INT4))
}

procedure void LNK_GrabBoneSet(messageid LNK_ID, object	to_bone)
{
	M_LNK_GrabCheck
	MSG_GlobalSetGao(LNK_ID, to_bone, GAO3)
}

procedure object LNK_GrabBoneGet(messageid LNK_ID)
{
	M_LNK_GrabCheck
	return(MSG_GlobalGetGao(LNK_ID, GAO3))
}

procedure void LNK_GrabPositionSet(messageid LNK_ID, vector tv_position)
{
	M_LNK_GrabCheck
	MSG_GlobalSetVector(LNK_ID, tv_position, VEC4, VEC_ALL)
}

procedure vector LNK_GrabPositionGet(messageid LNK_ID)
{
	M_LNK_GrabCheck
	return(MSG_GlobalGetVector(LNK_ID, VEC4))
}


procedure float LNK_GrabCurrentGet(messageid LNK_ID)
{
	M_LNK_GrabCheck
	return(MSG_GlobalGetVector(LNK_ID, VEC2).x)
}

procedure void LNK_GrabCurrentSet(messageid LNK_ID, float tf_val_current)
{
	M_LNK_GrabCheck
	MSG_GlobalSetVector(LNK_ID, cvector(tf_val_current, 0.0, 0.0), VEC2, VEC_X)
}

procedure float LNK_GrabMaxGet(messageid LNK_ID)
{
	M_LNK_GrabCheck
	return(MSG_GlobalGetVector(LNK_ID, VEC2).y)
}

procedure void LNK_GrabMaxSet(messageid LNK_ID, float tf_val_max)
{
	M_LNK_GrabCheck
	MSG_GlobalSetVector(LNK_ID, cvector(0.0, tf_val_max, 0.0), VEC2, VEC_Y)
}

procedure void LNK_GrabDeltaUpdate( messageid LNK_ID, float tf_delta)
{
	M_LNK_GrabCheck
	MSG_GlobalSetVector(LNK_ID, cvector(0.0, 0.0, tf_delta + MSG_GlobalGetVector(LNK_ID, VEC2).z), VEC2, VEC_Z)
}

procedure void LNK_GrabVectorSet( messageid LNK_ID, vector LVK_vector)
{
	M_LNK_GrabCheck
	MSG_GlobalSetVector(LNK_ID, LVK_vector, VEC3, VEC_ALL)

}
procedure vector LNK_GrabVectorGet( messageid LNK_ID)
{
	M_LNK_GrabCheck
	return( MSG_GlobalGetVector(LNK_ID, VEC3))
}

// INT2 sens deplacement du GrabForce
// GAO4 position main Droite
// GAO5 position main Gauche
// VEC5 position optimable pour le grab sur ces bones


//procedure void LNK_GrabCurrentUpdate()
//{
//	int		ti_i
//	int		ti_rank
//	int		ti_type	
//	
//	float	tf_GrabCurrent
//
//	messageid		tmid_grab
//
//	ti_type = Ci_LNK_KKGRAB_FORCE
//	ti_rank = -1
//		
//	tmid_grab = MSG_GlobalScan(Ci_LNK_EVENT_OFFSET + ti_type, &ti_rank)
//	while (MSG_GlobalIsValid(tmid_grab))
//	{
//		tf_GrabCurrent = MSG_GlobalGetVector(tmid_grab, VEC2).x
//		tf_GrabCurrent += MSG_GlobalGetVector(tmid_grab, VEC2).z
//		MSG_GlobalSetVector(tmid_grab, cvector(tf_GrabCurrent, 0.0, 0.0), VEC2, VEC_X)
//		MSG_GlobalSetVector(tmid_grab, Cv_NullVector, VEC2, VEC_Z)
//		tmid_grab = MSG_GlobalScan(Ci_LNK_EVENT_OFFSET + ti_type, &ti_rank)
//	}
//}

// ========================================================
// BACKSTAB
// ========================================================

//#ifdef _FINAL_
//#define M_LNK_BackstabCheck
//#endif
//
//#ifndef _FINAL_
//#define M_LNK_BackstabCheck\
//	if (! MSG_GlobalIsValid(LNK_ID))\
//		DBG_BreakPoint()\
//	else if (MSG_GlobalGetType(LNK_ID) != Ci_LNK_EVENT_OFFSET + Ci_LNK_BACKSTAB)\
//		DBG_BreakPoint()
//#endif
//
//procedure void LNK_BACKSTAB_Stop(messageid LNK_ID)
//{
//	M_LNK_BackstabCheck
//	MSG_GlobalSetInt(LNK_ID, faux, INT1)
//}
//
//procedure void LNK_BACKSTAB_Start(messageid LNK_ID)
//{
//	M_LNK_BackstabCheck
//	MSG_GlobalSetInt(LNK_ID, vrai, INT1)
//}
//
//procedure int LNK_BACKSTAB_IsStarted(messageid LNK_ID)
//{
//	M_LNK_BackstabCheck
//	return(MSG_GlobalGetInt(LNK_ID, INT1))
//}
//
//procedure void LNK_BACKSTAB_TypeSet(messageid LNK_ID, int ti_type)
//{
//	M_LNK_BackstabCheck
//	MSG_GlobalSetInt(LNK_ID, ti_type, INT2)
//}
//
//procedure int LNK_BACKSTAB_TypeGet(messageid LNK_ID)
//{
//	M_LNK_BackstabCheck
//	return(MSG_GlobalGetInt(LNK_ID, INT2))
//}
//
//// ========================================================
//// GRAB KONG
//// ========================================================
//procedure int LNK_GrabKong_TypeGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return(MSG_GlobalGetInt(LNK_ID, INT1))
//}
//
//procedure void LNK_GrabKong_TypeSet(messageid LNK_ID, int ti_type)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetInt(LNK_ID, ti_type, INT1)
//}
//
//procedure void LNK_GrabKong_BoneSet(messageid LNK_ID, object	to_bone)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetGao(LNK_ID, to_bone, GAO3)
//}
//
//procedure object LNK_GrabKong_BoneGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return(MSG_GlobalGetGao(LNK_ID, GAO3))
//}
//
//procedure void LNK_GrabKong_ActionSet(messageid LNK_ID, int	ti_action)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetInt(LNK_ID, ti_action, INT3)
//}
//
//procedure int LNK_GrabKong_ActionGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetInt(LNK_ID, INT3))
//}
//
//procedure void LNK_GrabKong_AnimJeteSet(messageid LNK_ID, int	ti_action)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetInt(LNK_ID, ti_action, INT2)
//}
//
//procedure int LNK_GrabKong_AnimJeteGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetInt(LNK_ID, INT2))
//}
//
//procedure void LNK_GrabKong_NbCoupSet(messageid LNK_ID, int	ti_action)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetInt(LNK_ID, ti_action, INT4)
//}
//
//procedure int LNK_GrabKong_NbCoupGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetInt(LNK_ID, INT4))
//}
//
//procedure void LNK_GrabKong_LanceVectorSet(messageid LNK_ID, vector	tv_vector)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetVector(LNK_ID, tv_vector, VEC1, VEC_ALL)
//}
//
//procedure vector LNK_GrabKong_LanceVectorGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetVector(LNK_ID, VEC1))
//}
//
//procedure void LNK_GrabKong_SpeedVectorSet(messageid LNK_ID, vector	tv_vector)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetVector(LNK_ID, tv_vector, VEC3, VEC_ALL)
//}
//
//procedure vector LNK_GrabKong_SpeedVectorGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetVector(LNK_ID, VEC3))
//}
//
//procedure void LNK_GrabKong_AncrageVectorSet(messageid LNK_ID, vector	tv_vector)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetVector(LNK_ID, MATH_VecGlobalToLocal( tv_vector), VEC5, VEC_ALL)
//}
//
//procedure vector LNK_GrabKong_AncrageVectorGet(messageid LNK_ID)
//{
//	object	tproc_o
//	DGB_Grab_Kong
//	tproc_o = MSG_GlobalGetGao(LNK_ID, CLIENT)
//	return( @tproc_o MATH_VecLocalToGlobal( MSG_GlobalGetVector(LNK_ID, VEC5)))
//}
//
//procedure void LNK_GrabKong_ZDEPosSet(messageid LNK_ID, float	tf_pos)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetVector(LNK_ID, cvector( tf_pos, 0.0, 0.0), VEC2, VEC_X)
//}
//
//procedure float LNK_GrabKong_ZDEPosGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetVector(LNK_ID, VEC2).x)
//}
//
//procedure void LNK_GrabKong_ZDESizeSet(messageid LNK_ID, float	tf_pos)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetVector(LNK_ID, cvector( 0.0, tf_pos, 0.0), VEC2, VEC_Y)
//}
//
//procedure float LNK_GrabKong_ZDESizeGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetVector(LNK_ID, VEC2).y)
//}
//
//procedure void LNK_GrabKong_ArmSizeSet(messageid LNK_ID, float	tf_pos)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetVector(LNK_ID, cvector( tf_pos, 0.0, 0.0), VEC4, VEC_X)
//}
//
//procedure float LNK_GrabKong_ArmSizeGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetVector(LNK_ID, VEC4).x)
//}
//
//procedure void LNK_GrabKong_NeckSizeSet(messageid LNK_ID, float	tf_pos)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetVector(LNK_ID, cvector( 0.0, tf_pos, 0.0), VEC4, VEC_Y)
//}
//
//procedure float LNK_GrabKong_NeckSizeGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetVector(LNK_ID, VEC4).y)
//}
//
//procedure void LNK_GrabKong_LanceObjectSet(messageid LNK_ID, object	to_object)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetGao(LNK_ID, to_object, GAO5)
//}
//
//procedure object LNK_GrabKong_LanceObjectGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetGao(LNK_ID, GAO5))
//}
//procedure void LNK_GrabKong_LanceTargetSet(messageid LNK_ID, int ti_target)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetInt(LNK_ID, ti_target, INT5)
//}
//
//procedure int LNK_GrabKong_LanceTargetGet(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetInt(LNK_ID, INT5))
//}
//
//// GRABKONG MASHING ----------------------------------------------------------------------------
//procedure void LNK_GrabKong_Mashing_Orientation_Set(messageid LNK_ID, vector	tv_vector)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetVector(LNK_ID, tv_vector, VEC4, VEC_ALL)
//}
//
//procedure vector LNK_GrabKong_Mashing_Orientation_Get(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetVector(LNK_ID, VEC4))
//}
//
//procedure void LNK_GrabKong_Mashing_Position_Set(messageid LNK_ID, vector	tv_vector)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetVector(LNK_ID, tv_vector, VEC5, VEC_ALL)
//}
//
//procedure vector LNK_GrabKong_Mashing_Position_Get(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetVector(LNK_ID, VEC5))
//}
//
//procedure void LNK_GrabKong_Mashing_Challenge_Set(messageid LNK_ID, int	ti_int)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetInt(LNK_ID, ti_int, INT2)
//}
//
//procedure int LNK_GrabKong_Mashing_Challenge_Get(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetInt(LNK_ID, INT2))
//}
//
//procedure void LNK_GrabKong_Mashing_Anim_Percent_Set(messageid LNK_ID, float	tf_pos)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetVector(LNK_ID, cvector(0.0, tf_pos, 0.0), VEC2, VEC_Y)
//}
//
//procedure float LNK_GrabKong_Mashing_Anim_Percent_Get(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetVector(LNK_ID, VEC2).y)
//}
//
//procedure void LNK_GrabKong_Mashing_Result_Set(messageid LNK_ID, int	ti_int)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetInt(LNK_ID, ti_int, INT3)
//}
//
//procedure int LNK_GrabKong_Mashing_Result_Get(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetInt(LNK_ID, INT3))
//}
//
//procedure void LNK_GrabKong_Mashing_Kit_Set(messageid LNK_ID, int	ti_int)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetInt(LNK_ID, ti_int, INT4)
//}
//
//procedure int LNK_GrabKong_Mashing_Kit_Get(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetInt(LNK_ID, INT4))
//}
//
// ========================================================
// KK GRAB OBJECT
// ========================================================
procedure int LNK_KKGrabObject_TypeGet(messageid LNK_ID)
{
	DGB_KKGrabObject
	return(MSG_GlobalGetInt(LNK_ID, INT1))
}

procedure void LNK_KKGrabObject_TypeSet(messageid LNK_ID, int ti_type)
{
	DGB_KKGrabObject
	MSG_GlobalSetInt(LNK_ID, ti_type, INT1)
}

procedure int LNK_KKGrabObject_StateGet(messageid LNK_ID)
{
	DGB_KKGrabObject
	return(MSG_GlobalGetInt(LNK_ID, INT2))
}

procedure void LNK_KKGrabObject_StateSet(messageid LNK_ID, int ti_type)
{
	DGB_KKGrabObject
	MSG_GlobalSetInt(LNK_ID, ti_type, INT2)
}

procedure int LNK_KKGrabObject_SubTypeGet(messageid LNK_ID)
{
	DGB_KKGrabObject
	return(MSG_GlobalGetInt(LNK_ID, INT3))
}

procedure void LNK_KKGrabObject_SubTypeSet(messageid LNK_ID, int ti_type)
{
	DGB_KKGrabObject
	MSG_GlobalSetInt(LNK_ID, ti_type, INT3)
}

procedure void LNK_KKGrabObject_BlendSet(messageid LNK_ID, float	tf_pos)
{
	DGB_KKGrabObject
	MSG_GlobalSetVector(LNK_ID, cvector( tf_pos, 0.0, 0.0), VEC1, VEC_X)
}

procedure float LNK_KKGrabObject_BlendGet(messageid LNK_ID)
{
	DGB_KKGrabObject
	return( MSG_GlobalGetVector(LNK_ID, VEC1).x)
}

procedure void LNK_KKGrabObject_BoneSet(messageid LNK_ID, object to_bone)
{
	DGB_KKGrabObject
	MSG_GlobalSetGao(LNK_ID, to_bone, GAO3)
}

procedure object LNK_KKGrabObject_BoneGet(messageid LNK_ID)
{
	DGB_KKGrabObject
	return(MSG_GlobalGetGao(LNK_ID, GAO3))
}

procedure void LNK_KKGrabObject_SafeWPSet(messageid LNK_ID, object to_bone)
{
	DGB_KKGrabObject
	MSG_GlobalSetGao(LNK_ID, to_bone, GAO5)
}

procedure object LNK_KKGrabObject_SafeWPGet(messageid LNK_ID)
{
	DGB_KKGrabObject
	return(MSG_GlobalGetGao(LNK_ID, GAO5))
}
//
//
//// ========================================================
//// GRAB TRANSPORTE
//// ========================================================
//procedure int LNK_GrabTransporte_TypeGet(messageid LNK_ID)
//{
//	DGB_GrabTransporte
//	return(MSG_GlobalGetInt(LNK_ID, INT1))
//}
//
//procedure void LNK_GrabTransporte_TypeSet(messageid LNK_ID, int ti_type)
//{
//	DGB_GrabTransporte
//	MSG_GlobalSetInt(LNK_ID, ti_type, INT1)
//}
//

// CLIENT SERVEUR ====================================================================


// PROPOSITION
procedure void LNK_ClientPropose(messageid LNK_ID, float tf_ponderation)
{
	MSG_GlobalSetGao(LNK_ID, OBJ_Me(), CLIENT)
	MSG_GlobalSetVector(LNK_ID, cvector(tf_ponderation, 0.0, 0.0), VEC1, VEC_X)
}

// PONDERATION VIA SERVEUR
procedure void LNK_ServeurPondere(messageid LNK_ID, float tf_ponderation)
{
	MSG_GlobalSetVector(LNK_ID, cvector(tf_ponderation, 0.0, 0.0), VEC1, VEC_X)
}

// REFUS
procedure void LNK_ServeurRefuse(messageid LNK_ID)
{
	MSG_GlobalSetGao(LNK_ID, nobody, CLIENT)
}

// CLIENT
procedure object LNK_ServeurGet(int TYPE, byref messageid LNK_ID, int ti_flag_activation, function fct_proposition, function fct_initialisation)
{
	object			to_serveur
	object			to_client

	message		tmsg_m

	to_serveur = nobody

	if( ! ti_flag_activation )
	{
		// CLIENT INACTIF =======================================================================================================
		if(MSG_GlobalIsValid(LNK_ID))
			MSG_GlobalDelete(LNK_ID, C_EVENT_DEL)
	}
	else if (MSG_GlobalIsValid(LNK_ID))
	{
		// CLIENT ACTIF ========================================================================================================
		to_serveur = MSG_GlobalGetGao(LNK_ID, SERVEUR)
		to_client = MSG_GlobalGetGao(LNK_ID, CLIENT)

		if (to_serveur)
		{
			// ON A UN SERVEUR	
			if( ! (@to_serveur OBJ_FlagsStatusGet() & OBJ_C_StatusFlag_Active ))
			{
				// LIAISON AVEC UN SERVEUR INACTIF
				MSG_GlobalDelete(LNK_ID, C_EVENT_DEL)
			}
			else if (to_client == nobody)	
			{
				// LE SERVEUR NOUS DEMANDE UNE PROPOSITION
				to_serveur = nobody
	
				if (fct_proposition)
				{
					// ON A UNE FONCTION SPECIFIQUE POUR REPONDRE A LA DEMANDE DU SERVEUR	
					push(LNK_ID)
					AI_Execute(fct_proposition)
				}
				else
				{
					// ON ACCEPTE LA LIAISON
					LNK_ClientPropose(LNK_ID, Cf_Infinit)
				}
			}
			else if (to_client == to_serveur)
			{
				// ETABLISSEMENT DE LA LIAISON
				MSG_GlobalSetGao(LNK_ID, OBJ_Me(), CLIENT)	
			
				// INITIALISATION DU CLIENT
				if (fct_initialisation)
				{
					push(LNK_ID)
					AI_Execute(fct_initialisation)
				}
			}
		}
		else if (to_client)
		{
//			// ON A PROPOSE A UN SERVEUR MAIS ON N'A PAS ETE SELECTIONNE
//			MSG_GlobalSetGao(LNK_ID, nobody, CLIENT)	

			// SI ON ARRIVE ICI C'EST QU'IL Y A UN PROBLEME : ON A PROPOSE A UN SERVEUR QUI NE NOUS A PAS CHOISI MAIS QUI A LAISSE LA PROPOSITION
			DBG_BreakPoint()
		}
	}
	else
	{
		// ON DOIT S'ENREGISTRER ===============================================================================================
		MSG_SetNull(tmsg_m)
		LNK_ID = MSG_GlobalSend(Ci_LNK_EVENT_OFFSET + TYPE, 0.0, tmsg_m, C_EVENT_Infini)
	}
	
	return(to_serveur)	
}

// SERVEUR
procedure object LNK_ClientGet(int TYPE, byref messageid LNK_ID, int ti_flag_activation, function fct_add_data, function fct_selection, function fct_initialisation)
{
	int						ti_rank

	float					tf_ponderation	
	float					tf_best_ponderation

	messageid			tmid_client
	messageid			tmid_best_client

	object				to_client
	object				to_client_qui_propose
	object				to_client_selectionne
	
	to_client = nobody

	if (! ti_flag_activation)
	{
		// SERVEUR INACTIF ===========================================================
		if(MSG_GlobalIsValid(LNK_ID))
			MSG_GlobalDelete(LNK_ID, C_EVENT_DEL)
	}
	else if (MSG_GlobalIsValid(LNK_ID))
	{
		// SERVEUR ACTIF =============================================================
		to_client = MSG_GlobalGetGao(LNK_ID, CLIENT)

		if (! (@to_client OBJ_FlagsStatusGet() & OBJ_C_StatusFlag_Active))
		{
			MSG_GlobalDelete(LNK_ID, C_EVENT_DEL)
			to_client = nobody
		}
	}
	else
	{
		// DEMANDE DE PROSITION ======================================================		
		MSG_GlobalSetInvalid(tmid_best_client)	

		tf_best_ponderation = Cf_Infinit	
		ti_rank = -1
		
		tmid_client = MSG_GlobalScan(Ci_LNK_EVENT_OFFSET + TYPE, &ti_rank)
		while (MSG_GlobalIsValid(tmid_client))
		{
			to_client_qui_propose = MSG_GlobalGetSender(tmid_client)
		
			if ( ! (@to_client_qui_propose OBJ_FlagsStatusGet() & OBJ_C_StatusFlag_Active))
			{
				// CE CLIENT PROPOSE MAIS N'EST PAS ACTIF...
				if( ! ( @to_client_qui_propose OBJ_FlagsControlGet() & OBJ_C_ControlFlag_SectoInactive ) )
				{
					// CE N'EST PAS A CAUSE DE LA SECTO QU'IL N'EST PAS ACTIF, DESTRUCTION !!!
					MSG_GlobalDelete(tmid_client, C_EVENT_DEL)
				}
			}
			else if (MSG_GlobalGetGao(tmid_client, SERVEUR) == nobody && to_client_qui_propose != OBJ_Me())
			{
				// CE CLIENT N'A PAS DE SERVEUR -> ON SE PROPOSE COMME SERVEUR
				MSG_GlobalSetGao(tmid_client, OBJ_Me(), SERVEUR)	
				
				if (fct_add_data)
				{
					push(tmid_client)
					AI_Execute(fct_add_data)
				}	
		
				// ON EXECUTE LE CLIENT POUR QU'IL DONNE UNE REPONSE A NOTRE DEMANDE		
				@to_client_qui_propose AI_CBExecute(CallBack_Client, TYPE)

				// LE SERVEUR LIBERE LE CLIENT AVANT D'EVALUER LA REPONSE DU CLIENT	
				MSG_GlobalSetGao(tmid_client, nobody, SERVEUR)

				// SI LE CLIENT ACCEPTE LA LIAISON ET QUE J'AI MON MOT A DIRE DANS LA SELECTION
				if (MSG_GlobalGetGao(tmid_client, CLIENT) == to_client_qui_propose && fct_selection)
				{
					push(tmid_client)
					AI_Execute(fct_selection)
				}

				// SI LE CLIENT ACCEPTE LA LIAISON
				if (MSG_GlobalGetGao(tmid_client, CLIENT) == to_client_qui_propose)
				{
					// ON REMET LE CHAMPS CLIENT A NOBODY POUR DIRE QU'ON A LU SA PONDERATION
					MSG_GlobalSetGao(tmid_client, nobody, CLIENT)	

					// ON VA SELCTIONNER LA MEILLEURE PONDERATION
					tf_ponderation = MSG_GlobalGetVector(tmid_client, VEC1).x
					
					if (tf_ponderation <= tf_best_ponderation)
					{
						tf_best_ponderation = tf_ponderation
						tmid_best_client = tmid_client
						to_client = to_client_qui_propose
					}
				}
			}
		
			tmid_client = MSG_GlobalScan(Ci_LNK_EVENT_OFFSET + TYPE, &ti_rank)
		}
		
		if (MSG_GlobalIsValid(tmid_best_client))
		{
			// SI ON A UN CLIENT QUI NOUS CONVIENT ON LUI SIGNIFIE QU'ON EST SON SERVEUR
			LNK_ID = tmid_best_client
			MSG_GlobalSetGao(LNK_ID, OBJ_Me(), SERVEUR)
			MSG_GlobalSetGao(LNK_ID, OBJ_Me(), CLIENT)

			// ON EXECUTE LA FONCTION D'INITIALISATION DE LA LIAISON
			if (fct_initialisation)
			{
				push(LNK_ID)
				AI_Execute(fct_initialisation)
			}

			// ON EXECUTE LA CALLBACK DU CLIENT SELECTIONNE POUR QU'IL METTE A JOUR LA LIAISON
			to_client_selectionne = MSG_GlobalGetSender(tmid_best_client)
			@to_client_selectionne AI_CBExecute(CallBack_Client, TYPE)
		}
		else
		{
			// PAS DE CLIENT
			to_client = nobody
		}
	}
	
	return(to_client)
}

// SERVEUR
procedure object LNK_ThisClientGet(object to_this_client, int TYPE, byref messageid LNK_ID, int ti_flag_activation, function fct_add_data, function fct_selection, function fct_initialisation)
{
	int						ti_rank

	float					tf_ponderation	
	float					tf_best_ponderation

	messageid			tmid_client
	messageid			tmid_best_client

	message			tm_filter_msg

	object				to_client
	object				to_client_selectionne
	
	to_client = nobody

	if (!to_this_client)
	{
		// PAS DE CLIENT SPECIFIE, ON NE FAIT RIEN
	}
	else if (! ti_flag_activation)
	{
		// SERVEUR INACTIF ===========================================================
		MSG_GlobalDelete(LNK_ID, C_EVENT_DEL)
	}
	else if (MSG_GlobalIsValid(LNK_ID))
	{
		// SERVEUR ACTIF =============================================================
		to_client = MSG_GlobalGetGao(LNK_ID, CLIENT)
		
		if (to_client  && ! (@to_client OBJ_FlagsStatusGet() & OBJ_C_StatusFlag_Active))
		{
			MSG_GlobalDelete(LNK_ID, C_EVENT_DEL)
			to_client = nobody
		}
	}
	else
	{
		// DEMANDE DE PROSITION ======================================================		
		MSG_GlobalSetInvalid(tmid_best_client)	

		tf_best_ponderation = Cf_Infinit	
		ti_rank = -1
	
		MSG_SetNull(tm_filter_msg)
		tm_filter_msg.msg_sender = to_this_client

		tmid_client = MSG_GlobalSearchIntGao(Ci_LNK_EVENT_OFFSET + TYPE, &ti_rank, tm_filter_msg)
		while (MSG_GlobalIsValid(tmid_client))
		{
			if ( ! (@to_this_client OBJ_FlagsStatusGet() & OBJ_C_StatusFlag_Active))
			{
				// CE CLIENT PROPOSE MAIS N'EST PAS ACTIF...
				if( ! ( @to_this_client OBJ_FlagsControlGet() & OBJ_C_ControlFlag_SectoInactive ) )
				{
					// CE N'EST PAS A CAUSE DE LA SECTO QU'IL N'EST PAS ACTIF, DESTRUCTION !!!
					MSG_GlobalDelete(tmid_client, C_EVENT_DEL)
				}
			}
			else if (MSG_GlobalGetGao(tmid_client, SERVEUR) == nobody)
			{
				// CE CLIENT N'A PAS DE SERVEUR -> ON SE PROPOSE COMME SERVEUR
				MSG_GlobalSetGao(tmid_client, OBJ_Me(), SERVEUR)	
				
				if (fct_add_data)
				{
					push(tmid_client)
					AI_Execute(fct_add_data)
				}	
		
				// ON EXECUTE LE CLIENT POUR QU'IL DONNE UNE REPONSE A NOTRE DEMANDE		
				@to_this_client AI_CBExecute(CallBack_Client, TYPE)

				// LE SERVEUR LIBERE LE CLIENT AVANT D'EVALUER LA REPONSE DU CLIENT	
				MSG_GlobalSetGao(tmid_client, nobody, SERVEUR)

				// SI LE CLIENT ACCEPTE LA LIAISON ET QUE J'AI MON MOT A DIRE DANS LA SELECTION
				if (MSG_GlobalGetGao(tmid_client, CLIENT) == to_this_client && fct_selection)
				{
					push(tmid_client)
					AI_Execute(fct_selection)
				}
				
				// SI LE CLIENT ACCEPTE LA LIAISON
				if (MSG_GlobalGetGao(tmid_client, CLIENT) == to_this_client)
				{
					// ON REMET LE CHAMPS CLIENT A NOBODY POUR DIRE QU'ON A LU SA PONDERATION
					MSG_GlobalSetGao(tmid_client, nobody, CLIENT)	
					
					// ON VA SELCTIONNER LA MEILLEURE PONDERATION PARMI LES DIFFERENTES PROPOSITIONS FAITES PAR LE CLIENT DEMANDE
					tf_ponderation = MSG_GlobalGetVector(tmid_client, VEC1).x
					
					if (tf_ponderation <= tf_best_ponderation)
					{
						tf_best_ponderation = tf_ponderation
						tmid_best_client = tmid_client
						to_client = to_this_client
					}
				}
			}
			
			tmid_client = MSG_GlobalSearchIntGao(Ci_LNK_EVENT_OFFSET + TYPE, &ti_rank, tm_filter_msg)
		}
		
		if (MSG_GlobalIsValid(tmid_best_client))
		{
			// SI ON A UN CLIENT QUI NOUS CONVIENT ON LUI SIGNIFIE QU'ON EST SON SERVEUR
			LNK_ID = tmid_best_client
			MSG_GlobalSetGao(LNK_ID, OBJ_Me(), SERVEUR)
			MSG_GlobalSetGao(LNK_ID, OBJ_Me(), CLIENT)

			// ON EXECUTE LA FONCTION D'INITIALISATION DE LA LIAISON
			if (fct_initialisation)
			{
				push(LNK_ID)
				AI_Execute(fct_initialisation)
			}

			// ON EXECUTE LA CALLBACK DU CLIENT SELECTIONNE POUR QU'IL METTE A JOUR LA LIAISON
			to_client_selectionne = MSG_GlobalGetSender(tmid_best_client)
			@to_client_selectionne AI_CBExecute(CallBack_Client, TYPE)
		}
		else
		{
			// PAS DE CLIENT
			to_client = nobody
		}
	}
	
	return(to_client)
}

//// SERVEUR INTERACTION
//procedure object LNK_ClientGet_Interaction( byref messageid LNK_ID, int i_flag, function fct_add_data, function fct_selection, function fct_initialisation)
//{
//	object		to_client
//	object		to_server
//	object		to_feedback
//	message	tm_msg
//	int				ti_flag_activation
//	int				ti_flag_auto
//	
//	ti_flag_activation = i_flag & 1
//	ti_flag_auto = (i_flag & 2) >> 1
//
//	if (ti_flag_activation && 	MSG_GlobalIsValid(LNK_ID))
//		return MSG_GlobalGetGao(LNK_ID, CLIENT)
//	
//	to_client = LNK_ClientGet(Ci_LNK_INTERACTION, LNK_ID, ti_flag_activation, fct_add_data, fct_selection, fct_initialisation)
//	to_server = OBJ_Me()
//	
////	if ( ti_flag_activation && ti_flag_auto && (to_client != AI_MainActorGet(0)) )
////	{
////		to_feedback = @get_feedbacktext OBJ_Duplicate( @to_server OBJ_PosGet() )
////		MSG_SetNull(tm_msg)
////		tm_msg.msg_id = 1
////		tm_msg.msg_sender = to_server
////		tm_msg.msg_gao1 = to_server
////		tm_msg.msg_gao2 = to_client
////		if (to_client)
////			tm_msg.msg_int1 = 0
////		else
////			tm_msg.msg_int1 = 1
////		@to_feedback MSG_Send( tm_msg )
////	}
//	
//	return to_client
//}


//procedure void LNK_GrabKong_Mashing_Action_Set(messageid LNK_ID, int	ti_int)
//{
//	DGB_Grab_Kong
//	MSG_GlobalSetInt(LNK_ID, ti_int, INT5)
//}
//
//procedure int LNK_GrabKong_Mashing_Action_Get(messageid LNK_ID)
//{
//	DGB_Grab_Kong
//	return( MSG_GlobalGetInt(LNK_ID, INT5))
//}

procedure int MSG_Type_Count(int ti_type, object to_excluded_gao)
{
	messageid	tmid_ID
	message	tmsg_filter
	int		ti_cpt
	int		ti_rank
	ti_cpt = 0
	MSG_SetNull(tmsg_filter)
	ti_rank = -1
	for (	tmid_ID = MSG_GlobalSearchIntGao(ti_type, &ti_rank, tmsg_filter);
		MSG_GlobalIsValid(tmid_ID);
		tmid_ID = MSG_GlobalSearchIntGao(ti_type, &ti_rank, tmsg_filter) )
	{
		if( ! to_excluded_gao || to_excluded_gao != MSG_GlobalGetSender(tmid_ID))
			ti_cpt++
	}
	return ti_cpt	
}


procedure int LNK_GRAB_OBJECT_Free_Slot(object to_excluded_gao)
{
	int		ti_cpt
	ti_cpt = MSG_Type_Count(Ci_LNK_EVENT_OFFSET + Ci_LNK_GRAB_OBJECT, to_excluded_gao)
	if( ti_cpt < Ci_LNK_GRAB_OBJECT_Max_Item_nb )
	{
		if( @"univ" i_cheat_page == 5 )
			Str_DisplayTextOnce("Pick me !!!", VIEW_3dWorldTo2d(0, OBJ_PosGet()))
		return vrai
	}
	else
		return faux
}


// USE 
procedure void LNK_Use_ActivationSet(messageid LNK_ID)
{
	MSG_GlobalSetInt(LNK_ID, 1, INT5)
}

procedure int LNK_Use_ActivattionGet(messageid LNK_ID)
{
	return( MSG_GlobalGetInt(LNK_ID, INT5))
}

procedure void LNK_Use_TypeSet(messageid LNK_ID, int pi_use_type)
{
	MSG_GlobalSetInt(LNK_ID, pi_use_type, INT4)
}

procedure int LNK_Use_TypeGet(messageid LNK_ID)
{
	return( MSG_GlobalGetInt(LNK_ID, INT4))
}

procedure void LNK_Use_ActeurSupSet(messageid LNK_ID, object po_use_acteursup)
{
	MSG_GlobalSetGao(LNK_ID, po_use_acteursup, GAO5)
}

procedure object LNK_Use_ActeurSupGet(messageid LNK_ID)
{
	return( MSG_GlobalGetGao(LNK_ID, GAO5))
}

