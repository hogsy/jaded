int func_Type
int func_Filtre
object func_Pere
float func_DureeDeVie
vector func_Position
float func_Delai
int	func_Nume


int			EVT_func_i																				
int			EVT_func_Evt_Numero

// Recuperer l indice de l EVENT que l on veux suprimer
EVT_func_Evt_Numero 	= pop

{
	EVT_func_i = 0						
	// Recherche de l element: methode simple parcourir le tableau( methode anexe possible parcourir la liste chainée a faire ensuite)
	while( EVT_func_i < C_EVENT_Max_Elem && @get_Event Valid_NumeroDeLEvent[EVT_func_i] != EVT_func_Evt_Numero)
		EVT_func_i ++										

	// Ici on possede la position du bon event s il existe
	if ( EVT_func_i >= C_EVENT_Max_Elem)																		
	{	
		// Gestion de fin de liste max
		// Erreur cet event n'existe plus
		push( -1)																			
		return
	}						
	
	// Je suprime la cellule et retabli les liens suivant precedent entre les 2 nouvelles cellules voisines
	if ( @get_Event Valid_Suivant[ EVT_func_i] != -1 && @get_Event Valid_Precedent[EVT_func_i] != -1)
	{
		@get_Event Valid_Suivant[ @get_Event Valid_Precedent[EVT_func_i]] = @get_Event Valid_Suivant[ EVT_func_i]
		@get_Event Valid_Precedent[@get_Event Valid_Suivant[ EVT_func_i]] = @get_Event Valid_Precedent[EVT_func_i]		// Le suivant existe on le lie au précédent
	}
	else if ( @get_Event Valid_Suivant[ EVT_func_i] == -1)
	{
		@get_Event Valid_Suivant[ @get_Event Valid_Precedent[EVT_func_i]] = -1
		@get_Event Valid_IndiceDernierCellule = @get_Event Valid_Precedent[EVT_func_i]
	}
	// On met le dernier element de la liste a vide							
	DelValidEvent( EVT_func_i)
}

push( 0)
