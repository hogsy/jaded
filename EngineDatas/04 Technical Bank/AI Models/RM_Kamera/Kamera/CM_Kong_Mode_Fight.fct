#include "Kam_Defines.var"

// ###########################
// FIGHT - FIGHT - FIGHT - FIGHT 
// ###########################

float				tf_dist_kong_max
int					ti_kong_grab 
float				tf_dist 
message 		tm_filter
int					ti_rank
messageid		tmid_interet_ID
object			to_pere
float				tf_dist_dot
object			to_autre_gao
vector			tv_cam_axis
vector			tv_cam_target_delta_tgt
vector			tv_axe_kong 
vector			tv_axe_cam
float				tf_coef 
float				tf_sens
vector			tv_cross



tf_dist_kong_max = -1.0

if (@"KingKong/Kong2" o_mf_actor i_GrabKong_MainBloquee != -1)
	ti_kong_grab = vrai
else
	ti_kong_grab = faux

if (!ti_kong_grab && i_kong_grab)
	i_init_fight = vrai
	
i_kong_grab = ti_kong_grab

if (i_kong_camera_mode != Ci_Kamera_mode_FIGHT)
{
	// Init
	i_kong_camera_mode = Ci_Kamera_mode_FIGHT

	vG_chm_cam_sight = OBJ_SightGet()
	vG_chm_cam_target_delta_tgt = vG_cam_target_delta_tgt

	f_change_mode_coef = 0
	f_change_mode_speed = 0.3
	f_MECA_cam_dist_speed = 10

	v_cam_axis = OBJ_SightGet()
}

f_change_mode_coef = MATH_FloatLimit( f_change_mode_coef+ (f_change_mode_speed * TIME_GetDt()),0, 1)

if (IO_ButtonJustPressed(JoyPSX_Button_triangle))
	i_contrechamp = 1-i_contrechamp

// Recup des infos en FIGHT
tf_dist = Cf_Infinit
if(MSG_GlobalIsValid(@get_global mid_kong_camera_status))
{
	if (EVENT_PereGet(@get_global mid_kong_camera_status) != o_fight_nmi)
	{
		o_fight_nmi = EVENT_PereGet(@get_global mid_kong_camera_status)
		i_init_fight = vrai
		return
	}

	o_fight_nmi = EVENT_PereGet(@get_global mid_kong_camera_status)

	v_fight_nmi_pos = @o_fight_nmi OBJ_PosGet()
	v_fight_nmi_offset = EVENT_LockCamOffsetGet(@get_global mid_kong_camera_status)

	tf_dist_kong_max = 0
	MSG_SetNull(tm_filter)
	tm_filter.msg_gao1 = o_mf_actor
	
	ti_rank = -1
	for (	tmid_interet_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_rank, tm_filter);
			MSG_GlobalIsValid(tmid_interet_ID);
			tmid_interet_ID = MSG_GlobalSearchIntGao(C_EVENT_TYPE_Interet, &ti_rank, tm_filter) )
	{
		to_pere = EVENT_PereGet(tmid_interet_ID)

		if( to_pere != o_fight_nmi)
		{
			tf_dist = MATH_VecDistance(@o_mf_actor OBJ_PosGet(),@to_pere OBJ_PosGet())
			DBG_RenderCircle(@o_mf_actor OBJ_PosGet(),30,cvector(0,0,1),color_rouge)
			if (tf_dist < 30 && tf_dist > tf_dist_kong_max )
			{
				tf_dist_dot = 1-MATH_VecDotProduct(MATH_VecNormalize(@to_pere OBJ_PosGet() - @o_mf_actor OBJ_PosGet()), MATH_VecNormalize( @o_fight_nmi OBJ_PosGet()-@o_mf_actor OBJ_PosGet()))
				tf_dist_dot *= 0.5
				tf_dist_kong_max = tf_dist * tf_dist_dot
				to_autre_gao = to_pere
			}
		}
	}
	f_fight_distenplus = MATH_FloatBlend(f_fight_distenplus, tf_dist_kong_max, 2.5 * TIME_GetDt())


	if (i_contrechamp)
	{
		v_MECA_cam_target = v_fight_nmi_pos
		v_fight_nmi_pos = @o_mf_actor OBJ_PosGet()
	}
	else
		v_MECA_cam_target = MATH_VecBlend(v_MECA_cam_target,@o_mf_actor OBJ_PosGet(), 15.0 * TIME_GetDt())

	tf_dist = MATH_VecDistance(v_fight_nmi_pos, v_MECA_cam_target)
	MSG_GlobalSetInvalid(@get_global mid_kong_camera_status)
}
else
	v_MECA_cam_target  = MATH_VecBlend(v_MECA_cam_target,@o_mf_actor OBJ_PosGet(), 15.0 * TIME_GetDt())

if (@"KingKong/Kong2" o_mf_actor i_GrabKong_MainBloquee != -1)
{

	tv_cam_axis = v_fight_nmi_pos - v_MECA_cam_target

	tv_cam_target_delta_tgt = (v_fight_nmi_pos - v_MECA_cam_target) * Cf_fight_coef_entre_deux 
	tv_cam_target_delta_tgt.z = Cf_normal_decentrage_vertical

	f_MECA_cam_dist = (MATH_VecNorm(tv_cam_axis) * Cf_fight_coef_entre_deux) + 18
	if (f_fight_distenplus >0)
			f_MECA_cam_dist += f_fight_distenplus
			
	if (i_contrechamp)
	{
		tv_cam_axis = MATH_VecRotate(v_fight_memoCC, Cv_VerticalVector, MATH_VecAngle(v_fight_memoCC,v_fight_cross,Cv_VerticalVector) * 2 )
	}
	else
		tv_cam_axis = v_fight_memoCC
}
else
{
// DESCENTRAGE
// Coef axe horiz visee kong / horiz camera
if (i_contrechamp)
	tv_axe_kong = @o_fight_nmi OBJ_SightGet()
else
	tv_axe_kong = @o_mf_actor OBJ_SightGet()

tv_axe_kong.z = 0
if (MATH_VecNull(tv_axe_kong))
	tv_axe_kong = -@o_mf_actor OBJ_BankingGet()
MATH_VecSetHorzNormalize(tv_axe_kong)
tv_axe_cam = OBJ_HorizonGet()
MATH_VecSetHorzNormalize(tv_axe_cam)
tf_coef = MATH_VecDotProduct(tv_axe_cam, tv_axe_kong)

tv_cam_target_delta_tgt = (v_fight_nmi_pos - v_MECA_cam_target) * Cf_fight_coef_entre_deux 
tv_cam_target_delta_tgt.z += Cf_normal_decentrage_vertical

#ifdef DBG_Render
DBG_RenderSphere(vG_cam_target + tv_cam_target_delta_tgt,1,color_rouge)
#endif

tf_sens = 1
if (IO_KeyPressed(65) || i_contrechamp )
	tf_sens = -1

// SIGHT HORIZONTAL
tv_cam_axis = v_fight_nmi_pos - v_MECA_cam_target

f_MECA_cam_dist = (MATH_VecNorm(tv_cam_axis) * Cf_fight_coef_entre_deux ) + 10
if (f_fight_distenplus >0)
		f_MECA_cam_dist += f_fight_distenplus

MATH_VecSetHorzNormalize(tv_cam_axis)
tv_cross = MATH_VecCrossProduct(tv_cam_axis, Cv_VerticalVector) * tf_sens
v_fight_cross = tv_cross 

#ifdef DBG_Render
DBG_RenderVector(vG_cam_target ,tv_cross*20,color_jaune)
#endif

tf_dist = MATH_FloatMin(tf_dist, 30)
tf_coef =  (30 - tf_dist) / 30
tv_cam_axis = MATH_VecBlendRotate(tv_cam_axis, tv_cross, MATH_FloatLimit(tf_coef, 0.2, 0.5) )

MATH_VecSetHorzNormalize(tv_cam_axis)

// SIGHT VERTICAL
tv_cam_axis = MATH_VecBlendRotate(tv_cam_axis, Cv_VerticalVector, -0.15)

v_cam_axis = MATH_VecBlendRotate(v_cam_axis, tv_cam_axis, (MATH_VecDistance( @o_fight_nmi OBJ_PosGet(), @o_mf_actor OBJ_PosGet() ) / 5.0) * TIME_GetDt() )


}



v_MECA_cam_sight = MATH_VecBlendRotate(v_MECA_cam_sight , v_cam_axis, f_change_mode_coef)			// Blend SIGHT pour les changements de mode.
v_MECA_cam_target_delta = MATH_VecBlend(v_MECA_cam_target_delta, tv_cam_target_delta_tgt, f_change_mode_coef)	// Blend DELTA pour les changements de mode.

if (	!i_contrechamp )
	v_fight_memoCC = v_MECA_cam_sight
