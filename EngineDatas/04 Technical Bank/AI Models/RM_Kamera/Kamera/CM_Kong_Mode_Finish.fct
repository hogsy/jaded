//// @get_Kamera Proc_Kam_FinishMode_Set( Ci_Kamera_Finish_id_TRex, get_kong)
//Include_UltraProcedure_Header
//
//#include "Kam_Defines.var"
//
//
//object		to_liste_gao[50]
//vector		tv_ma_pos
//int				ti_nbr_of_gao
//int				ti_ok_in_gao
//int				ti_ok_but_in_gao
//
//
//vector		tv_meca_cam_target
//vector		tv_meca_cam_target_delta
//vector		tv_meca_cam_pos
//float			tf_meca_cam_focale
//float			tf_meca_cam_transitionspeed
//
//int				ti_i
//object		to_gao
//vector		tv_tmp
//object		to_tete
//vector		tv_pos_tete_kong
//
//vector		tv_sight
//int				ti_loop
//vector		tv_cam_pos 
//vector		tv_tgt_pos
//vector		tv_axis 
//int				ti_indice 
//
//int				ti_skip
//
//int 			tai_indice[Ci_max_nb_finish_offsets]
//float 			taf_dot[Ci_max_nb_finish_offsets]
//
//
//object		to_cam 
//float			tf_dist
//vector		tv_collide_pos
//int				ti_frame 
//float			tf_additionnal_focal 
//
//// MECA SPECIALE ------------------------
//i_MECA_Mode = Ci_MecaMode_Position
//// MECA SPECIALE ------------------------
//
//if (	i_kong_camera_mode != Ci_Kamera_mode_FINISH || i_finish_id != @get_global i_kong_finish_id)
//{
//	// o_finish_actor set to Kong if not defined ===============
//	o_finish_actor = @get_global o_kong_finish_target
//	if (!o_finish_actor)
//		o_finish_actor = o_mf_actor
//
//	o_finish_actor_backup = o_mf_actor
//	
//	// Fail safe if finish id wasn't setup by kong's ai ===========
//	i_finish_id = @get_global i_kong_finish_id
//	if (i_finish_id == -1)
//		i_finish_id = 0
//
//	// Compute kong's head pos
//	to_tete = @o_finish_actor ANI_CanalObjectGet(0)
//	if (!to_tete)
//		tv_pos_tete_kong = @o_finish_actor OBJ_PosGet()
//	else
//		tv_pos_tete_kong = @to_tete OBJ_PosGet()
//
//	f_finish_forced_speed = -1
//
//	if (i_finish_id == Ci_Kamera_Finish_id_KONG_Won)
//	{
//		i_finish_chosen_plan = 0										// find the best finish position
//		i_finish_frame = 0
//		f_normal_change_mode_speed_forced = Cf_Infinit
//	}
//	else
//	{
//		// GET BEST PLAN ID =================================================================================
//		i_finish_chosen_plan = -1													// find the best finish position
//	
//		// Get All the DOT result !
//		tv_sight = OBJ_SightGet()
//	
//		if (	ai_finish_PreferedID[i_finish_id] >= 0)
//			tv_sight = -MATH_VecNormalize( @o_finish_actor MATH_VecLocalToGlobal( av_finish_offset[i_finish_id][ai_finish_PreferedID[i_finish_id]] ) )
//	
//		for (ti_loop = 0; ti_loop < Ci_max_nb_finish_offsets; ti_loop++)
//		{
//			if ( MATH_VecNull(av_finish_offset[i_finish_id][ti_loop] ))
//				taf_dot[ti_loop] = Cf_Infinit
//			else
//			{
//				tv_cam_pos = @o_finish_actor OBJ_PosGet() + @o_finish_actor MATH_VecLocalToGlobal( av_finish_offset[i_finish_id][ti_loop] )
//				tv_tgt_pos = @o_finish_actor OBJ_PosGet() + @o_finish_actor MATH_VecLocalToGlobal( av_finish_delta[i_finish_id][ti_loop] )
//				tv_axis = MATH_VecNormalize( tv_tgt_pos - tv_cam_pos )
//				taf_dot[ti_loop] = -MATH_VecDotProduct(tv_sight, tv_axis)
//			}
//		}
//		
//		// Sort this table of DOT
//		ARR_LIB_QuickSort_OrderIndex( &tai_indice[0], &taf_dot[0], Ci_max_nb_finish_offsets)
//
//		ti_nbr_of_gao = 666
//		ti_ok_but_in_gao = -1
//
//		for (ti_i = 0; ti_i < Ci_max_nb_finish_offsets; ti_i++)
//		{
//			ti_indice = tai_indice[ti_i]
//			if ( taf_dot[ti_i] <= 1 )
//			{
//				// Check Here If Something's Blocking The View
//				tv_tmp = @o_finish_actor OBJ_PosGet() + @o_finish_actor MATH_VecLocalToGlobal(av_finish_offset[i_finish_id][ti_indice])
//				COL_SpecificCrossableSet( (Gmat_KK_Crossable_Default & ~Gmat_KK_Cross_All_But_Camera) | Gmat_KK_Traversable_par_Camera )
//
//				tv_pos_tete_kong = @o_finish_actor OBJ_PosGet() 
//				tv_meca_cam_target_delta = @o_finish_actor MATH_VecLocalToGlobal( av_finish_delta[i_finish_id][ti_indice] )
//
//				ti_skip = faux
//				if (f_FinishLimitAngle != 666)
//				{
//					vector ttv_meca_cam_target_pos
//					vector ttv_meca_cam_pos
//
//					// Delta
//					ttv_meca_cam_target_pos = @o_finish_actor OBJ_PosGet() + @o_finish_actor MATH_VecLocalToGlobal( av_finish_delta[i_finish_id][ti_indice ] )
//					DBG_RenderSphere(ttv_meca_cam_target_pos,0.7,color_vert)
//
//					// Position
//					ttv_meca_cam_pos = @o_finish_actor OBJ_PosGet() + @o_finish_actor MATH_VecLocalToGlobal( av_finish_offset[i_finish_id][ti_indice ] )
//					DBG_RenderSphere(ttv_meca_cam_pos,0.7,color_vert)
//				
//					tv_axis = ttv_meca_cam_target_pos - ttv_meca_cam_pos
//
//					MATH_VecSetHorzNormalize(tv_axis)
//					DBG_RenderVector(ttv_meca_cam_pos, tv_axis*10, color_rose )
////					DBG_RenderVector(@zz OBJ_PosGet(), -tv_axis*10, color_jaune )
//
//					if ( MATH_VecDotProduct(-tv_axis, v_FinishLimitAngle) > f_FinishLimitAngle)
//						ti_skip = vrai
//				}
//
//				if (!ti_skip)
//				{
//					tv_pos_tete_kong += tv_meca_cam_target_delta
//					to_gao = COL_RayObject_Vector(tv_pos_tete_kong, tv_tmp - tv_pos_tete_kong, all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable + COL_C_Ray_use_SpecificCrossableSet)
//					if (!to_gao)
//					{
//						ti_ok_but_in_gao	= ti_indice 			// No Wall is blocking choose this one
//
//						if (ti_nbr_of_gao == 666)
//						{
//							// Recup de la liste des Gao donc ce point est dans une BV 
//							tv_ma_pos = OBJ_PosGet()
//							OBJ_PosSet(tv_tmp)
//							ti_nbr_of_gao = COL_Pivot_BVListGet(&to_liste_gao[0],OBJ_C_IdentityFlag_Anims,none,Ci_Filter_IdentityFlag)
//							OBJ_PosSet(tv_ma_pos)
//						}
//
//						ti_ok_in_gao = vrai
//						if (ti_nbr_of_gao)
//						{
//							for (ti_loop = 0; ti_loop < ti_nbr_of_gao; ti_loop++)
//							{
//// FRED
////								if ( @to_liste_gao[ti_loop] AI_IsModel(get_PNJ_KTREX_Path) )
////								 {
////									if ( @to_liste_gao[ti_loop] OBJ_PointInGameObject(tv_tmp) )
////									{
////										ti_ok_in_gao = faux
////									}
////								}
//							}
//						}
//		 
//						if (ti_ok_in_gao)
//						{
//							i_finish_chosen_plan = ti_indice 					// nothing is blocking choose this one
//							break
//						}
//					}
//				}
//			}
//		}
//	}
//
//	// If nothing found OK (Collision Wall) then select the first one.
//	if (i_finish_chosen_plan == -1)
//	{
//		DBG_TraceString("KAM ========================================\n")
//		DBG_TraceString("WARNING : PAS DE SOLUTION DE KAM POUR CE FINISH\n")
//		DBG_TraceString("KAM ========================================\n")
//
//		if (f_cc_duration && (!(ai_finish_Flags[i_finish_id] & 0b1)))
//		{
//			// Contre Champs et GenCam
//			AI_Execute("CM_Kong_Mode_CChamp")
//			o_mf_actor_blend = o_mf_actor
//			return
//		}
//		else
//		{
//			if (ti_ok_but_in_gao != -1)
//				i_finish_chosen_plan = ti_ok_but_in_gao		// Je recup celui occludé par un acteur
//			else
//				i_finish_chosen_plan = tai_indice[0]			// Le pire des cas, celui occludé par un mur.
//		}
//	}
//	// GET BEST PLAN ID =================================================================================
//
//	// PAFFER LES STRUCTURES ODE ========================================
//	switch( i_finish_id )
//	{
//		case Ci_Kamera_Finish_id_PoseAnn :
//			break
//		
//		default:
//			i_paf_ODE = vrai		// va paffer toutes les structures ODE autour
//			break
//	}
//
//
//	// Init
//	KamP_Mode_Set(Ci_Kamera_mode_FINISH)
//
//	// Backup des Valeurs pour le BLEND entre les modes
//	KamP_Backup_Change_Mode_Value()
//
//	// Retour du FINISH !
//	f_normal_change_mode_speed_forced = 2.0
//
////	DBG_TraceInt(i_finish_chosen_plan)
////	DBG_TraceEOL()
//}
//
//// Transition Speed (IN)
//if (i_finish_id == Ci_Kamera_Finish_id_KONG_Won)
//{
//	if (@o_finish_actor_backup ACT_ActionItemGet())
//		ti_frame = 666666
//	else
//	{
//		ti_frame = @o_finish_actor_backup ANI_CurrentFrameGet(0)
//		if (ti_frame > 380 && i_finish_frame <= 380)
//		{
//			i_finish_chosen_plan = 3
//			f_finish_forced_speed = 1.0
//			KamP_Backup_Change_Mode_Value()
//		}
//		else if (ti_frame > 300 && i_finish_frame <= 300)
//		{
//			i_finish_chosen_plan = 2
//			f_finish_forced_speed = 3.0
//			o_finish_actor = @o_finish_actor ANI_CanalObjectGet(Anim_Canal_Tete)
//			KamP_Backup_Change_Mode_Value()
//		}
//		else if (ti_frame > 150 && i_finish_frame <= 150)
//		{
//			i_finish_chosen_plan = 1
//			f_finish_forced_speed = 3.0
//			KamP_Backup_Change_Mode_Value()
//		}
//	}
//	i_finish_frame 	= ti_frame 
//}
//
//if (f_finish_forced_speed >=0)
//	tf_meca_cam_transitionspeed = f_finish_forced_speed
//else
//	tf_meca_cam_transitionspeed = Cf_Infinit
//	
//// Target
//tv_meca_cam_target = KamP_TargetGao_BlendPosGet(o_finish_actor, Cf_Infinit)
//
//// Delta
//tv_meca_cam_target_delta = @o_finish_actor MATH_VecLocalToGlobal( av_finish_delta[i_finish_id][i_finish_chosen_plan] )
//
//// Position
//tv_meca_cam_pos = @o_finish_actor OBJ_PosGet() + @o_finish_actor MATH_VecLocalToGlobal( av_finish_offset[i_finish_id][i_finish_chosen_plan] )
//
//
////if( ! @o_mf_actor AI_IsModel(get_Kong_Path) )
////	DBG_Error("Kaméra en mode finish mais ce n'est pas Kong !!???")
//
//// Focale
//switch (i_finish_id)
//{
//	// MORT DE ANN (MUST BE FIRST)
//	case Ci_Kamera_AnnDeath :
//		f_death_rotation += TIME_GetDt() * 0.75
//
//	// FINISHED SMALL BATS
//	case Ci_Kamera_Finished_id_Bats :
//	case Ci_Kamera_Finished_id_Bats_Won :
//	case Ci_Kamera_Finished_id_Bats_KongWin :
//	
//	// FINISHED RAPTORS
//	case Ci_Kamera_Finished_id_Raptor :
//	case Ci_Kamera_Finished_id_Raptors_Won :
//	case Ci_Kamera_Finished_id_Raptors_KongWin :
//	
//	// FINISHED SMALL SCOLOS
//	case Ci_Kamera_Finished_id_Scolos :
//	case Ci_Kamera_Finished_id_Scolos_Won :
//	case Ci_Kamera_Finished_id_Scolos_KongWins :
//	
//	// FINISH(ED) BIG SCOLO
//	case Ci_Kamera_Finished_id_BigScolo :
//	case Ci_Kamera_Finished_id_BigScolo_Won :
//	case Ci_Kamera_Finished_id_BigScolo_KongWins :
//	
//	// FINISH REX - SOULEVE 
//	case Ci_Kamera_Finish_id_FlancMashD :
//	case Ci_Kamera_Finish_id_FlancMashG :
//	
//	case Ci_Kamera_Finish_id_KONG_Won :
//	case Ci_Kamera_Finished_id_TREX_Won :
//	case Ci_Kamera_Finish_id_MashingPillier :
//	case Ci_Kamera_Finish_id_MashingBus :
//	case Ci_Kamera_Finish_id_KONG_WonSimple :
//	case Ci_Kamera_Finish_id_BigBat_KongWins :
//	
//	// MORT DE ANN vs BBAT
//	case Ci_Kcamera_AnnDeath_BBat :
//		
//		tf_additionnal_focal = 0
//		break
//   
//	case Ci_Kamera_Finish_id_BigBat :
//		tf_additionnal_focal = (1.0 - (0.5+ (MATH_FloatMax(0.3, @o_mf_actor Proc_KK_Mashing_Pct())*0.5)))
//		break
//		
//	default:
//		tf_additionnal_focal = (1.0- MATH_FloatMax(0.5, @o_mf_actor Proc_KK_Mashing_Pct()))
//		break
//}
//tf_meca_cam_focale = 1.2 + tf_additionnal_focal 
//
////DBG_TraceFloat(@get_kong Proc_KK_Mashing_Pct())
////DBG_TraceString("  ")
////DBG_TraceFloat(tf_meca_cam_focale)
////DBG_TraceEOL()
//
////Str_DisplayFloatOnce(f_chm_coef, cvector(0,0.8,0))
//
//
//if (ai_finish_Flags[i_finish_id] & 0b1)
//	i_MECA_TestRayCast = faux
//
//
//// Apply this settings
//KamP_MECA_Pos_Blend( tv_meca_cam_target, tv_meca_cam_target_delta, tv_meca_cam_pos, tf_meca_cam_focale, tf_meca_cam_transitionspeed)
//
//DBG_RenderSphere(tv_meca_cam_pos,1.0,color_rose)
//
//#ifndef _FINAL_
//if (i_render_finish)
//{
//	for (ti_i = 0; ti_i < Ci_max_nb_finish_offsets; ti_i++)
//	{
//		vector ttv_meca_cam_target_pos, ttv_meca_cam_pos 
//		
//		// Delta
//		ttv_meca_cam_target_pos = @o_finish_actor OBJ_PosGet() + @o_finish_actor MATH_VecLocalToGlobal( av_finish_delta[i_finish_id][ti_i] )
//	
//		// Position
//		ttv_meca_cam_pos = @o_finish_actor OBJ_PosGet() + @o_finish_actor MATH_VecLocalToGlobal( av_finish_offset[i_finish_id][ti_i] )
//	
//		DBG_RenderSphere(ttv_meca_cam_pos,0.5,color_jaune)
//		DBG_RenderVector(ttv_meca_cam_pos, ttv_meca_cam_target_pos - ttv_meca_cam_pos, color_jaune)
//	}
//}
//#endif
//