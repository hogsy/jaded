procedure_local void RM_PF_Banking(vector pv_dest_sight)
{
	float		tf_norm	
	vector	tv_last_pos
	if (MATH_VecNull(v_grav_pos))
		v_grav_pos = OBJ_PosGet() - (OBJ_BankingGet() * 2.5)
		
	tv_last_pos = v_grav_pos

	v_grav_pos += v_grav_speed * 0.95 * TIME_GetDt()
	v_grav_pos.z -= 0.5 * TIME_GetDt()
	
	MATH_VecSetNormalize(pv_dest_sight)	

	v_grav_pos -= OBJ_PosGet()
	v_grav_pos -= MATH_VecDotProduct(v_grav_pos, pv_dest_sight) * pv_dest_sight

	tf_norm = MATH_VecNorm(v_grav_pos)
	if (tf_norm)
	{
		v_grav_pos /= tf_norm
		OBJ_BankingGeneralSet(pv_dest_sight ,  -v_grav_pos)
		v_grav_pos *= 2.5
		v_grav_pos += OBJ_PosGet()
	}
	else
	{
		OBJ_BankingGeneralSet(pv_dest_sight  ,  Cv_VerticalVector)
	}
	v_grav_speed = (v_grav_pos - tv_last_pos) / TIME_GetDt()
}

procedure_local void RM_PF_SplineCalc()
{
	f_spline_segment_length = MATH_VecNorm(@o_LastWP OBJ_PosGet() - @o_DestWP OBJ_PosGet())
	f_spline_segment_length+=0.001

	v_spline_start_axis = @o_LastWP OBJ_SightGet() * i_SensWP
	v_spline_dest_axis = -@o_DestWP OBJ_SightGet() * i_SensWP
	
	v_B_pos = @o_LastWP OBJ_PosGet()
	v_B_pos += v_spline_start_axis * f_spline_segment_length * 0.33
	
	v_C_pos = @o_DestWP OBJ_PosGet()
	v_C_pos += v_spline_dest_axis * f_spline_segment_length * 0.33
	f_spline_coef	= 0.0
}

procedure_local void RM_PF_SplinePos(float pf_progress)
{
	vector	tv_pos
	vector	tv_dest_sight	
	
	f_spline_coef = pf_progress/f_spline_segment_length

	MATH_LIB_Bezier_Display(30, @o_LastWP OBJ_PosGet(), v_B_pos, v_C_pos, @o_DestWP OBJ_PosGet(), color_blanc)
	tv_pos = MATH_LIB_Bezier_Pos_Get(f_spline_coef, @o_LastWP OBJ_PosGet(), v_B_pos, v_C_pos, @o_DestWP OBJ_PosGet(),tv_dest_sight)

	OBJ_PosSet(tv_pos)

//	tv_pos.z=0.0
//	v_pos3 = v_pos2
//	v_pos2 = v_pos1
//	v_pos1 = tv_pos
//
	if(tv_dest_sight!=Cv_NullVector)
	{
		switch(i_Orientation)
		{
			case 0:
			break
			case 1:
				OBJ_BankingGeneralSet(tv_dest_sight * i_SensWP, Cv_VerticalVector)
			break
			case 2:
				OBJ_SightGeneralSet(tv_dest_sight * i_SensWP , Cv_VerticalVector)
			break
			case 3:
				RM_PF_Banking(tv_dest_sight * i_SensWP)
			break
		}
	}
}



procedure_local void RM_PF_NextWP()
{
	object	to_Backup
	int			ti_PasOk
	int			ti_Indice

	to_Backup=o_DestWP
	if(o_LastWP)
	{
		ti_PasOk=vrai
		ti_Indice = 0
		while( ti_PasOk )
		{
			o_DestWP=WAY_NetNextWP(n_Network,to_Backup, NetNextWP_Mode_choix_de_lindice, ti_Indice)
			if(o_DestWP)
			{
				if((o_DestWP==o_LastWP) || (WAY_LinkCapaGet(n_Network,to_Backup,o_DestWP)&OBJ_Capa_0))
					ti_PasOk = vrai
				else
					ti_PasOk = faux
			}
			else
				ti_PasOk = faux
			ti_Indice++
		}
		if(!o_DestWP)
		{
			i_SensWP=-i_SensWP
			o_DestWP=o_LastWP
		}
	}
	else
	{
		o_DestWP = WAY_NetNextWP(n_Network,to_Backup, NetNextWP_Mode_choix_de_lindice, i_SensDeplacement)
		if(!o_DestWP)
		{
			o_DestWP=WAY_NetNextWP(n_Network,to_Backup, NetNextWP_Mode_choix_de_lindice, 0)
		}
	}
	o_LastWP=to_Backup


	if(@o_DestWP OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_DesignStruct))
		f_WaitingTime=o_DestWP.des_float1
	else
		f_WaitingTime= 0.0
	i_DestTrouvee = vrai
}