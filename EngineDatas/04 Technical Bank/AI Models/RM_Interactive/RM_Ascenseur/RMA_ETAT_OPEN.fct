#include "RM_Ascenseur_defines.var"

int		ti_dest
int		ti_i

// SORTIE ETAT 	===================================================================
if( i_sort_etat )
{
	i_sort_etat = faux
	return
}

// INIT ETAT 	=====================================================================
if( i_etat_courant != ETAT_RMA_OPEN)
{
	i_etat_courant = ETAT_RMA_OPEN
	if( fct_last_etat )
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0

	if (i_dest)
		ti_dest = 0
	else
		ti_dest = 1
	@o_positions[ti_dest] OBJ_CapaSet(OBJ_Capa_8, none)
	
	if (i_SND_wait_loop == -1)
		i_SND_wait_loop = SND_RequestPlayLoop(SND_WAIT_LOOP)
	SND_RequestPlay(SND_BELL)
} 
else
{
	f_time_start_etat += TIME_GetDt()
}

// COMPORTEMENT ================================================================

// Mettre à jour son coefficient 
if (i_dest)
	ti_dest = 0
else
	ti_dest = 1
f_porte_open[i_porte_position[ti_dest]] += f_porte_speed * TIME_GetDt()
if (f_porte_open[i_porte_position[ti_dest]] > 1.0)
	f_porte_open[i_porte_position[ti_dest]] = 1.0

RMA_Porte_PosSet(i_porte_position[ti_dest])

if (f_porte_open[i_porte_position[ti_dest]] >= 1.0)
{
	if (i_dest) 
	{
		i_dest = 0
		for (ti_i=0; ti_i < 3; ti_i++)
			if (AI_TriggerIsValid(t_position0_exec[ti_i]))
				call_trigger (t_position0_exec[ti_i])
	}
	else 
	{
		i_dest = 1
		for (ti_i=0; ti_i < 3; ti_i++)
			if (AI_TriggerIsValid(t_position1_exec[ti_i]))
				call_trigger (t_position1_exec[ti_i])
	}
	
	AI_TrackCurChangeNow("RMA_ETAT_WAIT")
}
