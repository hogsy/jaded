#include "RM_Stele_Defines.var"

//--------------------------------------------------------------------------------------------
//    PROCEDURE DESATURANT UNE COULEUR
//--------------------------------------------------------------------------------------------
procedure color PROC_DESATURE_COLOR(color tc_color, float tf_facteur)
{
	int ti_red, ti_green, ti_blue, ti_mid
	
	ti_red = COLOR_GetR(tc_color)
	ti_green = COLOR_GetG(tc_color)
	ti_blue = COLOR_GetB(tc_color)

	ti_mid = (ti_red + ti_green + ti_blue) * 0.333

	ti_red = MATH_FloatBlend(ti_red,ti_mid, tf_facteur)
	ti_green = MATH_FloatBlend(ti_green,ti_mid, tf_facteur)
	ti_blue = MATH_FloatBlend(ti_blue,ti_mid, tf_facteur)

	return COLOR_SetRGBA(ti_red,ti_green,ti_blue,COLOR_GetA(tc_color))
}

//------------------------------------------------------------------------------------------------------------------
// 			GENERATEUR DE PARCITULES INCANTATION PTIZETRES
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_INCANTATION_PTITZETRES(byref int i_GFX_Incant, byref int i_GFX_Etinc, vector tv_pos, float tf_facteur, float tf_hauteur, float tf_rayon, color tc_color)
{
	if (i_GFX_Incant == -1)
	{
		i_GFX_Incant = GFX_Add(13)
		GFX_MaterialSet(i_GFX_Incant, get_SFX_light_and_smoke, -1)
		GFX_Seti(i_GFX_Incant, 13101, 0)																	// ID de material du SFX Lgt&Smk
		GFX_FlagSet(i_GFX_Incant, 0 , 1)
		GFX_FlagSet(i_GFX_Incant, 2 , 1)
		GFX_Seti(i_GFX_Incant, 13100, 50)																// Nombre maxi de sprites
		GFX_Seti(i_GFX_Incant, 13106, 0xFFFFFFFF)													// Nombre de sprites à générer
		GFX_Setf(i_GFX_Incant, 13003, 0.1500000)														// duree de vie phase 1
		GFX_Setf(i_GFX_Incant, 13004, 0.150000)														// duree de vie phase 2 
		GFX_Setf(i_GFX_Incant, 13012, 0.750000)														// Life time random
		GFX_Seti(i_GFX_Incant, 13107, 0)																	// Tri des sprites
		GFX_Setf(i_GFX_Incant, 13000, 0.10000)															// Vitesse de croissance min
		GFX_Setf(i_GFX_Incant, 13001, 0.2000)															// Vitesse de croissance max
		GFX_Setf(i_GFX_Incant, 13002, 0.25)																// Friction sur la croissance
		GFX_Setf(i_GFX_Incant, 13005, 0.25)																// Taille min à la création
		GFX_Setf(i_GFX_Incant, 13006, 0.25)																// Taille max à la création
		GFX_Setf(i_GFX_Incant, 13007, 0.0)																// Gravité
		GFX_Setv(i_GFX_Incant, 13203, cvector(0.0, 0.0, 0.0))										// Friction sur chaque axe
		GFX_Seti(i_GFX_Incant, 13103, tc_color)															// Couleur phase 1
		GFX_Seti(i_GFX_Incant, 13104, COLOR_Blend(tc_color,color_noire,0.5))				// Couleur phase 2
		GFX_Seti(i_GFX_Incant, 13105, 0x00000000)													// Couleur phase 3
		GFX_Setf(i_GFX_Incant, 13011, tv_pos.z - 10.0)												// Hauteur du sol
		GFX_Setf(i_GFX_Incant, 13009, 0.0)																// Vitesse min
		GFX_Setf(i_GFX_Incant, 13010, 0.0)																// Vitesse max
		GFX_Setv(i_GFX_Incant, 13201, cvector(0.0, 0.0, 0.0))										// Vitesse min sur chaque axe
		GFX_Setv(i_GFX_Incant, 13202, cvector(0.0, 0.0, 0.0))										// Vitesse max sur chaque axe
		GFX_Setv(i_GFX_Incant, 13204, cvector(0.0, 0.0, 0.0))										// Vent
		GFX_Setv(i_GFX_Incant, 13205, cvector(0.0, 0.0, 0.0))										// Vitesse de la position de création
		GFX_Setv(i_GFX_Incant, 13206, cvector(0.0, 0.0, 0.0))										// Friction de la position
		GFX_Setv(i_GFX_Incant, 13207, cvector(0.01,0.0,0.0))										// Volume de création 1
		GFX_Setv(i_GFX_Incant, 13208, cvector(0.0,0.01,0.0))										// Volume de création 2
		GFX_Setf(i_GFX_Incant, 13008, 0.03)																// Taux de génération
	}
	GFX_Setv(i_GFX_Incant, 13200, tv_pos + cvector(tf_rayon * MATH_Sin(tf_facteur * Cf_PiBy180), tf_rayon * MATH_Cos(tf_facteur * Cf_PiBy180), tf_hauteur))	


	//--------------------------------------------------------
	// 					ETINCELLES
	//--------------------------------------------------------
	if (i_GFX_Etinc == -1)
	{
		i_GFX_Etinc = GFX_Add(9)
		GFX_FlagSet(i_GFX_Etinc, 0,1)
		GFX_FlagSet(i_GFX_Etinc, 2, 1)
		GFX_MaterialSet(i_GFX_Etinc, get_SFX_light_and_smoke, 5)
		GFX_Seti(i_GFX_Etinc, 9101, tc_color)												// Couleur des particules
		GFX_Setv(i_GFX_Etinc, 9200, tv_pos + cvector(0.0,0.0,1.0))					// Position
		GFX_Setv(i_GFX_Etinc, 9201, cvector(0.0,0.0,1.0))								// Axe principal de génération
		GFX_Seti(i_GFX_Etinc, 9100, 20)														// Nombre de particules max
		GFX_Seti(i_GFX_Etinc, 9102, 16)														// Flags
		GFX_Setf(i_GFX_Etinc, 9000, Cf_Pi * 2.0)											// Angle du cône, en radians
		GFX_Setf(i_GFX_Etinc, 9001, 30)														// Vitesse min
		GFX_Setf(i_GFX_Etinc, 9002, 40)														// Vitesse max
		GFX_Setf(i_GFX_Etinc, 9003, 0.7)														// Friction
		GFX_Setf(i_GFX_Etinc, 9005, 0.1)														// Temps de vie minimum
		GFX_Setf(i_GFX_Etinc, 9006, 0.1)														// Temps de vie max
		GFX_Setf(i_GFX_Etinc, 9008, 0.01)														// Temps entre la génération de 2 étincelles
		GFX_Setf(i_GFX_Etinc, 9009, 0.1)														// Temps de mort minimum
		GFX_Setf(i_GFX_Etinc, 9010, 0.1)														// Temps de mort maximu
		GFX_Setf(i_GFX_Etinc, 9004, MATH_RandFloat(0.03, 0.05))					// Epaisseur des étincelles
		GFX_Setf(i_GFX_Etinc, 9007, 1)															// Multiplicateur de longueur
	}
}


procedure_local void RM_Stele_GFXHalo(int pi_Stele)
{
	int			ti_ID_GFX
	vector	tv_pos

	for (ti_ID_GFX = pi_Stele * Ci_RM_Stele_GFX_NbParSocle; ti_ID_GFX < ((pi_Stele * Ci_RM_Stele_GFX_NbParSocle) + Ci_RM_Stele_GFX_NbParSocle); ti_ID_GFX ++)
	{
//		i_GFX_Stele_factor[ti_ID_GFX] ++
		i_activ_incant[ti_ID_GFX] = vrai
//		if (i_GFX_Stele_attente[pi_Stele] !=-1)
//		{
//			GFX_Del(i_GFX_Stele_attente[pi_Stele])
//			i_GFX_Stele_attente[pi_Stele] = -1
//		}
		
		PROC_SFX_INCANTATION_PTITZETRES(i_GFX_Stele[ti_ID_GFX], i_GFX_Etincelles_stele[pi_Stele],@ao_Socles[pi_Stele] OBJ_PosGet(), f_facteur_incant[ti_ID_GFX], f_hauteur_incant[ti_ID_GFX], f_dist_incant, PROC_DESATURE_COLOR(COLOR_Blend(c_CouleurHalo,color_blanc,0.0),0.75))
	}


	if(ai_GFX_Halo[pi_Stele]==-1)
	{
		ai_GFX_Halo[pi_Stele] = @ao_Socles[pi_Stele] GFX_Add(21)
		GFX_FlagSet(ai_GFX_Halo[pi_Stele] , 4, 1)
		GFX_MaterialSet(ai_GFX_Halo[pi_Stele] , get_SFX_light_and_smoke, 0)
		GFX_Setf(ai_GFX_Halo[pi_Stele] , 21002, -0.5)							// extraction par rapport au point de génération (vers la cam)
		GFX_Seti(ai_GFX_Halo[pi_Stele] , 21103, 1)		
		GFX_Seti(ai_GFX_Halo[pi_Stele] , 21101, c_CouleurHalo)
		GFX_Setv(ai_GFX_Halo[pi_Stele], 21200, @ao_Socles[pi_Stele] OBJ_PosGet() + Cv_VerticalVector)
	}
	GFX_Setf(ai_GFX_Halo[pi_Stele], 21000, MATH_RandFloat(1.0, 2.0))





//	if(ai_GFX_Halo[pi_Stele]==-1)
//	{
//		ai_GFX_Halo[pi_Stele] = @ao_Socles[pi_Stele] GFX_Add(21)
//		GFX_FlagSet(ai_GFX_Halo[pi_Stele] , 4, 1)
//		GFX_MaterialSet(ai_GFX_Halo[pi_Stele] , get_SFX_light_and_smoke, 0)	
//		GFX_Setf(ai_GFX_Halo[pi_Stele] , 21002, 0.1)							// extraction par rapport au point de génération (vers la cam)
//		GFX_Seti(ai_GFX_Halo[pi_Stele] , 21103, 1)		
//		GFX_Seti(ai_GFX_Halo[pi_Stele] , 21101, c_CouleurHalo)
//		GFX_Setv(ai_GFX_Halo[pi_Stele], 21200, @ao_Socles[pi_Stele] OBJ_PosGet() + Cv_VerticalVector)
//	}
//	GFX_Setf(ai_GFX_Halo[pi_Stele], 21000, MATH_RandFloat(1.0, 2.0))
}


procedure_local void PROC_DESTROY_ALL_SFX()
{
	int ti_cpt
	for(ti_cpt=0;ti_cpt<i_NbSocles;ti_cpt++)
	{
		GFX_Del(ai_GFX_Halo[ti_cpt])
		ai_GFX_Halo[ti_cpt]=-1
	}

	for (ti_cpt = 0; ti_cpt< Ci_RM_Stele_GFX_NbMax; ti_cpt ++)
	{
		GFX_Del(i_GFX_Stele[ti_cpt])
		i_GFX_Stele[ti_cpt]=-1
	}
}


procedure_local void RM_Stele_GFXHalos()
{
	int	ti_i
	
	for(ti_i=0;ti_i<i_NbSocles;ti_i++)
	{
		if(ai_Socles_Valide[ti_i] && ao_Socles[ti_i] )
		{
			RM_Stele_GFXHalo(ti_i)
		}
	}
}


procedure_local void RM_Stele_GFXMajIncantation()
{
	int ti_cpt
	// GFX
	for (ti_cpt = 0; ti_cpt < Ci_RM_Stele_GFX_NbMax; ti_cpt++)
	{
		if (i_activ_incant[ti_cpt])
		{
			f_facteur_incant[ti_cpt] += TIME_GetDt() * f_speed_rot_incant
			f_hauteur_incant[ti_cpt] += TIME_GetDt() * f_speed_rot_incant * 0.0035
			
			if (f_facteur_incant[ti_cpt] > 359)
				f_facteur_incant[ti_cpt] = 0
			
			if (f_hauteur_incant[ti_cpt] > f_hauteur_max_incant)
				f_hauteur_incant[ti_cpt] = 0.0
		}
	}	

	for (ti_cpt = 0; ti_cpt < Ci_RM_Stele_NbSocle_Max ; ti_cpt++)
	{
		if(ao_Ptizetres[ti_cpt] && af_PtizetresBlend[ti_cpt]>0.0 )
		{
			af_PtizetresBlend[ti_cpt]-=TIME_GetDt()
	//		@ao_Ptizetres[ti_cpt] OBJ_SightGeneralSet(@ao_Ptizetres[ti_cpt] OBJ_SightGet(),)
			@ao_Ptizetres[ti_cpt] OBJ_PosSet(MATH_VecBlend(@ao_Ptizetres[ti_cpt] OBJ_PosGet(),@ao_Socles[ti_cpt] OBJ_PosGet(),2.0*TIME_GetDt()))
			@ao_Ptizetres[ti_cpt] OBJ_BankingGeneralSet(MATH_VecBlendRotate(@ao_Ptizetres[ti_cpt] OBJ_SightGet(), @ao_Socles[ti_cpt]OBJ_SightGet(),2.0*TIME_GetDt() ), MATH_VecBlendRotate(@ao_Ptizetres[ti_cpt] OBJ_BankingGet(),Cv_VerticalVector,2.0*TIME_GetDt()))
//			@ao_Ptizetres[ti_cpt] OBJ_RotateGlobalZ(TIME_GetDt()*2.0)
		}
	}
}

procedure_local void RM_Stele_GFX_Signalisation()
{
	if(i_GFX_Signalisation==-1)
	{

		i_GFX_Signalisation2 = GFX_Add(21)
		GFX_FlagSet(i_GFX_Signalisation2, 4, 1)
		GFX_MaterialSet(i_GFX_Signalisation2, get_SFX_light_and_smoke, 0)
		GFX_Setf(i_GFX_Signalisation2, 21002, 0.1)							// extraction par rapport au point de génération (vers la cam)
		GFX_Seti(i_GFX_Signalisation2, 21103, 1)		
		GFX_Seti(i_GFX_Signalisation2 , 21101, c_CouleurHalo)
		GFX_Setv(i_GFX_Signalisation2, 21200, OBJ_PosGet() + cvector(0.0, 0.0, 4.0))

		i_GFX_Signalisation3 = GFX_Add(21)
		GFX_FlagSet(i_GFX_Signalisation3, 4, 1)
		GFX_MaterialSet(i_GFX_Signalisation3, get_SFX_light_and_smoke, 0)
		GFX_Setf(i_GFX_Signalisation3, 21002, 0.1)							// extraction par rapport au point de génération (vers la cam)
		GFX_Seti(i_GFX_Signalisation3, 21103, 1)		
		GFX_Seti(i_GFX_Signalisation3 , 21101, c_CouleurHalo)
		GFX_Setv(i_GFX_Signalisation3, 21200, OBJ_PosGet())

//		i_GFX_Signalisation2= GFX_Add(4)                                                                                                                 //création du halo
//		GFX_FlagSet(i_GFX_Signalisation2,0,1)                           								// activation
//		GFX_FlagSet(i_GFX_Signalisation2, 2, 1)                       								// transparent
//		GFX_FlagSet(i_GFX_Signalisation2, 4, 1)														// detache de lobjet
//		GFX_MaterialSet(i_GFX_Signalisation2, get_SFX_light_and_smoke,0)				// affectation du matériau
//		GFX_Seti(i_GFX_Signalisation2, 4100, 3)														// flags
//		GFX_Setf(i_GFX_Signalisation2, 4001, 0.1 )													// temps de disparition du halo lorsqu'il est occulté
//		GFX_Seti(i_GFX_Signalisation2, 4102, c_CouleurHalo)									// couleur du halo
//
//		i_GFX_Signalisation3= GFX_Add(4)                                                                                                                 //création du halo
//		GFX_FlagSet(i_GFX_Signalisation3,0,1)                           								// activation
//		GFX_FlagSet(i_GFX_Signalisation3, 2, 1)                       								// transparent
//		GFX_FlagSet(i_GFX_Signalisation3, 4, 1)														// detache de lobjet
//		GFX_MaterialSet(i_GFX_Signalisation3, get_SFX_light_and_smoke,0)				// affectation du matériau
//		GFX_Seti(i_GFX_Signalisation3, 4100, 3)														// flags
//		GFX_Setf(i_GFX_Signalisation3, 4001, 0.1 )													// temps de disparition du halo lorsqu'il est occulté
//		GFX_Seti(i_GFX_Signalisation3, 4102, c_CouleurHalo)									// couleur du halo

		i_GFX_Signalisation = GFX_Add(1)
		GFX_FlagSet(i_GFX_Signalisation , 0, 1)
		GFX_FlagSet(i_GFX_Signalisation, 2, 1)
		GFX_MaterialSet(i_GFX_Signalisation, get_SFX_light_and_smoke, 3)
		GFX_Seti(i_GFX_Signalisation, 1100, c_CouleurHalo)		// Couleur de la ligne		
		GFX_Setv(i_GFX_Signalisation, 1200, OBJ_PosGet())		// Coordonnée de la position 3D du début du faisceau
	}
	GFX_Setv(i_GFX_Signalisation, 1201, OBJ_PosGet() + cvector(0.0, 0.0, 3.0/f_Lod))		// Coordonnée de la position 3D de la fin du faisceau
	GFX_Setf(i_GFX_Signalisation, 1000,MATH_RandFloat(0.05, 0.1)/f_Lod)		// Epaisseur de la ligne
//	GFX_Setf( i_GFX_Signalisation2, 4000, MATH_RandFloat(0.06, 0.12)) // taille du halo 
//	GFX_Setv( i_GFX_Signalisation2, 4200, OBJ_PosGet() + cvector(0.0, 0.0, 4.0/OBJ_LodVisGet()))	// position du halo
//	GFX_Setf( i_GFX_Signalisation3, 4000, MATH_RandFloat(0.06, 0.12)) // taille du halo 
//	GFX_Setv( i_GFX_Signalisation3, 4200, OBJ_PosGet())	// position du halo

	GFX_Setf(i_GFX_Signalisation2, 21000, MATH_RandFloat(0.2, 0.4)/f_Lod)
	GFX_Setf(i_GFX_Signalisation3, 21000, MATH_RandFloat(0.2, 0.4)/f_Lod)
	GFX_Setv(i_GFX_Signalisation2, 21200, OBJ_PosGet() + cvector(0.0, 0.0, 3.0/f_Lod))

	
}