#include "RM_Prune_defines.var"

object	to_gao
float		tf_rope_length
float		tf_rope_ratio
vector	tv_offset_A
vector	tv_offset_B
int			ti_rope_index



// SORTIE ETAT ===================================================================
if( i_sort_etat )
{
	i_sort_etat = faux
	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_NeverDynamicFather | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_SkipFrictionWhenSpeedFromAnim | DYN_C_HorizontalGrounds | DYN_C_SlipOnGroundEdge, none)
	DYN_GravitySet(Cv_NormalGravity)
	DYN_FrictionVectorSet(cvector(f_DYN_Friction,f_DYN_Friction,0.0))
	return
}

// INITIALISATION ETAT ==============================================================
if( i_etat_courant != ETAT_Prune_PASSIVEWAIT )
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Prune_PASSIVEWAIT
	if( fct_last_etat )
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_previous_etat = fct_last_etat
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	v_Pivot = OBJ_PosGet() + (Cv_VerticalVector * f_Prune_Taille)
	v_Balancier = -Cv_VerticalVector * f_Prune_Taille
	DYN_Off()
	f_CordeT=0.0
	i_Relache = faux
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// STIMULI ===========================================================================

if(o_Pafeur)
	macro_change_etat(fct_wait)

// COMPORTEMENT ===================================================================

to_gao = @o_rope_manager Rope_Manager_Get_Linked_Gao(OBJ_Me(), tf_rope_length, tf_rope_ratio, tv_offset_A, tv_offset_B)
if( to_gao )
{
	Proc_Mashing_Actor_Add(OBJ_Me())
	
	ti_rope_index = @o_rope_manager Rope_Manager_Get_Corde_Index(to_gao, OBJ_Me())
	if(@o_rope_manager Rope_Manager_RopeTendue(ti_rope_index))
		f_CordeT=0.15
	else
		f_CordeT-=MATH_FloatMin(TIME_GetDt(),f_CordeT)
	

//	if( @o_rope_manager Rope_Manager_RopeTendue(ti_rope_index) && !i_Relache)
	if( f_CordeT>0.0 && !i_Relache)
	{
		if(glob_joynorm_get)
		{
			f_DelaiTire += TIME_GetDt()
			v_Balancier = MATH_VecBlendRotate(v_Balancier,@get_rayman OBJ_PosGet()-OBJ_PosGet(),TIME_GetDt())
			v_Balancier = MATH_VecNormalize(v_Balancier) * f_Prune_Taille
			OBJ_CapaSet(OBJ_Capa_2,none)
			if( f_DelaiTire > 2.0 )
			{
//				@get_global i_grappin_hotspot_nmi_died = vrai		// cancel grappin				
				macro_change_etat(fct_wait)
			} 
		}
	}
	else
	{
		i_Relache = vrai
		if(f_DelaiTire>0.0)
			f_DelaiTire -=TIME_GetDt()
		else
			i_Relache = faux
		OBJ_CapaSet(none,OBJ_Capa_2)
//		f_DelaiTire = 0.0
		v_Balancier = MATH_VecBlendRotate(v_Balancier,-Cv_VerticalVector * f_Prune_Taille,TIME_GetDt()*5.0)
	}
}

OBJ_PosSet(v_Pivot+v_Balancier)
