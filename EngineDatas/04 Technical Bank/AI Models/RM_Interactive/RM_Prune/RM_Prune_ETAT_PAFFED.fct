#include "RM_Prune_defines.var"


// SORTIE ETAT ===================================================================
if( i_sort_etat )
{
	f_DYN_Friction = f_DYN_FrictionOld
	DYN_FrictionVectorSet(cvector(f_DYN_Friction,f_DYN_Friction,0.0))
	DYN_GravitySet(Cv_NormalGravity)
	i_sort_etat = faux
	return
}

// INITIALISATION ETAT ==============================================================
if( i_etat_courant != ETAT_Prune_PAFFED )
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Prune_PAFFED
	if( fct_last_etat )
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_previous_etat = fct_last_etat
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	f_DYN_FrictionOld=f_DYN_Friction
	f_DYN_Friction = 0.5
	DYN_FrictionVectorSet(cvector(f_DYN_Friction,f_DYN_Friction,0.0))
	DYN_GravitySet(Cv_NormalGravity * 0.8)
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// STIMULI ===========================================================================

if(COL_CollideType(COL_C_Ground) && f_time_start_etat>0.1)
	macro_change_etat("RM_Prune_ETAT_FUITE")

// COMPORTEMENT ===================================================================
v_BankingVoulu = MATH_VecBlend(DYN_SpeedGetVector(),Cv_VerticalVector,0.9) 

OBJ_BankingGeneralSet(MATH_VecBlendRotate(OBJ_SightGet(),v_SightVoulu,5.0*TIME_GetDt()) ,MATH_VecBlendRotate(OBJ_BankingGet(),v_BankingVoulu,5.0*TIME_GetDt()))

