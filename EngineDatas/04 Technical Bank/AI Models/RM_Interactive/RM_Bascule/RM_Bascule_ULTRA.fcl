procedure_ultra void RM_Bascule_Add(object to_actor, vector tv_speed, float tf_weight)
{
	vector	tv_force	

	ao_inertia_actor[i_inertia_actor] = to_actor
	af_inertia_actor_weight[	i_inertia_actor] = tf_weight
	i_inertia_actor++
		
	tv_force = cvector(0.0, 0.0, -10.0) + tv_speed
	tv_force *= tf_weight

	v_force += tv_force
	v_torque += MATH_VecCrossProduct(@to_actor OBJ_PosGet() - OBJ_PosGet(), tv_force)
}

procedure_ultra void RM_Bascule_Add_Force_At_Pos(vector tv_pos, vector tv_force)
{
	v_force += tv_force
	v_torque += MATH_VecCrossProduct(tv_pos - OBJ_PosGet(), tv_force)
}

procedure_ultra void RM_Bascule_Add_Force(object to_actor, vector tv_force)
{
	if (accept_additionnal_traction)
	{
		v_force += tv_force
		v_torque += MATH_VecCrossProduct(@to_actor OBJ_PosGet() - OBJ_PosGet(), tv_force)
	}
}