#include "RM_CD_Defines.var" 

// Define at least one function in a track
// function track0 = "name"
// function track1 = "name"
function track2 = "RM_CD_Track_init"
// function track3 = "name"
// function track4 = "name"

separator				"Start/Stop"
float						f_Time = 60.0
trigger					TriggerTest_Start
trigger					TriggerTest_Success
trigger					TriggerExec_Success
trigger					TriggerExec_Missed

separator				"Variables communes à tous les GFX"
object					o_CentreHalos																		// Objet sur lequel est centré le GFX
int							i_TypeHalo = enum("Halo" 1 "Sprite" 2 "Chaine de coeurs" 3)		// Type de GFX désiré
int							i_NbHalos = 10																	// Nombre de GFX
private int 				i_nb_modules = i_NbHalos
float						f_Rayon = 0.1
color						c_Color = COLOR_SetRGBA(255,115,0,100)	//0x9FFFFFFF

separator				"Halos"
int							i_Bone
float						f_Size = 1.0
int							i_IDSprite = 75
float						f_Follow = 0.0

// PRIVATE
private float 			f_CurTime
private float				af_TimeLeft[Ci_RM_CD_MaxHalo]
private int				i_NbLeftHalos
private float				f_Angle
private vector			v_RefVecteur
private vector			v_Centre

// ETATS
private int				i_sort_etat
private int				i_etat_courant = -1
private int				i_dernier_etat = -1
private function		fct_last_etat
private float				f_time_start_etat

// GFX
private int				ai_Halo[Ci_RM_CD_MaxHalo]

separator 				"Coeurs"
// GFX Chaîne de coeurs
//int							i_nb_modules										// Nombre de maillons à la chaîne (en comptant le module initial)
float						i_espacement = 0.2									// Espacement entre les modules
vector					v_gravite_init = cvector(0.0,1.0,-0.01)			// Gravité appliquée aux coeurs
float						f_amplitude_gravite = 0.5							// Amplitude des mouvements aléatoires de la gravité
private float				f_increment_gravite = 0.1
private vector			v_target_gravite = Cv_NullVector
private vector			v_dir_modules[Ci_RM_CD_MaxHalo]
private vector			v_pos_modules[Ci_RM_CD_MaxHalo]
private vector			tv_decalage_vertical = cvector(0.0,0.0,-0.1)
private vector			tv_last_pos = Cv_NullVector