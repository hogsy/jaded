#include "r_defines.var"

int			ti_asp
int			ti_STR
float		tf_friction
float		tf_dist
float		tf_length
float		tf_coef
vector	tv_pos
vector	tv_temp
vector	tv_friction
vector	tv_speed
vector	tv_sens
vector	tv_force
vector	tv_dir
vector	tv_gravity
vector	tv_offset
object	to_torse
object	to_main
object	to_target
object	to_obj
int			tc_color		

// PAF FILTRE ROUGE ==========================================================
@get_global Proc_AE_ColorBalanceSet(MATH_FloatBlend(@get_global Proc_AE_ColorBalance1Get(), @get_global Proc_AE_ColorBalance1DefaultGet(), 5.0 * TIME_GetDt()), 0.52)
@get_global Proc_AE_RemanenceSet(MATH_FloatBlend(@get_global Proc_AE_RemanenceGet(), @get_global Proc_AE_RemanenceDefaultGet(), 5.0 * TIME_GetDt()))
@get_global Proc_AE_BlackAndWhiteSet(MATH_FloatBlend(@get_global Proc_AE_BlackAndWhiteGet(), @get_global Proc_AE_BlackAndWhiteDefaultGet(), 5.0 * TIME_GetDt()))


// DYNA =====================================================================
if( ! OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Dyna) )
	goto END_OF_DYNA

v_before_rec_speed = DYN_SpeedGetVector()

// SOMME DES FORCE; FRICTION ET TRACTION ======================================
to_torse = ANI_CanalObjectGet(Anim_Canal_Torse)
v_force_STREAM = PROC_ForceStreamGet(OBJ_PosGet() + cvector( 0.0, 0.0, 0.6), ti_asp)
if ( ! MATH_VecNullEpsilon( v_force_STREAM))
{
	if ( @"univ" i_cheat_page == 3 )
	{
		tv_pos = VIEW_3dWorldTo2d(0, OBJ_PosGet() + cvector(0.0,0.0,1.47))
		Str_DisplayTxtFloatOnce("Stream   ", MATH_VecNorm(v_force_STREAM ), tv_pos)
	}
}


if( i_is_in_water )
{
	tf_friction = Cf_DYN_Friction_Water 
	DYN_FrictionVectorSet( Cv_DYN_Friction_Water)
}
else if( ! i_ground_flag )
{
	if ( o_grappin_hotspot)
	{
		tf_friction = 1.0 
		DYN_FrictionVectorSet( cvector( 1.0,1.0, 1.0) )
	}
	else
	{
		tf_friction = Cf_DYN_Friction_Jump 
//		if ( ! MATH_VecNullEpsilon( v_force_STREAM))
			DYN_FrictionVectorSet( Cv_DYN_Friction_Jump)
//		else
//			DYN_FrictionVectorSet( cvector(Cf_DYN_Friction_Jump, Cf_DYN_Friction_Jump, 0.0))
		
	}
}
else if( i_ground_flag && ( COL_GMAT_FlagsGet(COL_C_Ground) & Gmat_RM_Ice) )
{
	tf_friction = Cf_DYN_Friction_Ice 
	DYN_FrictionVectorSet( Cv_DYN_Friction_Ice)
}
else
{
	tf_friction = Cf_DYN_Friction
	DYN_FrictionVectorSet( Cv_DYN_Friction)
}

v_force_GRAPPIN = Cv_NullVector
if( i_grappin_accroche && ! i_ground_flag )
{
	// le grappin exerce-t-il une traction sur rayman ? 
	to_main = ANI_CanalObjectGet(RM_Canal_Grappin)
	tv_pos = @to_main OBJ_PosGet()
	tv_dir = @o_grappin OBJ_PosGet() - tv_pos
	tf_dist = MATH_VecNorm(tv_dir)
	if( tf_dist > f_grappin_dist_min_traction )
	{
		v_force_GRAPPIN = @o_grappin OBJ_PosGet() - OBJ_PosGet()		// Axe pour modifier le joy dans la track end
		// modif joy perpendiculaire à l'axe du grappin pour prendre de la hauteur
		if( ! MATH_VecNullToler(v_force_GRAPPIN, 0.01) && ! MATH_VecNullToler(v_force_JOY, 0.01) )
		{
			tv_temp = MATH_VecCrossProduct(MATH_VecNormalize(v_force_JOY), MATH_VecNormalize(v_force_GRAPPIN))
			v_force_JOY = MATH_VecCrossProduct(MATH_VecNormalize(v_force_GRAPPIN), tv_temp)
			MATH_VecSetNorm(v_force_JOY, 10.0)
		}
	}
}

v_force_GRAPPIN = Cv_NullVector		// géré par l'IA RopeMaganer GRRRRRRRRRRRRRRRRRRr

if ( i_jump_copter)
	tv_force = v_force_STREAM * 2.0
else
	tv_force = v_force_STREAM
	
if (  ACT_CustomBitGet() & Ani_CB_StopTraction)
	v_force_JOY = Cv_NullVector
if ( i_ground_flag && v_force_GRAVITY.z < -Cf_Kong_Angle_Mur_sol)
	v_force_GRAVITY = -Cv_VerticalVector
else if ( !i_is_in_water)
	v_force_GRAVITY = Cv_NullVector
if ( ! MATH_FloatNullEpsilon( v_force_STREAM.z))
	tv_force += v_force_JOY + v_force_ICE
else
	tv_force += v_force_JOY + v_force_ICE + v_force_GRAVITY
tv_force.x *= tf_friction
tv_force.y *= tf_friction
//if ( i_ground_flag)
//	tv_force.z *= tf_friction


// DETECTION PLAFOND
if ( DYN_SpeedGetVector().z > 0)
{
	tv_pos = OBJ_PosGet()// + cvector(0.0, 0.0, 1.0)
	tf_length = MATH_FloatMax( 1.5, DYN_SpeedGetVector().z * TIME_GetDt())
	DBG_RenderVector( tv_pos, cvector(0.0,0.0,tf_length), color_bleu)
	to_obj = COL_RayObject_Dist( tv_pos, Cv_VerticalVector, tf_length, all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
	if ( to_obj)
	{
		tf_length = COL_RayObject_PosGet().z - OBJ_PosGet().z
		tv_speed = DYN_SpeedGetVector()
		tv_speed.z = MATH_FloatMin( 0.0, tv_speed.z)
		DYN_SpeedSetVector( tv_speed)
		tv_force.z =MATH_FloatMin( tv_speed.z, 0.0)
		if( COL_GMAT_FlagsGet( COL_C_Ray) & Gmat_RM_Face_paf)
		{
			// MERDE UNE PLAFOND QUI PAF
//			EVENT_LIFE_LifeChange( ID_LIFE, 10.0)
			Proc_RM_LifeManaSet( Proc_RM_LifeGet() - 10.0, -1.0)
			f_display_life = Cf_Display_Time
			v_paf_detect_dir = -OBJ_SightGet()
			i_paf_detect_type = C_PAF_RM_Choc
			AI_TrackChange(2, "raym_ETAT_paf")			
		}
	}
}


if ( i_etat_courant != ETAT_RM_cheat)
	DYN_TractionSet(tv_force)

tv_friction = DYN_FrictionVectorGet()
if( i_grappin_accroche )
	tv_friction.z = f_grappin_frictionZ
DYN_FrictionVectorSet(tv_friction)

//DYN_GravitySet( v_force_GRAVITY)


// vitesse et rotation ajoutée =======================================================
if( ! MATH_VecNullEpsilon( v_add_speed) ) 
{
	tv_speed = DYN_SpeedGetVector()
	tv_speed += v_add_speed
	DYN_SpeedSetVector( tv_speed )
	v_add_speed = MATH_VecBlend(v_add_speed, Cv_NullVector, 9.0 * TIME_GetDt())
}

END_OF_DYNA:

// RAZ flags & CAPAS ==========================================================
RESTORE_Cancel_Mouvment()
OBJ_CapaSet( none, Capa_ZDE_Fight_ON)
OBJ_CapaSet( none, Capa_Buffer_Interrupt)
OBJ_CapaSet( none, Capa_DUPLICATED)
f_speed_before_rec = DYN_SpeedGet()
v_speed_before_rec = DYN_SpeedGetVector()
i_keep_hierarchy = faux
v_force_jump = Cv_NullVector

// DISPLAY DEBUG INFOS =======================================================
AI_Execute("raym_exec_DBG")


// SAY IT S A FIGHt FOR YOAN
if ( o_fight_actor)
	OBJ_CapaSet( Capa_Fight + Obj_Capa_Fight, none)
else
	OBJ_CapaSet( none, Capa_Fight + Obj_Capa_Fight)


// GESTION DES UNCOL ============================================
RM_Proc_Uncol_Check( )
o_jump_rebound = nobody

// SND COPTER
if ( i_jump_copter)
{
	if ( i_SND_Copter == -1)
		i_SND_Copter = SND_RequestPlayLoop( C_SND_Helico_loop)
}
else if ( i_SND_Copter != -1)
{
	SND_Stop(i_SND_Copter )
	i_SND_Copter  = -1
}


// CHEAT =========================================================
if ( i_DBG_HS || i_grappin_SFX_Target != -1)
{
	if ( i_grappin_SFX_Target == -1)
		Str_DisplayTextOnce("\\h0.15\\jxy\HOTSPOTS", cvector(0.5, 0.1,0.0))	
	if( PROC_RM_ModeLookON() && o_fight_actor)
	{
		tv_sens = HotSpot_PosGet( o_fight_actor) - OBJ_PosGet()
		MATH_VecSetNormalize( tv_sens  )
	}
	else if( PROC_RM_ModeLookON())
		tv_sens = @get_Kamera OBJ_SightGet()
	else
		tv_sens = v_joy_sight_normalized
	if ( i_grappin_SFX_Target != -1 )
		to_target = GRAPPIN_Check_HotSpot( tv_sens, vrai)
	else
		to_target = GRAPPIN_Check_HotSpot( tv_sens, faux)
	if ( !o_SFX_target)
		f_grappin_SFX_blend = 1.0
	else if ( to_target != o_SFX_target)
		f_grappin_SFX_blend = 0.0
	else
		f_grappin_SFX_blend = MATH_FloatMin( 1.0, f_grappin_SFX_blend + (TIME_GetDt() * 5.0))
	o_SFX_target = to_target 
}


if ( i_DBG_Target)
{
	Str_DisplayTextOnce("\\h0.15\\jxy\TARGETS", cvector(0.5, 0.1,0.0))	
	Proc_RM_BestTargetGet( Cf_RM_Fight_Dist_Target_Use, faux, tv_offset)
}



if ( f_display_life || Proc_RM_LifeGet() <= 10.0)
{
	if ( f_display_life < 0.2 && Proc_RM_LifeGet() > 10.0)
		f_display_life_size -= MATH_FloatMin(f_display_life_size, TIME_GetDt() * 0.2)
	else if ( f_display_life > (Cf_Display_Time - 0.2))
		f_display_life_size = MATH_FloatMin( f_display_life_size + ( TIME_GetDt() * 0.2) , 0.06)
	else
		f_display_life_size = 0.06

	if ( Proc_RM_LifeGet() > 10.0)
		tc_color = 0xcFFFFFFF
	else
		tc_color = 0xcF0000FF

	f_display_life -= MATH_FloatMin( f_display_life, TIME_GetDt())
	to_obj = ANI_CanalObjectGet(Anim_Canal_Tete)
	tv_pos = VIEW_3dWorldTo2d(0, @to_obj OBJ_PosGet()) + cvector(-0.03,-0.2,0)
	Proc_RM_DisplayFloat( "Life ", Proc_RM_LifeGet(), tv_pos, f_display_life_size, tc_color)
}
else
	f_display_life_size = 0.00


if ( f_display_mana || Proc_RM_ManaGet() <= 10.0)
{
	if ( f_display_mana < 0.2)
		f_display_mana_size -= MATH_FloatMin(f_display_mana_size, TIME_GetDt() * 0.2)
	else if ( f_display_mana > (Cf_Display_Time - 0.2))
		f_display_mana_size = MATH_FloatMin( f_display_mana_size + ( TIME_GetDt() * 0.2) , 0.06)
	else
		f_display_mana_size = 0.06
	f_display_mana -= MATH_FloatMin( f_display_mana, TIME_GetDt())
	to_obj = ANI_CanalObjectGet(Anim_Canal_Tete)
	tv_pos = VIEW_3dWorldTo2d(0, @to_obj OBJ_PosGet()) + cvector(-0.03,-0.15,0)
	Proc_RM_DisplayFloat( "Mana ", Proc_RM_ManaGet(), tv_pos, f_display_mana_size, 0xcF00FF00)
}
else
	f_display_mana_size = 0.00
	


// PT1 DE SOL DE BOOST
if ( f_speed_engine_hor <=  Cf_Speed_For_TGV )
{
	if ( i_SND_BoostL != -1)
	{
		SND_Stop(i_SND_BoostL)
		i_SND_BoostL_old = i_SND_BoostL 
		i_SND_BoostL = -1
		SND_Stop(i_SND_BoostR)
		i_SND_BoostR_old = i_SND_BoostR
		i_SND_BoostR = -1
	}
	if ( i_SND_BoostL_Fly != -1)
	{
		SND_Stop(i_SND_BoostL_Fly)
		i_SND_BoostL_Fly_old = i_SND_BoostL_Fly 
		i_SND_BoostL_Fly = -1
		SND_Stop(i_SND_BoostR_Fly)
		i_SND_BoostR_old = i_SND_BoostR_Fly
		i_SND_BoostR_Fly = -1
		SND_Stop(i_SND_Fly)
		i_SND_Fly = -1
	}		
}
else if ( i_ground_flag )
{
	if ( i_SND_BoostL == -1)
	{
		if ( i_SND_BoostL_old != -1 )
		{
			SND_Stop(i_SND_BoostL_old)
			i_SND_BoostL_old = -1
		}
		if ( i_SND_BoostR_old != -1 )
		{
			SND_Stop(i_SND_BoostR_old)
			i_SND_BoostR_old = -1
		}
		i_SND_BoostL = SND_RequestPlayLoop(C_SND_BoostL)
		i_SND_BoostR = SND_RequestPlayLoop(C_SND_BoostR)
	}
	if ( i_SND_BoostL_Fly != -1)
	{
		SND_Stop(i_SND_BoostL_Fly)
		i_SND_BoostL_Fly_old = i_SND_BoostL_Fly
		i_SND_BoostL_Fly = -1
		SND_Stop(i_SND_BoostR_Fly)
		i_SND_BoostR_Fly_old = i_SND_BoostR_Fly
		i_SND_BoostR_Fly = -1
		SND_Stop(i_SND_Fly)
		i_SND_Fly_old = i_SND_Fly 
		i_SND_Fly = -1
	}	
	tf_coef = f_speed_hor / Cf_Traction_Boost
	SND_InsertVarSet( i_SND_BoostL, 5, tf_coef)
	SND_InsertVarSet( i_SND_BoostR, 5, tf_coef)
}
else
{
	if ( i_SND_BoostL_Fly == -1)
	{
		if ( i_SND_BoostL_Fly_old != -1 )
		{
			SND_Stop(i_SND_BoostL_Fly_old)
			i_SND_BoostL_Fly_old = -1
		}
		if ( i_SND_BoostR_Fly_old != -1 )
		{
			SND_Stop(i_SND_BoostR_Fly_old)
			i_SND_BoostR_Fly_old = -1
		}
		if ( i_SND_BoostR_Fly != -1 )
		{
			SND_Stop(i_SND_BoostR_Fly)
			i_SND_BoostR_Fly = -1
		}
		i_SND_BoostL_Fly = SND_RequestPlayLoop(C_SND_BoostFlyL)
		i_SND_BoostR_Fly = SND_RequestPlayLoop(C_SND_BoostFlyR)
		i_SND_Fly = SND_RequestPlayLoop(C_SND_BoostFly)
	}
	
	if ( i_SND_BoostL != -1)
	{
		SND_Stop(i_SND_BoostL)
		i_SND_BoostL_old = i_SND_BoostL 
		i_SND_BoostL = -1
		SND_Stop(i_SND_BoostR)
		i_SND_BoostR_old = i_SND_BoostR
		i_SND_BoostR = -1
	}
	tf_coef = f_speed_hor / Cf_Traction_Fly_Boost
	SND_InsertVarSet( i_SND_BoostL_Fly, 5, tf_coef)
	SND_InsertVarSet( i_SND_BoostR_Fly, 5, tf_coef)
}

// GFX BOOST
Proc_RM_GFX_Boost()