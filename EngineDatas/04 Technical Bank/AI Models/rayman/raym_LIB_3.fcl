#include"r_defines.var"

procedure_local object Proc_RM_FightActorGet(object to_fight_actor)
{
	int				ti_rank
	message	tm_mes
	object 		to_return
	object		to_nmi
	messageid	EVT_ID
	float			tf_dot_best
	float			tf_dist
	float			tf_dot
	vector		tv_axis1
	vector		tv_axis2

	
	to_return = nobody
	MSG_SetNull(m_fight_actor_message)
	
	ti_rank = -1
	EVT_ID = MSG_GlobalScan( C_EVENT_TYPE_Enemy, &ti_rank)
	
	if (MSG_GlobalIsValid(EVT_ID))
	{
		// Recherche du Fight Actor demandé pour le garder en priorité
		if ( PROC_RM_ModeLookON() )
		{
			// Mode LOCK donc je regarde le perso qu'on lock avec la kam s'il y en a un.
			to_fight_actor = @get_camera o_lock
			if (to_fight_actor)
			{
				// Ne faire la recherche de l'ancien que s'il existe
				ti_rank = -1
				MSG_SetNull(tm_mes)
				tm_mes.msg_sender = to_fight_actor
				EVT_ID = MSG_GlobalSearchIntGao( C_EVENT_TYPE_Enemy, &ti_rank, tm_mes)
				if ( MSG_GlobalIsValid(EVT_ID) )
				{					m_fight_actor_message = MSG_GlobalGetMsg(EVT_ID)
					return to_fight_actor
				}
			}
		}

		if (to_fight_actor)
		{
			// Ne faire la recherche de l'ancien que s'il existe
			ti_rank = -1
			MSG_SetNull(tm_mes)
			tm_mes.msg_sender = to_fight_actor
			EVT_ID = MSG_GlobalSearchIntGao( C_EVENT_TYPE_Enemy, &ti_rank, tm_mes)
		}

		if ( (to_fight_actor && MSG_GlobalIsValid(EVT_ID)) && OBJ_SqrDist(to_fight_actor) < Cf_RM_Fight_DistKeep )
		{
			// C'est le meme. m_fight_actor_message identique
			to_return = to_fight_actor
			m_fight_actor_message = MSG_GlobalGetMsg(EVT_ID)
		}
		else
		{
			if ( PROC_RM_ModeLookON() )			// Cas Lock rien...Je ne cherche pas une nouvelle Target.
				return nobody

			if (glob_joynorm_get)
				tv_axis1 = glob_joyvector_get_normalized
			else
				tv_axis1 = v_look_axis

			// Je choisis le plus proche dans la liste de tous les ennemi (s'il est pas au dela d'une distance max)
			ti_rank = -1
			tf_dot_best = -1
			EVT_ID = MSG_GlobalScan( C_EVENT_TYPE_Enemy, &ti_rank)
			while (MSG_GlobalIsValid(EVT_ID))
			{
				to_nmi = EVENT_PereGet(EVT_ID)
				tv_axis2 = @to_nmi OBJ_PosGet() - OBJ_PosGet()
				tf_dist = MATH_VecNorm(tv_axis2)
				tv_axis2 /= tf_dist
				tf_dot = MATH_VecDotProduct(tv_axis1, tv_axis2)

				if (tf_dist < Cf_RM_Fight_Dist_Max && (tf_dot > Cf_RM_Fight_DotAngleMax && tf_dot > tf_dot_best ) )
				{
					// Brand new Nmi
					tf_dot_best = tf_dot

					to_return = to_nmi
					m_fight_actor_message = MSG_GlobalGetMsg(EVT_ID)
				}
				EVT_ID = MSG_GlobalScan( C_EVENT_TYPE_Enemy, &ti_rank)
			}
			
			if (!to_return)
			{	
				if (to_fight_actor)
				{
					// Ne faire la recherche de l'ancien que s'il existe
					ti_rank = -1
					MSG_SetNull(tm_mes)
					tm_mes.msg_sender = to_fight_actor
					EVT_ID = MSG_GlobalSearchIntGao( C_EVENT_TYPE_Enemy, &ti_rank, tm_mes)

					if (MSG_GlobalIsValid(EVT_ID) && OBJ_SqrDist(to_fight_actor) < Cf_RM_Fight_DistKeepNoOneElse )
					{
						// C'est le meme. m_fight_actor_message identique
						to_return = to_fight_actor
						m_fight_actor_message = MSG_GlobalGetMsg(EVT_ID)
					}
				}
			}
		}
	}
	return to_return
} 


procedure_local void Proc_RM_CustomisationSet()
{
	// On garde ces elements meme si on est en SLIP
	ANI_ShapeSelect(Anim_Canal_Tete, @"univ" i_shape_tete+1)
	ANI_ShapeSelect(Anim_Canal_EpauleGauche, @"univ" i_shape_tete+1)
	ANI_ShapeSelect(Anim_Canal_EpauleDroite, @"univ" i_shape_lunette+1)

	if ( @"univ" ai_disguise[@"univ" i_shape_tete] & RM_POWER_DISGUISE_SLIP)
	{
		// Slip
		ANI_ShapeSelect(Anim_Canal_PiedDroit, RM_Disguise_Slip+1)
		ANI_ShapeSelect(Anim_Canal_PiedGauche, RM_Disguise_Slip+1)
		ANI_ShapeSelect(Anim_Canal_Bassin, RM_Disguise_Slip+1)
		ANI_ShapeSelect(Anim_Canal_MainDroite, RM_Disguise_Slip+1)
		ANI_ShapeSelect(Anim_Canal_MainGauche, RM_Disguise_Slip+1)
		ANI_ShapeSelect(Anim_Canal_Torse, RM_Disguise_Slip+1)
	}
	else
	{
		// Normal
		ANI_ShapeSelect(Anim_Canal_PiedDroit, @"univ" i_shape_pied+1)
		ANI_ShapeSelect(Anim_Canal_PiedGauche, @"univ" i_shape_pied+1)
		ANI_ShapeSelect(Anim_Canal_Bassin, @"univ" i_shape_corps+1)
		ANI_ShapeSelect(Anim_Canal_MainDroite, @"univ" i_shape_corps+1)
		ANI_ShapeSelect(Anim_Canal_MainGauche, @"univ" i_shape_corps+1)
		ANI_ShapeSelect(Anim_Canal_Torse, @"univ" i_shape_corps+1)
	}
}

procedure_ultra void Proc_RM_CustomizeTonRM()
{
	color		tc_color
	float		tf_dist
	vector	tv_pos, tv_cam_pos
	int			ti_anim, ti_i
	int			ti_most_do_now
	int			ti_disguise, ti_shape
	object	to_gao 
	
	ti_most_do_now = faux

	tv_pos = OBJ_PosGet()
	tv_cam_pos = @get_Kamera OBJ_PosGet()
	tf_dist = 0.075

	tc_color = COLOR_SetRGBA(MATH_RandInt(160,255), MATH_RandInt(160,255), MATH_RandInt(0,64),0)

	ti_anim = ACT_ActionGet()

	if ( i_flag_just_O && MOVE_MODE() != C_Move_Danse)
	{
		if ( (ti_anim == RM_Act_SeChange && ANI_CurrentFrameGet(0) > i_RM_SeChange_Frame) || ( ti_anim != RM_Act_SeChange && ti_anim != RM_Act_SeChangeQuick))
		{
			if ( ! MOVE_MODE())
			{
				if( f_speed_hor <= 5.0 )
					ACT_ActionSet( RM_Act_SeChange + Ci_ActionSet_Force_FrameZero + Ci_ActionSet_Force_SameAction)
				else
					ACT_ActionSet( RM_Act_SeChangeQuick + Ci_ActionSet_Force_FrameZero + Ci_ActionSet_Force_SameAction)
			}
			else
				ti_most_do_now = vrai
		}
		i_RM_SeChange_Must_Do = vrai
	}

	if ( (i_RM_SeChange_Must_Do && ANI_CurrentFrameGet(0) > i_RM_SeChange_Frame) || ti_most_do_now )
	{
		i_RM_SeChange_Must_Do  = faux
		
		// Recherche du prochain disponible
		@"univ" i_shape_tete = MATH_Modulo(@"univ" i_shape_tete+1, RM_Disguise_Max)

		ti_i = 0
		ti_shape = @"univ" i_shape_tete
		while( !RM_Disguise_Get( ti_shape ) && ti_i < RM_Disguise_Max)
		{
			@"univ" i_shape_tete = MATH_Modulo(@"univ" i_shape_tete + 1, RM_Disguise_Max)
			ti_shape = @"univ" i_shape_tete 
			ti_i++
		}

		@"univ" i_shape_current = @"univ" i_shape_tete
		@"univ" i_shape_pied = @"univ" i_shape_tete
		@"univ" i_shape_corps = @"univ" i_shape_tete
		@"univ" i_shape_lunette = @"univ" i_shape_tete

		PROC_SFX_CHANGE_SHAPE(tv_pos + MATH_VecLocalToGlobal(cvector(0.0, 0.2,1.35)) + ((tv_cam_pos - tv_pos) * tf_dist), 3.0, tc_color)
		PROC_SFX_CHANGE_SHAPE(tv_pos + cvector(0.0, 0.0, 0.15) + ((tv_cam_pos - tv_pos) * tf_dist), 3.0, tc_color)
		PROC_SFX_CHANGE_SHAPE(tv_pos + cvector(0.0, 0.0, 0.65) + ((tv_cam_pos - tv_pos) * tf_dist), 3.5, tc_color)
		PROC_SFX_CHANGE_SHAPE(tv_pos + MATH_VecLocalToGlobal(cvector(0.0, -0.05,1.15)) + ((tv_cam_pos - tv_pos) * tf_dist), 2.0, tc_color)

		Proc_RM_CustomisationSet()
	}

	if ( @"univ" i_RM_powerUP & RM_POWER_CUSTOMISATION)
	{
		if (IO_ButtonJustPressed(joy_button_Up))
		{
	
			// Recherche du prochain disponible
			@"univ" i_shape_tete = MATH_Modulo(@"univ" i_shape_tete+1, RM_Disguise_Max)
			ti_i = 0
			ti_shape = @"univ" i_shape_tete
			while ( ! RM_Disguise_ItemGet( ti_shape, RM_POWER_DISGUISE_HAIR) && ti_i < RM_Disguise_Max)
			{
				@"univ" i_shape_tete = MATH_Modulo(@"univ" i_shape_tete + 1, RM_Disguise_Max)
				ti_shape = @"univ" i_shape_tete 
				ti_i++			
			}
			if ( ti_i == RM_Disguise_Max)
			{
				@"univ" i_shape_tete = RM_Disguise_Slip
			}
	
			ANI_ShapeSelect(Anim_Canal_Tete, @"univ" i_shape_tete+1)
			ANI_ShapeSelect(Anim_Canal_EpauleGauche, @"univ" i_shape_tete+1)
			PROC_SFX_CHANGE_SHAPE(tv_pos + MATH_VecLocalToGlobal(cvector(0.0, 0.2,1.35)) + ((tv_cam_pos - tv_pos) * tf_dist), 3.0, tc_color)
		}
		else if (IO_ButtonJustPressed(joy_button_Down))
		{
			// Recherche du prochain disponible
			@"univ" i_shape_pied = MATH_Modulo(@"univ" i_shape_pied+1, RM_Disguise_Max)
			ti_i = 0
			ti_shape = @"univ" i_shape_pied
			while ( ! RM_Disguise_ItemGet( ti_shape, RM_POWER_DISGUISE_SHOES) && ti_i < RM_Disguise_Max)
			{
				@"univ" i_shape_pied = MATH_Modulo(@"univ" i_shape_pied + 1, RM_Disguise_Max)
				ti_shape = @"univ" i_shape_pied 
				ti_i++			
			}
			if ( ti_i == RM_Disguise_Max)
			{
				@"univ" i_shape_pied = RM_Disguise_Slip
			}
			ANI_ShapeSelect(Anim_Canal_PiedDroit,@"univ" i_shape_pied+1)
			ANI_ShapeSelect(Anim_Canal_PiedGauche,@"univ" i_shape_pied+1)
			PROC_SFX_CHANGE_SHAPE(tv_pos + cvector(0.0, 0.0, 0.15) + ((tv_cam_pos - tv_pos) * tf_dist), 3.0, tc_color)
		}
		else if (IO_ButtonJustPressed(joy_button_Left))
		{
			// Recherche du prochain disponible
			@"univ" i_shape_corps = MATH_Modulo(@"univ" i_shape_corps+1, RM_Disguise_Max)
			ti_i = 0
			ti_shape = @"univ" i_shape_corps
			while ( ! RM_Disguise_ItemGet( ti_shape, RM_POWER_DISGUISE_VEST) && ti_i < RM_Disguise_Max)
			{
				@"univ" i_shape_corps = MATH_Modulo(@"univ" i_shape_corps + 1, RM_Disguise_Max)
				ti_shape = @"univ" i_shape_corps 
				ti_i++			
			}
			if ( ti_i == RM_Disguise_Max)
			{
				@"univ" i_shape_corps = RM_Disguise_Slip
			}
			ANI_ShapeSelect(Anim_Canal_Bassin,@"univ" i_shape_corps+1)
			ANI_ShapeSelect(Anim_Canal_MainDroite,@"univ" i_shape_corps+1)
			ANI_ShapeSelect(Anim_Canal_MainGauche,@"univ" i_shape_corps+1)
			ANI_ShapeSelect(Anim_Canal_Torse, @"univ" i_shape_corps+1)
			PROC_SFX_CHANGE_SHAPE(tv_pos + cvector(0.0, 0.0, 0.65) + ((tv_cam_pos - tv_pos) * tf_dist), 3.5, tc_color)
		}
		else if (IO_ButtonJustPressed(joy_button_Right))
		{
			// Recherche du prochain disponible
			@"univ" i_shape_lunette= MATH_Modulo(@"univ" i_shape_lunette+1, RM_Disguise_Max)
			to_gao = ANI_ShapeObjectGet(Anim_Canal_EpauleDroite, @"univ" i_shape_lunette+1)
			while ( @to_gao OBJ_FlagsTypeGet() & C_friend )
			{
				@"univ" i_shape_lunette= MATH_Modulo(@"univ" i_shape_lunette+1, RM_Disguise_Max)
				to_gao = ANI_ShapeObjectGet(Anim_Canal_EpauleDroite, @"univ" i_shape_lunette+1)
			}
	
			ti_i = 0
			ti_shape = @"univ" i_shape_lunette
			while ( ( (@to_gao OBJ_FlagsTypeGet() & C_friend) || ! RM_Disguise_ItemGet( ti_shape, RM_POWER_DISGUISE_GLASSES)) && ti_i < RM_Disguise_Max)
			{
				@"univ" i_shape_lunette= MATH_Modulo(@"univ" i_shape_lunette+1, RM_Disguise_Max)
				to_gao = ANI_ShapeObjectGet(Anim_Canal_EpauleDroite, @"univ" i_shape_lunette+1)
				ti_shape = @"univ" i_shape_lunette 
				ti_i++			
			}
			if ( ti_i == RM_Disguise_Max)
			{
				@"univ" i_shape_lunette = RM_Disguise_Slip
			}
			ANI_ShapeSelect(Anim_Canal_EpauleDroite, @"univ" i_shape_lunette+1)
			to_gao = ANI_ShapeObjectGet(Anim_Canal_EpauleDroite, @"univ" i_shape_lunette+1)
			if (@to_gao OBJ_FlagsTypeGet() & C_friend)
				DBG_BreakPoint()
	
			PROC_SFX_CHANGE_SHAPE(tv_pos + MATH_VecLocalToGlobal(cvector(0.0, -0.05,1.15)) + ((tv_cam_pos - tv_pos) * tf_dist), 2.0, tc_color)
		}
	}
}

procedure_ultra int Proc_RM_FullDeguisementGet()
{
	if (@"univ" i_shape_pied != @"univ" i_shape_tete)
		return -1
	if (@"univ" i_shape_corps != @"univ" i_shape_tete)
		return -1
	if (@"univ" i_shape_lunette != @"univ" i_shape_tete)
		return -1
	return @"univ" i_shape_tete
}

procedure_local void Proc_RM_DANSE_VALID()
{
	float	tf_beat
	int		ti_indice			
	int		ti_txt
	int		ti_good

	#define Cf_Dance_Tempo_After			0.25
	#define Cf_Dance_Tempo_Before		0.25
	
	tf_beat = 60.0 / @get_global Proc_Global_SND_BeatTempoGet() 
	if ( SND_SignalIsActive("bbbb") || SND_SignalIsActive("aaaa") || SND_SignalIsActive("beat") || SND_SignalIsActive("beaa"))
	{
		if ( SND_SignalIsActive("bbbb") )
		{
//			STR_CreateText("\h0.13\TCHACK", cvector( 0.4, 0.1, 0.0), 0.1)
			f_danse_time_old = f_danse_time
		}
		else if ( SND_SignalIsActive("beaa"))
		{
//			STR_CreateText("\h0.13\BOOMB", cvector( 0.4, 0.1, 0.0), 0.1)
			f_danse_time_old = f_danse_time
		}
		else if ( SND_SignalIsActive("aaaa"))
//			STR_CreateText("\h0.13\BOOMB", cvector( 0.4, 0.1, 0.0), 0.1)
//		else
//			STR_CreateText("\h0.13\BEAT", cvector( 0.4, 0.1, 0.0), 0.1)

//		DBG_TraceFloat( f_danse_time)
//		DBG_TraceEOL()
		i_danse_synchro = vrai
		i_danse_reussi = 0
	}
	else 
		i_danse_synchro = faux

	if ( MATH_FloatNullEpsilon( f_joy_norm))
		i_danse_choose_joy = vrai
	
	if ( i_danse_choose_joy && MATH_FloatNullToler( f_joy_norm - 1.0, 0.2))
	{
		if ( MATH_VecNullEpsilon( v_danse_valid_joy ))
		{
			f_danse_buffer_time = f_danse_time
			v_danse_valid_joy = v_joy_sight_normalized
		}
	}
//	else if ( i_danse_beat != 1)
//		v_danse_valid_joy = Cv_NullVector
		
	if ( ! MATH_VecNullEpsilon(v_danse_valid_joy) || BUFFER_Buffered( C_Button_All) )
	{
		i_danse_beat = 0
		i_danse_choose_joy = faux
		if ( (f_danse_time - f_danse_time_old) < ( tf_beat * 0.5)) // Cf_Dance_Tempo_After)
		{
			//Tempo juste apres mais valide
			i_danse_reussi = 1
//			STR_CreateText("\cFF00FF00\\h0.12\GOOD",cvector( 0.4, 0.30, 0.0), 0.15)
//			DBG_TraceString( " BEAT")
//			DBG_TraceEOL()
			i_danse_beat = 2
		}
		else if ( (f_danse_time  - f_danse_buffer_time) >= ( tf_beat * 0.5)) //Cf_Dance_Tempo_Before)
		{
			// Pas eu de beat pendant le timer d acceptation cancel du buffer
			i_danse_reussi = -1
//			STR_CreateText("\cFF0000FF\\h0.12\BAD",cvector( 0.4, 0.30, 0.0), 0.15)				
//			DBG_TraceString( " MISS")
//			DBG_TraceEOL()
			i_danse_beat = 0
			v_danse_valid_joy = Cv_NullVector
			BUFFER_DEL_ALL()
		}
		else if ( (f_danse_time  - f_danse_buffer_time) < ( tf_beat * 0.5)) //Cf_Dance_Tempo_Before)
		{
			i_danse_beat = 1
			i_danse_reussi = 1
//			v_danse_valid_joy = v_joy_sight_normalized
			return	// Pas encore faux, on peux anticiper
		}
	
	}
	else if ( !i_danse_reussi && (f_danse_time - f_danse_time_old) >= (tf_beat * 0.5)) //Cf_Dance_Tempo_After)
	{
		// Pas d action dans le tempo : echec
		i_danse_reussi = -1
	}
	
	if ( i_danse_beat == 2 
	|| ( i_danse_beat == 1 && i_danse_synchro))
	{
		// reussi pour jouer l anim mais est ce réellement bien synchro
		ti_good = faux
		if ( i_danse_beat == 2 )
		{
			if ( (f_danse_time - f_danse_time_old) < 0.10)
				ti_good = vrai
		}
		else
		{
			if ( (f_danse_time  - f_danse_buffer_time) < 0.10)
				ti_good = vrai
		}
		
		if ( ti_good)
		{
			@get_Music_Manager  f_groovy_juice += @get_Music_Manager  f_groovy_step[@"univ" i_shape_current]
			STR_CreateText("\cFF00FF00\\h0.12\GOOD",cvector( 0.4, 0.30, 0.0), 0.15)
		}
		else
		{
			@get_Music_Manager  f_groovy_juice -= @get_Music_Manager  f_groovy_step[@"univ" i_shape_current] * 2.0
			STR_CreateText("\cFF0000FF\\h0.12\BAD",cvector( 0.4, 0.30, 0.0), 0.15)				
		}

//		@get_Music_Manager  f_groovy_juice += @get_Music_Manager  f_groovy_step[@"univ" i_shape_current]
		i_danse_reussi = 2		// Groovy mis a jour
	}
	else if ( i_danse_reussi == -1) //i_danse_synchro)
	{
		@get_Music_Manager  f_groovy_juice -= @get_Music_Manager  f_groovy_step[@"univ" i_shape_current] * 0.5
		i_danse_reussi = 2		// Groovy mis a jour
	}

	ti_txt = STR_CreateText("\h0.06\JUICE: ",cvector( 0.4, 0.05, 0.0), 0.15)				
	STR_AppendFloat( ti_txt, @get_Music_Manager  f_groovy_juice, 2)
	
	
}