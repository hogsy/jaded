#include"r_defines.var"

procedure_local void Proc_RM_CustomisationSet();

procedure_ultra  vector	PROC_RM_GroundNormalGet()
{
	return v_ground_normale
}

procedure_ultra object PROC_RM_MontureGet()
{
	return o_ride_actor
}

procedure_ultra int PROC_RM_MontureIDGet()
{
	return i_ride_actor_ID
}

procedure_ultra vector PROC_RM_ApplyTension( vector	pv_tension)
{
	if ( ! i_grappin_accroche)
		return Cv_NullVector
	switch ( MOVE_MODE())
	{
		case C_Move_Varap :
			v_force_GRAPPIN = Cv_NullVector
			break
		default:
			v_force_GRAPPIN = pv_tension
	}
	DYN_TractionSet( DYN_TractionVectorGet() + v_force_GRAPPIN)
	return v_force_GRAPPIN
}
procedure_ultra int PROC_RM_Mode()
{
//	ETAT_RM_cheat
//	ETAT_RM_main
//	ETAT_RM_paf
	return i_etat_courant 
}

procedure_ultra int PROC_RM_Danse()
{
	if( MOVE_MODE() ==  C_Move_Danse )
		return vrai
	else
		return faux
}

procedure_ultra int PROC_RM_ModeLookORIENT()
{
	switch ( MOVE_MODE() )
	{
		case C_Move_Varap :
			return faux
			break
		default:
			return vrai
	}
}
procedure_ultra int PROC_RM_ModeLookON()
{
	if ( i_etat_courant ==ETAT_RM_cheat )
		return faux
	else
		return i_flag_look
}

procedure_ultra object PROC_RM_Current_HotSpot_Get()
{
	return o_grappin_hotspot
}

procedure_ultra int  PROC_RM_Type_HotspotGet()
{
	if ( o_grappin_hotspot && ! @o_grappin_hotspot OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_AI) && ! i_ground_flag)
		return C_HS_Type_Crochet
	else
		return 0
}

procedure_ultra int	PROC_RM_NAGE()
{
	if( MOVE_MODE() == C_Move_Swim || ACT_ActionGet() == RM_Act_SwimImpul)
		return vrai
	else
		return faux
}

procedure_ultra int	PROC_RM_Dodge()
{
	if( MOVE_MODE() == C_Move_Esquive ||  MOVE_MODE() == C_Move_ReceptionRoulade )
		return vrai
	else
		return faux
}

procedure_ultra int PROC_RM_ITEM_Get()
{
	if ( ! o_grab_object )
		return 0
	else
		return @o_grab_object PROC_WEAPON_TypeGet()
}

procedure_ultra object PROC_RM_ITEM_Has_Key()
{
	return o_grab_cle 
}

// 0 : rien 
// 1 : big paf en cours
// 2 : mort
// 3 : délai après un big paf
procedure_ultra int PROC_RM_Paf_Mode_Get()
{
	if( i_etat_courant == ETAT_RM_mort )
		return 2
	else if( i_etat_courant == ETAT_RM_paf && (i_paf_type & C_PAF_RM_Fort) )
		return 1
	else if( ! TIME_Elapsed( f_paf_time_last_big, 2.0) )
		return 3
	else
		return 0
}

procedure_ultra int PROC_RM_Can_I_Ride( object po_rider)
{
	if ( po_rider == o_ride_last_actor && ! MATH_FloatNullEpsilon( f_joy_norm))
		return faux
	else
		return vrai
}

procedure_ultra int PROC_RM_CHEAT_Mode()
{
	return i_cheat_mode
}

procedure_ultra void PROC_RM_Grappin_Destroy()
{
	GRAPPIN_Destroy()
}

procedure_ultra int PROC_RM_Just_JUMP_FromGround()
{
	return i_flag_just_jump_from_ground
}


procedure_ultra int Proc_RM_Attack_DIVE()
{
	if ( ACT_ActionGet() == RM_Act_Jump_DIVE)
		return vrai
	else
		return faux
}

procedure_ultra int PROC_RM_FreeFall()
{
	if ( ACT_ActionGet() == RM_Act_Jump_FreeFall)
		return vrai
	else
		return faux
}

procedure_ultra void PROC_RM_KeepHierarchy()
{
	i_keep_hierarchy = vrai
}

procedure_ultra void PROC_RM_SetDisguise( int pi_shape)
{
	@"univ" i_shape_tete = pi_shape
	@"univ" i_shape_pied = @"univ" i_shape_tete
	@"univ" i_shape_corps = @"univ" i_shape_tete
	@"univ" i_shape_lunette = @"univ" i_shape_tete
	Proc_RM_CustomisationSet()
	@"univ" i_shape_tete = @"univ" i_shape_current
	@"univ" i_shape_pied = @"univ" i_shape_tete
	@"univ" i_shape_corps = @"univ" i_shape_tete
	@"univ" i_shape_lunette = @"univ" i_shape_tete 
}

procedure_ultra void	Proc_RM_DisguiseReinit()
{
	i_disguise_cut = 0
	@"univ" i_shape_tete = @"univ" i_shape_current
	@"univ" i_shape_pied = @"univ" i_shape_tete
	@"univ" i_shape_corps = @"univ" i_shape_tete
	@"univ" i_shape_lunette = @"univ" i_shape_tete
	Proc_RM_CustomisationSet()
}

procedure_ultra void PROC_RM_Teleported()
{
	vector	tv_speed
	v_speed_hor = Cv_NullVector
	f_speed_norm = 0.0
	v_speed_hor_old = OBJ_PosGet()
	v_speed_hor.z = 0.0
	v_speed_pos = OBJ_PosGet()
	f_speed_hor  = 0.0
	v_speed_engine = Cv_NullVector
	f_speed_engine_hor = 0.0
}

procedure_ultra int Proc_RM_Cancel_Danse()
{
	return i_danse_cancel
}

procedure_ultra int Proc_RM_Start_Danse()
{
	if ( IO_ButtonPressed( joy_button_R2) && IO_ButtonPressed( joy_button_R))
		if ( IO_ButtonJustPressed( joy_button_StickR))
			return vrai
	return faux
}

procedure_ultra int Proc_RM_Jump( vector	pv_power)
{
	i_flag_just_jump_forced = vrai
	v_force_jump = pv_power
	return vrai
}