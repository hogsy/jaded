#include"r_defines.var"

int			ti_decal
int			ti_action
int			ti_freq
float		tf_X, tf_Y
float		tf_time_restant
vector	tv_sight

// SORTIE ETAT 	===================================================================
if( i_sort_etat )
{
	i_sort_etat = faux
	@get_global i_danse_pos --
	@get_global i_danse_nb_pas --
	return
}

// INIT ETAT 	=====================================================================
if( i_etat_courant != ETAT_RM_danse )
{
	i_etat_courant = ETAT_RM_danse
	if( fct_last_etat )
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()

	MOVE_CHANGE_To_Danse()
	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}
//
// DETECTIONS 	===================================================================

if ( ! @get_Music_Manager Proc_SND_Juice())
{
	MOVE_CHANGE_To_Default()
	AI_TrackCurChangeNow("raym_ETAT_main")
}

if( o_paf_detect_actor )
{
	i_danse_cancel = vrai
	MOVE_CHANGE_To_Default()
	AI_TrackCurChangeNow("raym_ETAT_paf")
}
	

// COMPORTEMENT 	==================================================================

BUFFER_All()

// Choix de l anim de danse	
OBJ_CapaSet( Capa_Buffer_C + Capa_Buffer_O + Capa_Buffer_T + Capa_Buffer_X, none)
		

Proc_RM_DANSE_VALID()

		
if (  IO_ButtonPressed(joy_button_R))
	ti_decal = RM_Act_Danse_05
else
	ti_decal = 0
ti_action = ACT_ActionGet()

if ( i_danse_beat == 2 										// Validé juste apres le beat
|| ( i_danse_beat == 1 && i_danse_synchro))		// Validé juste avant le beat, attendre le vrai beat
{
	// BIEN JOUE
	if ( ti_action == RM_Act_Danse_AttTR  || ti_action == (RM_Act_Danse_AttTR  + RM_Act_Danse_05))
	{
		@get_global i_danse_pos --
		@get_global i_danse_nb_pas --
	}
	
//			DBG_TraceInt( ANI_CurrentFrameGet(0))	
//			DBG_TraceString(" / ")
//			DBG_TraceInt( ANI_NbFrameGet(0))
//			DBG_TraceEOL()
	
	if ( ti_action < (RM_Act_Danse_Att + RM_Act_Danse_05))
	{
		if( ti_action != RM_Act_Danse_Att && ti_action != RM_Act_Danse_AttTR && MATH_AbsInt( ANI_CurrentFrameGet(0) - 15 ) <= 8)
			ti_decal = RM_Act_Danse_05
	}
	else
		ti_decal = RM_Act_Danse_05
		
	if ( MATH_VecNullEpsilon( v_danse_valid_joy)  )
	{
		// Anims a l ARRET
		if ( BUFFER_Buffered(C_Button_C))
			ACT_ActionSet( ti_decal + RM_Act_Danse_QuartD + Ci_ActionSet_Force_SameAction + Ci_ActionSet_Force_FrameZero)
		else if (BUFFER_Buffered(C_Button_O))
			ACT_ActionSet( ti_decal + RM_Act_Danse_QuartG + Ci_ActionSet_Force_SameAction + Ci_ActionSet_Force_FrameZero)
//				else if (BUFFER_Buffered(C_Button_T))
//					ACT_ActionSet( RM_Act_Danse_Echauff3)
		else if (BUFFER_Buffered(C_Button_X))
			ACT_ActionSet( ti_decal + RM_Act_Danse_Demi + Ci_ActionSet_Force_SameAction + Ci_ActionSet_Force_FrameZero)
		else
			ACT_ActionSet( ti_decal + RM_Act_Danse_Att)
	}
	else
	{
		// Anims en Deplacement
		tf_X = MATH_VecDotProduct( OBJ_SightGet(), v_danse_valid_joy)
		if ( tf_X > Cf_Cos45)
			ACT_ActionSet( ti_decal + RM_Act_Danse_Move_Av + Ci_ActionSet_Force_SameAction + Ci_ActionSet_Force_FrameZero)
		else if ( tf_X < -Cf_Cos45)
			ACT_ActionSet( ti_decal + RM_Act_Danse_Move_Arr + Ci_ActionSet_Force_SameAction + Ci_ActionSet_Force_FrameZero)
		else 
		{
			tf_Y = MATH_VecDotProduct( OBJ_HorizonGet(), v_danse_valid_joy)
			if ( tf_Y > Cf_Cos45)
				ACT_ActionSet( ti_decal + RM_Act_Danse_Move_G + Ci_ActionSet_Force_SameAction + Ci_ActionSet_Force_FrameZero)
			else
				ACT_ActionSet( ti_decal + RM_Act_Danse_Move_D + Ci_ActionSet_Force_SameAction + Ci_ActionSet_Force_FrameZero)
		}
	}


	// Temps restant jusqu au prochain beat
//			if ( ti_decal )
//				tf_time_restant = 60.0 / @get_global Proc_Global_SND_BeatTempoGet()
//			else
//				tf_time_restant = 120.0 / @get_global Proc_Global_SND_BeatTempoGet()
//			tf_time_restant -= f_danse_time - f_danse_time_old
	tf_time_restant = 60.0 / @get_global Proc_Global_SND_BeatTempoGet()
	if ( (f_danse_time - f_danse_time_old) < ( tf_time_restant * 0.5))
	{
		// proche de 0 on viens de rater le beat il faut jouer plus vite( 1tempo - delta)
		if ( ti_decal )
			tf_time_restant = tf_time_restant - (f_danse_time - f_danse_time_old)
		else
			tf_time_restant = ( 2.0 * tf_time_restant) - (f_danse_time - f_danse_time_old)
	}

	ti_freq = ACT_FrequencyGet(ACT_ActionGet(), ACT_ActionItemGet()) * ( ACT_DurationGet( ACT_ActionGet(), 0) / tf_time_restant)
	ti_freq = MATH_FloatLimit( ti_freq, 20.0, 50.0)
	ANI_FrequencySet(0, ti_freq)
//			DBG_TraceString(" freq: ")
//			DBG_TraceInt( ti_freq )
//			DBG_TraceEOL()
	i_danse_beat = 0			

	Proc_RM_Danse_Action_Set( ACT_ActionGet(), ti_freq)			
	BUFFER_DEL_ALL()		
	v_danse_valid_joy = Cv_NullVector	
}
else if ( ACT_ActionFinished() || ti_action < 200 || ti_action  > 250 )
{
	// ECHEC
	if ( ACT_ActionGet() == (RM_Act_Danse_AttTR + RM_Act_Danse_05))
		ti_decal = 0		// On a joué 1beat d attente 0.5 passer en 1.0
	else if ( ACT_ActionGet() >= (RM_Act_Danse_Att + RM_Act_Danse_05))
		ti_decal = RM_Act_Danse_05	// On danse en 0.5 jouer l att 0.5
	
	if ( ACT_ActionGet() == RM_Act_Danse_AttTR || ACT_ActionGet() == RM_Act_Danse_Att
	|| ACT_ActionGet() == ( RM_Act_Danse_AttTR + RM_Act_Danse_05) || ACT_ActionGet() == ( RM_Act_Danse_Att + RM_Act_Danse_05))
	{
		ACT_ActionSet( ti_decal + RM_Act_Danse_Att + Ci_ActionSet_Force_SameAction + Ci_ActionSet_Force_FrameZero)
	}
	else
		ACT_ActionSet( ti_decal + RM_Act_Danse_AttTR)

	// Temps restant jusqu au prochain beat
	tf_time_restant = 60.0 / @get_global Proc_Global_SND_BeatTempoGet()
	if ( (f_danse_time - f_danse_time_old) < ( tf_time_restant * 0.5))
	{
		// proche de 0 on viens de rater le beat il faut jouer plus vite( 1tempo - delta)
		if ( ti_decal )
			tf_time_restant = tf_time_restant - (f_danse_time - f_danse_time_old)
		else
			tf_time_restant = ( 2.0 * tf_time_restant) - (f_danse_time - f_danse_time_old)
	}
	else
	{
		// Proche du beat, on va jouer l anim plus lentement pour syncrhoniser sur le tempo suivant( 1tempo + delta)
		if ( ti_decal )
			tf_time_restant = (f_danse_time - f_danse_time_old)
		else
			tf_time_restant = tf_time_restant + (f_danse_time - f_danse_time_old)
	}

	tf_time_restant = ACT_DurationGet( ACT_ActionGet(), 0) / tf_time_restant
	ti_freq = ACT_FrequencyGet(ACT_ActionGet(), ACT_ActionItemGet()) * tf_time_restant

//			ti_freq = ACT_FrequencyGet(ACT_ActionGet(), ACT_ActionItemGet()) * 120.0 / @get_global Proc_Global_SND_BeatTempoGet()
//			DBG_TraceString(" freq: ")
//			DBG_TraceInt( ti_freq )
//			DBG_TraceEOL()
	ti_freq = MATH_FloatLimit( ti_freq, 20.0, 50.0)
	ANI_FrequencySet(0, ti_freq)
	Proc_RM_Danse_Action_Set( ACT_ActionGet(), ti_freq)
}

if ( i_danse_synchro)		
	i_danse_beat = 0

f_danse_time += TIME_GetDt()


if ( f_danse_time < 0.5)
{
	tv_sight = OBJ_SightGet()
	if ( MATH_AbsFloat( tv_sight.x) > MATH_AbsFloat( tv_sight.y))
	{
		tv_sight.x = 1.0 * MATH_FloatSign(tv_sight.x)
		tv_sight.y = 0.0
		tv_sight.z = 0.0
	}
	else
	{
		tv_sight.x = 0.0
		tv_sight.y = 1.0 * MATH_FloatSign(tv_sight.y)
		tv_sight.z = 0.0
	}
	OBJ_BankingGeneralSet( MATH_VecBlendRotate( OBJ_SightGet(), tv_sight,  7.0 * TIME_GetDt()), Cv_VerticalVector)
}
