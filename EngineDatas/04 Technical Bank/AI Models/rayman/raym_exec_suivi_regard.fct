float		tf_dt
float		tf_coef_1
float		tf_coef_2
float		tf_coef_3
float		tf_coef_4
float		tf_dot_product
float		tf_sign
float		tf_sightZ 

vector	tv_temp
vector	tv_bras_vertical_G
vector	tv_bras_vertical_D
vector	tv_start_sight
vector	tv_dest_sight
vector	tv_bone_to_cam_pos

object	to_bone
object	to_head
object	to_cou

object             to_tete
vector             tv_pos
float				tf_speed
object			to_main
object			to_canal
vector			tv_sight
vector			tv_cross_product

float				tf_composante_Z

int					ti_ik_tete_actif

tf_dt = TIME_GetDt()

to_head = ANI_CanalObjectGet(Anim_Canal_Tete)
to_cou = ANI_CanalObjectGet(Anim_Canal_Cou)

ti_ik_tete_actif = vrai

if ( ! ( ACT_CustomBitGet() & Ani_CB_EnableRotation))
{
	tv_pos = @to_head OBJ_PosGet() + @to_head OBJ_SightGet()		// Regarde dans l'axe de l'anim (IK Off)
	ti_ik_tete_actif = faux
}
else if (o_fight_actor)
{
	to_tete = @o_fight_actor ANI_CanalObjectGet(Anim_Canal_Tete)
	if (to_tete)
		tv_pos = @to_tete OBJ_PosGet()
	else
		tv_pos = @o_fight_actor OBJ_PosGet() + cvector(0,0,1.5)
}
else if (glob_joynorm_get)
{
	tv_pos = glob_joyvector_get_normalized
	tf_sightZ = @to_head OBJ_SightGet().z
	tv_pos *= MATH_FloatSqrt( 1.0 - (tf_sightZ*tf_sightZ) )
	tv_pos.z = tf_sightZ

//	DBG_RenderVector(@to_head OBJ_PosGet(), tv_pos, color_rouge)
//	DBG_RenderVector(@to_head OBJ_PosGet(), @to_head OBJ_SightGet(), color_jaune)

	tv_pos += @to_head OBJ_PosGet()
}
else
{
	tv_pos = @to_head OBJ_PosGet() + @to_head OBJ_SightGet()		// Regarde dans l'axe de l'anim (IK Off)
	ti_ik_tete_actif = faux
}

f_look_angle_blend_speed += MATH_FloatMin(12.0 - f_look_angle_blend_speed, 30.0 * TIME_GetDt())


if (ti_ik_tete_actif)
	f_look_coef = MATH_FloatMin(f_look_coef + (tf_dt * 8.0), 1.0)
else
	f_look_coef -= MATH_FloatMin(f_look_coef, tf_dt * 8.0)


if (!f_look_coef)
{
	// Il n'y a plus d'IK TETE
	v_last_look_pos = tv_pos
	f_look_angle_blend_speed = 0.0
	v_look_axis = @to_head OBJ_SightGet()
	return
}

// IK TETE
tf_coef_1 = 0.25 * f_look_coef
tf_coef_2 = 0.35 * f_look_coef
tf_coef_3 = 0.45 * f_look_coef
tf_coef_4 = 0.75 * f_look_coef

if (tf_dt < 1.0)
{
	tv_temp = tv_pos - v_last_look_pos
	if (MATH_VecDotProduct(tv_temp, tv_temp) > 4.0)
		f_look_angle_blend_speed = 0.0
}
v_last_look_pos = tv_pos

if (MATH_VecNull(v_look_axis))
	v_look_axis = @to_head OBJ_SightGet()

tv_temp = tv_pos - @to_head OBJ_PosGet()
tf_composante_Z = MATH_VecDotProduct(tv_temp, OBJ_BankingGet())
tv_temp -= MATH_FloatMax(MATH_VecDotProduct(- @to_cou OBJ_SightGet(), MATH_VecNormalize(tv_temp)), 0.0) * (tf_composante_Z * OBJ_BankingGet())
//tv_temp -= tf_composante_Z * OBJ_BankingGet()

//DBG_RenderVector(@to_head OBJ_PosGet(), tv_temp, color_jaune)

tf_sign = MATH_FloatSign(MATH_VecDotProduct(tv_temp, OBJ_HorizonGet()))

// Detection changement de cote dans le dos
if (MATH_FloatSign(MATH_VecDotProduct(tv_temp, OBJ_SightGet())) < 0.0 && tf_sign != MATH_FloatSign(MATH_VecDotProduct(v_look_axis, OBJ_HorizonGet())))
	tv_temp = MATH_VecCrossProduct(OBJ_BankingGet(), v_look_axis) * tf_sign
 
// Detection risque de charniere horizontale
if (MATH_VecDotProduct(v_look_axis, tv_temp) < 0.0)
{
	tv_temp = MATH_VecCrossProduct(OBJ_BankingGet(), v_look_axis) * tf_sign
	tv_temp -= MATH_VecDotProduct(tv_temp, OBJ_BankingGet()) * OBJ_BankingGet()
}

//DBG_RenderVector(@to_head OBJ_PosGet(), tv_temp, color_jaune)

v_look_axis = MATH_VecBlendRotate(v_look_axis, tv_temp, f_look_angle_blend_speed * tf_dt)
v_look_axis = MATH_LIB_VectorInPrisme(v_look_axis, OBJ_SightGet(), OBJ_BankingGet(), 2.6)
	
tv_pos = @to_head OBJ_PosGet()
tv_pos += v_look_axis
	
tv_bone_to_cam_pos = tv_pos 
tv_bone_to_cam_pos -= @to_head OBJ_PosGet()
//DBG_RenderVector(@to_head OBJ_PosGet(), tv_bone_to_cam_pos, color_bleu)
MATH_VecSetNormalize(tv_bone_to_cam_pos)

tv_bone_to_cam_pos = MATH_VecInCone(tv_bone_to_cam_pos, @to_head OBJ_SightGet(), 2.5, 0)

to_bone = ANI_CanalObjectGet(Anim_Canal_BrasGauche)
tv_bras_vertical_G = @to_bone MATH_VecGlobalToLocal(Cv_VerticalVector)
to_bone = ANI_CanalObjectGet(Anim_Canal_BrasDroit)
tv_bras_vertical_D = @to_bone MATH_VecGlobalToLocal(Cv_VerticalVector)

if (tf_coef_1)
{
	to_bone = ANI_CanalObjectGet(Anim_Canal_Ventre)
	tv_start_sight = @to_bone MATH_VecGlobalToLocal(@to_head OBJ_SightGet())
	tv_dest_sight = @to_bone MATH_VecGlobalToLocal(tv_bone_to_cam_pos)

	if (tv_dest_sight.z < -0.3)
	{
		tv_dest_sight.z = -0.3
		MATH_VecSetNormalize(tv_dest_sight)
	}
	else if (tv_dest_sight.z > 0.0)
	{
		tv_start_sight.z = 0.0
		tv_dest_sight.z = 0.0
	}

	tv_dest_sight = MATH_VecBlendRotate(tv_start_sight, tv_dest_sight, tf_coef_1)
	@to_bone OBJ_Rotate_FromTo(tv_start_sight, tv_dest_sight)
}

if (tf_coef_2)
{
	to_bone = ANI_CanalObjectGet(Anim_Canal_Torse)
	tv_start_sight = @to_bone MATH_VecGlobalToLocal(@to_head OBJ_SightGet())
	tv_dest_sight = @to_bone MATH_VecGlobalToLocal(tv_bone_to_cam_pos)

	if (tv_dest_sight.z < -0.3)
	{
		tv_dest_sight.z = -0.3
		MATH_VecSetNormalize(tv_dest_sight)
	}
	else if (tv_dest_sight.z > 0.0)
	{
		tv_start_sight.z = 0.0
		tv_dest_sight.z = 0.0
	}

	tv_dest_sight = MATH_VecBlendRotate(tv_start_sight, tv_dest_sight, tf_coef_2)
	@to_bone OBJ_Rotate_FromTo(tv_start_sight, tv_dest_sight)
}

//to_bone = ANI_CanalObjectGet(Anim_Canal_Ventre)
//@to_bone OBJ_RotateLocalY(MATH_Sin(TIME_Get() * 4.0) * 0.4)
//@to_bone OBJ_RotateLocalX(MATH_Sin(TIME_Get() * 3.0) * 0.4)

to_bone = ANI_CanalObjectGet(Anim_Canal_BrasGauche)
tv_dest_sight = @to_bone MATH_VecGlobalToLocal(Cv_VerticalVector)
//if (tv_dest_sight.x < 0.0)
//{
//	tv_bras_vertical_G.x = 0.0
//	tv_dest_sight.x = 0.0
//}
@to_bone OBJ_Rotate_FromTo(tv_bras_vertical_G, tv_dest_sight)

to_bone = ANI_CanalObjectGet(Anim_Canal_BrasDroit)
tv_dest_sight = @to_bone MATH_VecGlobalToLocal(Cv_VerticalVector)
//if (tv_dest_sight.x > 0.0)
//{
//	tv_bras_vertical_D.x = 0.0
//	tv_dest_sight.x = 0.0
//}
@to_bone OBJ_Rotate_FromTo(tv_bras_vertical_D, tv_dest_sight)

to_bone = ANI_CanalObjectGet(Anim_Canal_Cou)
tv_start_sight = @to_bone MATH_VecGlobalToLocal(@to_head OBJ_SightGet())
tv_dest_sight = @to_bone MATH_VecGlobalToLocal(tv_bone_to_cam_pos)

if (tv_dest_sight.z < -0.3)
{
	tv_dest_sight.z = -0.3
	MATH_VecSetNormalize(tv_dest_sight)
}

tv_dest_sight = MATH_VecBlendRotate(tv_start_sight, tv_dest_sight, tf_coef_3)
@to_bone OBJ_Rotate_FromTo(tv_start_sight, tv_dest_sight)

tv_start_sight = cvector(0.0, -1.0, 0.0)
tv_dest_sight = @to_head MATH_VecGlobalToLocal(tv_bone_to_cam_pos)

if (tv_dest_sight.z < -0.3)
{
	tv_dest_sight.z = -0.3
	MATH_VecSetNormalize(tv_dest_sight)
}

tv_dest_sight = MATH_VecBlendRotate(tv_start_sight, tv_dest_sight, tf_coef_4)
@to_head OBJ_Rotate_FromTo(tv_start_sight, tv_dest_sight)		
