#include	"r_defines.var"

int				ti_depl_horiz
int				ti_depl_vert
vector		tv_pos
vector		tv_joy_L
vector		tv_joy_R
float			tf_joy_R_norm
float			tf_sign

// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	// réactivation
	COL_ColSetActivationSet(all, none)
//	Ne pas couper la CB sinon bug ordre des callbacks pour posiionnement indy3rd !!!
	DYN_RM_ON_OFF(vrai)
	if ( o_ride_actor )	
	{
		@o_ride_actor DYN_GravitySet( v_cheat_ride_grav )
		@o_ride_actor COL_ColSetActivationSet(i_cheat_colset_on,none)
	}
	MOVE_MODE_DEL()
	i_sort_etat = faux
	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_RM_cheat) 
{
	i_etat_courant = ETAT_RM_cheat

	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}

	OBJ_BankingGeneralSet(@get_Kamera OBJ_SightGet(), Cv_VerticalVector)
	fct_last_etat = AI_TrackCurGet()

	// CAMERA CAMERA CAMERA
	@get_global i_kong_camera_status = Ci_Kcamera_deplacement
	// CAMERA CAMERA CAMERA

	// désactivation
	OBJ_HierarchyReset()
	COL_ColSetActivationSet(none, all)

//	Ne pas couper la CB sinon bug ordre des callbacks pour posiionnement indy3rd !!!
//	AI_CBDel(OBJ_Me(), CallBack_After_Blend, "k_callback_after_blend")	
	DYN_RM_ON_OFF( faux)
	if ( o_ride_actor)
	{
		v_cheat_ride_grav = @o_ride_actor DYN_GravityVectorGet()
		@o_ride_actor DYN_GravitySet( Cv_NullVector)
		i_cheat_colset_on = @o_ride_actor COL_ColSetActivationGet()
		@o_ride_actor COL_ColSetActivationSet(none, all)
	}
	GRAPPIN_Destroy()
	i_jump_copter = faux
	ODE_Enable(faux)
	ACT_ActionSet(RM_Act_Wait)
	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}


// COMPORTEMENT ===========================================================================

//Str_DisplayTextOnce("CHEAT MODE", Cv_NullVector)


// Joy Left pour déplacement horizontal ======================================
ti_depl_horiz = faux
tv_joy_L = glob_joyvector_get
if( f_joy_norm )
{
	ti_depl_horiz = vrai
//	Str_DisplayTextOnce("horizontal", cvector(0,0.1,0))
	DBG_RenderVector(OBJ_PosGet(), tv_joy_L * 5, color_rouge)
}

// Joy Right pour déplacement vertical =======================================
ti_depl_vert = faux
tv_joy_R = IO_JoyGetMove1()
if (MATH_VecNullToler(tv_joy_R, tolerance_joynull))
	tf_joy_R_norm = 0.0
else
	tf_joy_R_norm = MATH_VecNorm(tv_joy_R) - tolerance_joynull
if( tf_joy_R_norm && MATH_AbsFloat(tv_joy_R.y) > 0.35 )
{
	ti_depl_vert = vrai
//	Str_DisplayTextOnce("vertical", cvector(0,0.2,0))
	DBG_RenderVector(OBJ_PosGet(), tv_joy_R * 5, color_vert)
	tv_joy_R = cvector(tv_joy_R.x,0,tv_joy_R.y - (0.35 * MATH_FloatSign(tv_joy_R.y)) )
}

if( tf_joy_R_norm && MATH_AbsFloat(tv_joy_R.x) > 0.35 )
{
	if ( o_ride_actor)
		@o_ride_actor OBJ_RotateLocalZ((tv_joy_R.x - (0.35 * MATH_FloatSign(tv_joy_R.x)) ) * TIME_GetDt() * -5.0)
	else
		OBJ_RotateLocalZ((tv_joy_R.x - (0.35 * MATH_FloatSign(tv_joy_R.x)) ) * TIME_GetDt() * -10.0)
	
}

// Nouvelle position ====================================================
if ( o_ride_actor)
{
	tv_pos = @o_ride_actor OBJ_PosGet()
	@o_ride_actor DYN_GravitySet(Cv_NullVector)
}
else
	tv_pos = OBJ_PosGet()
if( ti_depl_horiz )
{
	tv_pos.x += tv_joy_L.x * TIME_GetDt() * 50
	tv_pos.y += tv_joy_L.y * TIME_GetDt() * 50
}
if( ti_depl_vert)
	tv_pos.z += tv_joy_R.z * TIME_GetDt() * 50
OBJ_PosSet(tv_pos)
if ( o_ride_actor)
	@o_ride_actor OBJ_PosSet(tv_pos)
else
	OBJ_PosSet(tv_pos)
