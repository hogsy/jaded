 //------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 					DESTRUCTEUR DE 6 GENERATEURS
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_DESTROY_6_SFX(byref int i_GFX1, byref int i_GFX2, byref int i_GFX3, byref int i_GFX4, byref int i_GFX5, byref int i_GFX6)
{
	if (i_GFX1 != -1)
		GFX_Del(i_GFX1)

	if (i_GFX2 != -1)
		GFX_Del(i_GFX2)

	if (i_GFX3 != -1)
		GFX_Del(i_GFX3)

	if (i_GFX4 != -1)
		GFX_Del(i_GFX4)

	if (i_GFX5 != -1)
		GFX_Del(i_GFX5)

	if (i_GFX6 != -1)
		GFX_Del(i_GFX6)

	i_GFX1 = -1
	i_GFX2 = -1
	i_GFX3 = -1
	i_GFX4 = -1
	i_GFX5 = -1
	i_GFX6 = -1
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 					DESTRUCTEUR DE 5 GENERATEURS
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_DESTROY_5_SFX(byref int i_GFX1, byref int i_GFX2, byref int i_GFX3, byref int i_GFX4, byref int i_GFX5)
{
	if (i_GFX1 != -1)
		GFX_Del(i_GFX1)

	if (i_GFX2 != -1)
		GFX_Del(i_GFX2)

	if (i_GFX3 != -1)
		GFX_Del(i_GFX3)

	if (i_GFX4 != -1)
		GFX_Del(i_GFX4)

	if (i_GFX5 != -1)
		GFX_Del(i_GFX5)

	i_GFX1 = -1
	i_GFX2 = -1
	i_GFX3 = -1
	i_GFX4 = -1
	i_GFX5 = -1
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 					DESTRUCTEUR DE 4 GENERATEURS
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_DESTROY_4_SFX(byref int i_GFX1, byref int i_GFX2, byref int i_GFX3, byref int i_GFX4)
{
	if (i_GFX1 != -1)
		GFX_Del(i_GFX1)

	if (i_GFX2 != -1)
		GFX_Del(i_GFX2)

	if (i_GFX3 != -1)
		GFX_Del(i_GFX3)

	if (i_GFX4 != -1)
		GFX_Del(i_GFX4)

	i_GFX1 = -1
	i_GFX2 = -1
	i_GFX3 = -1
	i_GFX4 = -1
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 					DESTRUCTEUR DE 3 GENERATEURS
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_DESTROY_3_SFX(byref int i_GFX1, byref int i_GFX2, byref int i_GFX3)
{
	if (i_GFX1 != -1)
		GFX_Del(i_GFX1)

	if (i_GFX2 != -1)
		GFX_Del(i_GFX2)

	if (i_GFX3 != -1)
		GFX_Del(i_GFX3)

	i_GFX1 = -1
	i_GFX2 = -1
	i_GFX3 = -1
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 					DESTRUCTEUR DE 2 GENERATEURS
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_DESTROY_2_SFX(byref int i_GFX1, byref int i_GFX2)
{
	if (i_GFX1 != -1)
		GFX_Del(i_GFX1)

	if (i_GFX2 != -1)
		GFX_Del(i_GFX2)

	i_GFX1 = -1
	i_GFX2 = -1
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 					DESTRUCTEUR DE 1 GENERATEUR
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_DESTROY_SFX(byref int i_GFX1)
{
	if (i_GFX1 != -1)
	{
		GFX_Del(i_GFX1)
		i_GFX1 = -1
	}
}


//---------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------
//											CREATION / MAJ D'UN GFX13
//---------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_GFX13(byref int i_GFX_1, vector tv_pos, int ti_id_mat, int ti_id_mat1, int ti_id_mat2, int ti_id_mat3, int ti_nb_spr, int ti_nb_max, 
												float tf_life1, float tf_life2, float tf_vit_croiss_min, float tf_vit_croiss_max, float tf_friction_grow, float tf_taille_min, float tf_taille_max, 
												float tf_gravite, vector tv_friction_spr, color tc_1, color tc_2, color tc_3, float tf_haut_sol, float tf_vit_min, float tf_vit_max, 
												vector tv_vit_min_axe, vector tv_vit_max_axe, vector tv_vit_pos_crea, vector tv_friction_pos_crea, vector tv_wind, vector tv_vec1,
												vector tv_vec2, vector tv_vec3, float tf_gen_rate)
{
//	if (i_GFX_1 == -1)
//	{
		i_GFX_1 = GFX_Add(13)
		GFX_MaterialSet(i_GFX_1, get_SFX_light_and_smoke, -1)
		GFX_Seti(i_GFX_1, 13101, ti_id_mat)														// ID de material du SFX Lgt&Smk
		GFX_Seti(i_GFX_1, 13110, ti_id_mat1)													// Materiau 1
		GFX_Seti(i_GFX_1, 13111, ti_id_mat2)													// Materiau 2
		GFX_Seti(i_GFX_1, 13112, ti_id_mat3)													// Materiau 3
		GFX_FlagSet(i_GFX_1, 0 , 1)
		GFX_FlagSet(i_GFX_1, 2 , 1)
		GFX_Seti(i_GFX_1, 13100, ti_nb_spr)														// Nombre maxi de sprites
		GFX_Seti(i_GFX_1, 13106, ti_nb_max)													// Nombre de sprites à générer
		GFX_Setf(i_GFX_1, 13003, tf_life1)															// duree de vie phase 1
		GFX_Setf(i_GFX_1, 13004, tf_life2)															// duree de vie phase 2 
		GFX_Setf(i_GFX_1, 13012, 0.75)															// Life time random
		GFX_Seti(i_GFX_1, 13107, 0)																	// Tri des sprites
		GFX_Setf(i_GFX_1, 13000, tf_vit_croiss_min)											// Vitesse de croissance min
		GFX_Setf(i_GFX_1, 13001, tf_vit_croiss_max)											// Vitesse de croissance max
		GFX_Setf(i_GFX_1, 13002, tf_friction_grow)												// Friction sur la croissance
		GFX_Setf(i_GFX_1, 13005, tf_taille_min)													// Taille min à la création
		GFX_Setf(i_GFX_1, 13006, tf_taille_max)													// Taille max à la création
		GFX_Setf(i_GFX_1, 13007, tf_gravite)														// Gravité
		GFX_Setv(i_GFX_1, 13203, tv_friction_spr)												// Friction sur chaque axe
		GFX_Seti(i_GFX_1, 13103, tc_1)															// Couleur phase 1
		GFX_Seti(i_GFX_1, 13104, tc_2)															// Couleur phase 2
		GFX_Seti(i_GFX_1, 13105, tc_3)															// Couleur phase 3
		GFX_Setf(i_GFX_1, 13011, tf_haut_sol)													// Hauteur du sol
		GFX_Setf(i_GFX_1, 13009, tf_vit_min)														// Vitesse min
		GFX_Setf(i_GFX_1, 13010, tf_vit_max)														// Vitesse max
		GFX_Setv(i_GFX_1, 13201, tv_vit_min_axe)												// Vitesse min sur chaque axe
		GFX_Setv(i_GFX_1, 13202, tv_vit_max_axe)												// Vitesse max sur chaque axe
		GFX_Setv(i_GFX_1, 13205, tv_vit_pos_crea)												// Vitesse de la position de création
		GFX_Setv(i_GFX_1, 13206, tv_friction_pos_crea)										// Friction de la position
		GFX_Setv(i_GFX_1, 13207, tv_vec1)														// Volume de création 1
		GFX_Setv(i_GFX_1, 13208, tv_vec2)														// Volume de création 2
		GFX_Setv(i_GFX_1, 13209, tv_vec3)														// Volume de création 2
		GFX_Setf(i_GFX_1, 13008, tf_gen_rate)													// Taux de génération
//	}

	GFX_Setv(i_GFX_1, 13200, tv_pos)																// Position de création
	GFX_Setv(i_GFX_1, 13204, tv_wind)															// Vent
}


//---------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------
//											CREATION / MAJ D'UN GFX9
//---------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_GFX9(byref int ti_GFX, vector tv_pos, int ti_id_mat, color tc_color, vector tv_axe_gen, vector tv_gravite, int ti_nb_sprites, int ti_flags, float tf_angle, float tf_vit_min, 
			float tf_vit_max, float tf_friction, float tf_epaisseur, float tf_life1, float tf_life2, float tf_mult_long, float tf_time_delay, float tf_time_mort_min, float tf_time_mort_max)
{
	//------------------------------------------------------------------------------------------------------------------
	// 					ETINCELLES
	//------------------------------------------------------------------------------------------------------------------
	ti_GFX = GFX_Add(9)
	GFX_FlagSet(ti_GFX, 0,1)
	GFX_FlagSet(ti_GFX, 2, 1)
	GFX_MaterialSet(ti_GFX, get_SFX_light_and_smoke, ti_id_mat)								// Materiau
	GFX_Seti(ti_GFX, 9101, tc_color)																		// Couleur des particules
	GFX_Setv(ti_GFX, 9200, tv_pos)																			// Position
	GFX_Setv(ti_GFX, 9201, tv_axe_gen)																	// Axe principal de génération
	GFX_Setv(ti_GFX, 9202, tv_gravite)																		// Gravité
	GFX_Seti(ti_GFX, 9100, ti_nb_sprites)																	// Nombre de particules max
	GFX_Seti(ti_GFX, 9102, ti_flags)																			// Flags
	GFX_Setf(ti_GFX, 9000, tf_angle)																		// Angle du cône, en radians
	GFX_Setf(ti_GFX, 9001, tf_vit_min)																		// Vitesse min
	GFX_Setf(ti_GFX, 9002, tf_vit_max)																		// Vitesse max
	GFX_Setf(ti_GFX, 9003, tf_friction)																		// Friction
	GFX_Setf(ti_GFX, 9004, tf_epaisseur)																	// Epaisseur des étincelles
	GFX_Setf(ti_GFX, 9005, tf_life1)																			// Temps de vie minimum
	GFX_Setf(ti_GFX, 9006, tf_life2)																			// Temps de vie max
	GFX_Setf(ti_GFX, 9007, tf_mult_long)																	// Multiplicateur de longueur
	GFX_Setf(ti_GFX, 9008, tf_time_delay)																// Temps entre la génération de 2 étincelles
	GFX_Setf(ti_GFX, 9009, tf_time_mort_min)															// Temps de mort minimum
	GFX_Setf(ti_GFX, 9010, tf_time_mort_max)															// Temps de mort ma
}


//---------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------
//											CREATION / MAJ D'UN GFX21
//---------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_GFX21(byref int ti_GFX, int ti_type, byref object to_obj, vector tv_pos, int ti_id_mat, color tc_color, float tf_taille, float tf_time_death)
{
	if (to_obj)
		ti_GFX = @to_obj GFX_Add(21)                  							 	// ajout de leffet
	else
		ti_GFX = GFX_Add(21)                  							 				// ajout de leffet
	GFX_Seti(ti_GFX, 21103, ti_type)													// halo simple
	GFX_MaterialSet(ti_GFX, get_SFX_light_and_smoke, ti_id_mat)			// affectation du matériau jaune
	GFX_Seti(ti_GFX, 21101, tc_color)													// couleur du halo
	GFX_Setf(ti_GFX, 21005, tf_time_death)											// Temps de mort
	GFX_Setf(ti_GFX, 21000, tf_taille)													// taille du halo
	GFX_Setv(ti_GFX, 21200, tv_pos)													// position de création
}

//---------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------
//	MISE A JOUR GFX 13 (POSITION ET ORIENTATION) -> pas encore l'orientation, patience...
//---------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------------------
procedure void PROC_UPDATE_GFX13(byref int i_GFX1, vector tv_pos, vector tv_wind)
{
	GFX_Setv(i_GFX1, 13200, tv_pos)						// Position de génération
	GFX_Setv(i_GFX1, 13204, tv_wind)						// Vent
}


//--------------------------------------------------------------------------------------------
//    PROCEDURE DE CLAMP DE COULEUR
//--------------------------------------------------------------------------------------------
procedure color PROC_CLAMP_COLOR(color tc_color, int ti_val)
{
	int ti_tmp_color1 , ti_tmp_color2, ti_tmp_color3

	if (COLOR_GetR(tc_color) > ti_val)
		ti_tmp_color1 = ti_val
	else
		ti_tmp_color1 = COLOR_GetR(tc_color)

	if (COLOR_GetG(tc_color) > ti_val)
		ti_tmp_color2 = ti_val
	else
		ti_tmp_color2 = COLOR_GetG(tc_color)

	if (COLOR_GetB(tc_color) > ti_val)
		ti_tmp_color3 = ti_val
	else
		ti_tmp_color3 = COLOR_GetB(tc_color)

	return COLOR_SetRGBA(ti_tmp_color1,ti_tmp_color2,ti_tmp_color3,255)
}


//--------------------------------------------------------------------------------------------
//    PROCEDURE DESATURANT UNE COULEUR
//--------------------------------------------------------------------------------------------
procedure color PROC_DESATURATE_COLOR(color tc_color, float tf_facteur)
{
	int ti_red, ti_green, ti_blue, ti_mid
	
	ti_red = COLOR_GetR(tc_color)
	ti_green = COLOR_GetG(tc_color)
	ti_blue = COLOR_GetB(tc_color)

	ti_mid = (ti_red + ti_green + ti_blue) * 0.333

	ti_red = MATH_FloatBlend(ti_red,ti_mid, tf_facteur)
	ti_green = MATH_FloatBlend(ti_green,ti_mid, tf_facteur)
	ti_blue = MATH_FloatBlend(ti_blue,ti_mid, tf_facteur)

	return COLOR_SetRGBA(ti_red,ti_green,ti_blue,COLOR_GetA(tc_color))
}


//--------------------------------------------------------------------------------------------
//    PROCEDURE MULTIPLIANT PAR X UNE COULEUR
//--------------------------------------------------------------------------------------------
procedure color PROC_MULTIPLY_COLOR(color tc_color, float tf_facteur)
{
	int ti_red, ti_green, ti_blue, ti_mid
	
	ti_red = COLOR_GetR(tc_color) * tf_facteur
	ti_green = COLOR_GetG(tc_color) * tf_facteur
	ti_blue = COLOR_GetB(tc_color) * tf_facteur

	return PROC_CLAMP_COLOR(COLOR_SetRGBA(ti_red,ti_green,ti_blue,COLOR_GetA(tc_color)),255)
}

//--------------------------------------------------------------------------------------------
//    PROCEDURE ASSOMBRISSANT UNE COULEUR
//--------------------------------------------------------------------------------------------
procedure color PROC_DARKEN_COLOR(color tc_color, float tf_facteur)
{
	return COLOR_Blend(tc_color, color_noire, tf_facteur)
}


//--------------------------------------------------------------------------------------------
//    PROCEDURE ECLAIRCISSANT UNE COULEUR
//--------------------------------------------------------------------------------------------
procedure color PROC_LIGHTEN_COLOR(color tc_color, float tf_facteur)
{
	return COLOR_Blend(tc_color, color_blanc, tf_facteur)
}


//--------------------------------------------------------------------------------------------
//    PROCEDURE INVERSANT UNE COULEUR
//--------------------------------------------------------------------------------------------
procedure color PROC_INVERT_COLOR(color tc_color)
{
	int ti_red, ti_green, ti_blue, ti_alpha
	
	ti_red = 255 - COLOR_GetR(tc_color)
	ti_green = 255 - COLOR_GetG(tc_color)
	ti_blue = 255 - COLOR_GetB(tc_color)
	ti_alpha = 255 - COLOR_GetA(tc_color)

	return COLOR_SetRGBA(ti_red,ti_green,ti_blue,ti_alpha)
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 						EXPLOSION CARTOON GENADE
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_CARTOON(vector tv_pos)
{
	float tf_rayon_annexe, tf_friction_grow, tf_vitesse, tf_vitesse_X, tf_vitesse_Y, tf_vitesse_globale, tf_tmp_ID, tf_distance
	int ti_nb_sprites, ti_cpt1, ti_nb_trainees
	
	int		i_GFX_Paf, i_GFX_Rocks, i_GFX_Nuage_cartoon2, i_GFX_Trainees[7], i_GFX_Etincelles, i_GFX_Nuage_cartoon
	
	ti_nb_trainees = 7

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 1 : PAF
	//------------------------------------------------------------------------------------------------------------------
	tf_tmp_ID = MATH_RandInt(0,3)
	i_GFX_Paf = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Paf, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Paf, 13101,55+ tf_tmp_ID)											// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Paf, 0 , 1)
	GFX_FlagSet(i_GFX_Paf, 2 , 1)
	GFX_Seti(i_GFX_Paf, 13100, 1)															// Nombre maxi de sprites
	GFX_Seti(i_GFX_Paf, 13106, 1)															// Nombre de sprites à générer
	GFX_Setf(i_GFX_Paf, 13003, 0.060000)												// duree de vie phase 1
	GFX_Setf(i_GFX_Paf, 13004, 0.0150000)												// duree de vie phase 2 
	GFX_Setf(i_GFX_Paf, 13012, 0.750000)												// Life time random
	GFX_Seti(i_GFX_Paf, 13107, 0)															// Tri des sprites
	GFX_Setf(i_GFX_Paf, 13000, 45.0000)													// Vitesse de croissance min
	GFX_Setf(i_GFX_Paf, 13001, 75.0000)													// Vitesse de croissance max
	GFX_Setf(i_GFX_Paf, 13002, 0.35)														// Friction sur la croissance
	GFX_Setf(i_GFX_Paf, 13005, 0.050000)												// Taille min à la création
	GFX_Setf(i_GFX_Paf, 13006, 0.200000)												// Taille max à la création
	GFX_Setf(i_GFX_Paf, 13007, 0.00000)													// Gravité
	GFX_Setv(i_GFX_Paf, 13203, cvector(0,0,0))											// Friction sur chaque axe
	GFX_Seti(i_GFX_Paf, 13103, 0xFFFFFFFF)											// Couleur phase 1
	GFX_Seti(i_GFX_Paf, 13104, 0xFFFFFFFF)											// Couleur phase 2
	GFX_Seti(i_GFX_Paf, 13105, 0x00FFFFFF)											// Couleur phase 3
	GFX_Setf(i_GFX_Paf, 13011, tv_pos.z)												// Hauteur du sol
	GFX_Setv(i_GFX_Paf, 13200, tv_pos + cvector(0.0, 0.0, 0.25))					// Position de création
	GFX_Setf(i_GFX_Paf, 13009, 0.0)														// Vitesse min
	GFX_Setf(i_GFX_Paf, 13010, 0.0)														// Vitesse max
	GFX_Setv(i_GFX_Paf, 13201, cvector(0,0,0))											// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Paf, 13202, cvector(0,0,0))											// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Paf, 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv(i_GFX_Paf, 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv(i_GFX_Paf, 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setv(i_GFX_Paf, 13207, cvector(0.01,0.0,0.0))								// Volume de création 1
	GFX_Setv(i_GFX_Paf, 13208, cvector(0.0,0.01,0.0))								// Volume de création 2
	GFX_Setf(i_GFX_Paf, 13008, 0.000000)												// Taux de génération
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 2 : trainées
	//------------------------------------------------------------------------------------------------------------------
	ti_nb_sprites = 25
	tf_friction_grow = 0.01
	tf_vitesse = 20.0
	
	for (ti_cpt1 = 0; ti_cpt1 < ti_nb_trainees ; ti_cpt1++)
	{
		tf_vitesse_X = MATH_RandFloat(-tf_vitesse, tf_vitesse)
		tf_vitesse_Y = MATH_RandFloat(-tf_vitesse, tf_vitesse)
		tf_vitesse_globale = MATH_RandFloat(tf_vitesse/2,tf_vitesse)
		i_GFX_Trainees[ti_cpt1] = GFX_Add(13)
		GFX_MaterialSet(i_GFX_Trainees[ti_cpt1], get_SFX_light_and_smoke, -1)
		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13101, 41)																	// ID de material du SFX Lgt&Smk
		GFX_FlagSet(i_GFX_Trainees[ti_cpt1], 0 , 1)
		GFX_FlagSet(i_GFX_Trainees[ti_cpt1], 2 , 1)
		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13100, ti_nb_sprites )													// Nombre maxi de sprites
		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13106, ti_nb_sprites )													// Nombre de sprites à générer
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13003, 0.300000)															// duree de vie phase 1
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13004, 0.150000)															// duree de vie phase 2 
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13012, 0.750000)															// Life time random
		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13107, 0)																	// Tri des sprites
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13000, 0.10000)															// Vitesse de croissance min
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13001, 0.2000)															// Vitesse de croissance max
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13002, tf_friction_grow)													// Friction sur la croissance
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13005, 0.0500000)														// Taille min à la création
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13006, 0.100000)															// Taille max à la création
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13007, -18.00000)														// Gravité
		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13203, cvector(0.0, 0.0, 0.0))											// Friction sur chaque axe
		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13103, 0xFFFFFFFF)													// Couleur phase 1
		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13104, 0x80808080)														// Couleur phase 2
		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13105, 0x00808080)														// Couleur phase 3
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13011, tv_pos.z)															// Hauteur du sol
		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13200, tv_pos + cvector(0.0, 0.0, 0.0))								// Position de création
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13009, tf_vitesse_globale )												// Vitesse min
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13010, tf_vitesse_globale )												// Vitesse max
		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13201, cvector(tf_vitesse_X, tf_vitesse_Y, tf_vitesse * MATH_RandFloat(0.1,2.0)))			// Vitesse min sur chaque axe
		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13202, cvector(tf_vitesse_X, tf_vitesse_Y, tf_vitesse * MATH_RandFloat(0.1,2.0)))			// Vitesse max sur chaque axe
		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13204, cvector(0.00000, 0.00000, 0.00000))						// Vent
		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13205, cvector(0.00000, 0.00000, 0.00000))						// Vitesse de la position de création
		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13206, cvector(0.00000, 0.00000, 0.00000))						// Friction de la position
		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13207, cvector(0.01,0.0,0.0))											// Volume de création 1
		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13208, cvector(0.0,0.01,0.0))											// Volume de création 2
		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13008, 0.01)																// Taux de génération
	}
	
	
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 3 : rochers
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Rocks = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Rocks, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Rocks, 13101, 42)																		// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Rocks, 0 , 1)
	GFX_FlagSet(i_GFX_Rocks, 2 , 1)
	GFX_Seti(i_GFX_Rocks, 13100, 20)																		// Nombre maxi de sprites
	GFX_Seti(i_GFX_Rocks, 13106, 20)																		// Nombre de sprites à générer
	GFX_Setf(i_GFX_Rocks, 13003, 1.0)																	// duree de vie phase 1
	GFX_Setf(i_GFX_Rocks, 13004, 0.5)																	// duree de vie phase 2 
	GFX_Setf(i_GFX_Rocks, 13012, 0.750000)															// Life time random
	GFX_Seti(i_GFX_Rocks, 13107, 0)																		// Tri des sprites
	GFX_Setf(i_GFX_Rocks, 13000, 1.0)																	// Vitesse de croissance min
	GFX_Setf(i_GFX_Rocks, 13001, 1.2)																	// Vitesse de croissance max
	GFX_Setf(i_GFX_Rocks, 13002, 1.0)																	// Friction sur la croissance
	GFX_Setf(i_GFX_Rocks, 13005, 0.05)																	// Taille min à la création
	GFX_Setf(i_GFX_Rocks, 13006, 0.1)																	// Taille max à la création
	GFX_Setf(i_GFX_Rocks, 13007, -20.00000)															// Gravité
	GFX_Setv(i_GFX_Rocks, 13203, Cv_NullVector)													// Friction sur chaque axe
	GFX_Seti(i_GFX_Rocks, 13103, 0xFFFFFFFF)														// Couleur phase 1
	GFX_Seti(i_GFX_Rocks, 13104, 0xFFFFFFFF)														// Couleur phase 2
	GFX_Seti(i_GFX_Rocks, 13105, 0x00000000)														// Couleur phase 3
	GFX_Setf(i_GFX_Rocks, 13011, tv_pos.z)															// Hauteur du sol
	GFX_Setv(i_GFX_Rocks, 13200, tv_pos)																// Position de création
	GFX_Setf(i_GFX_Rocks, 13009, 5.0)																	// Vitesse min
	GFX_Setf(i_GFX_Rocks, 13010, 30.0)																	// Vitesse max
	GFX_Setv(i_GFX_Rocks, 13201, cvector(-15, -15, 5.0))											// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Rocks, 13202, cvector(15, 15, 15.0))											// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Rocks, 13204, cvector(0.00000, 0.00000, 0.00000))						// Vent
	GFX_Setv(i_GFX_Rocks, 13205, Cv_NullVector)													// Vitesse de la position de création
	GFX_Setv(i_GFX_Rocks, 13206, Cv_NullVector)													// Friction de la position
	GFX_Setv(i_GFX_Rocks, 13207, cvector(0.01,0.0,0.0))											// Volume de création 1
	GFX_Setv(i_GFX_Rocks, 13208, cvector(0.0,0.01,0.0))											// Volume de création 2
	GFX_Setf(i_GFX_Rocks, 13008, 0.00)																	// Taux de génération
	
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 4 : étincelles
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Etincelles = GFX_Add(9)
	GFX_FlagSet(i_GFX_Etincelles, 0,1)
	GFX_FlagSet(i_GFX_Etincelles, 2, 1)
	GFX_MaterialSet(i_GFX_Etincelles, get_SFX_light_and_smoke, 5)
	GFX_Seti(i_GFX_Etincelles, 9101, 0x40448DAB)																	// Couleur des particules
	GFX_Setv(i_GFX_Etincelles, 9200, tv_pos + cvector(0.0,0.0,0.25))											// Position
	GFX_Setv(i_GFX_Etincelles, 9201, cvector(0.0, 0.0, 1.0) )														// Axe principal de génération
	GFX_Setv(i_GFX_Etincelles, 9202, cvector(0, 0, 0.0))																// Gravité
	GFX_Seti(i_GFX_Etincelles, 9100, 15)																					// Nombre de particules max
	GFX_Seti (i_GFX_Etincelles, 9102, 10)																				// Flags
	GFX_Setf(i_GFX_Etincelles, 9000, 3.0 )																				// Angle du cône, en radians
	GFX_Setf(i_GFX_Etincelles, 9001, 50)																					// Vitesse min
	GFX_Setf(i_GFX_Etincelles, 9002, 60)																					// Vitesse max
	GFX_Setf(i_GFX_Etincelles, 9003, 0.8)																				// Friction
	GFX_Setf(i_GFX_Etincelles, 9004, MATH_RandFloat(0.05,0.1))												// Epaisseur des étincelles
	GFX_Setf(i_GFX_Etincelles, 9005, 0.2)																				// Temps de vie minimum
	GFX_Setf(i_GFX_Etincelles, 9006, 0.6)																				// Temps de vie max
	GFX_Setf(i_GFX_Etincelles, 9007, 15)																					// Multiplicateur de longueur
	GFX_Setf(i_GFX_Etincelles, 9008, 0.0)																				// Temps entre la génération de 2 étincelles
	GFX_Setf(i_GFX_Etincelles, 9009, 0.2)																				// Temps de mort minimum
	GFX_Setf(i_GFX_Etincelles, 9010, 0.2)																				// Temps de mort maximum
	
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 5 : nuage central 1
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Nuage_cartoon = GFX_Add( 13)
	GFX_MaterialSet(i_GFX_Nuage_cartoon, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Nuage_cartoon, 13101,41)																			// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Nuage_cartoon, 0 , 1)
	GFX_FlagSet(i_GFX_Nuage_cartoon, 2 , 1)
	GFX_Seti(i_GFX_Nuage_cartoon, 13100, 1)																			// Nombre maxi de sprites
	GFX_Seti(i_GFX_Nuage_cartoon, 13106, 1)																			// Nombre de sprites à générer
	GFX_Setf(i_GFX_Nuage_cartoon, 13003, 0.050000)																// duree de vie phase 1
	GFX_Setf(i_GFX_Nuage_cartoon, 13004, 0.200000)																// duree de vie phase 2 
	GFX_Setf(i_GFX_Nuage_cartoon, 13012, 0.750000)																// Life time random
	GFX_Seti(i_GFX_Nuage_cartoon, 13107, 0)																			// Tri des sprites
	GFX_Setf(i_GFX_Nuage_cartoon, 13000, -30.0)																		// Vitesse de croissance min
	GFX_Setf(i_GFX_Nuage_cartoon, 13001, -30.0)																		// Vitesse de croissance max
	GFX_Setf(i_GFX_Nuage_cartoon, 13002, -0.01)																		// Friction sur la croissance
	GFX_Setf(i_GFX_Nuage_cartoon, 13005, 5.5)																		// Taille min à la création
	GFX_Setf(i_GFX_Nuage_cartoon, 13006, 5.5)																		// Taille max à la création
	GFX_Setf(i_GFX_Nuage_cartoon, 13007, 0.0)																		// Gravité
	GFX_Setv(i_GFX_Nuage_cartoon, 13203, cvector(1.0,1.0,1.0))													// Friction sur chaque axe
	GFX_Seti(i_GFX_Nuage_cartoon , 13103, 0x00AFCBD5)														// Couleur phase 1
	GFX_Seti(i_GFX_Nuage_cartoon , 13104, 0xFFAFCBD5)														// Couleur phase 2
	GFX_Seti(i_GFX_Nuage_cartoon , 13105, 0x00AFCBD5)														// Couleur phase 3
	GFX_Setf(i_GFX_Nuage_cartoon, 13011, tv_pos.z)																// Hauteur du sol
	GFX_Setv(i_GFX_Nuage_cartoon, 13200, tv_pos + cvector(0.0, 0.0, 0.5))									// Position de création
	GFX_Setf(i_GFX_Nuage_cartoon, 13009, 0.0)																		// Vitesse min
	GFX_Setf(i_GFX_Nuage_cartoon, 13010, 0.0)																		// Vitesse max
	GFX_Setv(i_GFX_Nuage_cartoon, 13201, cvector(0.0, 0.0, 0.0))												// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon, 13202, cvector(0.0, 0.0, 0.0))												// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon, 13204, cvector(0.0, 0.0, 0.0))												// Vent
	GFX_Setv(i_GFX_Nuage_cartoon, 13205, cvector(0.0, 0.0, 0.0))												// Vitesse de la position de création
	GFX_Setv(i_GFX_Nuage_cartoon, 13206, cvector(0.0, 0.0, 0.0))												// Friction de la position
	GFX_Setv(i_GFX_Nuage_cartoon, 13207, cvector(0.01,0.0,0.0))												// Volume de création 1
	GFX_Setv(i_GFX_Nuage_cartoon, 13208, cvector(0.0,0.01,0.0))												// Volume de création 2
	GFX_Setf(i_GFX_Nuage_cartoon, 13008, 0.0)																		// Taux de génération
	
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 6 : nuage central 2
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Nuage_cartoon2 = GFX_Add( 13)
	GFX_MaterialSet(i_GFX_Nuage_cartoon2, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Nuage_cartoon2, 13101,41)																		// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Nuage_cartoon2, 0 , 1)
	GFX_FlagSet(i_GFX_Nuage_cartoon2, 2 , 1)
	GFX_Seti(i_GFX_Nuage_cartoon2, 13100, 1)																		// Nombre maxi de sprites
	GFX_Seti(i_GFX_Nuage_cartoon2, 13106, 1)																		// Nombre de sprites à générer
	GFX_Setf(i_GFX_Nuage_cartoon2, 13003, 0.3)																		// duree de vie phase 1
	GFX_Setf(i_GFX_Nuage_cartoon2, 13004, 0.2)																		// duree de vie phase 2 
	GFX_Setf(i_GFX_Nuage_cartoon2, 13012, 0.750000)																// Life time random
	GFX_Seti(i_GFX_Nuage_cartoon2, 13107, 0)																		// Tri des sprites
	GFX_Setf(i_GFX_Nuage_cartoon2, 13000, 10.0000)																// Vitesse de croissance min
	GFX_Setf(i_GFX_Nuage_cartoon2, 13001, 10.0000)																// Vitesse de croissance max
	GFX_Setf(i_GFX_Nuage_cartoon2, 13002, 0.05)																	// Friction sur la croissance
	GFX_Setf(i_GFX_Nuage_cartoon2, 13005, 0.0)																		// Taille min à la création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13006, 0.0)																		// Taille max à la création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13007, 0.0)																		// Gravité
	GFX_Setv(i_GFX_Nuage_cartoon2, 13203, cvector(1.0,1.0,1.0))												// Friction sur chaque axe
	GFX_Seti(i_GFX_Nuage_cartoon2, 13103, 0x00AFCBD5)														// Couleur phase 1
	GFX_Seti(i_GFX_Nuage_cartoon2 , 13104, 0xFFAFCBD5)														// Couleur phase 2
	GFX_Seti(i_GFX_Nuage_cartoon2, 13105, 0x00AFCBD5)														// Couleur phase 3
	GFX_Setf(i_GFX_Nuage_cartoon2, 13011, tv_pos.z)																// Hauteur du sol
	GFX_Setv(i_GFX_Nuage_cartoon2, 13200, tv_pos + cvector(0.0, 0.0, 0.5))									// Position de création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13009, 0.0)																		// Vitesse min
	GFX_Setf(i_GFX_Nuage_cartoon2, 13010, 0.0)																		// Vitesse max
	GFX_Setv(i_GFX_Nuage_cartoon2, 13201, cvector(0.0, 0.0, 0.0))												// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon2, 13202, cvector(0.0, 0.0, 0.0))												// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon2, 13204, cvector(0.0, 0.0, 0.0))												// Vent
	GFX_Setv(i_GFX_Nuage_cartoon2, 13205, cvector(0.0, 0.0, 0.0))												// Vitesse de la position de création
	GFX_Setv(i_GFX_Nuage_cartoon2, 13206, cvector(0.0, 0.0, 0.0))												// Friction de la position
	GFX_Setv(i_GFX_Nuage_cartoon2, 13207, cvector(0.01,0.0,0.0))												// Volume de création 1
	GFX_Setv(i_GFX_Nuage_cartoon2, 13208, cvector(0.0,0.01,0.0))												// Volume de création 2
	GFX_Setf(i_GFX_Nuage_cartoon2, 13008, 0.0)																		// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 						EXPLOSION D'EJECTION VENANT DU SOL
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_SOL(float tf_taille, vector tv_pos)
{
	float tf_friction_grow, tf_dispersion
	int i_GFX_Souffle, i_GFX_Rocks, i_GFX_Nuage_cartoon2

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 2 : trainées
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Souffle = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Souffle, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Souffle, 13101, 8)															// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Souffle, 0 , 1)
	GFX_FlagSet(i_GFX_Souffle, 2 , 1)
	GFX_Seti(i_GFX_Souffle, 13100, 25)														// Nombre maxi de sprites
	GFX_Seti(i_GFX_Souffle, 13106, 25) 														// Nombre de sprites à générer
	GFX_Setf(i_GFX_Souffle, 13003, 0.3500)													// duree de vie phase 1
	GFX_Setf(i_GFX_Souffle, 13004, 0.7500)													// duree de vie phase 2 
	GFX_Setf(i_GFX_Souffle, 13012, 0.7500)													// Life time random
	GFX_Seti(i_GFX_Souffle, 13107, 0)															// Tri des sprites
	GFX_Setf(i_GFX_Souffle, 13000, 3.0)														// Vitesse de croissance min
	GFX_Setf(i_GFX_Souffle, 13001, 6.0)														// Vitesse de croissance max
	tf_friction_grow = 0.5 / tf_taille
	GFX_Setf(i_GFX_Souffle, 13002, tf_friction_grow)										// Friction sur la croissance
	GFX_Setf(i_GFX_Souffle, 13005, 0.05)														// Taille min à la création
	GFX_Setf(i_GFX_Souffle, 13006, 0.2)														// Taille max à la création
	GFX_Setf(i_GFX_Souffle, 13007, -1.0)														// Gravité
	tf_friction_grow = 0.5 / tf_taille
	GFX_Setv(i_GFX_Souffle, 13203, cvector(0.5, 0.5, tf_friction_grow))				// Friction sur chaque axe
	GFX_Seti(i_GFX_Souffle, 13103, 0xFF8F8F8F)										// Couleur phase 1
	GFX_Seti(i_GFX_Souffle, 13104, 0x594F6B75)											// Couleur phase 2
	GFX_Seti(i_GFX_Souffle, 13105, 0x006F8B95)											// Couleur phase 3
	GFX_Setf(i_GFX_Souffle, 13009, 15.000000)												// Vitesse min
	GFX_Setf(i_GFX_Souffle, 13010, 40.000000)												// Vitesse max
	GFX_Setf(i_GFX_Souffle, 13011, tv_pos.z - 10.0)												// Hauteur du sol
	GFX_Setv(i_GFX_Souffle, 13200, tv_pos + cvector(0.0, 0.0, 0.0))					//Position de création
	tf_dispersion = 25
	GFX_Setv(i_GFX_Souffle, 13201, cvector(-tf_dispersion, -tf_dispersion, 15.0))	// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Souffle, 13202, cvector(tf_dispersion, tf_dispersion, 40.0))	// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Souffle, 13204, cvector(0.0, 0.0, 0.0))								// Vent
	GFX_Setv(i_GFX_Souffle, 13205, cvector(0.0, 0.0, 0.0))								// Vitesse de la position de création
	GFX_Setv(i_GFX_Souffle, 13206, cvector(0.0, 0.0, 0.0))								// Friction de la position
	GFX_Setf(i_GFX_Souffle, 13008, 0.000000)												// Taux de génération


	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 3 : rochers
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Rocks = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Rocks, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Rocks, 13101, 42)																	// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Rocks, 0 , 1)
	GFX_FlagSet(i_GFX_Rocks, 2 , 1)
	GFX_Seti(i_GFX_Rocks, 13100, tf_taille * 2)															// Nombre maxi de sprites
	GFX_Seti(i_GFX_Rocks, 13106, tf_taille * 2)															// Nombre de sprites à générer
	GFX_Setf(i_GFX_Rocks, 13003, 1.0)																	// duree de vie phase 1
	GFX_Setf(i_GFX_Rocks, 13004, 0.5)																	// duree de vie phase 2 
	GFX_Setf(i_GFX_Rocks, 13012, 0.750000)															// Life time random
	GFX_Seti(i_GFX_Rocks, 13107, 0)																		// Tri des sprites
	GFX_Setf(i_GFX_Rocks, 13000, 1.0)																	// Vitesse de croissance min
	GFX_Setf(i_GFX_Rocks, 13001, 1.2)																	// Vitesse de croissance max
	GFX_Setf(i_GFX_Rocks, 13002, 1.0)																	// Friction sur la croissance
	GFX_Setf(i_GFX_Rocks, 13005, 0.05)																	// Taille min à la création
	GFX_Setf(i_GFX_Rocks, 13006, 0.1)																	// Taille max à la création
	GFX_Setf(i_GFX_Rocks, 13007, -20.00000)															// Gravité
	GFX_Setv(i_GFX_Rocks, 13203, Cv_NullVector)													// Friction sur chaque axe
	GFX_Seti(i_GFX_Rocks, 13103, 0xFFFFFFFF)														// Couleur phase 1
	GFX_Seti(i_GFX_Rocks, 13104, 0xFFFFFFFF)														// Couleur phase 2
	GFX_Seti(i_GFX_Rocks, 13105, 0x00000000)														// Couleur phase 3
	GFX_Setf(i_GFX_Rocks, 13011, tv_pos.z - 10.0)													// Hauteur du sol
	GFX_Setv(i_GFX_Rocks, 13200, tv_pos)																// Position de création
	GFX_Setf(i_GFX_Rocks, 13009, tf_taille * 0.5)																	// Vitesse min
	GFX_Setf(i_GFX_Rocks, 13010, tf_taille * 5.0)																	// Vitesse max
	GFX_Setv(i_GFX_Rocks, 13201, cvector(-3.0, -3.0,7.5))											// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Rocks, 13202, cvector(3.0, 3.0, 12.5))											// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Rocks, 13204, cvector(0.00000, 0.00000, 0.00000))						// Vent
	GFX_Setv(i_GFX_Rocks, 13205, Cv_NullVector)													// Vitesse de la position de création
	GFX_Setv(i_GFX_Rocks, 13206, Cv_NullVector)													// Friction de la position
	GFX_Setv(i_GFX_Rocks, 13207, cvector(0.01,0.0,0.0))											// Volume de création 1
	GFX_Setv(i_GFX_Rocks, 13208, cvector(0.0,0.01,0.0))											// Volume de création 2
	GFX_Setf(i_GFX_Rocks, 13008, 0.00)																	// Taux de génération
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 6 : nuage central 2
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Nuage_cartoon2 = GFX_Add( 13)
	GFX_MaterialSet(i_GFX_Nuage_cartoon2, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Nuage_cartoon2, 13101,41)																		// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Nuage_cartoon2, 0 , 1)
	GFX_FlagSet(i_GFX_Nuage_cartoon2, 2 , 1)
	GFX_Seti(i_GFX_Nuage_cartoon2, 13100, 3)																		// Nombre maxi de sprites
	GFX_Seti(i_GFX_Nuage_cartoon2, 13106, 3)																		// Nombre de sprites à générer
	GFX_Setf(i_GFX_Nuage_cartoon2, 13003, 0.3)																		// duree de vie phase 1
	GFX_Setf(i_GFX_Nuage_cartoon2, 13004, 0.75)																	// duree de vie phase 2 
	GFX_Setf(i_GFX_Nuage_cartoon2, 13012, 0.750000)																// Life time random
	GFX_Seti(i_GFX_Nuage_cartoon2, 13107, 0)																		// Tri des sprites
	GFX_Setf(i_GFX_Nuage_cartoon2, 13000, 2.0000 * tf_taille / 5)																	// Vitesse de croissance min
	GFX_Setf(i_GFX_Nuage_cartoon2, 13001, 6.0000 * tf_taille / 5)																	// Vitesse de croissance max
	tf_friction_grow = 0.5 / tf_taille
	GFX_Setf(i_GFX_Nuage_cartoon2, 13002, 0.1)																		// Friction sur la croissance
	GFX_Setf(i_GFX_Nuage_cartoon2, 13005, 0.0)																		// Taille min à la création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13006, 1.2)																		// Taille max à la création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13007, 0.0)																		// Gravité
	GFX_Setv(i_GFX_Nuage_cartoon2, 13203, cvector(0.0,0.0,0.0))												// Friction sur chaque axe
	GFX_Seti(i_GFX_Nuage_cartoon2, 13103, 0x805F7B85)															// Couleur phase 1
	GFX_Seti(i_GFX_Nuage_cartoon2 , 13104, 0x805F7B85)														// Couleur phase 2  8FABB5
	GFX_Seti(i_GFX_Nuage_cartoon2, 13105, 0x008FABB5)														// Couleur phase 3
	GFX_Setf(i_GFX_Nuage_cartoon2, 13011, tv_pos.z - 10.0)																// Hauteur du sol
	GFX_Setv(i_GFX_Nuage_cartoon2, 13200, tv_pos + cvector(0.0, 0.0, 0.5))									// Position de création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13009, 0.5)																		// Vitesse min
	GFX_Setf(i_GFX_Nuage_cartoon2, 13010, 2.0)																		// Vitesse max
	GFX_Setv(i_GFX_Nuage_cartoon2, 13201, cvector(-0.5, -0.5, 0.5))											// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon2, 13202, cvector(0.5, 0.5, 1.0))												// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon2, 13204, cvector(0.0, 0.0, 0.0))												// Vent
	GFX_Setv(i_GFX_Nuage_cartoon2, 13205, cvector(0.0, 0.0, 0.0))												// Vitesse de la position de création
	GFX_Setv(i_GFX_Nuage_cartoon2, 13206, cvector(0.0, 0.0, 0.0))												// Friction de la position
	GFX_Setv(i_GFX_Nuage_cartoon2, 13207, cvector(0.01,0.0,0.0))												// Volume de création 1
	GFX_Setv(i_GFX_Nuage_cartoon2, 13208, cvector(0.0,0.01,0.0))												// Volume de création 2
	GFX_Setf(i_GFX_Nuage_cartoon2, 13008, 0.0)																		// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 						EXPLOSION LORS DU PAF RAYMAN -> SOL
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_PAF_SOL(float tf_taille, vector tv_pos)
{
	float tf_rayon_annexe, tf_vitesse, tf_friction_grow, tf_facteur
	int i_GFX_Grenade[1], i_GFX_Paf, i_GFX_Etincelles, i_GFX_Etincelles2, i_GFX_Rocks, i_GFX_Nuage_cartoon2
	int ti_nb_sprites, ti_rnd_ID

	//------------------------------------------------------------------------------------------------------------------
	// 					NUAGE EJECTION
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Grenade[0] = GFX_Add( 13)
	tf_rayon_annexe = 0.75 / tf_taille
	GFX_MaterialSet( i_GFX_Grenade[0], get_SFX_light_and_smoke, -1)
	GFX_Seti( i_GFX_Grenade[0], 13101,8)															// ID de material du SFX Lgt&Smk
	GFX_FlagSet( i_GFX_Grenade[0], 0 , 1)
	GFX_FlagSet( i_GFX_Grenade[0], 2 , 1)
	ti_nb_sprites = 10 * tf_taille
	GFX_Seti( i_GFX_Grenade[0], 13100, ti_nb_sprites )											// Nombre maxi de sprites
	GFX_Seti( i_GFX_Grenade[0], 13106, ti_nb_sprites )											// Nombre de sprites à générer
	GFX_Setf( i_GFX_Grenade[0], 13003, 0.0500000)												// duree de vie phase 1
	GFX_Setf( i_GFX_Grenade[0], 13004, 0.3500000)												// duree de vie phase 2 
	GFX_Setf( i_GFX_Grenade[0], 13012, 0.750000)												// Life time random
	GFX_Seti( i_GFX_Grenade[0], 13107, 0)															// Tri des sprites
	GFX_Setf( i_GFX_Grenade[0], 13000, 1.0000)													// Vitesse de croissance min
	GFX_Setf( i_GFX_Grenade[0], 13001, 5.0000)													// Vitesse de croissance max
	tf_friction_grow = 0.2 / tf_taille
	GFX_Setf( i_GFX_Grenade[0], 13002, tf_friction_grow)										// Friction sur la croissance
	GFX_Setf( i_GFX_Grenade[0], 13005, 0.100000)												// Taille min à la création
	GFX_Setf( i_GFX_Grenade[0], 13006, 0.200000)												// Taille max à la création
	GFX_Setf( i_GFX_Grenade[0], 13007, 0.50000)													// Gravité
	GFX_Setv( i_GFX_Grenade[0], 13203, cvector(tf_rayon_annexe, tf_rayon_annexe, 0.10))						// Friction sur chaque axe
	GFX_Seti( i_GFX_Grenade[0] , 13103, 0x50FFFFFF)											// Couleur phase 1
	GFX_Seti( i_GFX_Grenade[0] , 13104, 0x45FFFFFF)											// Couleur phase 2
	GFX_Seti( i_GFX_Grenade[0] , 13105, 0x00FFFFFF)											// Couleur phase 3
	GFX_Setf( i_GFX_Grenade[0], 13011, tv_pos.z)														// Hauteur du sol
	GFX_Setv( i_GFX_Grenade[0], 13200, tv_pos + cvector(0.0, 0.0, 0.5))		//Position de création
	tf_vitesse = 35.0
	tf_facteur = 10.0
	GFX_Setf( i_GFX_Grenade[0], 13009, MATH_RandFloat(tf_vitesse - tf_facteur, tf_vitesse + tf_facteur))												// Vitesse min
	GFX_Setf( i_GFX_Grenade[0], 13010, MATH_RandFloat(tf_vitesse - tf_facteur, tf_vitesse + tf_facteur))												// Vitesse max
	GFX_Setv( i_GFX_Grenade[0], 13201, cvector(-tf_vitesse, -tf_vitesse, 0.0))				// Vitesse min sur chaque axe
	GFX_Setv( i_GFX_Grenade[0], 13202, cvector(tf_vitesse, tf_vitesse, 0.0))				// Vitesse max sur chaque axe
	GFX_Setv( i_GFX_Grenade[0], 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv( i_GFX_Grenade[0], 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv( i_GFX_Grenade[0], 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setv( i_GFX_Grenade[0], 13207, cvector(0.01,0.0,0.0))								// Volume de création 1
	GFX_Setv( i_GFX_Grenade[0], 13208, cvector(0.0,0.01,0.0))								// Volume de création 2
	GFX_Setf( i_GFX_Grenade[0], 13008, 0.000000)												// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 					PAF
	//------------------------------------------------------------------------------------------------------------------
	ti_rnd_ID = MATH_RandInt(0,3)
	i_GFX_Paf = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Paf, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Paf, 13101,55+ ti_rnd_ID)											// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Paf, 0 , 1)
	GFX_FlagSet(i_GFX_Paf, 2 , 1)
	GFX_Seti(i_GFX_Paf, 13100, 1)															// Nombre maxi de sprites
	GFX_Seti(i_GFX_Paf, 13106, 1)															// Nombre de sprites à générer
	GFX_Setf(i_GFX_Paf, 13003, 0.060000)												// duree de vie phase 1
	GFX_Setf(i_GFX_Paf, 13004, 0.0050000)												// duree de vie phase 2 
	GFX_Setf(i_GFX_Paf, 13012, 0.750000)												// Life time random
	GFX_Seti(i_GFX_Paf, 13107, 0)															// Tri des sprites
	GFX_Setf(i_GFX_Paf, 13000, 10.0000)													// Vitesse de croissance min
	GFX_Setf(i_GFX_Paf, 13001, 35.0000)													// Vitesse de croissance max
	GFX_Setf(i_GFX_Paf, 13002, 0.75)														// Friction sur la croissance
	GFX_Setf(i_GFX_Paf, 13005, 0.0500000)												// Taille min à la création
	GFX_Setf(i_GFX_Paf, 13006, 0.0500000)												// Taille max à la création
	GFX_Setf(i_GFX_Paf, 13007, 0.00000)													// Gravité
	GFX_Setv(i_GFX_Paf, 13203, cvector(0,0,0))											// Friction sur chaque axe
	GFX_Seti(i_GFX_Paf, 13103, 0x00808080)											// Couleur phase 1
	GFX_Seti(i_GFX_Paf, 13104, 0x00808080)											// Couleur phase 2
	GFX_Seti(i_GFX_Paf, 13105, 0x00808080)											// Couleur phase 3
	GFX_Setf(i_GFX_Paf, 13011, tv_pos.z)												// Hauteur du sol
	GFX_Setv(i_GFX_Paf, 13200, tv_pos + cvector(0.0, 0.0, 0.25))					//Position de création
	GFX_Setf(i_GFX_Paf, 13009, 0.0)														// Vitesse min
	GFX_Setf(i_GFX_Paf, 13010, 0.0)														// Vitesse max
	GFX_Setv(i_GFX_Paf, 13201, cvector(0,0,0))											// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Paf, 13202, cvector(0,0,0))											// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Paf, 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv(i_GFX_Paf, 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv(i_GFX_Paf, 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setv(i_GFX_Paf, 13207, cvector(0.01,0.0,0.0))								// Volume de création 1
	GFX_Setv(i_GFX_Paf, 13208, cvector(0.0,0.01,0.0))								// Volume de création 2
	GFX_Setf(i_GFX_Paf, 13008, 0.000000)												// Taux de génération


	//------------------------------------------------------------------------------------------------------------------
	// 					ETINCELLES
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Etincelles = GFX_Add(9)
	GFX_FlagSet(i_GFX_Etincelles, 0,1)
	GFX_FlagSet(i_GFX_Etincelles, 2, 1)
	GFX_MaterialSet(i_GFX_Etincelles, get_SFX_light_and_smoke, 5)
	GFX_Seti(i_GFX_Etincelles, 9101, 0x40448DAB)																	// Couleur des particules
	GFX_Setv(i_GFX_Etincelles, 9200, tv_pos + cvector(0.0,0.0,0.25))											// Position
	GFX_Setv(i_GFX_Etincelles, 9201, cvector(0.0, 0.0, 1.0) )														// Axe principal de génération
	GFX_Setv(i_GFX_Etincelles, 9202, cvector(0, 0, 0.0))																// Gravité
	GFX_Seti(i_GFX_Etincelles, 9100, 5)																					// Nombre de particules max
	GFX_Seti (i_GFX_Etincelles, 9102, 10)																				// Flags
	GFX_Setf(i_GFX_Etincelles, 9000, 3.0 )																				// Angle du cône, en radians
	GFX_Setf(i_GFX_Etincelles, 9001, 50)																					// Vitesse min
	GFX_Setf(i_GFX_Etincelles, 9002, 60)																					// Vitesse max
	GFX_Setf(i_GFX_Etincelles, 9003, 0.8)																				// Friction
	GFX_Setf(i_GFX_Etincelles, 9004, MATH_RandFloat(0.05,0.1))												// Epaisseur des étincelles
	GFX_Setf(i_GFX_Etincelles, 9005, 0.2)																				// Temps de vie minimum
	GFX_Setf(i_GFX_Etincelles, 9006, 0.6)																				// Temps de vie max
	GFX_Setf(i_GFX_Etincelles, 9007, 3.5)																				// Multiplicateur de longueur
	GFX_Setf(i_GFX_Etincelles, 9008, 0.0)																				// Temps entre la génération de 2 étincelles
	GFX_Setf(i_GFX_Etincelles, 9009, 0.2)																				// Temps de mort minimum
	GFX_Setf(i_GFX_Etincelles, 9010, 0.2)																				// Temps de mort maximum

	//------------------------------------------------------------------------------------------------------------------
	// 					ETINCELLES 2
	//------------------------------------------------------------------------------------------------------------------
	//i_GFX_Etincelles2 = GFX_Add(9)
	GFX_FlagSet(i_GFX_Etincelles2, 0,1)
	GFX_FlagSet(i_GFX_Etincelles2, 2, 1)
	GFX_MaterialSet(i_GFX_Etincelles2, get_SFX_light_and_smoke, 5)
	GFX_Seti(i_GFX_Etincelles2, 9101, 0x40448DAB)																	// Couleur des particules
	GFX_Setv(i_GFX_Etincelles2, 9200, tv_pos + cvector(0.0,0.0,0.25))											// Position
	GFX_Setv(i_GFX_Etincelles2, 9201, cvector(0.0, 0.0, 1.0) )														// Axe principal de génération
	GFX_Setv(i_GFX_Etincelles2, 9202, cvector(0, 0, 0.0))															// Gravité
	GFX_Seti(i_GFX_Etincelles2, 9100, 15)																				// Nombre de particules max
	GFX_Seti (i_GFX_Etincelles2, 9102, 10)																				// Flags
	GFX_Setf(i_GFX_Etincelles2, 9000, 0.25)																				// Angle du cône, en radians
	GFX_Setf(i_GFX_Etincelles2, 9001, 50)																				// Vitesse min
	GFX_Setf(i_GFX_Etincelles2, 9002, 60)																				// Vitesse max
	GFX_Setf(i_GFX_Etincelles2, 9003, 0.8)																				// Friction
	GFX_Setf(i_GFX_Etincelles2, 9004, MATH_RandFloat(0.05,0.1))												// Epaisseur des étincelles
	GFX_Setf(i_GFX_Etincelles2, 9005, 0.2)																				// Temps de vie minimum
	GFX_Setf(i_GFX_Etincelles2, 9006, 0.6)																				// Temps de vie max
	GFX_Setf(i_GFX_Etincelles2, 9007, 15)																				// Multiplicateur de longueur
	GFX_Setf(i_GFX_Etincelles2, 9008, 0.0)																				// Temps entre la génération de 2 étincelles
	GFX_Setf(i_GFX_Etincelles2, 9009, 0.2)																				// Temps de mort minimum
	GFX_Setf(i_GFX_Etincelles2, 9010, 0.2)																				// Temps de mort maximum


	//------------------------------------------------------------------------------------------------------------------
	// 					ROCHERS
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Rocks = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Rocks, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Rocks, 13101, 42)															// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Rocks, 0 , 1)
	GFX_FlagSet(i_GFX_Rocks,  2 , 1)
	GFX_Seti(i_GFX_Rocks, 13100, 10)															// Nombre maxi de sprites
	GFX_Seti(i_GFX_Rocks, 13106, 10)															// Nombre de sprites à générer
	GFX_Setf(i_GFX_Rocks, 13003, 1.0)															// duree de vie phase 1
	GFX_Setf(i_GFX_Rocks, 13004, 0.5)															// duree de vie phase 2 
	GFX_Setf(i_GFX_Rocks, 13012, 0.750000)													// Life time random
	GFX_Seti(i_GFX_Rocks, 13107, 0)																// Tri des sprites
	GFX_Setf(i_GFX_Rocks, 13000, 1.0)															// Vitesse de croissance min
	GFX_Setf(i_GFX_Rocks, 13001, 1.2)															// Vitesse de croissance max
	GFX_Setf(i_GFX_Rocks, 13002, 1.0)															// Friction sur la croissance
	GFX_Setf(i_GFX_Rocks, 13005, 0.03)															// Taille min à la création
	GFX_Setf(i_GFX_Rocks, 13006, 0.07)															// Taille max à la création
	GFX_Setf(i_GFX_Rocks, 13007, -20.00000)													// Gravité
	GFX_Setv(i_GFX_Rocks, 13203, Cv_NullVector)											// Friction sur chaque axe
	GFX_Seti(i_GFX_Rocks, 13103, 0xFFFFFFFF)												// Couleur phase 1
	GFX_Seti(i_GFX_Rocks, 13104, 0xFFFFFFFF)												// Couleur phase 2
	GFX_Seti(i_GFX_Rocks, 13105, 0x00000000)												// Couleur phase 3
	GFX_Setf(i_GFX_Rocks, 13011, tv_pos.z)													// Hauteur du sol
	GFX_Setv(i_GFX_Rocks, 13200, tv_pos)														// Position de création
	GFX_Setf(i_GFX_Rocks, 13009, 5.0)															// Vitesse min
	GFX_Setf(i_GFX_Rocks, 13010, 30.0)															// Vitesse max
	GFX_Setv(i_GFX_Rocks, 13201, cvector(-15, -15, 5.0))									// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Rocks, 13202, cvector(15, 15, 15.0))									// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Rocks, 13204, cvector(0.00000, 0.00000, 0.00000))				// Vent
	GFX_Setv(i_GFX_Rocks, 13205, Cv_NullVector)											// Vitesse de la position de création
	GFX_Setv(i_GFX_Rocks, 13206, Cv_NullVector)											// Friction de la position
	GFX_Setv(i_GFX_Rocks, 13207, cvector(0.01,0.0,0.0))									// Volume de création 1
	GFX_Setv(i_GFX_Rocks, 13208, cvector(0.0,0.01,0.0))									// Volume de création 2
	GFX_Setf(i_GFX_Rocks, 13008, 0.00)															// Taux de génération



	//------------------------------------------------------------------------------------------------------------------
	// 					NUAGE CENTRAL
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Nuage_cartoon2 = GFX_Add( 13)
	GFX_MaterialSet(i_GFX_Nuage_cartoon2, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Nuage_cartoon2, 13101,8)																			// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Nuage_cartoon2, 0 , 1)
	GFX_FlagSet(i_GFX_Nuage_cartoon2, 2 , 1)
	GFX_Seti(i_GFX_Nuage_cartoon2, 13100, 1)																		// Nombre maxi de sprites
	GFX_Seti(i_GFX_Nuage_cartoon2, 13106, 1)																		// Nombre de sprites à générer
	GFX_Setf(i_GFX_Nuage_cartoon2, 13003, 0.3)																		// duree de vie phase 1
	GFX_Setf(i_GFX_Nuage_cartoon2, 13004, 0.2)																		// duree de vie phase 2 
	GFX_Setf(i_GFX_Nuage_cartoon2, 13012, 0.750000)																// Life time random
	GFX_Seti(i_GFX_Nuage_cartoon2, 13107, 0)																		// Tri des sprites
	GFX_Setf(i_GFX_Nuage_cartoon2, 13000, 10.0000)																// Vitesse de croissance min
	GFX_Setf(i_GFX_Nuage_cartoon2, 13001, 10.0000)																// Vitesse de croissance max
	GFX_Setf(i_GFX_Nuage_cartoon2, 13002, 0.05)																	// Friction sur la croissance
	GFX_Setf(i_GFX_Nuage_cartoon2, 13005, 0.0)																		// Taille min à la création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13006, 0.0)																		// Taille max à la création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13007, 0.0)																		// Gravité
	GFX_Setv(i_GFX_Nuage_cartoon2, 13203, cvector(1.0,1.0,1.0))												// Friction sur chaque axe
	GFX_Seti(i_GFX_Nuage_cartoon2, 13103, 0x00FFFFFF)														// Couleur phase 1
	GFX_Seti(i_GFX_Nuage_cartoon2 , 13104, 0x2FFFFFFF)														// Couleur phase 2
	GFX_Seti(i_GFX_Nuage_cartoon2, 13105, 0x00FFFFFF)														// Couleur phase 3
	GFX_Setf(i_GFX_Nuage_cartoon2, 13011, tv_pos.z)																// Hauteur du sol
	GFX_Setv(i_GFX_Nuage_cartoon2, 13200, tv_pos + cvector(0.0, 0.0, 1.0))						// Position de création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13009, 0.0)																		// Vitesse min
	GFX_Setf(i_GFX_Nuage_cartoon2, 13010, 0.0)																		// Vitesse max
	GFX_Setv(i_GFX_Nuage_cartoon2, 13201, cvector(0.0, 0.0, 0.0))												// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon2, 13202, cvector(0.0, 0.0, 0.0))												// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon2, 13204, cvector(0.0, 0.0, 0.0))												// Vent
	GFX_Setv(i_GFX_Nuage_cartoon2, 13205, cvector(0.0, 0.0, 0.0))												// Vitesse de la position de création
	GFX_Setv(i_GFX_Nuage_cartoon2, 13206, cvector(0.0, 0.0, 0.0))												// Friction de la position
	GFX_Setv(i_GFX_Nuage_cartoon2, 13207, cvector(0.01,0.0,0.0))												// Volume de création 1
	GFX_Setv(i_GFX_Nuage_cartoon2, 13208, cvector(0.0,0.01,0.0))												// Volume de création 2
	GFX_Setf(i_GFX_Nuage_cartoon2, 13008, 0.0)																		// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 						EXPLOSION REALISTE
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_REALISTE(float tf_largeur_anneau, float tf_hauteur, vector tv_pos)
{
	float			tf_facteur, tf_vitesse, tf_rayon_annexe, tf_friction_grow, tf_haut_col
	int				ti_nb_sprites, i_GFX_Grenade[6]
	
	//------------------------------------------------------------------------------------------------------------------
	// 						GENERATEUR DE PARCITULES 1 : nuage inférieur
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Grenade[0] = GFX_Add( 13)
	tf_rayon_annexe = 0.75 / tf_largeur_anneau
	GFX_MaterialSet( i_GFX_Grenade[0], get_SFX_light_and_smoke, -1)
	GFX_Seti( i_GFX_Grenade[0], 13101,41)															// ID de material du SFX Lgt&Smk
	GFX_FlagSet( i_GFX_Grenade[0], 0 , 1)
	GFX_FlagSet( i_GFX_Grenade[0], 2 , 1)
	ti_nb_sprites = 10 * tf_largeur_anneau
	GFX_Seti( i_GFX_Grenade[0], 13100, ti_nb_sprites )											// Nombre maxi de sprites
	GFX_Seti( i_GFX_Grenade[0], 13106, ti_nb_sprites )											// Nombre de sprites à générer
	GFX_Setf( i_GFX_Grenade[0], 13003, 0.500000)												// duree de vie phase 1
	GFX_Setf( i_GFX_Grenade[0], 13004, 1.200000)												// duree de vie phase 2 
	GFX_Setf( i_GFX_Grenade[0], 13012, 0.750000)												// Life time random
	GFX_Seti( i_GFX_Grenade[0], 13107, 0)															// Tri des sprites
	GFX_Setf( i_GFX_Grenade[0], 13000, 1.0000)													// Vitesse de croissance min
	GFX_Setf( i_GFX_Grenade[0], 13001, 4.0000)													// Vitesse de croissance max
	tf_friction_grow = 0.3 / tf_largeur_anneau
	GFX_Setf( i_GFX_Grenade[0], 13002, tf_friction_grow)										// Friction sur la croissance
	GFX_Setf( i_GFX_Grenade[0], 13005, 0.100000)												// Taille min à la création
	GFX_Setf( i_GFX_Grenade[0], 13006, 0.200000)												// Taille max à la création
	GFX_Setf( i_GFX_Grenade[0], 13007, 0.50000)													// Gravité
	GFX_Setv( i_GFX_Grenade[0], 13203, cvector(tf_rayon_annexe, tf_rayon_annexe, 0.10))						// Friction sur chaque axe
	GFX_Seti( i_GFX_Grenade[0] , 13103, 0xB9344853)											// Couleur phase 1
	GFX_Seti( i_GFX_Grenade[0] , 13104, 0xB0344853)											// Couleur phase 2
	GFX_Seti( i_GFX_Grenade[0] , 13105, 0x00344853)											// Couleur phase 3
	GFX_Setf( i_GFX_Grenade[0], 13011, tv_pos.z)													// Hauteur du sol
	GFX_Setv( i_GFX_Grenade[0], 13200, tv_pos + cvector(0.0, 0.0, 0.5))		//Position de création
	tf_vitesse = 25.0
	GFX_Setf( i_GFX_Grenade[0], 13009, tf_vitesse )												// Vitesse min
	GFX_Setf( i_GFX_Grenade[0], 13010, tf_vitesse )												// Vitesse max
	GFX_Setv( i_GFX_Grenade[0], 13201, cvector(tf_vitesse, tf_vitesse, 0.0))				// Vitesse min sur chaque axe
	GFX_Setv( i_GFX_Grenade[0], 13202, cvector(-tf_vitesse, -tf_vitesse, 0.0))				// Vitesse max sur chaque axe
	GFX_Setv( i_GFX_Grenade[0], 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv( i_GFX_Grenade[0], 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv( i_GFX_Grenade[0], 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setv( i_GFX_Grenade[0], 13207, cvector(0.01,0.0,0.0))								// Volume de création 1
	GFX_Setv( i_GFX_Grenade[0], 13208, cvector(0.0,0.01,0.0))								// Volume de création 2
	GFX_Setf( i_GFX_Grenade[0], 13008, 0.000000)												// Taux de génération

	
	//------------------------------------------------------------------------------------------------------------------
	// 						GENERATEUR DE PARCITULES 2 : base colonne
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Grenade[1] = GFX_Add( 13)
	GFX_MaterialSet( i_GFX_Grenade[1], get_SFX_light_and_smoke, -1)
	GFX_Seti( i_GFX_Grenade[1], 13101, 41)															// ID de material du SFX Lgt&Smk
	GFX_FlagSet( i_GFX_Grenade[1], 0 , 3)
	GFX_FlagSet( i_GFX_Grenade[1], 2 , 3)
	GFX_Seti( i_GFX_Grenade[1], 13100, 3)																// Nombre maxi de sprites
	GFX_Seti( i_GFX_Grenade[1], 13106, 3) 																// Nombre de sprites à générer
	GFX_Setf( i_GFX_Grenade[1], 13003, 0.200000)													// duree de vie phase 1
	GFX_Setf( i_GFX_Grenade[1], 13004, 0.950000)													// duree de vie phase 2 
	GFX_Setf( i_GFX_Grenade[1], 13012, 0.750000)													// Life time random
	GFX_Seti( i_GFX_Grenade[1], 13107, 0)																// Tri des sprites
	GFX_Setf( i_GFX_Grenade[1], 13000, 1.2000)														// Vitesse de croissance min
	GFX_Setf( i_GFX_Grenade[1], 13001, 2.0000)														// Vitesse de croissance max
	tf_friction_grow = 0.1/ tf_largeur_anneau
	GFX_Setf( i_GFX_Grenade[1], 13002 ,tf_friction_grow)											// Friction sur la croissance
	GFX_Setf( i_GFX_Grenade[1], 13005, 0.20000)														// Taille min à la création
	GFX_Setf( i_GFX_Grenade[1], 13006, 0.60000)														// Taille max à la création
	GFX_Setf( i_GFX_Grenade[1], 13007, -1.0)															// Gravité
	GFX_Setv( i_GFX_Grenade[1], 13203, cvector(0.0, 0.0, 0.050))								// Friction sur chaque axe
	GFX_Seti( i_GFX_Grenade[1], 13103, 0x00696969)												// Couleur phase 1
	GFX_Seti( i_GFX_Grenade[1], 13104, 0xB9316685)												// Couleur phase 2
	GFX_Seti( i_GFX_Grenade[1], 13105, 0x00316685)												// Couleur phase 3
	GFX_Setf( i_GFX_Grenade[1], 13009, 1.000000)													// Vitesse min
	GFX_Setf( i_GFX_Grenade[1], 13010, 4.000000)													// Vitesse max
	GFX_Setf( i_GFX_Grenade[1], 13011, tv_pos.z)														// Hauteur du sol
	GFX_Setv( i_GFX_Grenade[1], 13200, tv_pos + cvector(0.00000, 0.00000, 0.00000))	//Position de création
	GFX_Setv( i_GFX_Grenade[1], 13201, cvector(0.00000, 0.00000, 0.02500))				// Vitesse min sur chaque axe
	GFX_Setv( i_GFX_Grenade[1], 13202, cvector(0.00000, 0.00000, 0.32000))				// Vitesse max sur chaque axe
	GFX_Setv( i_GFX_Grenade[1], 13204, cvector(0.00000, 0.00000, 0.00000))				// Vent
	GFX_Setv( i_GFX_Grenade[1], 13205, cvector(0.00000, 0.00000, 0.00000))				// Vitesse de la position de création
	GFX_Setv( i_GFX_Grenade[1], 13206, cvector(0.00000, 0.00000, 0.00000))				// Friction de la position
	GFX_Setf( i_GFX_Grenade[1], 13008, 0.000000)													// Taux de génération
		
		
	//------------------------------------------------------------------------------------------------------------------
	// 						GENERATEUR DE PARCITULES 3 : colonne
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Grenade[2] = GFX_Add( 13)
	GFX_MaterialSet( i_GFX_Grenade[2] , get_SFX_light_and_smoke, -1)
	GFX_Seti( i_GFX_Grenade[2] , 13101, 41)														// ID de material du SFX Lgt&Smk
	GFX_FlagSet( i_GFX_Grenade[2] , 0 , 1)
	GFX_FlagSet( i_GFX_Grenade[2] , 2 , 1)
	ti_nb_sprites = 2 * tf_hauteur
	GFX_Seti( i_GFX_Grenade[2] , 13100, ti_nb_sprites )											// Nombre maxi de sprites
	GFX_Seti( i_GFX_Grenade[2] , 13106, ti_nb_sprites ) 										// Nombre de sprites à générer
	GFX_Setf( i_GFX_Grenade[2] , 13003, 0.2000)													// duree de vie phase 1
	GFX_Setf( i_GFX_Grenade[2] , 13004, 1.0000)													// duree de vie phase 2 
	GFX_Setf( i_GFX_Grenade[2] , 13012, 0.7500)													// Life time random
	GFX_Seti( i_GFX_Grenade[2] , 13107, 0)															// Tri des sprites
	GFX_Setf( i_GFX_Grenade[2] , 13000, 0.4500)													// Vitesse de croissance min
	GFX_Setf( i_GFX_Grenade[2] , 13001, 0.7500)													// Vitesse de croissance max
	tf_friction_grow = 0.14 * tf_hauteur
	GFX_Setf( i_GFX_Grenade[2] , 13002, tf_friction_grow)										// Friction sur la croissance
	GFX_Setf( i_GFX_Grenade[2] , 13005, tf_friction_grow*0.6)									// Taille min à la création
	GFX_Setf( i_GFX_Grenade[2] , 13006, tf_friction_grow*1.4)									// Taille max à la création
	GFX_Setf( i_GFX_Grenade[2] , 13007, -1.0)														// Gravité
	tf_haut_col = 0.125 / tf_hauteur
	GFX_Setv( i_GFX_Grenade[2] , 13203, cvector(0.0, 0.0, tf_haut_col))					// Friction sur chaque axe
	GFX_Seti( i_GFX_Grenade[2] , 13103, 0x00696969)											// Couleur phase 1
	GFX_Seti( i_GFX_Grenade[2] , 13104, 0xB9316685)											// Couleur phase 2
	GFX_Seti( i_GFX_Grenade[2] , 13105, 0x00557A88)											// Couleur phase 3
	GFX_Setf( i_GFX_Grenade[2] , 13009, 3.000000)												// Vitesse min
	GFX_Setf( i_GFX_Grenade[2] , 13010, 12.000000)												// Vitesse max
	GFX_Setf( i_GFX_Grenade[2] , 13011, tv_pos.z)												// Hauteur du sol
	GFX_Setv( i_GFX_Grenade[2] , 13200, tv_pos + cvector(0.00000, 0.00000, 0.00000))	//Position de création
	GFX_Setv( i_GFX_Grenade[2] , 13201, cvector(0.00000, 0.00000, 1.5000))				// Vitesse min sur chaque axe
	GFX_Setv( i_GFX_Grenade[2] , 13202, cvector(0.00000, 0.00000, 3.0000))				// Vitesse max sur chaque axe
	GFX_Setv( i_GFX_Grenade[2] , 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv( i_GFX_Grenade[2] , 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv( i_GFX_Grenade[2] , 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setf( i_GFX_Grenade[2] , 13008, 0.000000)												// Taux de génération

		
	//------------------------------------------------------------------------------------------------------------------
	// 						GENERATEUR DE PARCITULES 4 : feu intérieur
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Grenade[3] = GFX_Add( 13)
	GFX_MaterialSet( i_GFX_Grenade[3] , get_SFX_light_and_smoke, -1)
	GFX_Seti( i_GFX_Grenade[3] , 13101, 19)														// ID de material du SFX Lgt&Smk
	GFX_FlagSet( i_GFX_Grenade[3] , 0 , 1)
	GFX_FlagSet( i_GFX_Grenade[3] , 2 , 1)
	GFX_Seti( i_GFX_Grenade[3], 13100, ti_nb_sprites )											// Nombre maxi de sprites
	GFX_Seti( i_GFX_Grenade[3], 13106, ti_nb_sprites ) 											// Nombre de sprites à générer
	GFX_Setf( i_GFX_Grenade[3], 13003, 0.200000)												// duree de vie phase 1
	GFX_Setf( i_GFX_Grenade[3], 13004, 1.000000)												// duree de vie phase 2 
	GFX_Setf( i_GFX_Grenade[3], 13012, 0.750000)												// Life time random
	GFX_Seti( i_GFX_Grenade[3], 13107, 0)															// Tri des sprites
	GFX_Setf( i_GFX_Grenade[3], 13000, 0.45000)													// Vitesse de croissance min
	GFX_Setf( i_GFX_Grenade[3], 13001, 0.75000)													// Vitesse de croissance max
	GFX_Setf( i_GFX_Grenade[3], 13002 ,tf_friction_grow)										// Friction sur la croissance
	GFX_Setf( i_GFX_Grenade[3], 13005, tf_friction_grow * 0.4)								// Taille min à la création
	GFX_Setf( i_GFX_Grenade[3], 13006, tf_friction_grow * 0.8)								// Taille max à la création
	GFX_Setf( i_GFX_Grenade[3], 13007, -1.0)														// Gravité
	GFX_Setv( i_GFX_Grenade[3], 13203, cvector(0.0, 0.0, tf_haut_col))						// Friction sur chaque axe
	GFX_Seti( i_GFX_Grenade[3], 13103, 0x00696969)											// Couleur phase 1
	GFX_Seti( i_GFX_Grenade[3], 13104, 0xB9316685)											// Couleur phase 2
	GFX_Seti( i_GFX_Grenade[3], 13105, 0x00000000)											// Couleur phase 3
	GFX_Setf( i_GFX_Grenade[3], 13009, 3.000000)												// Vitesse min
	GFX_Setf( i_GFX_Grenade[3], 13010, 12.000000)												// Vitesse max
	GFX_Setf( i_GFX_Grenade[3], 13011, tv_pos.z)													// Hauteur du sol
	GFX_Setv( i_GFX_Grenade[3], 13200, tv_pos + cvector(0.0, 0.0, 0.0))		//Position de création
	GFX_Setv( i_GFX_Grenade[3], 13201, cvector(0.00000, 0.00000, 1.5000))				// Vitesse min sur chaque axe
	GFX_Setv( i_GFX_Grenade[3], 13202, cvector(0.00000, 0.00000, 3.0000))				// Vitesse max sur chaque axe
	GFX_Setv( i_GFX_Grenade[3], 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv( i_GFX_Grenade[3], 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv( i_GFX_Grenade[3], 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setf( i_GFX_Grenade[3], 13008, 0.000000)												// Taux de génération


	//------------------------------------------------------------------------------------------------------------------
	// 						GENERATEUR DE PARCITULES 5 : feu base colonne
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Grenade[4]= GFX_Add( 13)
	GFX_MaterialSet( i_GFX_Grenade[4], get_SFX_light_and_smoke, -1)
	GFX_Seti( i_GFX_Grenade[4], 13101, 19)														// ID de material du SFX Lgt&Smk
	GFX_FlagSet( i_GFX_Grenade[4], 0 , 1)
	GFX_FlagSet( i_GFX_Grenade[4], 2 , 1)
	GFX_Seti( i_GFX_Grenade[4], 13100, 3)														// Nombre maxi de sprites
	GFX_Seti( i_GFX_Grenade[4], 13106, 3) 														// Nombre de sprites à générer
	GFX_Setf( i_GFX_Grenade[4], 13003, 0.150000)											// duree de vie phase 1
	GFX_Setf( i_GFX_Grenade[4], 13004, 0.55000)												// duree de vie phase 2 
	GFX_Setf( i_GFX_Grenade[4], 13012, 0.750000)											// Life time random
	GFX_Seti( i_GFX_Grenade[4], 13107, 0)														// Tri des sprites
	GFX_Setf( i_GFX_Grenade[4], 13000, -1.2000)												// Vitesse de croissance min
	GFX_Setf( i_GFX_Grenade[4], 13001, 2.0000)												// Vitesse de croissance max
	GFX_Setf( i_GFX_Grenade[4], 13002 ,0.0600000)											// Friction sur la croissance
	GFX_Setf( i_GFX_Grenade[4], 13005, 0.60000)												// Taille min à la création
	GFX_Setf( i_GFX_Grenade[4], 13006, 1.200000)											// Taille max à la création
	GFX_Setf( i_GFX_Grenade[4], 13007, -1.0)													// Gravité
	GFX_Setv( i_GFX_Grenade[4], 13203, cvector(0.0, 0.0, 0.050))						// Friction sur chaque axe
	GFX_Seti( i_GFX_Grenade[4], 13103, 0xFFFFFFFF)										// Couleur phase 1
	GFX_Seti( i_GFX_Grenade[4], 13104, 0x00000000)										// Couleur phase 2	316685
	GFX_Seti( i_GFX_Grenade[4], 13105, 0x00000000)										// Couleur phase 3
	GFX_Setf( i_GFX_Grenade[4], 13009, 1.000000)											// Vitesse min
	GFX_Setf( i_GFX_Grenade[4] , 13010, 4.000000)											// Vitesse max
	GFX_Setf( i_GFX_Grenade[4] , 13011, tv_pos.z)													// Hauteur du sol
	GFX_Setv( i_GFX_Grenade[4] , 13200, tv_pos + cvector(0.0, 0.0, 0.0))	//Position de création
	GFX_Setv( i_GFX_Grenade[4], 13201, cvector(0.00000, 0.00000, 0.02500))		// Vitesse min sur chaque axe
	GFX_Setv( i_GFX_Grenade[4], 13202, cvector(0.00000, 0.00000, 0.32000))		// Vitesse max sur chaque axe
	GFX_Setv( i_GFX_Grenade[4], 13204, cvector(0.00000, 0.00000, 0.00000))		// Vent
	GFX_Setv( i_GFX_Grenade[4], 13205, cvector(0.00000, 0.00000, 0.00000))		// Vitesse de la position de création
	GFX_Setv( i_GFX_Grenade[4], 13206, cvector(0.00000, 0.00000, 0.00000))		// Friction de la position
	GFX_Setf( i_GFX_Grenade[4], 13008, 0.000000)											// Taux de génération


	//------------------------------------------------------------------------------------------------------------------
	// 						GENERATEUR DE PARCITULES 6 : nuage supérieur
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Grenade[5] = GFX_Add( 13)
	GFX_MaterialSet( i_GFX_Grenade[5] , get_SFX_light_and_smoke, -1)
	GFX_Seti( i_GFX_Grenade[5], 13101,41)															// ID de material du SFX Lgt&Smk
	GFX_FlagSet( i_GFX_Grenade[5], 0 , 1)
	GFX_FlagSet( i_GFX_Grenade[5], 2 , 1)
	GFX_Seti( i_GFX_Grenade[5], 13100, ti_nb_sprites+3)										// Nombre maxi de sprites
	GFX_Seti( i_GFX_Grenade[5], 13106, ti_nb_sprites+3)										// Nombre de sprites à générer
	GFX_Setf( i_GFX_Grenade[5], 13003, 0.800000)												// duree de vie phase 1
	GFX_Setf( i_GFX_Grenade[5], 13004, 0.800000)												// duree de vie phase 2 
	GFX_Setf( i_GFX_Grenade[5], 13012, 0.750000)												// Life time random
	GFX_Seti( i_GFX_Grenade[5], 13107, 0)															// Tri des sprites
	GFX_Setf( i_GFX_Grenade[5], 13000, 2.0000)													// Vitesse de croissance min
	GFX_Setf( i_GFX_Grenade[5], 13001, 2.0000)													// Vitesse de croissance max
	tf_friction_grow = 0.1 / tf_hauteur
	GFX_Setf( i_GFX_Grenade[5], 13002, tf_friction_grow)										// Friction sur la croissance
	GFX_Setf( i_GFX_Grenade[5], 13005, 0.000000)												// Taille min à la création
	GFX_Setf( i_GFX_Grenade[5], 13006, 0.100000)												// Taille max à la création
	GFX_Setf( i_GFX_Grenade[5], 13007, 2.00000)													// Gravité
	GFX_Setv( i_GFX_Grenade[5], 13203, cvector(tf_haut_col*8 - 0.01, tf_haut_col*8 - 0.01, tf_haut_col*2.0))			// Friction sur chaque axe
	GFX_Seti( i_GFX_Grenade[5] , 13103, 0x00344853)											// Couleur phase 1
	GFX_Seti( i_GFX_Grenade[5] , 13104, 0xFF344853)											// Couleur phase 2
	GFX_Seti( i_GFX_Grenade[5] , 13105, 0x00000000)											// Couleur phase 3
	GFX_Setf( i_GFX_Grenade[5], 13011, tv_pos.z)														// Hauteur du sol
	GFX_Setv( i_GFX_Grenade[5], 13200, tv_pos + cvector(0.0, 0.0, 0.0))		//Position de création
	tf_vitesse = 20.0
	GFX_Setf( i_GFX_Grenade[5], 13009, tf_vitesse )												// Vitesse min
	GFX_Setf( i_GFX_Grenade[5], 13010, tf_vitesse )												// Vitesse max
	GFX_Setv( i_GFX_Grenade[5], 13201, cvector(-tf_vitesse, -tf_vitesse, tf_vitesse ))	// Vitesse min sur chaque axe
	GFX_Setv( i_GFX_Grenade[5], 13202, cvector(tf_vitesse, tf_vitesse, tf_vitesse ))		// Vitesse max sur chaque axe
	GFX_Setv( i_GFX_Grenade[5], 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv( i_GFX_Grenade[5], 13205, cvector(0.00000, 0.00000, 0.0000))				// Vitesse de la position de création
	GFX_Setv( i_GFX_Grenade[5], 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setv( i_GFX_Grenade[5], 13207, cvector(0.1,0.0,0.0))									// Volume de création 1
	GFX_Setv( i_GFX_Grenade[5], 13208, cvector(0.0,0.1,0.0))									// Volume de création 2
	GFX_Setf( i_GFX_Grenade[5], 13008, 0.000000)												// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 						SPLASH, PREMIERE VERSION
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_SPLASH01(vector tv_pos)
{
	float		tf_facteur
	int 		i_GFX_Spawn1, i_GFX_Spawn2, i_tmp_mat

	//------------------------------------------------------------------------------------------------------------------
	// 						GENERATEUR DE PARCITULES 1
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Spawn1 = GFX_Add( 13)
	GFX_MaterialSet( i_GFX_Spawn1, get_SFX_light_and_smoke, -1)

	i_tmp_mat = MATH_RandInt(0,2)

	if (i_tmp_mat == 0)
		GFX_Seti(i_GFX_Spawn1, 13101,45)													// ID de material du SFX Lgt&Smk
	else
		GFX_Seti(i_GFX_Spawn1, 13101,37)													// ID de material du SFX Lgt&Smk

	GFX_FlagSet( i_GFX_Spawn1, 0 , 1)
	GFX_FlagSet( i_GFX_Spawn1, 2 , 1)
	GFX_Seti( i_GFX_Spawn1, 13100,15)														// Nombre maxi de sprites
	GFX_Seti( i_GFX_Spawn1, 13106,15) 														// Nombre de sprites à générer
	GFX_Setf( i_GFX_Spawn1, 13003,0.400000)												// duree de vie phase 1
	GFX_Setf( i_GFX_Spawn1, 13004,0.55000)												// duree de vie phase 2 
	GFX_Setf( i_GFX_Spawn1, 13012,0.750000)												// Life time random
	GFX_Seti( i_GFX_Spawn1, 13107,0)														// Tri des sprites
	GFX_Setf( i_GFX_Spawn1, 13000,0.3250000)											// Vitesse de croissance min
	GFX_Setf( i_GFX_Spawn1, 13001,0.900000)												// Vitesse de croissance max
	GFX_Setf( i_GFX_Spawn1, 13002,0.0100000)											// Friction sur la croissance
	GFX_Setf( i_GFX_Spawn1, 13005,0.100000)												// Taille min à la création
	GFX_Setf( i_GFX_Spawn1, 13006,0.800000)												// Taille max à la création
	GFX_Setf( i_GFX_Spawn1, 13007,-1.000000)											// Gravité
	GFX_Setv( i_GFX_Spawn1, 13203,cvector(0.10, 0.10, 0.10))						// Friction sur chaque axe
	GFX_Seti( i_GFX_Spawn1 , 13103,0xB9FFFFFF)										// Couleur phase 1
	GFX_Seti( i_GFX_Spawn1 , 13104,0xB9FFFFFF)										// Couleur phase 2
	GFX_Seti( i_GFX_Spawn1 , 13105,0x00FFFFFF)										// Couleur phase 3
	GFX_Setf( i_GFX_Spawn1, 13009,-2.5000000)											// Vitesse min
	GFX_Setf( i_GFX_Spawn1, 13010,-5.000000)											// Vitesse max
	GFX_Setf( i_GFX_Spawn1, 13011,tv_pos.z - 10.0)										// Hauteur du sol
	GFX_Setv( i_GFX_Spawn1, 13200, tv_pos + cvector(0.0, 0.0, 0.0))				//Position de création
	GFX_Setv( i_GFX_Spawn1, 13201,cvector(0.00000, 0.00000, -0.075000))		// Vitesse min sur chaque axe
	GFX_Setv( i_GFX_Spawn1, 13202,cvector(0.00000, 0.00000, -0.175000))		// Vitesse max sur chaque axe
	GFX_Setv( i_GFX_Spawn1, 13204,cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv( i_GFX_Spawn1, 13205,cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv( i_GFX_Spawn1, 13206,cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	tf_facteur = MATH_RandFloat(1.0,2.0)
	GFX_Setv( i_GFX_Spawn1, 13207,0.150000 * OBJ_HorizonGet()*tf_facteur)	// Volume de création 1
	GFX_Setv( i_GFX_Spawn1, 13208,0.150000 * OBJ_SightGet()*tf_facteur)		// Volume de création 2
	GFX_Setv( i_GFX_Spawn1, 13209,0.100000 * OBJ_BankingGet()*tf_facteur)	// Volume de création 3
	GFX_Setf( i_GFX_Spawn1, 13008,0.000000)												// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 						GENERATEUR DE PARCITULES 2
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Spawn2= GFX_Add( 13)
	GFX_MaterialSet( i_GFX_Spawn2, get_SFX_light_and_smoke, -1)
	
	i_tmp_mat = MATH_RandInt(0,2)

	if (i_tmp_mat == 0)
		GFX_Seti(i_GFX_Spawn2, 13101,45)													// ID de material du SFX Lgt&Smk
	else
		GFX_Seti(i_GFX_Spawn2, 13101,37)													// ID de material du SFX Lgt&Smk

	GFX_FlagSet( i_GFX_Spawn2, 0 , 1)
	GFX_FlagSet( i_GFX_Spawn2, 2 , 1)
	GFX_Seti(i_GFX_Spawn2, 13100,5)														// Nombre maxi de sprites
	GFX_Seti(i_GFX_Spawn2, 13106,5) 														// Nombre de sprites à générer
	GFX_Setf(i_GFX_Spawn2, 13003,0.400000)												// duree de vie phase 1
	GFX_Setf(i_GFX_Spawn2, 13004,0.750000)												// duree de vie phase 2 
	GFX_Setf(i_GFX_Spawn2, 13012,0.750000)												// Life time random
	GFX_Seti(i_GFX_Spawn2, 13107,0)														// Tri des sprites
	GFX_Setf(i_GFX_Spawn2, 13000,0.45000)												// Vitesse de croissance min
	GFX_Setf(i_GFX_Spawn2, 13001,2.00000)												// Vitesse de croissance max
	GFX_Setf(i_GFX_Spawn2, 13002,0.0200000)											// Friction sur la croissance
	GFX_Setf(i_GFX_Spawn2, 13005,0.10000)												// Taille min à la création
	GFX_Setf(i_GFX_Spawn2, 13006,0.400000)												// Taille max à la création
	GFX_Setf(i_GFX_Spawn2, 13007,-2.500000)												// Gravité
	GFX_Setv(i_GFX_Spawn2, 13203,cvector(0.0750, 0.0750, 0.0150))				// Friction sur chaque axe
	GFX_Seti(i_GFX_Spawn2, 13103,0xFFFFFFFF)										// Couleur phase 1
	GFX_Seti(i_GFX_Spawn2, 13104,0xB9FFFFFF)										// Couleur phase 2
	GFX_Seti(i_GFX_Spawn2, 13105,0x00FFFFFF)										// Couleur phase 3
	GFX_Setf(i_GFX_Spawn2, 13009,-2.5000000)											// Vitesse min
	GFX_Setf(i_GFX_Spawn2 , 13010,-5.000000)											// Vitesse max
	GFX_Setf(i_GFX_Spawn2 , 13011,tv_pos.z - 10.0)													// Hauteur du sol
	GFX_Setv(i_GFX_Spawn2 , 13200, tv_pos + cvector(0.00000, 0.00000, 0.00000))	//Position de création
	GFX_Setv(i_GFX_Spawn2, 13201,cvector(0.00000, 0.00000, -0.15000))			// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Spawn2, 13202,cvector(0.00000, 0.00000, -0.35000))			// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Spawn2, 13204,cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv(i_GFX_Spawn2, 13205,cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv(i_GFX_Spawn2, 13206,cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setf(i_GFX_Spawn2, 13008,0.000000)												// Taux de génération
}

//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 						SPLASH, DEUXIEME VERSION
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_SPLASH02(vector tv_pos)
{
            float                  tf_facteur
            int                    i_GFX_Splash1, i_GFX_Splash2

            i_GFX_Splash1 = GFX_Add( 13)
            GFX_MaterialSet( i_GFX_Splash1, get_SFX_light_and_smoke, -1)
            GFX_Seti( i_GFX_Splash1, 13101,45)                                                             // ID de material du SFX Lgt&Smk
            GFX_FlagSet( i_GFX_Splash1, 0 , 1)
            GFX_FlagSet( i_GFX_Splash1, 2 , 1)
            GFX_Seti( i_GFX_Splash1, 13100,25)                                                              // Nombre maxi de sprites
            GFX_Seti( i_GFX_Splash1, 13106,25)                                                              // Nombre de sprites à générer
            GFX_Setf( i_GFX_Splash1, 13003,0.400000)                                                  // duree de vie phase 1
            GFX_Setf( i_GFX_Splash1, 13004,0.55000)                                                    // duree de vie phase 2 
            GFX_Setf( i_GFX_Splash1, 13012,0.750000)                                                                                                                             // Life time random
            GFX_Seti( i_GFX_Splash1, 13107,0)                                                                                                                                                               // Tri des sprites
            GFX_Setf( i_GFX_Splash1, 13000,0.3250000)                                                                                                                           // Vitesse de croissance min
            GFX_Setf( i_GFX_Splash1, 13001,0.900000)                                                                                                                             // Vitesse de croissance max
            GFX_Setf( i_GFX_Splash1, 13002,0.0100000)                                                                                                                           // Friction sur la croissance
            GFX_Setf( i_GFX_Splash1, 13005,0.100000)                                                                                                                             // Taille min à la création
            GFX_Setf( i_GFX_Splash1, 13006,0.800000)                                                                                                                             // Taille max à la création
            GFX_Setf( i_GFX_Splash1, 13007,-1.000000)                                                                                                                            // Gravité
            GFX_Setv( i_GFX_Splash1, 13203,cvector(0.10, 0.10, 0.10))                                                                   // Friction sur chaque axe
            GFX_Seti( i_GFX_Splash1 , 13103,0xB9FFFFFF)                                                                                                                     // Couleur phase 1
            GFX_Seti( i_GFX_Splash1 , 13104,0xB9FFFFFF)                                                                                                                     // Couleur phase 2
            GFX_Seti( i_GFX_Splash1 , 13105,0x00FFFFFF)                                                                                                                      // Couleur phase 3
            GFX_Setf( i_GFX_Splash1, 13009,-2.5000000)                                                                                                                          // Vitesse min
            GFX_Setf( i_GFX_Splash1, 13010,-5.000000)                                                                                                                            // Vitesse max
            GFX_Setf( i_GFX_Splash1, 13011,-1000)                                                                                                                                                         // Hauteur du sol
            GFX_Setv( i_GFX_Splash1, 13200, tv_pos + cvector(0.00000, 0.00000, 0.00000)) //Position de création
            GFX_Setv( i_GFX_Splash1, 13201,cvector(0.00000, 0.00000, -0.075000))             // Vitesse min sur chaque axe
            GFX_Setv( i_GFX_Splash1, 13202,cvector(0.00000, 0.00000, -0.175000))             // Vitesse max sur chaque axe
            GFX_Setv( i_GFX_Splash1, 13204,cvector(0.00000, 0.00000, 0.00000))                           // Vent
            GFX_Setv( i_GFX_Splash1, 13205,cvector(0.00000, 0.00000, 0.00000))                           // Vitesse de la position de création
            GFX_Setv( i_GFX_Splash1, 13206,cvector(0.00000, 0.00000, 0.00000))                           // Friction de la position
            tf_facteur = MATH_RandFloat(1.0,2.0)
            GFX_Setv( i_GFX_Splash1, 13207,0.150000 * OBJ_HorizonGet()*tf_facteur)         // Volume de création 1
            GFX_Setv( i_GFX_Splash1, 13208,0.150000 * OBJ_SightGet()*tf_facteur)             // Volume de création 2
            GFX_Setv( i_GFX_Splash1, 13209,0.100000 * OBJ_BankingGet()*tf_facteur)        // Volume de création 3
            GFX_Setf( i_GFX_Splash1, 13008,0.000000)                                                                                                                             // Taux de génération


            //------------------------------------------------------------------------------------------------------------------
            //------------------------------------------------------------------------------------------------------------------
            //						GENERATEUR DE PARCITULES 2
            //------------------------------------------------------------------------------------------------------------------
            //------------------------------------------------------------------------------------------------------------------

            i_GFX_Splash2 = GFX_Add( 13)
            GFX_MaterialSet( i_GFX_Splash2 , get_SFX_light_and_smoke, -1)
            GFX_Seti( i_GFX_Splash2 , 13101,45)                                                                                                                                                            // ID de material du SFX Lgt&Smk
            GFX_FlagSet( i_GFX_Splash2 , 0 , 1)
            GFX_FlagSet( i_GFX_Splash2 , 2 , 1)
            GFX_Seti( i_GFX_Splash2 , 13100,10)                                                                                                                                                            // Nombre maxi de sprites
            GFX_Seti( i_GFX_Splash2 , 13106,10)                                                                                                                                                // Nombre de sprites à générer
            GFX_Setf( i_GFX_Splash2 , 13003,0.400000)                                                                                                                            // duree de vie phase 1
            GFX_Setf( i_GFX_Splash2 , 13004,0.750000)                                                                                                                           // duree de vie phase 2 
            GFX_Setf( i_GFX_Splash2 , 13012,0.750000)                                                                                                                            // Life time random
            GFX_Seti( i_GFX_Splash2 , 13107,0)                                                                                                                                                              // Tri des sprites
            GFX_Setf( i_GFX_Splash2 , 13000,0.45000)                                                                                                                             // Vitesse de croissance min
            GFX_Setf( i_GFX_Splash2 , 13001,2.00000)                                                                                                                             // Vitesse de croissance max
            GFX_Setf( i_GFX_Splash2 , 13002,0.0200000)                                                                                                                          // Friction sur la croissance
            GFX_Setf( i_GFX_Splash2 , 13005,0.10000)                                                                                                                             // Taille min à la création
            GFX_Setf( i_GFX_Splash2 , 13006,0.400000)                                                                                                                            // Taille max à la création
            GFX_Setf( i_GFX_Splash2 , 13007,-2.500000)                                                                                                                           // Gravité
            GFX_Setv( i_GFX_Splash2 , 13203,cvector(0.0750, 0.0750, 0.0150))                                           // Friction sur chaque axe
            GFX_Seti( i_GFX_Splash2 , 13103,0xFFFFFFFF)                                                                                                                     // Couleur phase 1
            GFX_Seti( i_GFX_Splash2 , 13104,0xB9FFFFFF)                                                                                                                     // Couleur phase 2
            GFX_Seti( i_GFX_Splash2 , 13105,0x00FFFFFF)                                                                                                                      // Couleur phase 3
            GFX_Setf( i_GFX_Splash2 , 13009,-2.5000000)                                                                                                                         // Vitesse min
            GFX_Setf( i_GFX_Splash2  , 13010,-5.000000)                                                                                                                          // Vitesse max
            GFX_Setf( i_GFX_Splash2  , 13011,-1000)                                                                                                                                           // Hauteur du sol
            GFX_Setv( i_GFX_Splash2  , 13200, tv_pos + cvector(0.00000, 0.00000, 0.00000))           //Position de création
            GFX_Setv( i_GFX_Splash2 , 13201,cvector(0.00000, 0.00000, -0.15000))              // Vitesse min sur chaque axe
            GFX_Setv( i_GFX_Splash2 , 13202,cvector(0.00000, 0.00000, -0.35000))              // Vitesse max sur chaque axe
            GFX_Setv( i_GFX_Splash2 , 13204,cvector(0.00000, 0.00000, 0.00000))               // Vent
            GFX_Setv( i_GFX_Splash2 , 13205,cvector(0.00000, 0.00000, 0.00000))               // Vitesse de la position de création
            GFX_Setv( i_GFX_Splash2 , 13206,cvector(0.00000, 0.00000, 0.00000))               // Friction de la position
            tf_facteur = MATH_RandFloat(0.1,0.4)
            GFX_Setf( i_GFX_Splash2 , 13008,0.000000)                                                                                                                            // Taux de génération
}



//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 						MINI SPLASH
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_MINI_PLOUF(float f_taille, vector tv_pos)
{
	int i_GFX_Splash
	int i_tmp_mat
	
	i_GFX_Splash= GFX_Add( 13)
	GFX_MaterialSet(i_GFX_Splash, get_SFX_light_and_smoke, -1)

	i_tmp_mat = MATH_RandInt(0,2)

	if (i_tmp_mat == 0)
		GFX_Seti(i_GFX_Splash, 13101,45)													// ID de material du SFX Lgt&Smk
	else
		GFX_Seti(i_GFX_Splash, 13101,37)													// ID de material du SFX Lgt&Smk

	GFX_FlagSet(i_GFX_Splash, 0 , 1)
	GFX_FlagSet(i_GFX_Splash, 2 , 1)
	GFX_Seti(i_GFX_Splash, 13100, 1)														// Nombre maxi de sprites
	GFX_Seti(i_GFX_Splash, 13106, 1) 													// Nombre de sprites à générer
	GFX_Setf(i_GFX_Splash, 13003,0.100000)											// duree de vie phase 1
	GFX_Setf(i_GFX_Splash, 13004,0.750000)											// duree de vie phase 2 
	GFX_Setf(i_GFX_Splash, 13012,0.750000)											// Life time random
	GFX_Seti(i_GFX_Splash, 13107,0)														// Tri des sprites
	GFX_Setf(i_GFX_Splash, 13000,0.6000)												// Vitesse de croissance min
	GFX_Setf(i_GFX_Splash, 13001,1.20000)												// Vitesse de croissance max
	GFX_Setf(i_GFX_Splash, 13002,0.0400000)											// Friction sur la croissance
	GFX_Setf(i_GFX_Splash, 13005,0.30000)												// Taille min à la création
	GFX_Setf(i_GFX_Splash, 13006,0.500000)											// Taille max à la création
	GFX_Setf(i_GFX_Splash, 13007,-0.00000)											// Gravité
	GFX_Setv(i_GFX_Splash, 13203,cvector(0.0750, 0.0750, 0.1000))			// Friction sur chaque axe
	GFX_Seti(i_GFX_Splash, 13103,0x00FFFFFF)										// Couleur phase 1
	GFX_Seti(i_GFX_Splash, 13104,0xFFFFFFFF)										// Couleur phase 2
	GFX_Seti(i_GFX_Splash, 13105,0x00FFFFFF)										// Couleur phase 3
	GFX_Setf(i_GFX_Splash, 13009,-2.00000)											// Vitesse min
	GFX_Setf(i_GFX_Splash, 13010,-1.000000)											// Vitesse max
	GFX_Setf(i_GFX_Splash, 13011,tv_pos.z - 10.0)									// Hauteur du sol
	GFX_Setv(i_GFX_Splash, 13200, tv_pos + cvector(0.00000, 0.00000, 0.00000))	//Position de création
	GFX_Setv(i_GFX_Splash, 13201,cvector(0.00000, 0.00000, -0.00000))		// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Splash, 13202,cvector(0.00000, 0.00000, -0.0100))		// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Splash, 13204,cvector(0.00000, 0.00000, 0.00000))		// Vent
	GFX_Setv(i_GFX_Splash, 13205,cvector(0.00000, 0.00000, 0.00000))		// Vitesse de la position de création
	GFX_Setv(i_GFX_Splash, 13206,cvector(0.00000, 0.00000, 0.00000))		// Friction de la position
	GFX_Setf( i_GFX_Splash, 13008,0.000000)											// Taux de génération
}

//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 						FLARE 01
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure int PROC_SFX_FLARE_01(float tf_taille, vector tv_pos, float tf_duree)
{
	int i_GFX_Flare
	
	i_GFX_Flare = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Flare, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Flare, 13101, 1)													// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Flare, 0 , 1)
	GFX_FlagSet(i_GFX_Flare, 2 , 1)
	GFX_Seti(i_GFX_Flare, 13100, 1)													// Nombre maxi de sprites
	GFX_Seti(i_GFX_Flare, 13106, 1) 													// Nombre de sprites à générer
	GFX_Setf(i_GFX_Flare, 13003, tf_duree)										// duree de vie phase 1
	GFX_Setf(i_GFX_Flare, 13004, tf_duree / 10)											// duree de vie phase 2 
	GFX_Setf(i_GFX_Flare, 13012, 0.750000)											// Life time random
	GFX_Seti(i_GFX_Flare, 13107, 0)													// Tri des sprites
	GFX_Setf(i_GFX_Flare, 13000, 0.0000)											// Vitesse de croissance min
	GFX_Setf(i_GFX_Flare, 13001, 0.0000)											// Vitesse de croissance max
	GFX_Setf(i_GFX_Flare, 13002, 0.0000)											// Friction sur la croissance
	GFX_Setf(i_GFX_Flare, 13005, tf_taille)											// Taille min à la création
	GFX_Setf(i_GFX_Flare, 13006, tf_taille)											// Taille max à la création
	GFX_Setf(i_GFX_Flare, 13007, 0.00000)											// Gravité
	GFX_Setv(i_GFX_Flare, 13203, cvector(0.0, 0.0, 0.0))							// Friction sur chaque axe
	GFX_Seti(i_GFX_Flare, 13103, 0x80FFFF20)									// Couleur phase 1
	GFX_Seti(i_GFX_Flare, 13104, 0xB9FFFF20)									// Couleur phase 2
	GFX_Seti(i_GFX_Flare, 13105, 0x00FFFF20)									// Couleur phase 3
	GFX_Setf(i_GFX_Flare, 13009, 0.0)													// Vitesse min
	GFX_Setf(i_GFX_Flare, 13010, 0.0)													// Vitesse max
	GFX_Setv(i_GFX_Flare, 13200, tv_pos + cvector(0.0, 0.0, 0.0))			//Position de création
	GFX_Setv(i_GFX_Flare, 13201, cvector(0.0, 0.0, -0.01))						// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Flare, 13202, cvector(0.0, 0.0, -0.00))						// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Flare, 13204, cvector(0.0, 0.0, 0.000))						// Vent
	GFX_Setv(i_GFX_Flare, 13205, cvector(0.0, 0.0, 0.000))						// Vitesse de la position de création
	GFX_Setv(i_GFX_Flare, 13206, cvector(0.0, 0.0, 0.000))						// Friction de la position
	GFX_Setf(i_GFX_Flare, 13008, 0.000000)											// Taux de génération

	return i_GFX_Flare
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 						FLARE 02
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure int PROC_SFX_FLARE_02(float tf_taille, float tf_random_size, vector tv_pos, int ti_couleur, int ti_intensite, int ti_amp)
{
	int i_GFX_Flare
	float tf_tmp_taille
	color cf_color

	cf_color = COLOR_SetRGBA(ti_intensite + MATH_RandInt(-ti_amp,ti_amp+1),
											ti_intensite + MATH_RandInt(-ti_amp,ti_amp+1),
											ti_intensite + MATH_RandInt(-ti_amp,ti_amp+1), ti_intensite)
	
	tf_tmp_taille = tf_taille

	i_GFX_Flare = GFX_Add(21)                  							 								// ajout de leffet
	if (ti_couleur == 0)
		GFX_MaterialSet(i_GFX_Flare, get_SFX_light_and_smoke, 59)						// affectation du matériau rouge
	if (ti_couleur == 1)
		GFX_MaterialSet(i_GFX_Flare, get_SFX_light_and_smoke, 60)						// affectation du matériau bleu
	if (ti_couleur == 2)
		GFX_MaterialSet(i_GFX_Flare, get_SFX_light_and_smoke, 61)						// affectation du matériau vert
	if (ti_couleur == 3)
		GFX_MaterialSet(i_GFX_Flare, get_SFX_light_and_smoke, 62)						// affectation du matériau jaune
	if (ti_couleur == 4)
	{
		GFX_MaterialSet(i_GFX_Flare, get_SFX_light_and_smoke, 63)						// affectation du matériau papillon
		tf_taille = MATH_RandFloat(tf_taille - tf_random_size, tf_taille + tf_random_size)
	}
	
	//f_random_size 
	if (ti_couleur != 4)
		GFX_Seti(i_GFX_Flare, 21101, cf_color)														// couleur du halo
	else 
		GFX_Seti(i_GFX_Flare, 21101, 0xFF808080)												// couleur du halo

	GFX_Seti(i_GFX_Flare, 21103, 1)																	// halo simple
	GFX_Setf(i_GFX_Flare, 21000, tf_taille)															// taille du halo
	GFX_Setv(i_GFX_Flare, 21200, tv_pos)															// position de création

	return i_GFX_Flare
}



//----------------------------------------------------------------------------------------------------------------------------------------
// 											SFX DE DESTRUCTION
//----------------------------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_01(vector tv_pos, float ti_taille)
{
	int 	i_GFX_Nuage_cartoon2, ti_temp, i_GFX_Rocks
	float	tf_vitesse
	
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES NUAGE CENTRAL
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
		i_GFX_Nuage_cartoon2 = GFX_Add( 13)
		GFX_MaterialSet(i_GFX_Nuage_cartoon2, get_SFX_light_and_smoke, -1)
		GFX_Seti(i_GFX_Nuage_cartoon2, 13101,8)																	// ID de material du SFX Lgt&Smk
		GFX_FlagSet(i_GFX_Nuage_cartoon2, 0 , 1)
		GFX_FlagSet(i_GFX_Nuage_cartoon2, 2 , 1)
		GFX_Seti(i_GFX_Nuage_cartoon2, 13100, 15)																// Nombre maxi de sprites
		GFX_Seti(i_GFX_Nuage_cartoon2, 13106, 15)																// Nombre de sprites à générer
		GFX_Setf(i_GFX_Nuage_cartoon2, 13003, 0.4)																// duree de vie phase 1
		GFX_Setf(i_GFX_Nuage_cartoon2, 13004, 0.95)															// duree de vie phase 2 
		GFX_Setf(i_GFX_Nuage_cartoon2, 13012, 0.750000)														// Life time random
		GFX_Seti(i_GFX_Nuage_cartoon2, 13107, 0)																// Tri des sprites
		GFX_Setf(i_GFX_Nuage_cartoon2, 13000, 0.2000)															// Vitesse de croissance min
		GFX_Setf(i_GFX_Nuage_cartoon2, 13001, 0.6000)															// Vitesse de croissance max
		GFX_Setf(i_GFX_Nuage_cartoon2, 13002, 0.1)																// Friction sur la croissance
		GFX_Setf(i_GFX_Nuage_cartoon2, 13005, 1.5)																// Taille min à la création
		GFX_Setf(i_GFX_Nuage_cartoon2, 13006, 2.0)																// Taille max à la création
		GFX_Setf(i_GFX_Nuage_cartoon2, 13007, 0.0)																// Gravité
		GFX_Setv(i_GFX_Nuage_cartoon2, 13203, cvector(0.0,0.0,0.0))										// Friction sur chaque axe
		GFX_Seti(i_GFX_Nuage_cartoon2, 13103, 0xFF808080)													// Couleur phase 1
		GFX_Seti(i_GFX_Nuage_cartoon2 , 13104, 0x905F7B85)												// Couleur phase 2
		GFX_Seti(i_GFX_Nuage_cartoon2, 13105, 0x008FABB5)												// Couleur phase 3
//		if (tv_pos.z < 0.0)
//			tv_pos.z = 0.01

		GFX_Setf(i_GFX_Nuage_cartoon2, 13011, tv_pos.z - 0.75)												// Hauteur du sol
//		GFX_Setv(i_GFX_Nuage_cartoon2, 13200, tv_pos)							// Position de création
		GFX_Setv(i_GFX_Nuage_cartoon2, 13200, tv_pos + cvector(0.0,0.0,0.25))							// Position de création
		GFX_Setf(i_GFX_Nuage_cartoon2, 13009, 2.5)																// Vitesse min
		GFX_Setf(i_GFX_Nuage_cartoon2, 13010, 5.0)																// Vitesse max
		tf_vitesse = 5.0
		GFX_Setv(i_GFX_Nuage_cartoon2, 13201, cvector(-tf_vitesse, -tf_vitesse, -tf_vitesse))			// Vitesse min sur chaque axe
		GFX_Setv(i_GFX_Nuage_cartoon2, 13202, cvector(tf_vitesse, tf_vitesse, tf_vitesse))			// Vitesse max sur chaque axe
		GFX_Setv(i_GFX_Nuage_cartoon2, 13204, cvector(0.0, 0.0, 0.0))										// Vent
		GFX_Setv(i_GFX_Nuage_cartoon2, 13205, cvector(0.0, 0.0, 0.0))										// Vitesse de la position de création
		GFX_Setv(i_GFX_Nuage_cartoon2, 13206, cvector(0.0, 0.0, 0.0))										// Friction de la position
		ti_temp = 1.4
		GFX_Setv(i_GFX_Nuage_cartoon2, 13207, cvector( (ti_temp) ,0.0,0.0))								// Volume de création 1
		GFX_Setv(i_GFX_Nuage_cartoon2, 13208, cvector(0.0,ti_temp ,0.0))									// Volume de création 2
		GFX_Setv(i_GFX_Nuage_cartoon2, 13209, cvector(0.0,0.0,ti_temp ))									// Volume de création 2
		GFX_Setf(i_GFX_Nuage_cartoon2, 13008, 0.0)																// Taux de génération

		//---------------------------------------------------------------------
		//---------------------------------------------------------------------
		// PARTICULE DE ROCHERS
		//---------------------------------------------------------------------
		//---------------------------------------------------------------------
		i_GFX_Rocks = GFX_Add(13)
		GFX_MaterialSet(i_GFX_Rocks, get_SFX_light_and_smoke, -1)
		GFX_Seti(i_GFX_Rocks, 13101, 42)																			// ID de material du SFX Lgt&Smk
		GFX_FlagSet(i_GFX_Rocks, 0 , 1)
		GFX_FlagSet(i_GFX_Rocks, 2 , 1)
		GFX_Seti(i_GFX_Rocks, 13100, 20)																			// Nombre maxi de sprites
		GFX_Seti(i_GFX_Rocks, 13106, 20)																			// Nombre de sprites à générer
		GFX_Setf(i_GFX_Rocks, 13003, 1.0)																			// duree de vie phase 1
		GFX_Setf(i_GFX_Rocks, 13004, 0.5)																			// duree de vie phase 2 
		GFX_Setf(i_GFX_Rocks, 13012, 0.750000)																	// Life time random
		GFX_Seti(i_GFX_Rocks, 13107, 0)																				// Tri des sprites
		GFX_Setf(i_GFX_Rocks, 13000, 1.0)																			// Vitesse de croissance min
		GFX_Setf(i_GFX_Rocks, 13001, 1.2)																			// Vitesse de croissance max
		GFX_Setf(i_GFX_Rocks, 13002, 1.0)																			// Friction sur la croissance
		GFX_Setf(i_GFX_Rocks, 13005, 0.05)																			// Taille min à la création
		GFX_Setf(i_GFX_Rocks, 13006, 0.1)																			// Taille max à la création
		GFX_Setf(i_GFX_Rocks, 13007, -20.00000)																	// Gravité
		GFX_Setv(i_GFX_Rocks, 13203, Cv_NullVector)															// Friction sur chaque axe
		GFX_Seti(i_GFX_Rocks, 13103, 0xFFFFFFFF)																// Couleur phase 1
		GFX_Seti(i_GFX_Rocks, 13104, 0xFFFFFFFF)																// Couleur phase 2
		GFX_Seti(i_GFX_Rocks, 13105, 0x00000000)																// Couleur phase 3
		GFX_Setf(i_GFX_Rocks, 13011, tv_pos.z)																	// Hauteur du sol
		GFX_Setv(i_GFX_Rocks, 13200, tv_pos)																		// Position de création
		GFX_Setf(i_GFX_Rocks, 13009, 5.0)																			// Vitesse min
		GFX_Setf(i_GFX_Rocks, 13010, 30.0)																			// Vitesse max
		GFX_Setv(i_GFX_Rocks, 13201, cvector(-15, -15, -5.0))													// Vitesse min sur chaque axe
		GFX_Setv(i_GFX_Rocks, 13202, cvector(15, 15, 15.0))													// Vitesse max sur chaque axe
		GFX_Setv(i_GFX_Rocks, 13204, cvector(0.00000, 0.00000, 0.00000))								// Vent
		GFX_Setv(i_GFX_Rocks, 13205, Cv_NullVector)															// Vitesse de la position de création
		GFX_Setv(i_GFX_Rocks, 13206, Cv_NullVector)															// Friction de la position
		GFX_Setv(i_GFX_Rocks, 13207, cvector(0.01,0.0,0.0))													// Volume de création 1
		GFX_Setv(i_GFX_Rocks, 13208, cvector(0.0,0.01,0.0))													// Volume de création 2
		GFX_Setf(i_GFX_Rocks, 13008, 0.00)																			// Taux de génération
}



//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 					SMOKE 01
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_SMOKE_01(vector tv_pos)
{
	int		ti_GFX_Smoke	
	int		ti_terrain
	
	float		tf_speed

	vector	tv_wind
	vector	tv_pos_dir

	tv_wind = Cv_NullVector

	tv_pos_dir = DYN_SpeedGetVector()
	tf_speed = MATH_VecNorm(tv_pos_dir)
	if (tf_speed > 1.0)
	{
		tv_pos_dir /= tf_speed
		tf_speed = MATH_FloatMin(tf_speed, 10.0)
	}
	else
	{
		tf_speed = 2.0
		tv_pos_dir = OBJ_SightGet()
	}

	tv_pos_dir *= 5.0
	ti_GFX_Smoke = GFX_Add(13)																// Create the boum
	
	GFX_MaterialSet(ti_GFX_Smoke, get_SFX_light_and_smoke, -1)						// met le materiau
	GFX_Seti(ti_GFX_Smoke, 13101, 8)															// Materiau 0

	GFX_Seti(ti_GFX_Smoke, 13100, 5)															// *Buffer number of sprite
	GFX_Seti(ti_GFX_Smoke, 13106, 5)												// *number of sprite to generate

	GFX_Setf(ti_GFX_Smoke, 13003, 0.1)															// Time fase 1
	GFX_Setf(ti_GFX_Smoke, 13004, 0.75)															// Time fase 2

	GFX_Seti(ti_GFX_Smoke, 13107, 0)															// Sprites non triés

	GFX_FlagSet(ti_GFX_Smoke, 0 , 1)
	GFX_FlagSet(ti_GFX_Smoke, 2 , 1)
	
	GFX_Setf(ti_GFX_Smoke, 13012, 0.75)														// Time random

	GFX_Setf(ti_GFX_Smoke, 13005, 1.0)														// Creation size min
	GFX_Setf(ti_GFX_Smoke, 13006, 2.0)														// Creation size max
	
	GFX_Setv(ti_GFX_Smoke, 13201, tv_pos_dir + cvector(-1.0, -1.0, -1.0))							// Speed min
	GFX_Setv(ti_GFX_Smoke, 13202, tv_pos_dir + cvector(1.0, 1.0, 1.0))								// Speed max
	GFX_Setf(ti_GFX_Smoke, 13009, tf_speed * 0.75)							// Norm speed min
	GFX_Setf(ti_GFX_Smoke, 13010, tf_speed * 1.25)									// Norm speed max
	GFX_Setv(ti_GFX_Smoke, 13203, cvector(0.008, 0.008, 0.05))					// friction speed
	GFX_Setf(ti_GFX_Smoke, 13000, 0.5)														// Growing speed min
	GFX_Setf(ti_GFX_Smoke, 13001, 1.0)														// Growing speed max
	GFX_Setf(ti_GFX_Smoke, 13002, 0.0001)													// Friction Grow

	GFX_Setf(ti_GFX_Smoke, 13007, 0.0)														// Gravity

	GFX_Seti(ti_GFX_Smoke, 13103, COLOR_Blend(0x204FB9BD, 0x60000000 | (WOR_AmbiantColGet(0) & 0x00FFFFFF), 0.5))	// Color fase 0
	GFX_Seti(ti_GFX_Smoke, 13104, COLOR_Blend(0x104FB9BD, 0x20000000 | (WOR_AmbiantColGet(0) & 0x00FFFFFF), 0.5))	// Color fase 1
	GFX_Seti(ti_GFX_Smoke, 13105, COLOR_Blend(0x00879E8B, WOR_AmbiantColGet(0) & 0x00FFFFFF, 0.5))	// Color fase 2
	
	GFX_Setf(ti_GFX_Smoke, 13008, 0.001)														// generation rate
	
	GFX_Setv(ti_GFX_Smoke, 13205, Cv_NullVector)										// Mainposspeed
	GFX_Setv(ti_GFX_Smoke, 13206, Cv_NullVector)										// Mainpossfriction
	
	GFX_Setv(ti_GFX_Smoke, 13204, tv_wind)												// wind
	
	tv_wind = Cv_NullVector
	tv_pos -= tv_wind * TIME_GetDt()
	GFX_Setv(ti_GFX_Smoke, 13200, tv_pos) 								// Creation Pos
	GFX_Setv(ti_GFX_Smoke, 13207, cvector(0.5, 0.0, 0.0))	// CreaPosAxe X
	GFX_Setv(ti_GFX_Smoke, 13208, cvector(0.0, 0.5, 0.0))	// CreaPosAxe Y
	GFX_Setv(ti_GFX_Smoke, 13209, cvector(0.0, 0.0, 0.25))	// CreaPosAxe Z
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 				GOUTTES DE SUEUR SUR CE CONNARD DE LAPIN
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_GOUTTES_LAPIN_01(vector tv_pos, float tf_taille, float tf_dist, byref int i_GFX1, byref int i_GFX2)
{
	float 	tf_temp, tf_vitesse
	int 	ti_flag, ti_nb_particules

	ti_flag = 10
	ti_nb_particules = 10
	tf_vitesse = 3.5 * tf_taille
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GOUTTES DE SUEUR 1
	//------------------------------------------------------------------------------------------------------------------
	if (i_GFX1 == -1)
	{
	//	i_GFX1= GFX_Add( 13)
		GFX_MaterialSet(i_GFX1, get_SFX_light_and_smoke, -1)
		GFX_Seti(i_GFX1, 13101,6)																// ID de material du SFX Lgt&Smk
		GFX_FlagSet(i_GFX1, 0 , 1)
		GFX_FlagSet(i_GFX1, 2 , 1)
		GFX_Seti(i_GFX1, 13100, 15)																// Nombre maxi de sprites
		GFX_Seti(i_GFX1, 13106, ti_nb_particules)											// Nombre de sprites à générer
		GFX_Setf(i_GFX1, 13003, 0.25)															// duree de vie phase 1
		GFX_Setf(i_GFX1, 13004, 0.25)															// duree de vie phase 2 
		GFX_Setf(i_GFX1, 13012, 0.750000)													// Life time random
		GFX_Seti(i_GFX1, 13107, 0)																// Tri des sprites
		GFX_Setf(i_GFX1, 13000, 0.1000)														// Vitesse de croissance min
		GFX_Setf(i_GFX1, 13001, 0.15000)														// Vitesse de croissance max
		GFX_Setf(i_GFX1, 13002, 0.25/tf_taille)												// Friction sur la croissance
		GFX_Setf(i_GFX1, 13005, tf_taille * 0.01)												// Taille min à la création
		GFX_Setf(i_GFX1, 13006, tf_taille * 0.03)												// Taille max à la création
		GFX_Setf(i_GFX1, 13007, -5.0)															// Gravité
		GFX_Setv(i_GFX1, 13203, cvector(tf_taille * 0.015,tf_taille * 0.015,tf_taille * 0.015))		// Friction sur chaque axe
		GFX_Seti(i_GFX1, 13103, 0xFFFFFFFF)												// Couleur phase 1
		GFX_Seti(i_GFX1, 13104, 0x00FFFFFF)												// Couleur phase 2
		GFX_Seti(i_GFX1, 13105, 0x00000000)												// Couleur phase 3
		GFX_Setf(i_GFX1, 13011, tv_pos.z - 0.75)											// Hauteur du sol
		GFX_Setf(i_GFX1, 13009, tf_vitesse)													// Vitesse min
		GFX_Setf(i_GFX1, 13010, tf_vitesse)													// Vitesse max
		GFX_Setv(i_GFX1, 13204, cvector(0.0, 0.0, 0.0))									// Vent
		GFX_Setv(i_GFX1, 13205, cvector(0.0, 0.0, 0.0))									// Vitesse de la position de création
		GFX_Setv(i_GFX1, 13206, cvector(0.0, 0.0, 0.0))									// Friction de la position
		GFX_Setv(i_GFX1, 13207, cvector(0.0 ,0.0,0.0))									// Volume de création 1
		GFX_Setv(i_GFX1, 13208, cvector(0.0,0.0,0.0))										// Volume de création 2
		GFX_Setv(i_GFX1, 13209, cvector(0.0,0.0,0.0))										// Volume de création 2
		GFX_Setf(i_GFX1, 13008, 0.075)														// Taux de génération
	}
	
	GFX_Setv(i_GFX1, 13200, tv_pos - MATH_VecLocalToGlobal(cvector(tf_dist, 0.0, 0.0)))			// Position de création
	GFX_Setv(i_GFX1, 13201, MATH_VecLocalToGlobal(cvector(-tf_vitesse * 0.55, -0.15, 0.5)))		// Vitesse min sur chaque axe
	GFX_Setv(i_GFX1, 13202, MATH_VecLocalToGlobal(cvector(-tf_vitesse, 0.15, 4.5)))				// Vitesse max sur chaque axe

	//------------------------------------------------------------------------------------------------------------------
	// 					ETINCELLES 1
	//------------------------------------------------------------------------------------------------------------------
	if (i_GFX2 == -1)
	{
	//	i_GFX2= GFX_Add( 13)
		GFX_MaterialSet(i_GFX2, get_SFX_light_and_smoke, -1)
		GFX_Seti(i_GFX2, 13101,6)																// ID de material du SFX Lgt&Smk
		GFX_FlagSet(i_GFX2, 0 , 1)
		GFX_FlagSet(i_GFX2, 2 , 1)
		GFX_Seti(i_GFX2, 13100, 15)																// Nombre maxi de sprites
		GFX_Seti(i_GFX2, 13106, ti_nb_particules)											// Nombre de sprites à générer
		GFX_Setf(i_GFX2, 13003, 0.25)															// duree de vie phase 1
		GFX_Setf(i_GFX2, 13004, 0.25)															// duree de vie phase 2 
		GFX_Setf(i_GFX2, 13012, 0.750000)													// Life time random
		GFX_Seti(i_GFX2, 13107, 0)																// Tri des sprites
		GFX_Setf(i_GFX2, 13000, 0.1000)														// Vitesse de croissance min
		GFX_Setf(i_GFX2, 13001, 0.15000)														// Vitesse de croissance max
		GFX_Setf(i_GFX2, 13002, 0.25/tf_taille)												// Friction sur la croissance
		GFX_Setf(i_GFX2, 13005, tf_taille * 0.01)												// Taille min à la création
		GFX_Setf(i_GFX2, 13006, tf_taille * 0.03)												// Taille max à la création
		GFX_Setf(i_GFX2, 13007, -5.0)															// Gravité
		GFX_Setv(i_GFX2, 13203, cvector(tf_taille * 0.015,tf_taille * 0.015,tf_taille * 0.015))		// Friction sur chaque axe
		GFX_Seti(i_GFX2, 13103, 0xFFFFFFFF)												// Couleur phase 1
		GFX_Seti(i_GFX2, 13104, 0x00FFFFFF)												// Couleur phase 2
		GFX_Seti(i_GFX2, 13105, 0x00000000)												// Couleur phase 3
		GFX_Setf(i_GFX2, 13011, tv_pos.z - 0.75)											// Hauteur du sol
		GFX_Setf(i_GFX2, 13009, tf_vitesse)													// Vitesse min
		GFX_Setf(i_GFX2, 13010, tf_vitesse)													// Vitesse max
		GFX_Setv(i_GFX2, 13204, cvector(0.0, 0.0, 0.0))									// Vent
		GFX_Setv(i_GFX2, 13205, cvector(0.0, 0.0, 0.0))									// Vitesse de la position de création
		GFX_Setv(i_GFX2, 13206, cvector(0.0, 0.0, 0.0))									// Friction de la position
		GFX_Setv(i_GFX2, 13207, cvector(0.0 ,0.0,0.0))									// Volume de création 1
		GFX_Setv(i_GFX2, 13208, cvector(0.0,0.0,0.0))										// Volume de création 2
		GFX_Setv(i_GFX2, 13209, cvector(0.0,0.0,0.0))										// Volume de création 2
		GFX_Setf(i_GFX2, 13008, 0.075)														// Taux de génération
	}
	
	GFX_Setv(i_GFX2, 13200, tv_pos + MATH_VecLocalToGlobal(cvector(tf_dist, 0.0, 0.0)))			// Position de création
	GFX_Setv(i_GFX2, 13201, MATH_VecLocalToGlobal(cvector(tf_vitesse * 0.55, -0.15, 0.5)))		// Vitesse min sur chaque axe
	GFX_Setv(i_GFX2, 13202, MATH_VecLocalToGlobal(cvector(tf_vitesse, 0.15, 4.5)))					// Vitesse max sur chaque axe

//	//------------------------------------------------------------------------------------------------------------------
//	// 					ETINCELLES 1
//	//------------------------------------------------------------------------------------------------------------------
//	i_GFX_Etincelles = GFX_Add(9)
//	GFX_FlagSet(i_GFX_Etincelles, 0,1)
//	GFX_FlagSet(i_GFX_Etincelles, 2, 1)
//	GFX_MaterialSet(i_GFX_Etincelles, get_SFX_light_and_smoke, 5)
//	GFX_Seti(i_GFX_Etincelles, 9101, 0x8FFFFFFF)														// Couleur des particules
//	GFX_Setv(i_GFX_Etincelles, 9200, tv_pos + MATH_VecLocalToGlobal(cvector(-tf_dist, 0.0, 0.0)))							// Position
//	GFX_Setv(i_GFX_Etincelles, 9201, MATH_VecLocalToGlobal(cvector(tv_dir.x, tv_dir.y, tv_dir.z + 0.75)))					// Axe de génération
//	GFX_Setv(i_GFX_Etincelles, 9202, cvector(0, 0, -5.0))												// Gravité
//	GFX_Seti(i_GFX_Etincelles, 9100, ti_nb_particules)													// Nombre de particules max
//	GFX_Seti (i_GFX_Etincelles, 9102, ti_flag)																// Flags
//	GFX_Setf(i_GFX_Etincelles, 9000, 0.85)																	// Angle du cône, en radians
//	GFX_Setf(i_GFX_Etincelles, 9001, 1.0 * tf_taille)														// Vitesse min
//	GFX_Setf(i_GFX_Etincelles, 9002, 2.0 * tf_taille)														// Vitesse max
//	GFX_Setf(i_GFX_Etincelles, 9003, 0.99)																	// Friction
//	GFX_Setf(i_GFX_Etincelles, 9004, MATH_RandFloat(tf_taille * 0.02,tf_taille * 0.04))		// Epaisseur des étincelles
//	GFX_Setf(i_GFX_Etincelles, 9005, 0.2)																	// Temps de vie minimum
//	GFX_Setf(i_GFX_Etincelles, 9006, 0.6)																	// Temps de vie max
//	GFX_Setf(i_GFX_Etincelles, 9007, 2.5 * tf_taille)														// Multiplicateur de longueur
//	GFX_Setf(i_GFX_Etincelles, 9008, 0.02)																	// Temps entre la génération de 2 étincelles
//	GFX_Setf(i_GFX_Etincelles, 9009, 0.2)																	// Temps de mort minimum
//	GFX_Setf(i_GFX_Etincelles, 9010, 0.2)																	// Temps de mort maximum
//
//	//------------------------------------------------------------------------------------------------------------------
//	// 					ETINCELLES 2
//	//------------------------------------------------------------------------------------------------------------------
//	//i_GFX_Etincelles2 = GFX_Add(9)
//	GFX_FlagSet(i_GFX_Etincelles2, 0,1)
//	GFX_FlagSet(i_GFX_Etincelles2, 2, 1)
//	GFX_MaterialSet(i_GFX_Etincelles2, get_SFX_light_and_smoke, 5)
//	GFX_Seti(i_GFX_Etincelles2, 9101, 0x8FFFFFFF)													// Couleur des particules
//	GFX_Setv(i_GFX_Etincelles2, 9200, tv_pos + MATH_VecLocalToGlobal(cvector(tf_dist,0.0,0.0)))							// Position
//	GFX_Setv(i_GFX_Etincelles2, 9201, MATH_VecLocalToGlobal(cvector(-tv_dir.x, tv_dir.y, tv_dir.z + 0.75)))					// Axe principal de génération
//	GFX_Setv(i_GFX_Etincelles2, 9202, cvector(0, 0, -5.0))												// Gravité
//	GFX_Seti(i_GFX_Etincelles2, 9100, ti_nb_particules)													// Nombre de particules max
//	GFX_Seti (i_GFX_Etincelles2, 9102, ti_flag)																// Flags
//	GFX_Setf(i_GFX_Etincelles2, 9000, 0.85)																	// Angle du cône, en radians
//	GFX_Setf(i_GFX_Etincelles2, 9001, 1.0 * tf_taille)														// Vitesse min
//	GFX_Setf(i_GFX_Etincelles2, 9002, 2.0 * tf_taille)														// Vitesse max
//	GFX_Setf(i_GFX_Etincelles2, 9003, 0.99)																	// Friction
//	GFX_Setf(i_GFX_Etincelles2, 9004, MATH_RandFloat(tf_taille * 0.02, tf_taille * 0.04))		// Epaisseur des étincelles
//	GFX_Setf(i_GFX_Etincelles2, 9005, 0.2)																	// Temps de vie minimum
//	GFX_Setf(i_GFX_Etincelles2, 9006, 0.6)																	// Temps de vie max
//	GFX_Setf(i_GFX_Etincelles2, 9007, 1.0 * tf_taille)														// Multiplicateur de longueur
//	GFX_Setf(i_GFX_Etincelles2, 9008, 0.02)																	// Temps entre la génération de 2 étincelles
//	GFX_Setf(i_GFX_Etincelles2, 9009, 0.2)																	// Temps de mort minimum
//	GFX_Setf(i_GFX_Etincelles2, 9010, 0.2)																	// Temps de mort maximum
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 												PAF LAPIN 01
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_PAF_LAPIN_01(vector tv_pos, float tf_taille, int ti_num_paf, float tf_speed, byref int i_GFX_Paf, byref int i_GFX_Etincelles)
{
	int		i_num_layer
	float 	tf_vitesse, tf_vitesse_X, tf_vitesse_Y, tf_vitesse_Z, tf_vitesse_globale

	i_num_layer = MATH_RandInt(0,3)

	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,0,faux)
	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,1,faux)
	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,2,faux)

	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,i_num_layer,vrai)

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 1 : PAF
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Paf = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Paf, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Paf, 13101, 64)														// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Paf, 0 , 1)
	GFX_FlagSet(i_GFX_Paf, 2 , 1)
	GFX_Seti(i_GFX_Paf, 13100, 1)															// Nombre maxi de sprites
	GFX_Seti(i_GFX_Paf, 13106, ti_num_paf)												// Nombre de sprites à générer
	GFX_Setf(i_GFX_Paf, 13003, 0.000000)												// duree de vie phase 1
	GFX_Setf(i_GFX_Paf, 13004, 0.040000)												// duree de vie phase 2 
	GFX_Setf(i_GFX_Paf, 13012, 0.750000)												// Life time random
	GFX_Seti(i_GFX_Paf, 13107, 0)															// Tri des sprites
	GFX_Setf(i_GFX_Paf, 13000, 15.0000)													// Vitesse de croissance min
	GFX_Setf(i_GFX_Paf, 13001, 50.0000)													// Vitesse de croissance max
	GFX_Setf(i_GFX_Paf, 13002, 1.0)														// Friction sur la croissance
	GFX_Setf(i_GFX_Paf, 13005, tf_taille * 0.0500000)									// Taille min à la création
	GFX_Setf(i_GFX_Paf, 13006, tf_taille * 0.0500000)									// Taille max à la création
	GFX_Setf(i_GFX_Paf, 13007, 0.00000)													// Gravité
	GFX_Setv(i_GFX_Paf, 13203, cvector(0,0,0))											// Friction sur chaque axe
	GFX_Seti(i_GFX_Paf, 13103, 0x0F10A0CF)											// Couleur phase 1
	GFX_Seti(i_GFX_Paf, 13104, 0x0F10A0CF)//8FD964)							// Couleur phase 2
	GFX_Seti(i_GFX_Paf, 13105, 0x0020B0DF)											// Couleur phase 3
	GFX_Setf(i_GFX_Paf, 13011, tv_pos.z - 10.0)										// Hauteur du sol
	GFX_Setv(i_GFX_Paf, 13200, tv_pos)													// Position de création
	GFX_Setf(i_GFX_Paf, 13009, 0.0)														// Vitesse min
	GFX_Setf(i_GFX_Paf, 13010, 0.0)														// Vitesse max
	GFX_Setv(i_GFX_Paf, 13201, cvector(0,0,0))											// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Paf, 13202, cvector(0,0,0))											// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Paf, 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv(i_GFX_Paf, 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv(i_GFX_Paf, 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setv(i_GFX_Paf, 13207, cvector(0.01,0.0,0.0))								// Volume de création 1
	GFX_Setv(i_GFX_Paf, 13208, cvector(0.0,0.01,0.0))								// Volume de création 2
	GFX_Setf(i_GFX_Paf, 13008, 5/tf_speed)												// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 2 : étincelles
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Etincelles = GFX_Add(9)
	GFX_FlagSet(i_GFX_Etincelles, 0,1)
	GFX_FlagSet(i_GFX_Etincelles, 2, 1)
	GFX_MaterialSet(i_GFX_Etincelles, get_SFX_light_and_smoke, 66)
	GFX_Seti(i_GFX_Etincelles, 9101, 0x6050D0FF)														// Couleur des particules
	GFX_Seti(i_GFX_Etincelles, 9101, 0x6050D0FF)														// Couleur des particules
	GFX_Setv(i_GFX_Etincelles, 9200, tv_pos)																// Position
	GFX_Setv(i_GFX_Etincelles, 9201, cvector(0.0, 0.0, 1.0) )											// Axe principal de génération
	GFX_Setv(i_GFX_Etincelles, 9202, cvector(0, 0, 0.0))													// Gravité
	GFX_Seti(i_GFX_Etincelles, 9100, 125)																	// Nombre de particules max
	GFX_Seti (i_GFX_Etincelles, 9102, 8)																		// Flags
	GFX_Setf(i_GFX_Etincelles, 9000, 3.0 )																	// Angle du cône, en radians
	GFX_Setf(i_GFX_Etincelles, 9001, tf_taille * 20)														// Vitesse min
	GFX_Setf(i_GFX_Etincelles, 9002, tf_taille * 30)														// Vitesse max
	GFX_Setf(i_GFX_Etincelles, 9003, 0.8)																	// Friction
	GFX_Setf(i_GFX_Etincelles, 9004, MATH_RandFloat(tf_taille * 0.005, tf_taille * 0.01))		// Epaisseur des étincelles
	GFX_Setf(i_GFX_Etincelles, 9005, 2.5)																	// Temps de vie minimum
	GFX_Setf(i_GFX_Etincelles, 9006, 2.5)																	// Temps de vie max
	GFX_Setf(i_GFX_Etincelles, 9007, 3 * tf_taille)															// Multiplicateur de longueur
	GFX_Setf(i_GFX_Etincelles, 9008, 0.02)																	// Temps entre la génération de 2 étincelles
	GFX_Setf(i_GFX_Etincelles, 9009, 0.2)																	// Temps de mort minimum
	GFX_Setf(i_GFX_Etincelles, 9010, 0.2)																	// Temps de mort maximum

	
//	//------------------------------------------------------------------------------------------------------------------
//	// 					GENERATEUR DE PARCITULES CATOON 3 : trainées
//	//------------------------------------------------------------------------------------------------------------------
//	tf_vitesse = 20.0
//	tf_vitesse_X = 5.0
//	tf_vitesse_Y = 5.0
//	
//	i_GFX_Debris = GFX_Add(13)
//	GFX_MaterialSet(i_GFX_Debris, get_SFX_light_and_smoke, -1)
//	GFX_Seti(i_GFX_Debris, 13101, 65)																		// ID de material du SFX Lgt&Smk
//	GFX_FlagSet(i_GFX_Debris, 0 , 1)
//	GFX_FlagSet(i_GFX_Debris, 2 , 1)
//	GFX_Seti(i_GFX_Debris, 13100, 20)																			// Nombre maxi de sprites
//	GFX_Seti(i_GFX_Debris, 13106, 20)																			// Nombre de sprites à générer
//	GFX_Setf(i_GFX_Debris, 13003, 0.300000)																// duree de vie phase 1
//	GFX_Setf(i_GFX_Debris, 13004, 0.150000)																// duree de vie phase 2 
//	GFX_Setf(i_GFX_Debris, 13012, 0.750000)																// Life time random
//	GFX_Seti(i_GFX_Debris, 13107, 0)																			// Tri des sprites
//	GFX_Setf(i_GFX_Debris, 13000, 0.00000)																// Vitesse de croissance min
//	GFX_Setf(i_GFX_Debris, 13001, 0.00000)																// Vitesse de croissance max
//	GFX_Setf(i_GFX_Debris, 13002, 1.0)																		// Friction sur la croissance
//	GFX_Setf(i_GFX_Debris, 13005, 0.0100000)																// Taille min à la création
//	GFX_Setf(i_GFX_Debris, 13006, 0.0900000)																// Taille max à la création
//	GFX_Setf(i_GFX_Debris, 13007, -18.00000)																// Gravité
//	GFX_Setv(i_GFX_Debris, 13203, cvector(0.0, 0.0, 0.0))												// Friction sur chaque axe
//	GFX_Seti(i_GFX_Debris, 13103, 0xFFFFFFFF)															// Couleur phase 1
//	GFX_Seti(i_GFX_Debris, 13104, 0x80808080)															// Couleur phase 2
//	GFX_Seti(i_GFX_Debris, 13105, 0x00808080)															// Couleur phase 3
//	GFX_Setf(i_GFX_Debris, 13011, tv_pos.z - 10.0)																// Hauteur du sol
//	GFX_Setv(i_GFX_Debris, 13200, tv_pos + cvector(0.0, 0.0, 0.0))									// Position de création
//	GFX_Setf(i_GFX_Debris, 13009, 10.0)																		// Vitesse min
//	GFX_Setf(i_GFX_Debris, 13010, 20.0)																		// Vitesse max
//	GFX_Setv(i_GFX_Debris, 13201, cvector(-tf_vitesse, -tf_vitesse, tf_vitesse * MATH_RandFloat(0.25,0.75)))			// Vitesse min sur chaque axe
//	GFX_Setv(i_GFX_Debris, 13202, cvector(tf_vitesse, tf_vitesse, tf_vitesse * MATH_RandFloat(0.25,0.75)))			// Vitesse max sur chaque axe
//	GFX_Setv(i_GFX_Debris, 13204, cvector(0.00000, 0.00000, 0.00000))						// Vent
//	GFX_Setv(i_GFX_Debris, 13205, cvector(0.00000, 0.00000, 0.00000))						// Vitesse de la position de création
//	GFX_Setv(i_GFX_Debris, 13206, cvector(0.00000, 0.00000, 0.00000))						// Friction de la position
//	GFX_Setv(i_GFX_Debris, 13207, cvector(0.01,0.0,0.0))											// Volume de création 1
//	GFX_Setv(i_GFX_Debris, 13208, cvector(0.0,0.01,0.0))											// Volume de création 2
//	GFX_Setf(i_GFX_Debris, 13008, 0.25)																// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 												PAF LAPIN 02 : PAF SOFT
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_PAF_LAPIN_02(vector tv_pos, float tf_taille)
{
	int 	i_GFX_Paf
	int 	i_GFX_Etincelles
	int		i_GFX_Debris
	int		i_num_layer
	float 	tf_vitesse, tf_vitesse_X, tf_vitesse_Y, tf_vitesse_Z, tf_vitesse_globale
	
	i_num_layer = MATH_RandInt(0,3)

	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,0,faux)
	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,1,faux)
	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,2,faux)

	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,i_num_layer,vrai)

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 1 : PAF
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Paf = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Paf, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Paf, 13101, 64)														// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Paf, 0 , 1)
	GFX_FlagSet(i_GFX_Paf, 2 , 1)
	GFX_Seti(i_GFX_Paf, 13100, 1)															// Nombre maxi de sprites
	GFX_Seti(i_GFX_Paf, 13106, 1)															// Nombre de sprites à générer
	GFX_Setf(i_GFX_Paf, 13003, 0.000000)												// duree de vie phase 1
	GFX_Setf(i_GFX_Paf, 13004, 0.040000)												// duree de vie phase 2 
	GFX_Setf(i_GFX_Paf, 13012, 0.750000)												// Life time random
	GFX_Seti(i_GFX_Paf, 13107, 0)															// Tri des sprites
	GFX_Setf(i_GFX_Paf, 13000, 20.0000)													// Vitesse de croissance min
	GFX_Setf(i_GFX_Paf, 13001, 40.0000)													// Vitesse de croissance max
	GFX_Setf(i_GFX_Paf, 13002, 1.0)														// Friction sur la croissance
	GFX_Setf(i_GFX_Paf, 13005, tf_taille * 0.100000)									// Taille min à la création
	GFX_Setf(i_GFX_Paf, 13006, tf_taille * 0.100000)									// Taille max à la création
	GFX_Setf(i_GFX_Paf, 13007, 0.00000)													// Gravité
	GFX_Setv(i_GFX_Paf, 13203, cvector(0,0,0))											// Friction sur chaque axe
	GFX_Seti(i_GFX_Paf, 13103, 0x80C06060)//BFD178)							// Couleur phase 1
	GFX_Seti(i_GFX_Paf, 13104, 0x80C06060)//8FD964)								// Couleur phase 2
	GFX_Seti(i_GFX_Paf, 13105, 0x00C06060)											// Couleur phase 3
	GFX_Setf(i_GFX_Paf, 13011, tv_pos.z - 10.0)												// Hauteur du sol
	GFX_Setv(i_GFX_Paf, 13200, tv_pos)													// Position de création
	GFX_Setf(i_GFX_Paf, 13009, 0.0)														// Vitesse min
	GFX_Setf(i_GFX_Paf, 13010, 0.0)														// Vitesse max
	GFX_Setv(i_GFX_Paf, 13201, cvector(0,0,0))											// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Paf, 13202, cvector(0,0,0))											// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Paf, 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv(i_GFX_Paf, 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv(i_GFX_Paf, 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setv(i_GFX_Paf, 13207, cvector(0.01,0.0,0.0))								// Volume de création 1
	GFX_Setv(i_GFX_Paf, 13208, cvector(0.0,0.01,0.0))								// Volume de création 2
	GFX_Setf(i_GFX_Paf, 13008, 0.0)														// Taux de génération

	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 3 : trainées
	//------------------------------------------------------------------------------------------------------------------
	tf_vitesse = 20.0
	tf_vitesse_X = 5.0
	tf_vitesse_Y = 5.0
	
	i_GFX_Debris = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Debris, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Debris, 13101, 65)																		// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Debris, 0 , 1)
	GFX_FlagSet(i_GFX_Debris, 2 , 1)
	GFX_Seti(i_GFX_Debris, 13100, 3)																			// Nombre maxi de sprites
	GFX_Seti(i_GFX_Debris, 13106, 3)																			// Nombre de sprites à générer
	GFX_Setf(i_GFX_Debris, 13003, 0.300000)																// duree de vie phase 1
	GFX_Setf(i_GFX_Debris, 13004, 0.450000)																// duree de vie phase 2 
	GFX_Setf(i_GFX_Debris, 13012, 0.750000)																// Life time random
	GFX_Seti(i_GFX_Debris, 13107, 0)																			// Tri des sprites
	GFX_Setf(i_GFX_Debris, 13000, 0.00000)																// Vitesse de croissance min
	GFX_Setf(i_GFX_Debris, 13001, 0.00000)																// Vitesse de croissance max
	GFX_Setf(i_GFX_Debris, 13002, 1.0)																		// Friction sur la croissance
	GFX_Setf(i_GFX_Debris, 13005, 0.0300000)																// Taille min à la création
	GFX_Setf(i_GFX_Debris, 13006, 0.0600000)																// Taille max à la création
	GFX_Setf(i_GFX_Debris, 13007, -18.00000)																// Gravité
	GFX_Setv(i_GFX_Debris, 13203, cvector(0.0, 0.0, 0.0))												// Friction sur chaque axe
	GFX_Seti(i_GFX_Debris, 13103, 0xAF505050)															// Couleur phase 1
	GFX_Seti(i_GFX_Debris, 13104, 0x80505050)															// Couleur phase 2
	GFX_Seti(i_GFX_Debris, 13105, 0x00505050)															// Couleur phase 3
	GFX_Setf(i_GFX_Debris, 13011, @get_rayman OBJ_PosGet().z)																// Hauteur du sol
	GFX_Setv(i_GFX_Debris, 13200, tv_pos + cvector(0.0, 0.0, 0.0))									// Position de création
	GFX_Setf(i_GFX_Debris, 13009, 10.0)																		// Vitesse min
	GFX_Setf(i_GFX_Debris, 13010, 20.0)																		// Vitesse max
	GFX_Setv(i_GFX_Debris, 13201, cvector(-tf_vitesse, -tf_vitesse, tf_vitesse * MATH_RandFloat(0.25,0.75)))			// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Debris, 13202, cvector(tf_vitesse, tf_vitesse, tf_vitesse * MATH_RandFloat(0.25,0.75)))			// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Debris, 13204, cvector(0.00000, 0.00000, 0.00000))							// Vent
	GFX_Setv(i_GFX_Debris, 13205, cvector(0.00000, 0.00000, 0.00000))							// Vitesse de la position de création
	GFX_Setv(i_GFX_Debris, 13206, cvector(0.00000, 0.00000, 0.00000))							// Friction de la position
	GFX_Setv(i_GFX_Debris, 13207, cvector(0.01,0.0,0.0))												// Volume de création 1
	GFX_Setv(i_GFX_Debris, 13208, cvector(0.0,0.01,0.0))												// Volume de création 2
	GFX_Setf(i_GFX_Debris, 13008, 0.0)																		// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 												PAF LAPIN 03 : PAF FORT
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_PAF_LAPIN_03(vector tv_pos, float tf_taille)
{
	int 	i_GFX_Paf
	int 	i_GFX_Etincelles
	int		i_GFX_Debris
	int		i_num_layer
	float 	tf_vitesse, tf_vitesse_X, tf_vitesse_Y, tf_vitesse_Z, tf_vitesse_globale
	
	i_num_layer = MATH_RandInt(0,3)

	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,0,faux)
	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,1,faux)
	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,2,faux)

	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,i_num_layer,vrai)

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 1 : PAF
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Paf = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Paf, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Paf, 13101, 64)														// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Paf, 0 , 1)
	GFX_FlagSet(i_GFX_Paf, 2 , 1)
	GFX_Seti(i_GFX_Paf, 13100, 1)															// Nombre maxi de sprites
	GFX_Seti(i_GFX_Paf, 13106, 1)															// Nombre de sprites à générer
	GFX_Setf(i_GFX_Paf, 13003, 0.000000)												// duree de vie phase 1
	GFX_Setf(i_GFX_Paf, 13004, 0.040000)												// duree de vie phase 2 
	GFX_Setf(i_GFX_Paf, 13012, 0.750000)												// Life time random
	GFX_Seti(i_GFX_Paf, 13107, 0)															// Tri des sprites
	GFX_Setf(i_GFX_Paf, 13000, 15.0000)													// Vitesse de croissance min
	GFX_Setf(i_GFX_Paf, 13001, 50.0000)													// Vitesse de croissance max
	GFX_Setf(i_GFX_Paf, 13002, 1.0)														// Friction sur la croissance
	GFX_Setf(i_GFX_Paf, 13005, tf_taille * 0.300000)									// Taille min à la création
	GFX_Setf(i_GFX_Paf, 13006, tf_taille * 0.300000)									// Taille max à la création
	GFX_Setf(i_GFX_Paf, 13007, 0.00000)													// Gravité
	GFX_Setv(i_GFX_Paf, 13203, cvector(0,0,0))											// Friction sur chaque axe
	GFX_Seti(i_GFX_Paf, 13103, 0x0F50D0FF)//BFD178)							// Couleur phase 1
	GFX_Seti(i_GFX_Paf, 13104, 0x0F50D0FF)//8FD964)							// Couleur phase 2
	GFX_Seti(i_GFX_Paf, 13105, 0x0000C0FF)											// Couleur phase 3
	GFX_Setf(i_GFX_Paf, 13011, tv_pos.z - 10.0)												// Hauteur du sol
	GFX_Setv(i_GFX_Paf, 13200, tv_pos)													// Position de création
	GFX_Setf(i_GFX_Paf, 13009, 0.0)														// Vitesse min
	GFX_Setf(i_GFX_Paf, 13010, 0.0)														// Vitesse max
	GFX_Setv(i_GFX_Paf, 13201, cvector(0,0,0))											// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Paf, 13202, cvector(0,0,0))											// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Paf, 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv(i_GFX_Paf, 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv(i_GFX_Paf, 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setv(i_GFX_Paf, 13207, cvector(0.01,0.0,0.0))								// Volume de création 1
	GFX_Setv(i_GFX_Paf, 13208, cvector(0.0,0.01,0.0))								// Volume de création 2
	GFX_Setf(i_GFX_Paf, 13008, 0.0)														// Taux de génération


	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 2 : étincelles
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Etincelles = GFX_Add(9)
	GFX_FlagSet(i_GFX_Etincelles, 0,1)
	GFX_FlagSet(i_GFX_Etincelles, 2, 1)
	GFX_MaterialSet(i_GFX_Etincelles, get_SFX_light_and_smoke, 66)
	GFX_Seti(i_GFX_Etincelles, 9101, 0x0350D0FF)														// Couleur des particules
	GFX_Seti(i_GFX_Etincelles, 9101, 0x0350D0FF)														// Couleur des particules
	GFX_Setv(i_GFX_Etincelles, 9200, tv_pos)																// Position
	GFX_Setv(i_GFX_Etincelles, 9201, cvector(0.0, 0.0, 1.0) )											// Axe principal de génération
	GFX_Setv(i_GFX_Etincelles, 9202, cvector(0, 0, 0.0))													// Gravité
	GFX_Seti(i_GFX_Etincelles, 9100, 5)																		// Nombre de particules max
	GFX_Seti (i_GFX_Etincelles, 9102, 8)																		// Flags
	GFX_Setf(i_GFX_Etincelles, 9000, 3.0 )																	// Angle du cône, en radians
	GFX_Setf(i_GFX_Etincelles, 9001, tf_taille * 20)														// Vitesse min
	GFX_Setf(i_GFX_Etincelles, 9002, tf_taille * 30)														// Vitesse max
	GFX_Setf(i_GFX_Etincelles, 9003, 0.8)																	// Friction
	GFX_Setf(i_GFX_Etincelles, 9004, MATH_RandFloat(tf_taille * 0.005, tf_taille * 0.01))		// Epaisseur des étincelles
	GFX_Setf(i_GFX_Etincelles, 9005, 0.5)																	// Temps de vie minimum
	GFX_Setf(i_GFX_Etincelles, 9006, 0.5)																	// Temps de vie max
	GFX_Setf(i_GFX_Etincelles, 9007, 5 * tf_taille)															// Multiplicateur de longueur
	GFX_Setf(i_GFX_Etincelles, 9008, 0.0)																	// Temps entre la génération de 2 étincelles
	GFX_Setf(i_GFX_Etincelles, 9009, 0.2)																	// Temps de mort minimum
	GFX_Setf(i_GFX_Etincelles, 9010, 0.2)																	// Temps de mort maximum

	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 3 : trainées
	//------------------------------------------------------------------------------------------------------------------
	tf_vitesse = 20.0
	tf_vitesse_X = 5.0
	tf_vitesse_Y = 5.0
	
	i_GFX_Debris = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Debris, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Debris, 13101, 65)																		// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Debris, 0 , 1)
	GFX_FlagSet(i_GFX_Debris, 2 , 1)
	GFX_Seti(i_GFX_Debris, 13100, 2)																			// Nombre maxi de sprites
	GFX_Seti(i_GFX_Debris, 13106, 2)																			// Nombre de sprites à générer
	GFX_Setf(i_GFX_Debris, 13003, 0.300000)																// duree de vie phase 1
	GFX_Setf(i_GFX_Debris, 13004, 0.150000)																// duree de vie phase 2 
	GFX_Setf(i_GFX_Debris, 13012, 0.750000)																// Life time random
	GFX_Seti(i_GFX_Debris, 13107, 0)																			// Tri des sprites
	GFX_Setf(i_GFX_Debris, 13000, 0.00000)																// Vitesse de croissance min
	GFX_Setf(i_GFX_Debris, 13001, 0.00000)																// Vitesse de croissance max
	GFX_Setf(i_GFX_Debris, 13002, 1.0)																		// Friction sur la croissance
	GFX_Setf(i_GFX_Debris, 13005, 0.0300000)																// Taille min à la création
	GFX_Setf(i_GFX_Debris, 13006, 0.0600000)																// Taille max à la création
	GFX_Setf(i_GFX_Debris, 13007, -18.00000)																// Gravité
	GFX_Setv(i_GFX_Debris, 13203, cvector(0.0, 0.0, 0.0))												// Friction sur chaque axe
	GFX_Seti(i_GFX_Debris, 13103, 0xAFFFFFFF)															// Couleur phase 1
	GFX_Seti(i_GFX_Debris, 13104, 0x80FFFFFF)															// Couleur phase 2
	GFX_Seti(i_GFX_Debris, 13105, 0x00FFFFFF)															// Couleur phase 3
	GFX_Setf(i_GFX_Debris, 13011, tv_pos.z - 10.0)														// Hauteur du sol
	GFX_Setv(i_GFX_Debris, 13200, tv_pos + cvector(0.0, 0.0, 0.0))									// Position de création
	GFX_Setf(i_GFX_Debris, 13009, 10.0)																		// Vitesse min
	GFX_Setf(i_GFX_Debris, 13010, 20.0)																		// Vitesse max
	GFX_Setv(i_GFX_Debris, 13201, cvector(-tf_vitesse, -tf_vitesse, tf_vitesse * MATH_RandFloat(0.25,0.75)))			// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Debris, 13202, cvector(tf_vitesse, tf_vitesse, tf_vitesse * MATH_RandFloat(0.25,0.75)))			// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Debris, 13204, cvector(0.00000, 0.00000, 0.00000))							// Vent
	GFX_Setv(i_GFX_Debris, 13205, cvector(0.00000, 0.00000, 0.00000))							// Vitesse de la position de création
	GFX_Setv(i_GFX_Debris, 13206, cvector(0.00000, 0.00000, 0.00000))							// Friction de la position
	GFX_Setv(i_GFX_Debris, 13207, cvector(0.01,0.0,0.0))												// Volume de création 1
	GFX_Setv(i_GFX_Debris, 13208, cvector(0.0,0.01,0.0))												// Volume de création 2
	GFX_Setf(i_GFX_Debris, 13008, 0.0)																		// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 										EXPLOSION ARBRE
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_ARBRE(vector tv_pos, float tf_taille, float tf_rayon_principal)
{
	float tf_rayon_annexe, tf_friction_grow, tf_vitesse, tf_vitesse_X, tf_vitesse_Y, tf_vitesse_globale, tf_tmp_ID, tf_distance
	int ti_nb_sprites, ti_cpt1, ti_nb_trainees
	
	int		i_GFX_Paf, i_GFX_Rocks, i_GFX_Nuage_cartoon2, i_GFX_Trainees[7], i_GFX_Etincelles, i_GFX_Nuage_cartoon
	int		i_GFX_Souffle, i_GFX_Rocks2, i_GFX_Nuage_cartoon3
	
	ti_nb_trainees = 7

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 1 : PAF
	//------------------------------------------------------------------------------------------------------------------
	tf_tmp_ID = MATH_RandInt(0,3)
	i_GFX_Paf = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Paf, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Paf, 13101,55+ tf_tmp_ID)											// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Paf, 0 , 1)
	GFX_FlagSet(i_GFX_Paf, 2 , 1)
	GFX_Seti(i_GFX_Paf, 13100, 1)															// Nombre maxi de sprites
	GFX_Seti(i_GFX_Paf, 13106, 1)															// Nombre de sprites à générer
	GFX_Setf(i_GFX_Paf, 13003, 0.060000)												// duree de vie phase 1
	GFX_Setf(i_GFX_Paf, 13004, 0.0150000)												// duree de vie phase 2 
	GFX_Setf(i_GFX_Paf, 13012, 0.750000)												// Life time random
	GFX_Seti(i_GFX_Paf, 13107, 0)															// Tri des sprites
	GFX_Setf(i_GFX_Paf, 13000, tf_taille * 35.0000)									// Vitesse de croissance min
	GFX_Setf(i_GFX_Paf, 13001, tf_taille * 55.0000)									// Vitesse de croissance max
	GFX_Setf(i_GFX_Paf, 13002, 0.35)														// Friction sur la croissance
	GFX_Setf(i_GFX_Paf, 13005, tf_taille * 0.050000)									// Taille min à la création
	GFX_Setf(i_GFX_Paf, 13006, tf_taille * 0.200000)									// Taille max à la création
	GFX_Setf(i_GFX_Paf, 13007, 0.00000)													// Gravité
	GFX_Setv(i_GFX_Paf, 13203, cvector(0,0,0))											// Friction sur chaque axe
	GFX_Seti(i_GFX_Paf, 13103, 0xFFFFFFFF)											// Couleur phase 1
	GFX_Seti(i_GFX_Paf, 13104, 0xFFFFFFFF)											// Couleur phase 2
	GFX_Seti(i_GFX_Paf, 13105, 0x00FFFFFF)											// Couleur phase 3
	GFX_Setf(i_GFX_Paf, 13011, tv_pos.z - 10.0)										// Hauteur du sol
	GFX_Setv(i_GFX_Paf, 13200, tv_pos + cvector(0.0, 0.0, 0.5))					// Position de création
	GFX_Setf(i_GFX_Paf, 13009, 0.0)														// Vitesse min
	GFX_Setf(i_GFX_Paf, 13010, 0.0)														// Vitesse max
	GFX_Setv(i_GFX_Paf, 13201, cvector(0,0,0))											// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Paf, 13202, cvector(0,0,0))											// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Paf, 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv(i_GFX_Paf, 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv(i_GFX_Paf, 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setv(i_GFX_Paf, 13207, cvector(0.01,0.0,0.0))								// Volume de création 1
	GFX_Setv(i_GFX_Paf, 13208, cvector(0.0,0.01,0.0))								// Volume de création 2
	GFX_Setf(i_GFX_Paf, 13008, 0.000000)												// Taux de génération
	
	
//	//------------------------------------------------------------------------------------------------------------------
//	// 					GENERATEUR DE PARCITULES CATOON 2 : trainées
//	//------------------------------------------------------------------------------------------------------------------
//	ti_nb_sprites = tf_taille * 25
//	tf_friction_grow = 0.01
//	tf_vitesse = tf_taille * 20.0
//	
//	for (ti_cpt1 = 0; ti_cpt1 < ti_nb_trainees ; ti_cpt1++)
//	{
//		tf_vitesse_X = MATH_RandFloat(-tf_vitesse, tf_vitesse)
//		tf_vitesse_Y = MATH_RandFloat(-tf_vitesse, tf_vitesse)
//		tf_vitesse_globale = MATH_RandFloat(tf_vitesse/2,tf_vitesse)
//		i_GFX_Trainees[ti_cpt1] = GFX_Add(13)
//		GFX_MaterialSet(i_GFX_Trainees[ti_cpt1], get_SFX_light_and_smoke, -1)
//		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13101, 41)																	// ID de material du SFX Lgt&Smk
//		GFX_FlagSet(i_GFX_Trainees[ti_cpt1], 0 , 1)
//		GFX_FlagSet(i_GFX_Trainees[ti_cpt1], 2 , 1)
//		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13100, ti_nb_sprites )													// Nombre maxi de sprites
//		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13106, ti_nb_sprites )													// Nombre de sprites à générer
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13003, 0.300000)															// duree de vie phase 1
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13004, 0.150000)															// duree de vie phase 2 
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13012, 0.750000)															// Life time random
//		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13107, 0)																	// Tri des sprites
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13000, 0.10000 * tf_taille)												// Vitesse de croissance min
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13001, 0.2000 * tf_taille)												// Vitesse de croissance max
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13002, tf_friction_grow)													// Friction sur la croissance
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13005, 0.0500000 * tf_taille)											// Taille min à la création
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13006, 0.100000 * tf_taille)											// Taille max à la création
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13007, -18.00000)														// Gravité
//		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13203, cvector(0.0, 0.0, 0.0))											// Friction sur chaque axe
//		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13103, 0xFFFFFFFF)													// Couleur phase 1
//		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13104, 0xFFFFFFFF)														// Couleur phase 2
//		GFX_Seti(i_GFX_Trainees[ti_cpt1], 13105, 0x00FFFFFF)														// Couleur phase 3
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13011, tv_pos.z - 10.0)													// Hauteur du sol
//		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13200, tv_pos + cvector(0.0, 0.0, 0.0))								// Position de création
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13009, tf_vitesse_globale )												// Vitesse min
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13010, tf_vitesse_globale )												// Vitesse max
//		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13201, cvector(tf_vitesse_X, tf_vitesse_Y, tf_vitesse * MATH_RandFloat(0.1,0.5)))			// Vitesse min sur chaque axe
//		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13202, cvector(tf_vitesse_X, tf_vitesse_Y, -tf_vitesse * MATH_RandFloat(0.1,0.5)))			// Vitesse max sur chaque axe
//		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13204, cvector(0.00000, 0.00000, 0.00000))						// Vent
//		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13205, cvector(0.00000, 0.00000, 0.00000))						// Vitesse de la position de création
//		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13206, cvector(0.00000, 0.00000, 0.00000))						// Friction de la position
//		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13207, cvector(0.01,0.0,0.0))											// Volume de création 1
//		GFX_Setv(i_GFX_Trainees[ti_cpt1], 13208, cvector(0.0,0.01,0.0))											// Volume de création 2
//		GFX_Setf(i_GFX_Trainees[ti_cpt1], 13008, 0.01)																// Taux de génération
//	}
	
	
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 3 : rochers
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Rocks = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Rocks, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Rocks, 13101, 42)																	// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Rocks, 0 , 1)
	GFX_FlagSet(i_GFX_Rocks, 2 , 1)
	GFX_Seti(i_GFX_Rocks, 13100, (tf_taille * 10) + 10)												// Nombre maxi de sprites
	GFX_Seti(i_GFX_Rocks, 13106, (tf_taille * 10) + 10)												// Nombre de sprites à générer
	GFX_Setf(i_GFX_Rocks, 13003, 1.0)																	// duree de vie phase 1
	GFX_Setf(i_GFX_Rocks, 13004, 0.5)																	// duree de vie phase 2 
	GFX_Setf(i_GFX_Rocks, 13012, 0.750000)															// Life time random
	GFX_Seti(i_GFX_Rocks, 13107, 0)																		// Tri des sprites
	GFX_Setf(i_GFX_Rocks, 13000, tf_taille * 1.0)														// Vitesse de croissance min
	GFX_Setf(i_GFX_Rocks, 13001, tf_taille * 1.2)														// Vitesse de croissance max
	GFX_Setf(i_GFX_Rocks, 13002, 1.0)																	// Friction sur la croissance
	GFX_Setf(i_GFX_Rocks, 13005, tf_taille * 0.01)														// Taille min à la création
	GFX_Setf(i_GFX_Rocks, 13006, tf_taille * 0.1)														// Taille max à la création
	GFX_Setf(i_GFX_Rocks, 13007, -20.00000)															// Gravité
	GFX_Setv(i_GFX_Rocks, 13203, Cv_NullVector)													// Friction sur chaque axe
	GFX_Seti(i_GFX_Rocks, 13103, 0xFFFFFFFF)														// Couleur phase 1
	GFX_Seti(i_GFX_Rocks, 13104, 0xFFFFFFFF)														// Couleur phase 2
	GFX_Seti(i_GFX_Rocks, 13105, 0x00000000)														// Couleur phase 3
	GFX_Setf(i_GFX_Rocks, 13011, tv_pos.z - 10.0)													// Hauteur du sol
	GFX_Setv(i_GFX_Rocks, 13200, tv_pos)																// Position de création
	GFX_Setf(i_GFX_Rocks, 13009, tf_taille * 5.0)														// Vitesse min
	GFX_Setf(i_GFX_Rocks, 13010, tf_taille * 30.0)														// Vitesse max
	GFX_Setv(i_GFX_Rocks, 13201, cvector(-15 * tf_taille, -15 * tf_taille, 15.0 * tf_taille))		// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Rocks, 13202, cvector(15 * tf_taille, 15 * tf_taille, -15.0 * tf_taille))		// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Rocks, 13204, cvector(0.00000, 0.00000, 0.00000))						// Vent
	GFX_Setv(i_GFX_Rocks, 13205, Cv_NullVector)													// Vitesse de la position de création
	GFX_Setv(i_GFX_Rocks, 13206, Cv_NullVector)													// Friction de la position
	GFX_Setv(i_GFX_Rocks, 13207, cvector(0.01,0.0,0.0))											// Volume de création 1
	GFX_Setv(i_GFX_Rocks, 13208, cvector(0.0,0.01,0.0))											// Volume de création 2
	GFX_Setf(i_GFX_Rocks, 13008, 0.00)																	// Taux de génération
	
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 4 : étincelles
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Etincelles = GFX_Add(9)
	GFX_FlagSet(i_GFX_Etincelles, 0,1)
	GFX_FlagSet(i_GFX_Etincelles, 2, 1)
	GFX_MaterialSet(i_GFX_Etincelles, get_SFX_light_and_smoke, 5)
	GFX_Seti(i_GFX_Etincelles, 9101, 0x40448DAB)																	// Couleur des particules
	GFX_Setv(i_GFX_Etincelles, 9200, tv_pos + cvector(0.0,0.0,0.25))											// Position
	GFX_Setv(i_GFX_Etincelles, 9201, cvector(0.0, 0.0, 1.0) )														// Axe principal de génération
	GFX_Setv(i_GFX_Etincelles, 9202, cvector(0, 0, 0.0))																// Gravité
	GFX_Seti(i_GFX_Etincelles, 9100, 15)																					// Nombre de particules max
	GFX_Seti (i_GFX_Etincelles, 9102, 10)																				// Flags
	GFX_Setf(i_GFX_Etincelles, 9000, 3.0 )																				// Angle du cône, en radians
	GFX_Setf(i_GFX_Etincelles, 9001, 50)																					// Vitesse min
	GFX_Setf(i_GFX_Etincelles, 9002, 60)																					// Vitesse max
	GFX_Setf(i_GFX_Etincelles, 9003, 0.8)																				// Friction
	GFX_Setf(i_GFX_Etincelles, 9004, tf_taille * MATH_RandFloat(0.0,0.1))									// Epaisseur des étincelles
	GFX_Setf(i_GFX_Etincelles, 9005, 0.2)																				// Temps de vie minimum
	GFX_Setf(i_GFX_Etincelles, 9006, 0.6)																				// Temps de vie max
	GFX_Setf(i_GFX_Etincelles, 9007, (tf_taille * 5) + 10)																// Multiplicateur de longueur
	GFX_Setf(i_GFX_Etincelles, 9008, 0.0)																				// Temps entre la génération de 2 étincelles
	GFX_Setf(i_GFX_Etincelles, 9009, 0.2)																				// Temps de mort minimum
	GFX_Setf(i_GFX_Etincelles, 9010, 0.2)																				// Temps de mort maximum
	
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 5 : nuage central 1
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Nuage_cartoon = GFX_Add( 13)
	GFX_MaterialSet(i_GFX_Nuage_cartoon, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Nuage_cartoon, 13101,41)																			// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Nuage_cartoon, 0 , 1)
	GFX_FlagSet(i_GFX_Nuage_cartoon, 2 , 1)
	GFX_Seti(i_GFX_Nuage_cartoon, 13100, 1)																			// Nombre maxi de sprites
	GFX_Seti(i_GFX_Nuage_cartoon, 13106, 1)																			// Nombre de sprites à générer
	GFX_Setf(i_GFX_Nuage_cartoon, 13003, 0.050000)																// duree de vie phase 1
	GFX_Setf(i_GFX_Nuage_cartoon, 13004, 0.200000)																// duree de vie phase 2 
	GFX_Setf(i_GFX_Nuage_cartoon, 13012, 0.750000)																// Life time random
	GFX_Seti(i_GFX_Nuage_cartoon, 13107, 0)																			// Tri des sprites
	GFX_Setf(i_GFX_Nuage_cartoon, 13000, -30.0 * tf_taille)														// Vitesse de croissance min
	GFX_Setf(i_GFX_Nuage_cartoon, 13001, -30.0 * tf_taille)														// Vitesse de croissance max
	GFX_Setf(i_GFX_Nuage_cartoon, 13002, -0.01)																		// Friction sur la croissance
	GFX_Setf(i_GFX_Nuage_cartoon, 13005, 5.5 * tf_taille)															// Taille min à la création
	GFX_Setf(i_GFX_Nuage_cartoon, 13006, 5.5 * tf_taille)															// Taille max à la création
	GFX_Setf(i_GFX_Nuage_cartoon, 13007, 0.0)																		// Gravité
	GFX_Setv(i_GFX_Nuage_cartoon, 13203, cvector(1.0,1.0,1.0))													// Friction sur chaque axe
	GFX_Seti(i_GFX_Nuage_cartoon , 13103, 0x00AFCBD5)														// Couleur phase 1
	GFX_Seti(i_GFX_Nuage_cartoon , 13104, 0xFFAFCBD5)														// Couleur phase 2
	GFX_Seti(i_GFX_Nuage_cartoon , 13105, 0x00AFCBD5)														// Couleur phase 3
	GFX_Setf(i_GFX_Nuage_cartoon, 13011, tv_pos.z - 10.0)														// Hauteur du sol
	GFX_Setv(i_GFX_Nuage_cartoon, 13200, tv_pos + cvector(0.0, 0.0, 0.5))									// Position de création
	GFX_Setf(i_GFX_Nuage_cartoon, 13009, 0.0)																		// Vitesse min
	GFX_Setf(i_GFX_Nuage_cartoon, 13010, 0.0)																		// Vitesse max
	GFX_Setv(i_GFX_Nuage_cartoon, 13201, cvector(0.0, 0.0, 0.0))												// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon, 13202, cvector(0.0, 0.0, 0.0))												// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon, 13204, cvector(0.0, 0.0, 0.0))												// Vent
	GFX_Setv(i_GFX_Nuage_cartoon, 13205, cvector(0.0, 0.0, 0.0))												// Vitesse de la position de création
	GFX_Setv(i_GFX_Nuage_cartoon, 13206, cvector(0.0, 0.0, 0.0))												// Friction de la position
	GFX_Setv(i_GFX_Nuage_cartoon, 13207, cvector(0.01,0.0,0.0))												// Volume de création 1
	GFX_Setv(i_GFX_Nuage_cartoon, 13208, cvector(0.0,0.01,0.0))												// Volume de création 2
	GFX_Setf(i_GFX_Nuage_cartoon, 13008, 0.0)																		// Taux de génération
	
	tf_distance = 20.0 * tf_taille
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 6 : nuage central 2
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Nuage_cartoon2 = GFX_Add( 13)
	GFX_MaterialSet(i_GFX_Nuage_cartoon2, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Nuage_cartoon2, 13101, 41)																		// ID de material du SFX Lgt&Smk
	GFX_Seti(i_GFX_Nuage_cartoon2, 13102, 8)
	GFX_FlagSet(i_GFX_Nuage_cartoon2, 0, 1)
	GFX_FlagSet(i_GFX_Nuage_cartoon2, 2, 1)
	GFX_Seti(i_GFX_Nuage_cartoon2, 13100, tf_taille)																// Nombre maxi de sprites
	GFX_Seti(i_GFX_Nuage_cartoon2, 13106, tf_taille)																// Nombre de sprites à générer
	GFX_Setf(i_GFX_Nuage_cartoon2, 13003, 0.3)																		// duree de vie phase 1
	GFX_Setf(i_GFX_Nuage_cartoon2, 13004, 1.25)																	// duree de vie phase 2 
	GFX_Setf(i_GFX_Nuage_cartoon2, 13012, 0.750000)																// Life time random
	GFX_Seti(i_GFX_Nuage_cartoon2, 13107, 0)																		// Tri des sprites
	GFX_Setf(i_GFX_Nuage_cartoon2, 13000, 7.0000 * tf_taille)													// Vitesse de croissance min
	GFX_Setf(i_GFX_Nuage_cartoon2, 13001, 15.0000 * tf_taille)													// Vitesse de croissance max
	GFX_Setf(i_GFX_Nuage_cartoon2, 13002, 0.1)																		// Friction sur la croissance
	GFX_Setf(i_GFX_Nuage_cartoon2, 13005, 0.0)																		// Taille min à la création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13006, 0.0)																		// Taille max à la création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13007, 0.0)																		// Gravité
	GFX_Setv(i_GFX_Nuage_cartoon2, 13203, cvector(1.0,1.0,1.0))												// Friction sur chaque axe
	GFX_Seti(i_GFX_Nuage_cartoon2, 13103, 0x004F6B75)															// Couleur phase 1
	GFX_Seti(i_GFX_Nuage_cartoon2 , 13104, 0x904F6B75)														// Couleur phase 2
	GFX_Seti(i_GFX_Nuage_cartoon2, 13105, 0x002F4B65)															// Couleur phase 3
	GFX_Setf(i_GFX_Nuage_cartoon2, 13011, tv_pos.z - 10.0)														// Hauteur du sol
	GFX_Setv(i_GFX_Nuage_cartoon2, 13200, tv_pos + cvector(0.0, 0.0, 0.5))									// Position de création
	GFX_Setf(i_GFX_Nuage_cartoon2, 13009, tf_distance)															// Vitesse min
	GFX_Setf(i_GFX_Nuage_cartoon2, 13010, tf_distance)															// Vitesse max
	GFX_Setv(i_GFX_Nuage_cartoon2, 13201, cvector(-tf_distance, -tf_distance, -tf_distance))			// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon2, 13202, cvector(tf_distance, tf_distance, tf_distance))				// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Nuage_cartoon2, 13204, cvector(0.0, 0.0, 10.0))											// Vent
	GFX_Setv(i_GFX_Nuage_cartoon2, 13205, cvector(0.0, 0.0, 0.0))												// Vitesse de la position de création
	GFX_Setv(i_GFX_Nuage_cartoon2, 13206, cvector(0.0, 0.0, 0.0))												// Friction de la position
	GFX_Setv(i_GFX_Nuage_cartoon2, 13207, cvector(0.01,0.0,0.0))												// Volume de création 1
	GFX_Setv(i_GFX_Nuage_cartoon2, 13208, cvector(0.0,0.01,0.0))												// Volume de création 2
	GFX_Setf(i_GFX_Nuage_cartoon2, 13008, 0.0)																		// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	// 					GRAND NUAGE DE FUMEE AU DESSUS DE L'EXPLOSION
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------

	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES EXPLOSION
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Souffle = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Souffle, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Souffle, 13101, 8)															// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Souffle, 0 , 1)
	GFX_FlagSet(i_GFX_Souffle, 2 , 1)
	GFX_Seti(i_GFX_Souffle, 13100, tf_rayon_principal* 3)											// Nombre maxi de sprites
	GFX_Seti(i_GFX_Souffle, 13106, tf_rayon_principal* 3) 											// Nombre de sprites à générer
	GFX_Setf(i_GFX_Souffle, 13003, 0.25)														// duree de vie phase 1
	GFX_Setf(i_GFX_Souffle, 13004, tf_rayon_principal* 0.1)											// duree de vie phase 2 
	GFX_Setf(i_GFX_Souffle, 13012, 0.7500)													// Life time random
	GFX_Seti(i_GFX_Souffle, 13107, 0)															// Tri des sprites
	GFX_Setf(i_GFX_Souffle, 13000, 0.1 * tf_rayon_principal+1.2)									// Vitesse de croissance min
	GFX_Setf(i_GFX_Souffle, 13001, tf_rayon_principal)												// Vitesse de croissance max
	tf_friction_grow = 0.5 / tf_rayon_principal
	GFX_Setf(i_GFX_Souffle, 13002, tf_friction_grow)										// Friction sur la croissance
	GFX_Setf(i_GFX_Souffle, 13005, tf_rayon_principal* 0.001)										// Taille min à la création
	GFX_Setf(i_GFX_Souffle, 13006, tf_rayon_principal* 0.004)										// Taille max à la création
	GFX_Setf(i_GFX_Souffle, 13007, -1.0)														// Gravité
	tf_friction_grow = 0.5 / tf_rayon_principal
	GFX_Setv(i_GFX_Souffle, 13203, cvector(tf_friction_grow * 5, tf_friction_grow * 5, tf_friction_grow*1.5 ))	// Friction sur chaque axe
	GFX_Seti(i_GFX_Souffle, 13103, 0xFF6F6F6F)											// Couleur phase 1
	GFX_Seti(i_GFX_Souffle, 13104, 0x594F6B85)											// Couleur phase 2
	GFX_Seti(i_GFX_Souffle, 13105, 0x002F4B55)											// Couleur phase 3
	GFX_Setf(i_GFX_Souffle, 13009, tf_rayon_principal+ 20)											// Vitesse min
	GFX_Setf(i_GFX_Souffle, 13010, tf_rayon_principal* 7)											// Vitesse max
	GFX_Setv(i_GFX_Souffle, 13200, tv_pos)													//Position de création
	tf_distance = tf_rayon_principal* 3 + 10
	GFX_Setv(i_GFX_Souffle, 13201, cvector(-tf_distance, -tf_distance, tf_rayon_principal+ 20))	// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Souffle, 13202, cvector(tf_distance, tf_distance, tf_rayon_principal* 10))		// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Souffle, 13204, cvector(0.0, 0.0, 0.0))								// Vent
	GFX_Setv(i_GFX_Souffle, 13205, cvector(0.0, 0.0, 0.0))								// Vitesse de la position de création
	GFX_Setv(i_GFX_Souffle, 13206, cvector(0.0, 0.0, 0.0))								// Friction de la position
	GFX_Setf(i_GFX_Souffle, 13008, 0.000000)												// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 3 : rochers
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Rocks2 = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Rocks2, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Rocks2, 13101, 42)														// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Rocks2, 0 , 1)
	GFX_FlagSet(i_GFX_Rocks2, 2 , 1)
	GFX_Seti(i_GFX_Rocks2, 13100, tf_rayon_principal * 2)								// Nombre maxi de sprites
	GFX_Seti(i_GFX_Rocks2, 13106, tf_rayon_principal* 2)								// Nombre de sprites à générer
	GFX_Setf(i_GFX_Rocks2, 13003, 2.5)														// duree de vie phase 1
	GFX_Setf(i_GFX_Rocks2, 13004, tf_rayon_principal * 0.2 + 0.35)					// duree de vie phase 2 
	GFX_Setf(i_GFX_Rocks2, 13012, 0.750000)												// Life time random
	GFX_Seti(i_GFX_Rocks2, 13107, 0)														// Tri des sprites
	GFX_Setf(i_GFX_Rocks2, 13000, tf_rayon_principal/ 7)								// Vitesse de croissance min
	GFX_Setf(i_GFX_Rocks2, 13001, tf_rayon_principal* 0.2)							// Vitesse de croissance max
	GFX_Setf(i_GFX_Rocks2, 13002, tf_rayon_principal)									// Friction sur la croissance
	GFX_Setf(i_GFX_Rocks2, 13005, tf_rayon_principal* 0.01)							// Taille min à la création
	GFX_Setf(i_GFX_Rocks2, 13006, tf_rayon_principal* 0.06)							// Taille max à la création
	GFX_Setf(i_GFX_Rocks2, 13007, -25)														// Gravité
	GFX_Setv(i_GFX_Rocks2, 13203, Cv_NullVector)										// Friction sur chaque axe
	GFX_Seti(i_GFX_Rocks2, 13103, 0xFFFFFFFF)										// Couleur phase 1
	GFX_Seti(i_GFX_Rocks2, 13104, 0xFF404040)											// Couleur phase 2
	GFX_Seti(i_GFX_Rocks2, 13105, 0x00000000)											// Couleur phase 3
	GFX_Setv(i_GFX_Rocks2, 13200, tv_pos)												// Position de création
	GFX_Setf(i_GFX_Rocks2, 13009, tf_taille)												// Vitesse min
	GFX_Setf(i_GFX_Rocks2, 13010, tf_taille * 4)											// Vitesse max
	GFX_Setv(i_GFX_Rocks2, 13201, cvector(-tf_rayon_principal* 0.5, -tf_rayon_principal * 1.5, tf_rayon_principal))		// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Rocks2, 13202, cvector(tf_rayon_principal* 0.5, tf_rayon_principal * 1.5, tf_rayon_principal* 2 - 1.5))			// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Rocks2, 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv(i_GFX_Rocks2, 13205, Cv_NullVector)										// Vitesse de la position de création
	GFX_Setv(i_GFX_Rocks2, 13206, Cv_NullVector)										// Friction de la position
	GFX_Setv(i_GFX_Rocks2, 13207, cvector(0.01,0.0,0.0))								// Volume de création 1
	GFX_Setv(i_GFX_Rocks2, 13208, cvector(0.0,0.01,0.0))								// Volume de création 2
	GFX_Setf(i_GFX_Rocks2, 13008, 0.00)													// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 								GENERATEUR PETITES FUMEES
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_GEN_FUMEE(vector tv_pos, float tf_taille, color tc_fume, byref int i_GFX_Fumee)
{
	float		tf_distance

	tf_distance = tf_taille * 0.5
	if (i_GFX_Fumee == -1)
		PROC_SFX_GFX13(i_GFX_Fumee,												// ID GFX
									tv_pos,														// Position de création
									41, 41, 41, 41,												// ID matériaux
									30, 0xFFFFFFFF,										// Nombre de sprites simultanés / au total
									1.5, 2.5,														// Durée de vie phase 1 et 2
									0.05 * tf_taille, 0.15 * tf_taille, 0.01,					// Vitesse de croissance min / max / friction
									tf_taille * 0.06, tf_taille * 0.24, 0.0,					// Taille min / max à la création / gravité
									cvector(0.015, 0.015, 0.0035), 						// Friction sur chaque axe
									COLOR_SetRGBA(255,128,0,0),					// Couleur phase 1
									tc_fume,														// Couleur phase 2
									COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
									tv_pos.z - 10000.0,										// Hauteur du sol
									tf_taille * 0.1, tf_taille * 0.5,							// Vitesse min / max
									cvector(-tf_distance, -tf_distance, tf_distance * 0.8), 	// Vitesse min sur chaque axe
									cvector(tf_distance, tf_distance, tf_distance * 1.6),		// Vitesse max sur chaque axe
									Cv_NullVector, 											// Vitesse de la position de création
									Cv_NullVector,											// Friction sur la position de création
									Cv_NullVector, 											// Vent
									Cv_NullVector,											// Volume de création 1
									Cv_NullVector,											// Volume de création 2
									Cv_NullVector,											// Volume de création 3
									0.25)															// Taux de génération

	GFX_Setv(i_GFX_Fumee, 13200, tv_pos)
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 								GENERATEUR FUMEE PRESSION
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_FUMEE_PRESSION(vector tv_pos, float tf_taille, color tc_fume, byref int i_GFX_Fumee)
{
	float		tf_distance
	
	i_GFX_Fumee= GFX_Add(13)
	GFX_MaterialSet(i_GFX_Fumee, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Fumee, 13101, 8)																		// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Fumee, 0 , 1)
	GFX_FlagSet(i_GFX_Fumee, 2 , 1)
	GFX_Seti(i_GFX_Fumee, 13100, 75)																	// Nombre maxi de sprites
	GFX_Seti(i_GFX_Fumee, 13106, 999999999) 														// Nombre de sprites à générer
	GFX_Setf(i_GFX_Fumee, 13003, 0.0)																	// duree de vie phase 1
	GFX_Setf(i_GFX_Fumee, 13004, 0.25)																	// duree de vie phase 2 
	GFX_Setf(i_GFX_Fumee, 13012, 0.7500)																// Life time random
	GFX_Seti(i_GFX_Fumee, 13107, 0)																		// Tri des sprites
	GFX_Setf(i_GFX_Fumee, 13000, 1.2 * tf_taille)														// Vitesse de croissance min
	GFX_Setf(i_GFX_Fumee, 13001, 1.8 * tf_taille)														// Vitesse de croissance max
	GFX_Setf(i_GFX_Fumee, 13002, 0.0075)																// Friction sur la croissance
	GFX_Setf(i_GFX_Fumee, 13005, tf_taille * 0.04)													// Taille min à la création
	GFX_Setf(i_GFX_Fumee, 13006, tf_taille * 0.08)													// Taille max à la création
	GFX_Setf(i_GFX_Fumee, 13007, 0.0)																	// Gravité
	GFX_Setv(i_GFX_Fumee, 13203, (cvector(0.25, 0.25, 0.25)))									// Friction sur chaque axe
	GFX_Seti(i_GFX_Fumee, 13103, tc_fume)															// Couleur phase 1
	GFX_Seti(i_GFX_Fumee, 13104, tc_fume)															// Couleur phase 2
	GFX_Seti(i_GFX_Fumee, 13105, COLOR_SetRGBA(COLOR_GetR(tc_fume), COLOR_GetG(tc_fume), COLOR_GetB(tc_fume), 0)) // Couleur phase 3
	GFX_Setf(i_GFX_Fumee, 13009, tf_taille * 30)														// Vitesse min
	GFX_Setf(i_GFX_Fumee, 13010, tf_taille * 40)														// Vitesse max
	GFX_Setv(i_GFX_Fumee, 13200, tv_pos)																// Position de création
	GFX_Setf(i_GFX_Fumee, 13011, tv_pos.z - 50.0)													// Hauteur du sol
	tf_distance = tf_taille * 40
	GFX_Setv(i_GFX_Fumee, 13201, MATH_VecLocalToGlobal(cvector(-tf_distance * 0.001, -tf_distance * 0.001, tf_distance * 0.5)))	// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Fumee, 13202, MATH_VecLocalToGlobal(cvector(tf_distance * 0.001, tf_distance * 0.001, tf_distance * 1.0)))	// Vitesse max sur chaque axe
	GFX_Setf(i_GFX_Fumee, 13008, 0.006)																// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 								GENERATEUR DU MEGA PAF
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_CREATE_MEGAPAF(byref object to_ref, vector tv_pos, float tf_taille, float tf_intens_border, byref int i_GFX_Paf, byref int i_GFX_Etincelles, byref int i_GFX_Debris, float tf_time, float tf_duree_megapaf, float tf_top_megapaf)
{
	float	tf_temp, tf_temp2, tf_vitesse 
	int 	ti_temp

	//-----------------------------------------------------------
	// Activation et positionnement du mesh
	//-----------------------------------------------------------

	@to_ref MAT_MT_SetAlphaTresh(0,0,255)
	@to_ref MAT_MT_SetAlphaTresh(0,1,255)
	AE_BorderColor(color_blanc)
//	AE_ZoomSmooth(0.0)

	if (tf_time < (0.01))
	{
		@to_ref OBJ_FlagInvisibleSet(faux)
		@to_ref OBJ_ScaleSet(cvector(tf_taille, tf_taille, tf_taille))
		@to_ref OBJ_PosSet(OBJ_PosGet())
		@to_ref OBJ_RotateLocal(cvector(0.0, MATH_RandFloat(0, Cf_2Pi), 0.0))
		@to_ref OBJ_SightSet(OBJ_SightGet())
	}


	if ( (tf_time >= (tf_top_megapaf - tf_duree_megapaf)) && (tf_time <= tf_top_megapaf) )
	{
		tf_temp2 = (tf_time - (tf_top_megapaf - tf_duree_megapaf)) / tf_duree_megapaf
		ti_temp = MATH_FloatBlend(255,0,tf_temp2)
		@to_ref MAT_MT_SetAlphaTresh(0,0,ti_temp)
		@to_ref MAT_MT_SetAlphaTresh(0,1,ti_temp)
		AE_BorderBrightness(tf_temp2 * tf_intens_border)
//		AE_ZoomSmooth(tf_temp2 * tf_intens_border)
	}
	else
		if ( (tf_time < (tf_top_megapaf + tf_duree_megapaf)) && (tf_time >= tf_top_megapaf) )
		{
			tf_temp2 = (tf_time - tf_top_megapaf) / tf_duree_megapaf
			ti_temp = MATH_FloatBlend(0,255,tf_temp2)
			@to_ref MAT_MT_SetAlphaTresh(0,0,ti_temp)
			@to_ref MAT_MT_SetAlphaTresh(0,1,ti_temp)
			AE_BorderBrightness(tf_intens_border - (2*(tf_temp2 * tf_intens_border)))
//			AE_ZoomSmooth(tf_intens_border - (2*(tf_temp2 * tf_intens_border)))
		}
	
		//---------------------------------------------------
		// Mise à jour du matérial du mesh
		//---------------------------------------------------
//		tf_temp2 = (tf_temp - tf_limit) / (tf_duree_max - tf_limit)
//		ti_temp = MATH_FloatBlend(0,255,tf_temp2)

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 4 : étincelles
	//------------------------------------------------------------------------------------------------------------------
	if (i_GFX_Etincelles == -1)
	{
		i_GFX_Etincelles = GFX_Add(9)
		GFX_FlagSet(i_GFX_Etincelles, 0,1)
		GFX_FlagSet(i_GFX_Etincelles, 2, 1)
		GFX_MaterialSet(i_GFX_Etincelles, get_SFX_light_and_smoke, 5)
		GFX_Seti(i_GFX_Etincelles, 9101, 0x40448DAB)																	// Couleur des particules
		GFX_Setv(i_GFX_Etincelles, 9200, tv_pos + cvector(0.0,0.0,0.25))											// Position
		GFX_Setv(i_GFX_Etincelles, 9201, cvector(0.0, 0.0, 1.0))														// Axe principal de génération
		GFX_Setv(i_GFX_Etincelles, 9202, cvector(0, 0, 0.0))																// Gravité
		GFX_Seti(i_GFX_Etincelles, 9100, 15)																					// Nombre de particules max
		GFX_Seti (i_GFX_Etincelles, 9102, 10)																				// Flags
		GFX_Setf(i_GFX_Etincelles, 9000, 3.0 )																				// Angle du cône, en radians
		GFX_Setf(i_GFX_Etincelles, 9001, 50)																					// Vitesse min
		GFX_Setf(i_GFX_Etincelles, 9002, 60)																					// Vitesse max
		GFX_Setf(i_GFX_Etincelles, 9003, 0.8)																				// Friction
		GFX_Setf(i_GFX_Etincelles, 9005, 0.2)																				// Temps de vie minimum
		GFX_Setf(i_GFX_Etincelles, 9006, 0.6)																				// Temps de vie max
		GFX_Setf(i_GFX_Etincelles, 9008, 0.0)																				// Temps entre la génération de 2 étincelles
		GFX_Setf(i_GFX_Etincelles, 9009, 0.2)																				// Temps de mort minimum
		GFX_Setf(i_GFX_Etincelles, 9010, 0.2)																				// Temps de mort maximum
		GFX_Setf(i_GFX_Etincelles, 9004, tf_taille * MATH_RandFloat(0.04, 0.07))								// Epaisseur des étincelles
		GFX_Setf(i_GFX_Etincelles, 9007, (tf_taille * 10) * (tf_time + 0.15))											// Multiplicateur de longueur
	}

	if (i_GFX_Debris == -1)
	{
		tf_vitesse = 20.0

		i_GFX_Debris = GFX_Add(13)
		GFX_MaterialSet(i_GFX_Debris, get_SFX_light_and_smoke, -1)
		GFX_Seti(i_GFX_Debris, 13101, 65)																		// ID de material du SFX Lgt&Smk
		GFX_FlagSet(i_GFX_Debris, 0 , 1)
		GFX_FlagSet(i_GFX_Debris, 2 , 1)
		GFX_Seti(i_GFX_Debris, 13100, 8)																			// Nombre maxi de sprites
		GFX_Seti(i_GFX_Debris, 13106, 8)																			// Nombre de sprites à générer
		GFX_Setf(i_GFX_Debris, 13003, 0.300000)																// duree de vie phase 1
		GFX_Setf(i_GFX_Debris, 13004, 0.150000)																// duree de vie phase 2 
		GFX_Setf(i_GFX_Debris, 13012, 0.750000)																// Life time random
		GFX_Seti(i_GFX_Debris, 13107, 0)																			// Tri des sprites
		GFX_Setf(i_GFX_Debris, 13000, 0.00000)																// Vitesse de croissance min
		GFX_Setf(i_GFX_Debris, 13001, 0.00000)																// Vitesse de croissance max
		GFX_Setf(i_GFX_Debris, 13002, 1.0)																		// Friction sur la croissance
		GFX_Setf(i_GFX_Debris, 13005, 0.0300000)																// Taille min à la création
		GFX_Setf(i_GFX_Debris, 13006, 0.0600000)																// Taille max à la création
		GFX_Setf(i_GFX_Debris, 13007, -18.00000)																// Gravité
		GFX_Setv(i_GFX_Debris, 13203, cvector(0.0, 0.0, 0.0))												// Friction sur chaque axe
		GFX_Seti(i_GFX_Debris, 13103, 0xAFFFFFFF)															// Couleur phase 1
		GFX_Seti(i_GFX_Debris, 13104, 0x80FFFFFF)															// Couleur phase 2
		GFX_Seti(i_GFX_Debris, 13105, 0x00FFFFFF)															// Couleur phase 3
		GFX_Setf(i_GFX_Debris, 13011, tv_pos.z - 10.0)														// Hauteur du sol
		GFX_Setv(i_GFX_Debris, 13200, tv_pos + cvector(0.0, 0.0, 0.0))									// Position de création
		GFX_Setf(i_GFX_Debris, 13009, 10.0)																		// Vitesse min
		GFX_Setf(i_GFX_Debris, 13010, 20.0)																		// Vitesse max
		GFX_Setv(i_GFX_Debris, 13201, cvector(-tf_vitesse, -tf_vitesse, tf_vitesse * MATH_RandFloat(0.25,0.75)))	// Vitesse min sur chaque axe
		GFX_Setv(i_GFX_Debris, 13202, cvector(tf_vitesse, tf_vitesse, tf_vitesse * MATH_RandFloat(0.25,0.75)))	// Vitesse max sur chaque axe
		GFX_Setv(i_GFX_Debris, 13204, cvector(0.00000, 0.00000, 0.00000))							// Vent
		GFX_Setv(i_GFX_Debris, 13205, cvector(0.00000, 0.00000, 0.00000))							// Vitesse de la position de création
		GFX_Setv(i_GFX_Debris, 13206, cvector(0.00000, 0.00000, 0.00000))							// Friction de la position
		GFX_Setv(i_GFX_Debris, 13207, cvector(0.01,0.0,0.0))												// Volume de création 1
		GFX_Setv(i_GFX_Debris, 13208, cvector(0.0,0.01,0.0))												// Volume de création 2
		GFX_Setf(i_GFX_Debris, 13008, 0.0)																		// Taux de génération
	}

	//---------------------------------------------
	// 			 Destructeurs
	//---------------------------------------------
	if (tf_time > (tf_top_megapaf + tf_duree_megapaf))
	{
		PROC_DESTROY_3_SFX(i_GFX_Paf, i_GFX_Etincelles, i_GFX_Debris)
		@to_ref OBJ_FlagInvisibleSet(vrai)
		tf_time = 0.0
		AE_BorderBrightness(0.0)
	}
}



//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 												SFX GRAPPIN
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure int PROC_SFX_GRAPPIN_01(vector tv_pos, color tc_color, float tf_largeur)
{
	int i_GFX_Grappin

	i_GFX_Grappin = GFX_Add(21)                  							 				// ajout de leffet
	GFX_MaterialSet(i_GFX_Grappin, get_SFX_light_and_smoke, 66)			// affectation du matériau
	GFX_Seti(i_GFX_Grappin, 21101, tc_color)											// couleur du halo
	GFX_Seti(i_GFX_Grappin, 21103, 1)													// halo simple
	GFX_Setf(i_GFX_Grappin, 21000, tf_largeur)											// taille du halo
	GFX_Setv(i_GFX_Grappin, 21200, tv_pos)											// Position du premier flare

	return i_GFX_Grappin
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 				GENERATEUR SFX CHANGEMENT SHAPE RAYMAN
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_CHANGE_SHAPE(vector tv_pos, float tf_taille, color tc_color)
{
	float		tf_distance, tf_vit
	int			i_GFX_Paf, i_GFX_Paf2, i_GFX_Stars, i_num_layer, ti_tmp_ID 


	i_num_layer = MATH_RandInt(0,3)

	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,0,faux)
	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,1,faux)
	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,2,faux)

	@get_SFX_light_and_smoke MAT_MT_EnableLevel(64,i_num_layer,vrai)

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 1 : HALO
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Paf = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Paf, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Paf, 13101, 54)														// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Paf, 0 , 1)
	GFX_FlagSet(i_GFX_Paf, 2 , 1)
	GFX_Seti(i_GFX_Paf, 13100, 1)															// Nombre maxi de sprites
	GFX_Seti(i_GFX_Paf, 13106, 1)															// Nombre de sprites à générer
	GFX_Setf(i_GFX_Paf, 13003, 0.020000)												// duree de vie phase 1
	GFX_Setf(i_GFX_Paf, 13004, 0.07500)													// duree de vie phase 2 
	GFX_Setf(i_GFX_Paf, 13012, 0.750000)												// Life time random
	GFX_Seti(i_GFX_Paf, 13107, 0)															// Tri des sprites
	GFX_Setf(i_GFX_Paf, 13000, tf_taille * 10.0)											// Vitesse de croissance min
	GFX_Setf(i_GFX_Paf, 13001, tf_taille * 10.0)											// Vitesse de croissance max
	GFX_Setf(i_GFX_Paf, 13002, MATH_RandFloat(0.1,0.6))							// Friction sur la croissance
	GFX_Setf(i_GFX_Paf, 13005, tf_taille * 0.3)											// Taille min à la création
	GFX_Setf(i_GFX_Paf, 13006, tf_taille * 0.3)											// Taille max à la création
	GFX_Setf(i_GFX_Paf, 13007, 0.00000)													// Gravité
	GFX_Setv(i_GFX_Paf, 13203, cvector(0,0,0))											// Friction sur chaque axe
	GFX_Seti(i_GFX_Paf, 13103, PROC_DESATURATE_COLOR(tc_color,0.5))		// Couleur phase 1
	GFX_Seti(i_GFX_Paf, 13104, PROC_DESATURATE_COLOR(tc_color,0.5))		// Couleur phase 2
	GFX_Seti(i_GFX_Paf, 13105, 0x00000000)											// Couleur phase 3
	GFX_Setf(i_GFX_Paf, 13011, tv_pos.z - 10.0)										// Hauteur du sol
	GFX_Setv(i_GFX_Paf, 13200, tv_pos)													// Position de création
	GFX_Setf(i_GFX_Paf, 13009, 0.0)														// Vitesse min
	GFX_Setf(i_GFX_Paf, 13010, 0.0)														// Vitesse max
	GFX_Setv(i_GFX_Paf, 13201, cvector(0,0,0))											// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Paf, 13202, cvector(0,0,0))											// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Paf, 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv(i_GFX_Paf, 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv(i_GFX_Paf, 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setv(i_GFX_Paf, 13207, cvector(0.01,0.0,0.0))								// Volume de création 1
	GFX_Setv(i_GFX_Paf, 13208, cvector(0.0,0.01,0.0))								// Volume de création 2
	GFX_Setf(i_GFX_Paf, 13008, 0.0)														// Taux de génération


	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 2 : ETOILES
	//------------------------------------------------------------------------------------------------------------------
	i_num_layer = MATH_RandInt(0,3)

	@get_SFX_light_and_smoke MAT_MT_EnableLevel(67,0,faux)
	@get_SFX_light_and_smoke MAT_MT_EnableLevel(67,1,faux)
	@get_SFX_light_and_smoke MAT_MT_EnableLevel(67,2,faux)

	@get_SFX_light_and_smoke MAT_MT_EnableLevel(67,i_num_layer,vrai)

	i_GFX_Stars = GFX_Add(13)
	GFX_MaterialSet(i_GFX_Stars, get_SFX_light_and_smoke, -1)
	GFX_Seti(i_GFX_Stars, 13101, 67)														// ID de material du SFX Lgt&Smk
	GFX_FlagSet(i_GFX_Stars, 0 , 1)
	GFX_FlagSet(i_GFX_Stars, 2 , 1)
	GFX_Seti(i_GFX_Stars, 13100, 1)														// Nombre maxi de sprites
	GFX_Seti(i_GFX_Stars, 13106, 1)														// Nombre de sprites à générer
	GFX_Setf(i_GFX_Stars, 13003, 0.25000)												// duree de vie phase 1
	GFX_Setf(i_GFX_Stars, 13004, 0.15000)												// duree de vie phase 2 
	GFX_Setf(i_GFX_Stars, 13012, 0.750000)											// Life time random
	GFX_Seti(i_GFX_Stars, 13107, 0)														// Tri des sprites
	GFX_Setf(i_GFX_Stars, 13000, tf_taille * 0.65)										// Vitesse de croissance min
	GFX_Setf(i_GFX_Stars, 13001, tf_taille * 1.45)										// Vitesse de croissance max
	GFX_Setf(i_GFX_Stars, 13002, 0.1)													// Friction sur la croissance
	GFX_Setf(i_GFX_Stars, 13005, tf_taille * 0.01)										// Taille min à la création
	GFX_Setf(i_GFX_Stars, 13006, tf_taille * 0.01)										// Taille max à la création
	GFX_Setf(i_GFX_Stars, 13007, 0.00000)												// Gravité
	GFX_Setv(i_GFX_Stars, 13203, cvector(0.1,0.1,0.1))								// Friction sur chaque axe
	GFX_Seti(i_GFX_Stars, 13103, PROC_LIGHTEN_COLOR(PROC_DESATURATE_COLOR(PROC_INVERT_COLOR(tc_color),0.65),1.0))			// Couleur phase 1
	GFX_Seti(i_GFX_Stars, 13104, PROC_DARKEN_COLOR(PROC_DESATURATE_COLOR(PROC_INVERT_COLOR(tc_color),0.65),0.5))			// Couleur phase 2
	GFX_Seti(i_GFX_Stars, 13105, 0x00000000)										// Couleur phase 3
	GFX_Setf(i_GFX_Stars, 13011, tv_pos.z - 10.0)										// Hauteur du sol
	GFX_Setv(i_GFX_Stars, 13200, tv_pos)												// Position de création
	tf_vit = 0.0
	GFX_Setf(i_GFX_Stars, 13009, -tf_taille * tf_vit)										// Vitesse min
	GFX_Setf(i_GFX_Stars, 13010, tf_taille * tf_vit)										// Vitesse max
	GFX_Setv(i_GFX_Stars, 13201, cvector(-tf_vit, -tf_vit, -tf_vit))					// Vitesse min sur chaque axe
	GFX_Setv(i_GFX_Stars, 13202, cvector(tf_vit, tf_vit, tf_vit))						// Vitesse max sur chaque axe
	GFX_Setv(i_GFX_Stars, 13204, cvector(0.00000, 0.00000, 0.00000))			// Vent
	GFX_Setv(i_GFX_Stars, 13205, cvector(0.00000, 0.00000, 0.00000))			// Vitesse de la position de création
	GFX_Setv(i_GFX_Stars, 13206, cvector(0.00000, 0.00000, 0.00000))			// Friction de la position
	GFX_Setf(i_GFX_Stars, 13008, 0.0)													// Taux de génération

	//AE_Brightness(1.0)
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 									GENERATEUR DE POLLEN
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure int PROC_SFX_POLLEN(float tf_taille, vector tv_pos, float tf_intensite)
{
	int i_GFX_Flare
	color cf_color

//	cf_color = PROC_LIGHTEN_COLOR(COLOR_SetRGBA(128,128,128,128), tf_intensite)
	cf_color = COLOR_SetRGBA(128,128,128,128)

	
	i_GFX_Flare = GFX_Add(21)                  							 								// ajout de leffet
	GFX_MaterialSet(i_GFX_Flare, get_SFX_light_and_smoke, 8)								// affectation du matériau rouge
	GFX_Seti(i_GFX_Flare, 21101, cf_color)															// couleur du halo
	GFX_Seti(i_GFX_Flare, 21103, 1)																	// halo simple
	GFX_Setf(i_GFX_Flare, 21000, tf_taille * 0.2)													// taille du halo
	GFX_Setv(i_GFX_Flare, 21200, tv_pos)															// position de création

	return i_GFX_Flare
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 									EXPLOSION SOL PETITE
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_SOL_PETITE(float tf_taille, vector tv_pos)
{
	float 	tf_friction_grow, tf_dispersion, tf_rayon_annexe, tf_vitesse, tf_facteur
	int 	i_GFX_Souffle, i_GFX_Nuage1, i_GFX_Etincelles, i_GFX_Rocks
	int		ti_nb_sprites

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE : trainées
	//------------------------------------------------------------------------------------------------------------------
	tf_friction_grow = 0.15 / tf_taille
	tf_rayon_annexe = 0.5 / tf_taille
	PROC_SFX_GFX13(i_GFX_Souffle,																			// ID GFX
								tv_pos,																					// Position de création
								8, 8, 8, 8,																				// ID matériaux
								25, 25,																					// Nombre de sprites simultanés / total
								0.25, 0.55,																				// Durée de vie phase 1 et 2
								0.3, 0.6, tf_friction_grow,															// Vitesse de croissance min / max / friction
								0.01, 0.02, -1.0,																		// Taille min / max à la création / gravité
								cvector(0.5,0.5,tf_rayon_annexe), 												// Friction sur chaque axe
								COLOR_SetRGBA(143,143,143,255),											// Couleur phase 1
								COLOR_SetRGBA(165,155,127,89),											// Couleur phase 2
								COLOR_SetRGBA(181,187,159,0),												// Couleur phase 3
								tv_pos.z - 10.0,																		// Hauteur du sol
								tf_taille * 0.2, tf_taille,																// Vitesse min / max
								cvector(-tf_taille, -tf_taille, tf_taille * 0.25), 									// Vitesse min sur chaque axe
								cvector(tf_taille, tf_taille, tf_taille),												// Vitesse max sur chaque axe
								Cv_NullVector, 																		// Vitesse de la position de création
								Cv_NullVector,																		// Friction sur la position de création
								Cv_NullVector, 																		// Vent
								cvector(0.0,0.0,0.0),																	// Volume de création 1
								cvector(0.0,0.0,0.0),																	// Volume de création 2
								cvector(0.0,0.0,0.0),																	// Volume de création 3
								0.0)																						// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 					NUAGE EJECTION
	//------------------------------------------------------------------------------------------------------------------
	ti_nb_sprites = tf_taille * 10.0
	tf_friction_grow = 0.2 / tf_taille
	tf_vitesse = 3.5
	tf_facteur = 1.0

	PROC_SFX_GFX13(i_GFX_Rocks,																			// ID GFX
								tv_pos + cvector(0.0, 0.0, 0.02),													// Position de créaton	
								8, 8, 8, 8,																				// ID matériaux
								ti_nb_sprites, ti_nb_sprites,														// Nombre de sprites simultanés / total
								0.1, 0.4,																					// Durée de vie phase 1 et 2
								0.075, 0.15, tf_friction_grow,														// Vitesse de croissance min / max / friction
								0.075, 0.15, 0.5,																		// Taille min / max à la création / gravité
								cvector(tf_rayon_annexe, tf_rayon_annexe, 0.10), 							// Friction sur chaque axe
								COLOR_SetRGBA(143,143,143,255),											// Couleur phase 1
								COLOR_SetRGBA(143,143,143,45),											// Couleur phase 2
								COLOR_SetRGBA(143,143,143,0),												// Couleur phase 3
								tv_pos.z,																				// Hauteur du sol
								MATH_RandFloat(tf_vitesse - tf_facteur, tf_vitesse + tf_facteur), MATH_RandFloat(tf_vitesse - tf_facteur, tf_vitesse + tf_facteur),	// Vitesse min / max
								cvector(-tf_vitesse, -tf_vitesse, 0.0), 											// Vitesse min sur chaque axe
								cvector(tf_vitesse, tf_vitesse, 0.0),												// Vitesse max sur chaque axe
								Cv_NullVector, 																		// Vitesse de la position de création
								Cv_NullVector,																		// Friction sur la position de création
								Cv_NullVector, 																		// Vent
								cvector(0.01,0.0,0.0),																// Volume de création 1
								cvector(0.0,0.01,0.0),																// Volume de création 2
								cvector(0.0,0.0,0.0),																	// Volume de création 3
								0.0)																						// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE ROCHERS
	//------------------------------------------------------------------------------------------------------------------
	ti_nb_sprites = tf_taille * 1.5
	PROC_SFX_GFX13(i_GFX_Rocks,																			// ID GFX
								tv_pos,																					// Position de création
								42, 42, 42, 42,																			// ID matériaux
								ti_nb_sprites, ti_nb_sprites,														// Nombre de sprites simultanés / total
								1.0, 0.5,																					// Durée de vie phase 1 et 2
								tf_taille * 0.004, tf_taille * 0.008, 1.0,											// Vitesse de croissance min / max / friction
								tf_taille * 0.0005, tf_taille * 0.002, -2.0,										// Taille min / max à la création / gravité
								Cv_NullVector, 																		// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,255),											// Couleur phase 1
								COLOR_SetRGBA(255,255,255,255),											// Couleur phase 2
								COLOR_SetRGBA(0,0,0,0),														// Couleur phase 3
								tv_pos.z - 10.0,																		// Hauteur du sol
								tf_taille * 0.1, tf_taille * 0.4,														// Vitesse min / max
								cvector(-tf_taille * 0.3, -tf_taille * 0.3, tf_taille * 0.6), 						// Vitesse min sur chaque axe
								cvector(tf_taille * 0.3, tf_taille * 0.3, tf_taille * 0.8),							// Vitesse max sur chaque axe
								Cv_NullVector, 																		// Vitesse de la position de création
								Cv_NullVector,																		// Friction sur la position de création
								Cv_NullVector, 																		// Vent
								cvector(0.01,0.0,0.0),																// Volume de création 1
								cvector(0.0,0.01,0.0),																// Volume de création 2
								cvector(0.0,0.0,0.0),																	// Volume de création 3
								0.0)																						// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 					ETINCELLES
	//------------------------------------------------------------------------------------------------------------------
	i_GFX_Etincelles = GFX_Add(9)
	GFX_FlagSet(i_GFX_Etincelles, 0,1)
	GFX_FlagSet(i_GFX_Etincelles, 2, 1)
	GFX_MaterialSet(i_GFX_Etincelles, get_SFX_light_and_smoke, 5)
	GFX_Seti(i_GFX_Etincelles, 9101, 0x40448DAB)																	// Couleur des particules
	GFX_Setv(i_GFX_Etincelles, 9200, tv_pos + cvector(0.0,0.0,0.0))												// Position
	GFX_Setv(i_GFX_Etincelles, 9201, cvector(0.0, 0.0, 1.0) )														// Axe principal de génération
	GFX_Setv(i_GFX_Etincelles, 9202, cvector(0, 0, 0.0))																// Gravité
	GFX_Seti(i_GFX_Etincelles, 9100, tf_taille * 1.5)																					// Nombre de particules max
	GFX_Seti (i_GFX_Etincelles, 9102, 10)																				// Flags
	GFX_Setf(i_GFX_Etincelles, 9000, 0.5)																				// Angle du cône, en radians
	GFX_Setf(i_GFX_Etincelles, 9001, 4)																					// Vitesse min
	GFX_Setf(i_GFX_Etincelles, 9002, 8)																					// Vitesse max
	GFX_Setf(i_GFX_Etincelles, 9003, 0.8)																				// Friction
	GFX_Setf(i_GFX_Etincelles, 9004, MATH_RandFloat(tf_taille * 0.005,0.015))								// Epaisseur des étincelles
	GFX_Setf(i_GFX_Etincelles, 9005, 1.5)																				// Temps de vie minimum
	GFX_Setf(i_GFX_Etincelles, 9006, 3.0)																				// Temps de vie max
	GFX_Setf(i_GFX_Etincelles, 9007, 3.5)																				// Multiplicateur de longueur
	GFX_Setf(i_GFX_Etincelles, 9008, 0.0)																				// Temps entre la génération de 2 étincelles
	GFX_Setf(i_GFX_Etincelles, 9009, 0.2)																				// Temps de mort minimum
	GFX_Setf(i_GFX_Etincelles, 9010, 0.2)																				// Temps de mort ma
}


//----------------------------------------------------------------------------------------------------------------------------------------
// 											SFX DE DESTRUCTION
//----------------------------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_VITRE(vector tv_pos, float tf_taille)
{
	int 	ti_temp, i_GFX_Vitre1, i_GFX_Vitre2, i_GFX_Vitre3, i_GFX_Vitre4
	float	tf_speed_max, tf_zone, tf_gravite

	tf_speed_max = 2.0
	
	tf_zone = tf_taille * 0.1
	tf_gravite = -10.0
	//---------------------------------------------------------------------
	//---------------------------------------------------------------------
	// 			PARTICULES DE VITRES 1
	//---------------------------------------------------------------------
	//---------------------------------------------------------------------
	tf_taille = 5.0

	PROC_SFX_GFX13(i_GFX_Vitre1,																			// ID GFX
								tv_pos,																					// Position de création
								68, 68, 68, 68,																			// ID matériaux
								5, 5,																						// Nombre de sprites simultanés / total
								0.75, 0.25,																				// Durée de vie phase 1 et 2
								0.0, 0.0, 1.0,																			// Vitesse de croissance min / max / friction
								0.05, 0.25, tf_gravite,																// Taille min / max à la création / gravité
								Cv_NullVector, 																		// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,255),											// Couleur phase 1
								COLOR_SetRGBA(255,255,255,255),											// Couleur phase 2
								COLOR_SetRGBA(255,255,255,0),												// Couleur phase 3
								tv_pos.z - 10.0,																		// Hauteur du sol
								tf_taille * 0.3, tf_taille * tf_speed_max,											// Vitesse min / max
								cvector(-tf_taille * tf_speed_max, -tf_taille * tf_speed_max,  -tf_taille * tf_speed_max * 0.25), 	// Vitesse min sur chaque axe
								cvector(tf_taille * tf_speed_max, tf_taille * tf_speed_max, tf_taille * tf_speed_max),		// Vitesse max sur chaque axe
								Cv_NullVector, 																		// Vitesse de la position de création
								Cv_NullVector,																		// Friction sur la position de création
								Cv_NullVector, 																		// Vent
								cvector(tf_zone,0.0,0.0),															// Volume de création 1
								cvector(0.0,tf_zone,0.0),															// Volume de création 2
								cvector(0.0,0.0,0.0),																	// Volume de création 3
								0.0)																						// Taux de génération

	PROC_SFX_GFX13(i_GFX_Vitre2,																			// ID GFX
								tv_pos,																					// Position de création
								69, 69, 69, 69,																			// ID matériaux
								5, 5,																						// Nombre de sprites simultanés / total
								0.25, 0.25,																				// Durée de vie phase 1 et 2
								1.5, 3.0, 0.0,																			// Vitesse de croissance min / max / friction
								0.0, 0.0, tf_gravite,																	// Taille min / max à la création / gravité
								Cv_NullVector, 																		// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,255),											// Couleur phase 1
								COLOR_SetRGBA(255,255,255,255),											// Couleur phase 2
								COLOR_SetRGBA(255,255,255,0),												// Couleur phase 3
								tv_pos.z - 10.0,																		// Hauteur du sol
								tf_taille * 0.3, tf_taille * tf_speed_max,											// Vitesse min / max
								cvector(-tf_taille * tf_speed_max, -tf_taille * tf_speed_max,  -tf_taille * tf_speed_max * 0.25), 	// Vitesse min sur chaque axe
								cvector(tf_taille * tf_speed_max, tf_taille * tf_speed_max, tf_taille * tf_speed_max),		// Vitesse max sur chaque axe
								Cv_NullVector, 																		// Vitesse de la position de création
								Cv_NullVector,																		// Friction sur la position de création
								Cv_NullVector, 																		// Vent
								cvector(tf_zone,0.0,0.0),															// Volume de création 1
								cvector(0.0,tf_zone,0.0),															// Volume de création 2
								cvector(0.0,0.0,0.0),																	// Volume de création 3
								0.0)																						// Taux de génération

	PROC_SFX_GFX13(i_GFX_Vitre3,																			// ID GFX
								tv_pos,																					// Position de création
								70, 70, 70, 70,																			// ID matériaux
								5, 5,																						// Nombre de sprites simultanés / total
								0.75, 0.25,																				// Durée de vie phase 1 et 2
								0.0, 0.0, 1.0,																			// Vitesse de croissance min / max / friction
								0.05, 0.25, tf_gravite,																// Taille min / max à la création / gravité
								Cv_NullVector, 																		// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,255),											// Couleur phase 1
								COLOR_SetRGBA(255,255,255,255),											// Couleur phase 2
								COLOR_SetRGBA(255,255,255,0),												// Couleur phase 3
								tv_pos.z - 10.0,																		// Hauteur du sol
								tf_taille * 0.3, tf_taille * tf_speed_max,											// Vitesse min / max
								cvector(-tf_taille * tf_speed_max, -tf_taille * tf_speed_max,  -tf_taille * tf_speed_max * 0.25), 	// Vitesse min sur chaque axe
								cvector(tf_taille * tf_speed_max, tf_taille * tf_speed_max, tf_taille * tf_speed_max),		// Vitesse max sur chaque axe
								Cv_NullVector, 																		// Vitesse de la position de création
								Cv_NullVector,																		// Friction sur la position de création
								Cv_NullVector, 																		// Vent
								cvector(tf_zone,0.0,0.0),															// Volume de création 1
								cvector(0.0,tf_zone,0.0),															// Volume de création 2
								cvector(0.0,0.0,0.0),																	// Volume de création 3
								0.0)																						// Taux de génération

	PROC_SFX_GFX13(i_GFX_Vitre4,																			// ID GFX
								tv_pos,																					// Position de création
								71, 71, 71, 71,																			// ID matériaux
								5, 5,																						// Nombre de sprites simultanés / total
								0.75, 0.25,																				// Durée de vie phase 1 et 2
								0.0, 0.0, 1.0,																			// Vitesse de croissance min / max / friction
								0.05, 0.25, tf_gravite,																// Taille min / max à la création / gravité
								Cv_NullVector, 																		// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,255),											// Couleur phase 1
								COLOR_SetRGBA(255,255,255,255),											// Couleur phase 2
								COLOR_SetRGBA(255,255,255,0),												// Couleur phase 3
								tv_pos.z - 10.0,																		// Hauteur du sol
								tf_taille * 0.3, tf_taille * tf_speed_max,											// Vitesse min / max
								cvector(-tf_taille * tf_speed_max, -tf_taille * tf_speed_max,  -tf_taille * tf_speed_max * 0.25), 	// Vitesse min sur chaque axe
								cvector(tf_taille * tf_speed_max, tf_taille * tf_speed_max, tf_taille * tf_speed_max),		// Vitesse max sur chaque axe
								Cv_NullVector, 																		// Vitesse de la position de création
								Cv_NullVector,																		// Friction sur la position de création
								Cv_NullVector, 																		// Vent
								cvector(tf_zone,0.0,0.0),															// Volume de création 1
								cvector(0.0,tf_zone,0.0),															// Volume de création 2
								cvector(0.0,0.0,0.0),																	// Volume de création 3
								0.0)																						// Taux de génération
}

//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//								SFX DE BARRIERE LASER
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
procedure int PROC_AFFICHE_LASER(byref int i_GFX_1, byref int i_GFX_2, byref int i_GFX_3, byref int i_GFX_4, byref int i_GFX_5, byref int i_GFX_6, vector pos_origine, vector pos_target, int ti_part, int id_mat, int id_mat_fl,float f_larg, float tf_taille)
{
	float tf_friction_grow, tf_dispersion
	vector tv_pos
	int		ti_retour, ti_temp
	
	tv_pos = pos_target

	ti_retour = faux
	
	//-------------------------------------------------------------------
	//							SFX LASER
	//-------------------------------------------------------------------
	if (i_GFX_1 == -1)
	{
		//-------------------
		// RENDU
		i_GFX_1 = GFX_Add(1)                   								 						// ajout de leffet
		GFX_FlagSet(i_GFX_1, 0, 1)        	    														// activation de leffet
		GFX_FlagSet(i_GFX_1, 2, 1)            														// le matériau utilié sera transparent
		GFX_MaterialSet( i_GFX_1, get_SFX_light_and_smoke, id_mat)					// affectation du matériau
		GFX_Setf(i_GFX_1, 1000, f_larg)        														// taille du laser
		GFX_Seti(i_GFX_1, 1100, 0xFFFFFFFF)          										// couleur du laser (rouge et moitié transparent)
		ti_retour = vrai
	}
	
	//-------------------------------------------------------------------
	//					SFX FLARE SOURCE
	//------------------------------------------------------------------
	if (i_GFX_2 == -1)
	{
		// Rentu des flares
		i_GFX_2 = GFX_Add(21)                  							 						// ajout de leffet
		GFX_MaterialSet(i_GFX_2, get_SFX_light_and_smoke, id_mat_fl)			// affectation du matériau
		GFX_Seti(i_GFX_2, 21101, 0xFFFFFFFF)											// couleur du halo
		GFX_Seti(i_GFX_2, 21103, 1)																// halo simple
		GFX_Setf(i_GFX_2, 21000, f_larg * 5 - 0.1)											// taille du halo
	}
	
	//-------------------------------------------------------------------
	//					SFX FLARE TARGET
	//-------------------------------------------------------------------
	if (i_GFX_3 == -1)
	{
		// Rentu des flares
		i_GFX_3 = GFX_Add(21)                  							 						// ajout de leffet
		GFX_MaterialSet(i_GFX_3, get_SFX_light_and_smoke, id_mat_fl)			// affectation du matériau
		GFX_Seti(i_GFX_3, 21101, 0xFFFFFFFF)											// couleur du halo
		GFX_Seti(i_GFX_3, 21103, 1)																// halo simple
		GFX_Setf(i_GFX_3, 21000, f_larg * 5 - 0.1)											// taille du halo
	}

	GFX_Setf(i_GFX_1, 1000, f_larg)        														// taille du laser
	tf_dispersion = (f_larg * 5) - 0.1
	if (tf_dispersion < 0.01)
		tf_dispersion = 0
	GFX_Setf(i_GFX_2, 21000, tf_dispersion)												// taille du halo
	GFX_Setf(i_GFX_3, 21000, tf_dispersion)												// taille du halo


	//--------------------------------------------------
	// POSITION LASER ET FLARES
	GFX_Setv(i_GFX_1, 1200, pos_origine)													// Position de la source du laser
	GFX_Setv(i_GFX_1, 1201, pos_target)														// Position de la destination du laser
	GFX_Setv(i_GFX_2, 21200, pos_origine)													// Position du premier flare
	GFX_Setv(i_GFX_3, 21200, pos_target)													// Position du second flare
	//-------------------------------




	if (ti_part)
	{
		//------------------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------------------
		// 					GENERATEUR DE PARCITULES EXPLOSION
		//------------------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------------------
		if (i_GFX_4 == -1)
		{
			ti_temp = tf_taille * 3.0
			tf_friction_grow = 0.5 / tf_taille
			tf_dispersion = tf_taille * 2 + 10

			PROC_SFX_GFX13(i_GFX_4,											// ID GFX
								tv_pos,														// Position de création
								8, 8, 8, 8,													// ID matériaux
								ti_temp, ti_temp,											// Nombre de sprites simultanés / au total
								0.25, tf_taille * 0.1,										// Durée de vie phase 1 et 2
								0.1 * tf_taille + 1.2, tf_taille, tf_friction_grow,		// Vitesse de croissance min / max / friction
								tf_taille * 0.001, tf_taille * 0.004, -1.0,				// Taille min / max à la création / gravité
								cvector(tf_friction_grow * 5, tf_friction_grow * 5, tf_friction_grow*1.5 ), 	// Friction sur chaque axe
								COLOR_SetRGBA(207,207,207,255),				// Couleur phase 1
								COLOR_SetRGBA(117,107,79,89),					// Couleur phase 2
								COLOR_SetRGBA(149, 139, 111, 0),				// Couleur phase 3
								0.0,															// Hauteur du sol
								tf_taille + 8.0, tf_taille * 6.0,							// Vitesse min / max
								cvector(-tf_dispersion, -tf_dispersion, tf_taille + 8), 	// Vitesse min sur chaque axe
								cvector(tf_dispersion, tf_dispersion, tf_taille * 6.0),		// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.0,0.0,0.0),										// Volume de création 1
								cvector(0.0,0.0,0.0),										// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération
		}
	
		//------------------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------------------
		// 					GENERATEUR DE PARCITULES CATOON 3 : rochers
		//------------------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------------------
		if (i_GFX_5 == -1)
			PROC_SFX_GFX13(i_GFX_5,											// ID GFX
								tv_pos,														// Position de création
								42, 42, 42 ,42,												// ID matériaux
								30, 30,														// Nombre de sprites simultanés / au total
								1.0, tf_taille * 0.033 + 0.35,							// Durée de vie phase 1 et 2
								tf_taille * 0.15, tf_taille * 0.2, 7.0 / tf_taille,		// Vitesse de croissance min / max / friction
								tf_taille * 0.0066, tf_taille * 0.0133, -tf_taille - 14.0,	// Taille min / max à la création / gravité
								Cv_NullVector, 											// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,255),				// Couleur phase 1
								COLOR_SetRGBA(64,64,64,255),					// Couleur phase 2
								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
								tv_pos.z,													// Hauteur du sol
								tf_taille, tf_taille * 4.0,									// Vitesse min / max
								cvector(-tf_taille * 0.5, -tf_taille * 0.5, tf_taille), 	// Vitesse min sur chaque axe
								cvector(-tf_taille * 0.5, -tf_taille * 0.5, tf_taille * 2.0 - 1.5),		// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération
	
		//------------------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------------------
		// 					GENERATEUR DE PARCITULES CATOON 6 : nuage central 2
		//------------------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------------------
		if (i_GFX_6 == -1)
			PROC_SFX_GFX13(i_GFX_6,											// ID GFX
								tv_pos,														// Position de création
								41, 41, 41 ,41,												// ID matériaux
								3, 3,															// Nombre de sprites simultanés / au total
								0.3, 0.75,													// Durée de vie phase 1 et 2
								2.0 * tf_taille * 0.2, 6.0 * tf_taille * 0.2, 0.5 / tf_taille,	// Vitesse de croissance min / max / friction
								0.0, 1.2, 0.0,												// Taille min / max à la création / gravité
								Cv_NullVector, 											// Friction sur chaque axe
								COLOR_SetRGBA(133,123,95,128),				// Couleur phase 1
								COLOR_SetRGBA(133,123,95,128),				// Couleur phase 2
								COLOR_SetRGBA(181,171,143,0),					// Couleur phase 3
								tv_pos.z,													// Hauteur du sol
								0.5, 2.0,														// Vitesse min / max
								cvector(-0.5, -0.5, 0.5), 									// Vitesse min sur chaque axe
								cvector(0.5, 0.5, 1.0),									// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération
	}
	return ti_retour
}

//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
//			SFX DE DESACTIVATION DE LA BARRIERE LASER
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_LASER_DEACTIVATE(byref int i_GFX_1, byref int i_GFX_2, vector tv_pos_origine, vector tv_pos_target)
{
	PROC_SFX_GFX9(i_GFX_1, 																		// ID GFX
							tv_pos_origine, 5,																// Position de création / matériau Lgt&Smo
							COLOR_SetRGBA(171,141,68,64), 									// Couleur étincelles
							cvector(0.0, 0.0, 1.0),														// Axe principal de génération
							cvector(0, 0, -5.0),															// Gravité
							10, 10, 3.0,																		// Nombre de particules / flags / angle du cône (en radians)
							7.0, 15.0, 0.9, MATH_RandFloat(0.04, 0.07),						// Vitesse min / max / friction / épaisseur des particules
							0.6, 1.0, 1.0,																	// Durée de vie min / max / multiplicateur de longueur
							0.0, 0.2, 0.5)																	// Temps entre la génération de 2 particules / temps de mort min / max

	PROC_SFX_GFX9(i_GFX_1, 																// ID GFX
							tv_pos_target, 5,														// Position de création / matériau Lgt&Smo
							COLOR_SetRGBA(171,141,68,64), 							// Couleur étincelles
							cvector(0.0, 0.0, 1.0),												// Axe principal de génération
							cvector(0, 0, -5.0),													// Gravité
							10, 10, 3.0,																// Nombre de particules / flags / angle du cône (en radians)
							7.0, 15.0, 0.9, MATH_RandFloat(0.01, 0.1),				// Vitesse min / max / friction / épaisseur des particules
							0.6, 1.0, 1.0,															// Durée de vie min / max / multiplicateur de longueur
							0.0, 0.2, 0.5)															// Temps entre la génération de 2 particules / temps de mort min / max
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 								SFX DE CHAMP DE FORCE
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_RIPPLE_CHAMP_FORCE(byref int i_GFX1, byref int i_GFX2, vector tv_pos, vector tv_normale, float tf_taille)
{
	float 		tf_friction_grow

	if (i_GFX1 == -1)
		PROC_SFX_GFX13(i_GFX1,													// ID GFX
								tv_pos,														// Position de création
								72, 72, 72, 72,												// ID matériaux
								3, 3,															// Nombre de sprites simultanés / au total
								0.2, 0.2,														// Durée de vie phase 1 et 2
								tf_taille * 3.5, tf_taille * 10.0, 0.0,					// Vitesse de croissance min / max / friction
								tf_taille * 0.25, tf_taille, 0.0,							// Taille min / max à la création / gravité
								cvector(1.0,1.0,1.0), 									// Friction sur chaque axe
								COLOR_SetRGBA(64,128,128,0),					// Couleur phase 1
								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 2
								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
								tv_pos.z,													// Hauteur du sol
								0.0, 0.0,														// Vitesse min / max
								Cv_NullVector, 											// Vitesse min sur chaque axe
								Cv_NullVector,											// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.025)														// Taux de génération

	if (i_GFX2 ==-1)
	{
		PROC_SFX_GFX9(i_GFX2, 																			// ID GFX
									tv_pos, 5,																		// Position de création / matériau Lgt&Smo
									COLOR_SetRGBA(128,255,255,64), 									// Couleur étincelles
									-tv_normale,																	// Axe principal de génération
									Cv_NullVector,																// Gravité
									10, 10, 1.25,																	// Nombre de particules / flags / angle du cône (en radians)
									40.0, 60.0, 0.9, MATH_RandFloat(0.03, 0.05),						// Vitesse min / max / friction / épaisseur des particules
									0.6, 0.8, 2.0,																	// Durée de vie min / max / multiplicateur de longueur
									0.0, 0.4, 0.75)																	// Temps entre la génération de 2 particules / temps de mort min / max
	}
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 							SFX EXPLOSION CONNARD DE LAPINOU
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_LAPIN02(vector tv_pos, float tf_taille)
{
	float 	tf_rayon_annexe, tf_friction_grow, tf_vitesse, tf_vitesse_X, tf_vitesse_Y, tf_vitesse_globale, tf_tmp_ID, tf_distance
	int		i_GFX_Paf, i_GFX_Debris, i_GFX_Etincelles, i_GFX_Nuage_cartoon
	int		ti_tmp_ID

	//------------------------------------------------------------------------------------------------------------------
	// 								GENERATEUR DE PAF
	//-----------------------------------------------------------------------------------------------------------------
	ti_tmp_ID = 55 + MATH_RandInt(0,3)
	PROC_SFX_GFX13(i_GFX_Paf,													// ID GFX
								tv_pos + cvector(0.0, 0.0, 0.25),						// Position de création
								ti_tmp_ID, ti_tmp_ID, ti_tmp_ID, ti_tmp_ID,		// ID matériaux
								1, 1,															// Nombre de sprites simultanés / au total
								0.06, 0.015,												// Durée de vie phase 1 et 2
								15.0, 20.0, 0.35,											// Vitesse de croissance min / max / friction
								0.03, 0.06, 0.0,											// Taille min / max à la création / gravité
								Cv_NullVector, 											// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,255),				// Couleur phase 1
								COLOR_SetRGBA(255,255,255,255),				// Couleur phase 2
								COLOR_SetRGBA(255,255,255,0),					// Couleur phase 3
								tv_pos.z,													// Hauteur du sol
								0.0, 0.0,														// Vitesse min / max
								Cv_NullVector, 											// Vitesse min sur chaque axe
								Cv_NullVector,											// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 								GENERATEUR DE DEBRIS
	//------------------------------------------------------------------------------------------------------------------
	tf_vitesse = 25.0
	PROC_SFX_GFX13(i_GFX_Debris,												// ID GFX
								tv_pos,														// Position de création
								65, 65, 65, 65,												// ID matériaux
								10, 10,														// Nombre de sprites simultanés / au total
								0.25, 0.2,													// Durée de vie phase 1 et 2
								0.0, 0.0, 1.0,												// Vitesse de croissance min / max / friction
								0.02, 0.06, -18.0,											// Taille min / max à la création / gravité
								cvector(1.0,1.0,1.0), 									// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,175),				// Couleur phase 1
								COLOR_SetRGBA(128,128,128,128),				// Couleur phase 2
								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
								tv_pos.z,													// Hauteur du sol
								10.0, 25.0,													// Vitesse min / max
								cvector(-tf_vitesse, -tf_vitesse, tf_vitesse * MATH_RandFloat(0.35,0.85)), 	// Vitesse min sur chaque axe
								cvector(tf_vitesse, tf_vitesse, tf_vitesse * MATH_RandFloat(0.35,0.85)),		// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération

	//--------------------------------------------------------
	// 					ETINCELLES
	//--------------------------------------------------------
		PROC_SFX_GFX9(i_GFX_Etincelles, 																// ID GFX
									tv_pos, 5,																		// Position de création / matériau Lgt&Smo
									COLOR_SetRGBA(128,255,128,64), 									// Couleur étincelles
									cvector(0.0,0.0,1.0),															// Axe principal de génération
									cvector(0.0,0.0,0.0),															// Gravité
									10, 10, 1.75,																	// Nombre de particules / flags / angle du cône (en radians)
									60.0, 80.0, 0.9, MATH_RandFloat(0.03, 0.05),						// Vitesse min / max / friction / épaisseur des particules
									0.6, 0.8, 2.0,																	// Durée de vie min / max / multiplicateur de longueur
									0.0, 0.4, 0.75)																	// Temps entre la génération de 2 particules / temps de mort min / max

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 5 : nuage central 1
	//------------------------------------------------------------------------------------------------------------------
	PROC_SFX_GFX13(i_GFX_Nuage_cartoon,									// ID GFX
								tv_pos + cvector(0.0, 0.0, 0.5),						// Position de création
								41, 41, 41, 41,												// ID matériaux
								1, 1,															// Nombre de sprites simultanés / au total
								0.05, 0.2,													// Durée de vie phase 1 et 2
								-30.0, -30.0, -0.01,										// Vitesse de croissance min / max / friction
								5.5, 5.5, 0.0,												// Taille min / max à la création / gravité
								cvector(1.0,1.0,1.0), 									// Friction sur chaque axe
								COLOR_SetRGBA(165,203,191,0),					// Couleur phase 1
								COLOR_SetRGBA(165,203,191,255),				// Couleur phase 2
								COLOR_SetRGBA(165,203,191,0),					// Couleur phase 3
								tv_pos.z,													// Hauteur du sol
								0.0, 0.0,														// Vitesse min / max
								cvector(0.0, 0.0, 0.0), 									// Vitesse min sur chaque axe
								cvector(0.0, 0.0, 0.0),									// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 					AUTRE SFX EXPLOSION CONNARD DE LAPINOU
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_LAPIN(vector tv_pos, float tf_taille)
{
	float tf_friction_grow, tf_dispersion
	int i_GFX_Souffle, i_GFX_Rocks, i_GFX_Nuage_cartoon2, i_GFX_Paf, ti_GFX_Etincelles_paf
	int	ti_tmp_ID

	tf_taille *= 6.0
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 1 : Nuage fumée principal
	//------------------------------------------------------------------------------------------------------------------
	tf_friction_grow = 0.4 / tf_taille
	tf_dispersion = tf_taille * 10.0
	PROC_SFX_GFX13(i_GFX_Souffle,												// ID GFX
								tv_pos,														// Position de création
								8, 8, 8, 8,													// ID matériaux
								25, 25,														// Nombre de sprites simultanés / au total
								0.15, 0.75,													// Durée de vie phase 1 et 2
								8.0 * tf_taille, 12.0 * tf_taille, 0.1,					// Vitesse de croissance min / max / friction
								0.1 * tf_taille, 0.2 * tf_taille, -1.0,						// Taille min / max à la création / gravité
								cvector(tf_friction_grow * 2.0, tf_friction_grow * 2.0, tf_friction_grow), 	// Friction sur chaque axe
								COLOR_SetRGBA(121,117,105,255),				// Couleur phase 1
								COLOR_SetRGBA(105,101,89,89),					// Couleur phase 2
								COLOR_SetRGBA(73,69,57,0),						// Couleur phase 3
								tv_pos.z - 10.0,											// Hauteur du sol
								tf_taille * 3.0, tf_taille * 6.0,							// Vitesse min / max
								cvector(-tf_dispersion, -tf_dispersion, tf_taille * 3.0), 	// Vitesse min sur chaque axe
								cvector(tf_dispersion, tf_dispersion, tf_taille * 6.0),		// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 2 : Rochers
	//------------------------------------------------------------------------------------------------------------------
//	ti_tmp_ID = tf_taille * 5.0
//	PROC_SFX_GFX13(i_GFX_Rocks,												// ID GFX
//								tv_pos,														// Position de création
//								42, 42, 42, 42,												// ID matériaux
//								ti_tmp_ID, ti_tmp_ID,									// Nombre de sprites simultanés / au total
//								1.0, 0.5,														// Durée de vie phase 1 et 2
//								1.0 * tf_taille, 1.2 * tf_taille, 1.0,						// Vitesse de croissance min / max / friction
//								0.05 * tf_taille, 0.1 * tf_taille, -20.0,					// Taille min / max à la création / gravité
//								Cv_NullVector, 											// Friction sur chaque axe
//								COLOR_SetRGBA(255,255,255,255),				// Couleur phase 1
//								COLOR_SetRGBA(255,255,255,255),				// Couleur phase 2
//								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
//								tv_pos.z - 10.0,											// Hauteur du sol
//								tf_taille * 2.0, tf_taille * 4.0,							// Vitesse min / max
//								cvector(-tf_taille * 7.0, -tf_taille * 7.0,tf_taille * 5.0), 	// Vitesse min sur chaque axe
//								cvector(tf_taille * 7.0, tf_taille * 7.0,tf_taille * 10.0),		// Vitesse max sur chaque axe
//								Cv_NullVector, 											// Vitesse de la position de création
//								Cv_NullVector,											// Friction sur la position de création
//								Cv_NullVector, 											// Vent
//								cvector(0.01,0.0,0.0),									// Volume de création 1
//								cvector(0.0,0.01,0.0),									// Volume de création 2
//								cvector(0.0,0.0,0.0),										// Volume de création 3
//								0.0)															// Taux de génération
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 3 : Feu central
	//------------------------------------------------------------------------------------------------------------------
	ti_tmp_ID = 17 + MATH_RandInt(0,3)
	PROC_SFX_GFX13(ti_GFX_Etincelles_paf,									// ID GFX
								tv_pos + cvector(0.0, 0.0, 0.5),						// Position de création
								ti_tmp_ID, ti_tmp_ID, ti_tmp_ID, ti_tmp_ID,		// ID matériaux
								3, 3,															// Nombre de sprites simultanés / au total
								0.1, 0.1,														// Durée de vie phase 1 et 2
								4.0 * tf_taille, 5.0 * tf_taille, 0.1,						// Vitesse de croissance min / max / friction
								0.1 * tf_taille, 0.2 * tf_taille, 0.0,						// Taille min / max à la création / gravité
								Cv_NullVector, 											// Friction sur chaque axe
								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 1
								COLOR_SetRGBA(255,255,255,255),				// Couleur phase 2
								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
								tv_pos.z - 10.0,											// Hauteur du sol
								0.5 * tf_taille, 2.0 * tf_taille,							// Vitesse min / max
								cvector(-0.5 * tf_taille, -0.5 * tf_taille, 0.5 * tf_taille), 	// Vitesse min sur chaque axe
								cvector(0.5 * tf_taille, 0.5 * tf_taille, 1.0 * tf_taille),		// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 4 : Eclair paf
	//------------------------------------------------------------------------------------------------------------------
	ti_tmp_ID = 55 + MATH_RandInt(0,3)
	PROC_SFX_GFX13(i_GFX_Paf,													// ID GFX
								tv_pos + cvector(0.0, 0.0, 0.95),						// Position de création
								ti_tmp_ID, ti_tmp_ID, ti_tmp_ID, ti_tmp_ID,		// ID matériaux
								1,1,															// Nombre de sprites simultanés / au total
								0.03, 0.015,												// Durée de vie phase 1 et 2
								50.0 * tf_taille, 60.0 * tf_taille, 0.35,					// Vitesse de croissance min / max / friction
								0.1 * tf_taille, 0.2 * tf_taille, 0.0,						// Taille min / max à la création / gravité
								Cv_NullVector, 											// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,128),				// Couleur phase 1
								COLOR_SetRGBA(255,255,255,64),				// Couleur phase 2
								COLOR_SetRGBA(255,255,255,0),					// Couleur phase 3
								tv_pos.z,													// Hauteur du sol
								0.0, 0.0,														// Vitesse min / max
								Cv_NullVector, 											// Vitesse min sur chaque axe
								Cv_NullVector,											// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.05)															// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 4 : Etincelles
	//------------------------------------------------------------------------------------------------------------------
	ti_tmp_ID = 55 + MATH_RandInt(0,3)
	PROC_SFX_GFX13(ti_GFX_Etincelles_paf,									// ID GFX
								tv_pos + cvector(0.0, 0.0, 0.95),						// Position de création
								ti_tmp_ID, ti_tmp_ID, ti_tmp_ID, ti_tmp_ID,		// ID matériaux
								25, 25,														// Nombre de sprites simultanés / au total
								0.05, 0.01,													// Durée de vie phase 1 et 2
								0.0, 0.0,	1.0,												// Vitesse de croissance min / max / friction
								0.05 * tf_taille, 0.1 * tf_taille, 0.0,					// Taille min / max à la création / gravité
								Cv_NullVector, 											// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,255),				// Couleur phase 1
								COLOR_SetRGBA(255,255,255,64),				// Couleur phase 2
								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
								tv_pos.z - 10000.0,										// Hauteur du sol
								0.0, 0.0,														// Vitesse min / max
								Cv_NullVector, 											// Vitesse min sur chaque axe
								Cv_NullVector,											// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(1.0,0.0,0.0),										// Volume de création 1
								cvector(0.0,1.0,0.0),										// Volume de création 2
								cvector(0.0,0.0,1.0),										// Volume de création 3
								0.05)															// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
// 			GENERATEUR DE PARCITULES INCANTATION PTIZETRES
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_INCANTATION(byref int i_GFX_Incant, vector tv_pos, float tf_facteur, float tf_hauteur, color tc_color)
{
//	if (i_GFX_Incant == -1)
//	{
//		i_GFX_Incant = GFX_Add(13)
//		GFX_MaterialSet(i_GFX_Incant, get_SFX_light_and_smoke, -1)
//		GFX_Seti(i_GFX_Incant, 13101, 0)																// ID de material du SFX Lgt&Smk
//		GFX_FlagSet(i_GFX_Incant, 0 , 1)
//		GFX_FlagSet(i_GFX_Incant, 2 , 1)
//		GFX_Seti(i_GFX_Incant, 13100, 50)																// Nombre maxi de sprites
//		GFX_Seti(i_GFX_Incant, 13106, 0xFFFFFFFF)													// Nombre de sprites à générer
//		GFX_Setf(i_GFX_Incant, 13003, 0.1500000)														// duree de vie phase 1
//		GFX_Setf(i_GFX_Incant, 13004, 0.150000)														// duree de vie phase 2 
//		GFX_Setf(i_GFX_Incant, 13012, 0.750000)														// Life time random
//		GFX_Seti(i_GFX_Incant, 13107, 0)																	// Tri des sprites
//		GFX_Setf(i_GFX_Incant, 13000, 0.10000)															// Vitesse de croissance min
//		GFX_Setf(i_GFX_Incant, 13001, 0.2000)															// Vitesse de croissance max
//		GFX_Setf(i_GFX_Incant, 13002, 0.25)																// Friction sur la croissance
//		GFX_Setf(i_GFX_Incant, 13005, 0.25)																// Taille min à la création
//		GFX_Setf(i_GFX_Incant, 13006, 0.25)																// Taille max à la création
//		GFX_Setf(i_GFX_Incant, 13007, 0.0)																// Gravité
//		GFX_Setv(i_GFX_Incant, 13203, cvector(0.0, 0.0, 0.0))										// Friction sur chaque axe
//		GFX_Seti(i_GFX_Incant, 13103, tc_color)															// Couleur phase 1
//		GFX_Seti(i_GFX_Incant, 13104, PROC_DARKEN_COLOR(tc_color,0.5))				// Couleur phase 2
//		GFX_Seti(i_GFX_Incant, 13105, color_noire)														// Couleur phase 3
//		GFX_Setf(i_GFX_Incant, 13011, tv_pos.z - 10.0)												// Hauteur du sol
//		GFX_Setf(i_GFX_Incant, 13009, 0.0)																// Vitesse min
//		GFX_Setf(i_GFX_Incant, 13010, 0.0)																// Vitesse max
//		GFX_Setv(i_GFX_Incant, 13201, cvector(0.0, 0.0, 0.0))										// Vitesse min sur chaque axe
//		GFX_Setv(i_GFX_Incant, 13202, cvector(0.0, 0.0, 0.0))										// Vitesse max sur chaque axe
//		GFX_Setv(i_GFX_Incant, 13204, cvector(0.0, 0.0, 0.0))										// Vent
//		GFX_Setv(i_GFX_Incant, 13205, cvector(0.0, 0.0, 0.0))										// Vitesse de la position de création
//		GFX_Setv(i_GFX_Incant, 13206, cvector(0.0, 0.0, 0.0))										// Friction de la position
//		GFX_Setv(i_GFX_Incant, 13207, cvector(0.01,0.0,0.0))										// Volume de création 1
//		GFX_Setv(i_GFX_Incant, 13208, cvector(0.0,0.01,0.0))										// Volume de création 2
//		GFX_Setf(i_GFX_Incant, 13008, 0.03)																// Taux de génération
//	}
//
//	GFX_Setv(i_GFX_Incant, 13200, OBJ_PosGet() + cvector(MATH_Sin(tf_facteur * Cf_PiBy180), MATH_Cos(tf_facteur * Cf_PiBy180), tf_hauteur))	

	if (i_GFX_Incant == -1)
	{
		i_GFX_Incant = GFX_Add(21)
		GFX_FlagSet(i_GFX_Incant , 4, 1)
		GFX_MaterialSet(i_GFX_Incant , get_SFX_light_and_smoke, 0)	
		GFX_Seti(i_GFX_Incant , 21103, 0)																	// flare simple
		GFX_Seti(i_GFX_Incant , 21101, tc_color)														// couleur
		GFX_Setv(i_GFX_Incant, 21200, tv_pos)															// position du halo
		GFX_Setv(i_GFX_Incant, 21201, Cv_VerticalVector)											// flare sight = Normale au mur
	}

	GFX_Setf(i_GFX_Incant, 21000, tf_facteur)															// taille du halo
	GFX_Setf(i_GFX_Incant, 21004, tf_hauteur)															// extraction par rapport au point de génération (vers la cam)
}


//------------------------------------------------------------------------------------------------------------------
// 			GENERATEUR DE PARCITULES NUAGES
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_NUAGE(byref int i_GFX_Nuage, vector tv_pos, color tc_color, vector tv_vent)
{
	float 	tf_vit_min, tf_vit_max

	tf_vit_max = 3.0

	if (i_GFX_Nuage== -1)
		PROC_SFX_GFX13(i_GFX_Nuage,												// ID GFX
									tv_pos,														// Position de création
									8,	8,	8,	8,													// ID matériaux
									30, 0xFFFFFFFF,										// Nombre de sprites simultanés / au total
									0.35, 1.5,													// Durée de vie phase 1 et 2
									0.1, 0.3,	0.25,												// Vitesse de croissance min / max / friction
									0.5, 3.0,	0.0,												// Taille min / max à la création / gravité
									Cv_NullVector, 											// Friction sur chaque axe
									COLOR_SetRGBA(255,255,255,0),					// Couleur phase 1
									COLOR_SetRGBA(255,255,255,0),					// Couleur phase 2
									COLOR_SetRGBA(255,255,255,0),					// Couleur phase 3
									tv_pos.z - 10000.0,										// Hauteur du sol
									1.0, tf_vit_max,											// Vitesse min / max
									cvector(-tf_vit_max, -tf_vit_max, -tf_vit_max), 	// Vitesse min sur chaque axe
									cvector(tf_vit_max, tf_vit_max, tf_vit_max),		// Vitesse max sur chaque axe
									Cv_NullVector, 											// Vitesse de la position de création
									Cv_NullVector,											// Friction sur la position de création
									tv_vent, 														// Vent
									cvector(4.0,0.0,0.0),										// Volume de création 1
									cvector(0.0,4.0,0.0),										// Volume de création 2
									cvector(0.0,0.0,4.0),										// Volume de création 3
									0.025)														// Taux de génération

	GFX_Setv(i_GFX_Nuage, 13200, tv_pos)											// Position de création
	GFX_Seti(i_GFX_Nuage, 13104, tc_color)										// Couleur phase 2
}


//------------------------------------------------------------------------------------------------------------------
// 			GENERATEUR DE PARCITULES NUAGES
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_SPEED(byref int i_GFX_Nuage, vector tv_pos)
{
	float 	tf_vit_min, tf_vit_max

	tf_vit_max = 3.0

	if (i_GFX_Nuage== -1)
		PROC_SFX_GFX13(i_GFX_Nuage,																		// ID GFX
									tv_pos,																				// Position de création
									8, 8, 8, 8,																			// ID matériaux
									150, 0xFFFFFFFF,																// Nombre de sprites simultanés
									0.0, 1.0,																				// Durée de vie phase 1 et 2
									0.0, 0.2, 1.0,																	 	// Vitesse de croissance min / max / friction croissance
									0.03, 0.05, 0.0, 																	// Taille min à la création
									Cv_NullVector, 																	// Friction sur chaque axe
									COLOR_SetRGBA(255,255,255,255),										// Couleur phase 1
									COLOR_SetRGBA(255,255,255,255),										// Couleur phase 2
									COLOR_SetRGBA(255,255,255,191),										// Couleur phase 3
									tv_pos.z - 10000.0,																// Hauteur du sol
									1.0, tf_vit_max,																	// Vitesse min
									cvector(-tf_vit_max, -tf_vit_max, -tf_vit_max), 							// Vitesse min sur chaque axe
									cvector(tf_vit_max, tf_vit_max, tf_vit_max),								// Vitesse max sur chaque axe
									Cv_NullVector, 																	// Vitesse de la position de création
									Cv_NullVector,																	// Friction sur la position de création
									cvector(0.0,0.0,1.0), 															// Vent
									cvector(2.0,0.0,0.0),																// Volume de création 1
									cvector(0.0,2.0,0.0),																// Volume de création 2
									cvector(0.0,0.0,2.0),																// Volume de création 3
									0.025)																				// Taux de génération

	GFX_Setv(i_GFX_Nuage, 13200, tv_pos)																	// Position de création
//	GFX_Seti(i_GFX_Nuage, 13104, 0x00FFFFFF)															// Couleur phase 2
}


//------------------------------------------------------------------------------------------------------------------
// 			GENERATEUR DE PARCITULES NUAGES
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_STELE_SIMPLE(byref int i_GFX_Nuage, vector tv_pos)
{
	float 	tf_vit_min, tf_vit_max, tf_disp
//	int		i_GFX_Nuage

//	i_GFX_Nuage = -1

	tf_vit_max = 3.0
	tf_disp = 0.75

	if (i_GFX_Nuage == -1)
		PROC_SFX_GFX13(i_GFX_Nuage,																		// ID GFX
									tv_pos,																				// Position de création
									0, 0, 0, 0,																			// ID matériaux
									20, 0xFFFFFFFF,																// Nombre de sprites simultanés / total
									0.35, 0.35,																			// Durée de vie phase 1 et 2
									0.05, 0.2, 1.0,																	 	// Vitesse de croissance min / max / friction
									0.05, 0.2, 0.0,																		// Taille min / max à la création / gravité
									Cv_NullVector, 																	// Friction sur chaque axe
									COLOR_SetRGBA(0,0,0,0),													// Couleur phase 1
									COLOR_SetRGBA(255,255,255,0),											// Couleur phase 2
									COLOR_SetRGBA(0,0,0,0),													// Couleur phase 3
									tv_pos.z - 10000.0,																// Hauteur du sol
									0.1, tf_vit_max,																	// Vitesse min / max
									cvector(-tf_disp, -tf_disp, -tf_vit_max), 										// Vitesse min sur chaque axe
									cvector(tf_disp, tf_disp, tf_vit_max),											// Vitesse max sur chaque axe
									Cv_NullVector, 																	// Vitesse de la position de création
									Cv_NullVector,																	// Friction sur la position de création
									cvector(0.0,0.0,1.0), 															// Vent
									cvector(1.0,0.0,0.0),																// Volume de création 1
									cvector(0.0,1.0,0.0),																// Volume de création 2
									cvector(0.0,0.0,1.0),																// Volume de création 3
									0.1)																					// Taux de génération

	GFX_Setv(i_GFX_Nuage, 13200, tv_pos + cvector(0.0,0.0,0.5))																// Position de création
}


//------------------------------------------------------------------------------------------------------------------
// 			GENERATEUR DE PARCITULES TRAINEE PAF GUN
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_TRAINEE_PAF_GUN(byref int i_GFX_Trainee, vector tv_pos)
{
	float 	tf_disp

	tf_disp = 3.75

	if (i_GFX_Trainee == -1)
		PROC_SFX_GFX13(i_GFX_Trainee,																	// ID GFX
									tv_pos,																				// Position de création
									0, 0, 0, 0,																			// ID matériaux
									20, 0xFFFFFFFF,																// Nombre de sprites simultanés
									0.0, 0.35,																			// Durée de vie phase 1 et 2
									1.5, 3.0, 1.0,																	 	// Vitesse de croissance min / max / friction croissance
									0.5, 1.0, 0.0,																		// Taille min / max à la création / gravité
									Cv_NullVector, 																	// Friction sur chaque axe
									COLOR_SetRGBA(255,143,0,0),											// Couleur phase 1
									COLOR_SetRGBA(255,143,0,0),											// Couleur phase 2
									COLOR_SetRGBA(0,0,0,0),													// Couleur phase 3
									tv_pos.z - 10000.0,																// Hauteur du sol
									0.1, tf_disp, 																		// Vitesse min / max
									cvector(-tf_disp, -tf_disp, -tf_disp), 											// Vitesse min sur chaque axe
									cvector(tf_disp, tf_disp, tf_disp),												// Vitesse max sur chaque axe
									Cv_NullVector, 																	// Vitesse de la position de création
									Cv_NullVector,																	// Friction sur la position de création
									cvector(0.0,0.0,1.0), 															// Vent
									cvector(0.0,0.0,0.0),																// Volume de création 1
									cvector(0.0,0.0,0.0),																// Volume de création 2
									cvector(0.0,0.0,0.0),																// Volume de création 3
									0.035)																				// Taux de génération

	GFX_Setv(i_GFX_Trainee, 13200, tv_pos + cvector(0.0,0.0,0.0))								// Position de création
}


//------------------------------------------------------------------------------------------------------------------
// 			GENERATEUR DE PARCITULES BOUCLIER DE FEU
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_TRAINEE_BOUCLIER_FEU(byref int i_GFX_1, byref int i_GFX_2, vector tv_pos, vector tv_wind, vector tv_sight)
{
	if (i_GFX_1 == -1)
		PROC_SFX_GFX13(i_GFX_1,																			// ID GFX
									tv_pos,																				// Position de création
									17, 18, 19 ,17,																		// ID matériaux
									50, 0xFFFFFFFF,																// Nombre de sprites simultanés / total
									0.15, 0.2,																			// Durée de vie phase 1 et 2
									0.5, 1.0, 0.0001,																 	// Vitesse de croissance min / max / friction croissance
									0.4, 0.6, 0.0,																		// Taille min / maxà la création / gravité
									cvector(0.1,0.1,0.1), 															// Friction sur chaque axe
									COLOR_SetRGBA(13,11,0,255),											// Couleur phase 1
									COLOR_SetRGBA(6,4,0,0),													// Couleur phase 2
									COLOR_SetRGBA(0,0,0,0),													// Couleur phase 3
									tv_pos.z - 10000.0,																// Hauteur du sol
									4.0, 8.0,																				// Vitesse min / max
									cvector(-1.0,-1.0,-1.0), 															// Vitesse min sur chaque axe
									cvector(1.0,1.0,1.0),																// Vitesse max sur chaque axe
									Cv_NullVector, 																	// Vitesse de la position de création
									Cv_NullVector,																	// Friction sur la position de création
									tv_wind, 																				// Vent
									cvector(0.0,0.0,0.0),																// Volume de création 1
									cvector(0.0,0.0,0.0),																// Volume de création 2
									cvector(0.0,0.0,0.0),																// Volume de création 3
									0.01)																					// Taux de génération

	GFX_Setv(i_GFX_1, 13200, tv_pos + cvector(0.0,0.0,0.35))											// Position de création

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES CATOON 3 : rochers
	//------------------------------------------------------------------------------------------------------------------
	if (i_GFX_2 == -1)
		PROC_SFX_GFX13(i_GFX_2,																			// ID GFX
									tv_pos,																				// Position de création
									40, 42, 40, 42,																		// ID matériaux
									20, 20,																				// Nombre de sprites simultanés / total
									0.5, 0.5,																				// Durée de vie phase 1 et 2
									0.15, 0.75, 0.5,																	// Vitesse de croissance min / max / friction
									0.025, 0.075, -20.0,																// Taille min / max à la création / gravité
									Cv_NullVector, 																	// Friction sur chaque axe
									COLOR_SetRGBA(128,128,128,255),										// Couleur phase 1
									COLOR_SetRGBA(64,64,64,255),											// Couleur phase 2
									COLOR_SetRGBA(0,0,0,255),												// Couleur phase 3
									tv_pos.z,																			// Hauteur du sol
									5.0, 15.0,																			// Vitesse min / max
									cvector(-8.0,-8.0,-8.0), 															// Vitesse min sur chaque axe
									cvector(8.0,8.0,8.0),																// Vitesse max sur chaque axe
									Cv_NullVector, 																	// Vitesse de la position de création
									Cv_NullVector,																	// Friction sur la position de création
									Cv_NullVector, 																	// Vent
									cvector(0.1,0.0,0.0),																// Volume de création 1
									cvector(0.0,0.1,0.0),																// Volume de création 2
									cvector(0.0,0.0,0.0),																// Volume de création 3
									0.01)																					// Taux de génération

	GFX_Setv(i_GFX_2, 13200, tv_pos + cvector(0.0,0.0,0.35))											// Position de création
}


//------------------------------------------------------------------------------------------------------------------
// 			GENERATEUR DE COEURS POUR LE LAPIN TERMINATOR
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_COEURS_TERMINATOR(byref int ti_GFX_Coeurs, vector tv_pos, float tf_taille)
{
	if (ti_GFX_Coeurs == -1)
		PROC_SFX_GFX13(ti_GFX_Coeurs,																	// ID GFX
									tv_pos,																				// Position de création
									75, 75, 75, 75,																		// ID matériaux
									5, 0xFFFFFFFF,																	// Nombre de sprites simultanés / totaux
									0.5, 1.5,																				// Durée de vie phase 1 et 2
									0.3 * tf_taille, 0.6 * tf_taille, 0.25,										 	// Vitesse de croissance min / max / friction
									0.15 * tf_taille, 0.3 * tf_taille, 0.0,											// Taille min / max à la création / gravité
									cvector(0.0, 0.0, 0.5), 															// Friction sur chaque axe
									COLOR_SetRGBA(255,255,255,0),											// Couleur phase 1
									COLOR_SetRGBA(255,255,255,255),										// Couleur phase 2
									COLOR_SetRGBA(255,255,255,0),											// Couleur phase 3
									tv_pos.z - 100.0,																	// Hauteur du sol
									0.1 * tf_taille, 0.3 * tf_taille,													// Vitesse min / max
									cvector(-3.0 * tf_taille,-3.0 * tf_taille,-1.0 * tf_taille), 					// Vitesse min sur chaque axe
									cvector(3.0 * tf_taille,3.0 * tf_taille,1.0 * tf_taille),						// Vitesse max sur chaque axe
									Cv_NullVector, 																	// Vitesse de la position de création
									Cv_NullVector,																	// Friction sur la position de création
									Cv_NullVector, 																	// Vent
									cvector(2.0 * tf_taille,0.0,0.0),													// Volume de création 1
									cvector(0.0,2.0 * tf_taille,0.0),													// Volume de création 2
									cvector(0.0,0.0,2.0 * tf_taille),													// Volume de création 3
									0.5)																					// Taux de génération
	else
		GFX_Setv(ti_GFX_Coeurs, 13200, tv_pos + cvector(0.0,0.0,2.0))
}


//------------------------------------------------------------------------------------------------------------------
// 					GENERATEUR DE BULLES D'AIR SOUS L'EAU
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_BULLES_EAU(byref int i_GFX_Bubulles, vector tv_pos, float tf_taille)
{
	if (i_GFX_Bubulles == -1)
		PROC_SFX_GFX13(i_GFX_Bubulles,																	// Id_GFX
									tv_pos,																				// Position de création
									6, 6, 6, 6,																			// ID matériaux
									25, 0xFFFFFFFF, 																// Nombre de sprites simultanés / total à générer
									0.25, 1.0, 																			// Durée de vie phase 1 et 2
									0.05 * tf_taille,	 0.15 * tf_taille, 0.25,									 	// Vitesse de croissance min / max / friction
									0.005 * tf_taille, 0.025 * tf_taille, 4.0,										// Taille min / max à la création / gravité
									cvector(0.01, 0.01, 0.0), 														// Friction sur chaque axe
									COLOR_SetRGBA(0,0,0,0),													// Couleur phase 1
									COLOR_SetRGBA(255,255,255,255),										// Couleur phase 2
									COLOR_SetRGBA(0,0,0,0),													// Couleur phase 3
									tv_pos.z - 100.0,																	// Hauteur du sol
									0.2 * tf_taille, 0.6 * tf_taille,													// Vitesse min / max
									cvector(-3.0 * tf_taille,-3.0 * tf_taille,-1.0 * tf_taille), 					// Vitesse min sur chaque axe
									cvector(3.0 * tf_taille,3.0 * tf_taille,1.0 * tf_taille),						// Vitesse max sur chaque axe
									Cv_NullVector, 																	// Vitesse de la position de création
									Cv_NullVector,																	// Friction sur la position de création
									Cv_NullVector, 																	// Vent
									cvector(0.2 * tf_taille,0.0,0.0),													// Volume de création 1
									cvector(0.0,0.2 * tf_taille,0.0),													// Volume de création 2
									cvector(0.0,0.0,0.1 * tf_taille),													// Volume de création 3
									0.1)																					// Taux de génération
	else
		GFX_Setv(i_GFX_Bubulles, 13200, tv_pos)
}


//----------------------------------------------------------------------------------------------------------------------
// 		DESTRUCTEUR D'OBJET (ne pas utiliser, GFX super instable et Evil PS2)
//----------------------------------------------------------------------------------------------------------------------
procedure void PROC_DESTRUCTION_OBJET(object to_obj)
{
	int 		i_GFX_Destruction
	vector 	tv_gravite, tv_pos

	tv_pos = @to_obj OBJ_PosGet()
	tv_gravite = cvector(0.0,0.0,-2.0)

	i_GFX_Destruction = @to_obj GFX_Add(3)						// ajout de lexplosion du module
	GFX_FlagSet(i_GFX_Destruction, 0, 1)							// activation
	GFX_Setv(i_GFX_Destruction,3200, tv_gravite)					// gravité
	GFX_Setf(i_GFX_Destruction,3000, 3)								// temps de vie mini de chaque morceau
	GFX_Setf(i_GFX_Destruction,3001, 4)								// temps de vie max de chaque morceau
	GFX_Setf(i_GFX_Destruction,3002, 5)								// facteur de vitesse min
	GFX_Setf(i_GFX_Destruction,3003, 10)							// facteur de vitesse max
	GFX_Setf(i_GFX_Destruction,3004, 0.95)							// friction
	GFX_Setf(i_GFX_Destruction,3005, tv_pos.z - 10.0)			// niveau du sol
	GFX_Setf(i_GFX_Destruction,3006, 0.5)							// force des rebonds
}


//------------------------------------------------------------------------------------------------------------------
//						GENERATEUR DE COURONNE D'ETOILES
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_COURONNE_ETOILES(byref int i_GFX_Etoiles, vector tv_pos, float tf_taille)
{
	if (i_GFX_Etoiles == -1)
	{
		i_GFX_Etoiles = GFX_Add(21)
		GFX_FlagSet(i_GFX_Etoiles, 4, 1)
		GFX_MaterialSet(i_GFX_Etoiles, get_SFX_light_and_smoke, 76)	
		GFX_Seti(i_GFX_Etoiles, 21103, 1)																	// flare simple
		GFX_Seti(i_GFX_Etoiles, 21101, 0xFFFFFFFF)												// couleur
		GFX_Setf(i_GFX_Etoiles, 21000, tf_taille * 0.25 * MATH_RandFloat(0.5,1.5))															// taille du halo
		GFX_Setf(i_GFX_Etoiles, 21004, 1.0)																// extraction par rapport au point de génération (vers la cam)
	}

	GFX_Setv(i_GFX_Etoiles, 21200, tv_pos)																// position du halo
}


//------------------------------------------------------------------------------------------------------------------
//											GENERATEUR DE ZZZ
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_ZZZ(byref int i_GFX_Zzz, vector tv_pos, float tf_taille)
{
	if (i_GFX_Zzz == -1)
		PROC_SFX_GFX13(i_GFX_Zzz, 																		// Id_GFX
									tv_pos,																				// Position de création
									77, 77, 77, 77,																		// ID matériaux
									1,	0xFFFFFFFF, 																// Nombre de sprites simultanés / total à générer
									0.75, 2.0,																			// Durée de vie phase 1 et 2
									0.05 * tf_taille, 1.5 * tf_taille, 0.1,											// Vitesse de croissance min / max / friction sur la croissance
									0.025 * tf_taille, 0.05 * tf_taille, 0.0,											// Taille min / max à la création / gravité
									cvector(0.01, 0.01, 0.0), 														// Friction sur chaque axe
									COLOR_SetRGBA(255,255,191,0),											// Couleur phase 1
									COLOR_SetRGBA(255,255,223,255),										// Couleur phase 2
									COLOR_SetRGBA(255,255,255,0),											// Couleur phase 3
									tv_pos.z - 100.0,																	// Hauteur du sol
									0.2 * tf_taille, 0.6 * tf_taille,													// Vitesse min / max
									cvector(-2.0 * tf_taille,-2.0 * tf_taille,0.5 * tf_taille), 						// Vitesse min sur chaque axe
									cvector(2.0 * tf_taille,2.0 * tf_taille,1.0 * tf_taille),						// Vitesse max sur chaque axe
									Cv_NullVector, 																	// Vitesse de la position de création
									Cv_NullVector,																	// Friction sur la position de création
									cvector(0.0, 0.0, 0.5), 															// Vent
									cvector(0.35 * tf_taille,0.0,0.0),												// Volume de création 1
									cvector(0.0,0.35 * tf_taille,0.0),												// Volume de création 2
									cvector(0.0,0.0,0.35 * tf_taille),												// Volume de création 3
									0.85)																					// Taux de génération
	else
		PROC_UPDATE_GFX13(i_GFX_Zzz, tv_pos, cvector(0.0, 0.0, 0.5))
}


//------------------------------------------------------------------------------------------------------------------
// 				GENERATEUR DE PIPI POUR CE CONNARD DE LAPIN
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_PIPI(byref int ti_GFX_Pipi, vector tv_pos, vector tv_orient, float tf_taille)
{
	float tf_speed
	tf_speed = tf_taille * 1.5
	//------------------------------------------------------------------------------------------------------------------
	// 					ETINCELLES
	//------------------------------------------------------------------------------------------------------------------
	if (ti_GFX_Pipi == -1)
		PROC_SFX_GFX9(ti_GFX_Pipi, 																		// ID GFX
									tv_pos, 5,																		// Position de création / matériau Lgt&Smo
									COLOR_SetRGBA(254,223,46,64), 									// Couleur étincelles
									tv_orient + cvector(0.0,0.0,0.5),											// Axe principal de génération
									cvector(0.0,0.0,-3.0),														// Gravité
									50, 16, 0.05,																	// Nombre de particules / flags / angle du cône (en radians)
									tf_speed, tf_speed * 2.0, 0.97, 0.01,									// Vitesse min / max / friction / épaisseur des particules
									0.25, 0.5, 1.0,																	// Durée de vie min / max / multiplicateur de longueur
									0.01, 0.1, 0.4)																	// Temps entre la génération de 2 particules / temps de mort min / max

	GFX_Setv(ti_GFX_Pipi, 9201, tv_orient)																// Axe principal de génération
}

//------------------------------------------------------------------------------------------------------------------
//								PROJECTEUR DE JET D'EAU
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_JET_EAU(byref int ti_GFX_Boulettes, vector tv_pos, vector tv_direction, float tf_taille_proj, float tf_taille_spr, float tf_larg, float tf_eparse, float tf_haut)
{
	float tf_speed_min, tf_speed_max
	vector tv_eparse_min, tv_eparse_max

	tf_speed_min = tf_taille_proj * 5.0
	tf_speed_max = tf_taille_proj * 10.0

	tv_eparse_min = cvector(MATH_RandFloat(-tf_eparse*0.5, tf_eparse*0.5), MATH_RandFloat(-tf_eparse*0.5, tf_eparse*0.5), MATH_RandFloat(-tf_eparse*0.5, tf_eparse*0.5))
	tv_eparse_max = cvector(MATH_RandFloat(-tf_eparse, tf_eparse), MATH_RandFloat(-tf_eparse, tf_eparse), MATH_RandFloat(-tf_eparse, tf_eparse))

	if (ti_GFX_Boulettes == -1)
		PROC_SFX_GFX13(ti_GFX_Boulettes, 																// ID GFX
									tv_pos,																				// Position de création
									38, 37, 78, 79,																		// ID matériaux
									75, 0xFFFFFFFF, 																// Nombre de sprites simultanés / total à générer
									0.01, 1.5,																			// Durée de vie phase 1 et 2
									1.0, 2.0, 0.01,																		// Vitesse de croissance min / max / friction sur la croissance
									0.3 * tf_taille_spr, 0.5 * tf_taille_spr, -10.0,								// Taille min / max à la création / gravité
									cvector(0.01, 0.01, 0.0), 														// Friction sur chaque axe
									COLOR_SetRGBA(255,255,255,0),											// Couleur phase 1
									COLOR_SetRGBA(255,255,255,128),										// Couleur phase 2
									COLOR_SetRGBA(255,255,255,0),											// Couleur phase 3
									tf_haut,																				// Hauteur du sol
									tf_speed_min, tf_speed_max,												// Vitesse min / max
									(tv_direction * tf_speed_min) + tv_eparse_min, 							// Vitesse min sur chaque axe
									(tv_direction * tf_speed_max) + tv_eparse_max,						// Vitesse max sur chaque axe
									Cv_NullVector, 																	// Vitesse de la position de création
									Cv_NullVector,																	// Friction sur la position de création
									cvector(0.0, 0.0, 0.0), 															// Vent
									cvector(tf_larg,0.0,0.0),															// Volume de création 1
									cvector(0.0,tf_larg,0.0),															// Volume de création 2
									cvector(0.0,0.0,tf_larg),															// Volume de création 3
									0.05)																					// Taux de génération
	else
	{
		GFX_Setv(ti_GFX_Boulettes, 13200, tv_pos)
		GFX_Setv(ti_GFX_Boulettes, 13201, (tv_direction * tf_speed_min) + tv_eparse_min)	// Vitesse min sur chaque axe
		GFX_Setv(ti_GFX_Boulettes, 13202, (tv_direction * tf_speed_max) + tv_eparse_max)	// Vitesse max sur chaque axe
		GFX_Setf(ti_GFX_Boulettes, 13011, tf_haut)															// Hauteur du sol
	}
}


//------------------------------------------------------------------------------------------------------------------
//						PROJECTEUR DE BOULETTES DE CROTTES
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_CROTTES(byref int ti_GFX_Boulettes, vector tv_pos, vector tv_direction, float tf_taille_proj, float tf_taille_spr, float tf_larg, float tf_eparse, float tf_haut)
{
	float tf_speed_min, tf_speed_max
	vector tv_eparse_min, tv_eparse_max

	tf_speed_min = tf_taille_proj * 5.0
	tf_speed_max = tf_taille_proj * 10.0

	tv_eparse_min = cvector(MATH_RandFloat(-tf_eparse*0.5, tf_eparse*0.5), MATH_RandFloat(-tf_eparse*0.5, tf_eparse*0.5), MATH_RandFloat(-tf_eparse*0.5, tf_eparse*0.5))
	tv_eparse_max = cvector(MATH_RandFloat(-tf_eparse, tf_eparse), MATH_RandFloat(-tf_eparse, tf_eparse), MATH_RandFloat(-tf_eparse, tf_eparse))

	if (ti_GFX_Boulettes == -1)
		PROC_SFX_GFX13(ti_GFX_Boulettes, 																// ID GFX
									tv_pos,																				// Position de création
									80, 80, 80, 80,																		// ID matériaux
									100, 0xFFFFFFFF, 																// Nombre de sprites simultanés / total à générer
									0.7, 0.3,																				// Durée de vie phase 1 et 2
									1.0, 2.0, 0.5,																		// Vitesse de croissance min / max / friction sur la croissance
									1.0 * tf_taille_spr, 1.5 * tf_taille_spr, -10.0,								// Taille min / max à la création / gravité
									cvector(0.01, 0.01, 0.0), 														// Friction sur chaque axe
									COLOR_SetRGBA(210,140,30,255),											// Couleur phase 1
									COLOR_SetRGBA(210,140,30,255),											// Couleur phase 2
									COLOR_SetRGBA(210,140,30,0),											// Couleur phase 3
									tf_haut,																				// Hauteur du sol
									tf_speed_min, tf_speed_max,												// Vitesse min / max
									(tv_direction * tf_speed_min) + tv_eparse_min, 							// Vitesse min sur chaque axe
									(tv_direction * tf_speed_max) + tv_eparse_max,						// Vitesse max sur chaque axe
									Cv_NullVector, 																	// Vitesse de la position de création
									Cv_NullVector,																	// Friction sur la position de création
									cvector(0.0, 0.0, 0.0), 															// Vent
									cvector(tf_larg,0.0,0.0),															// Volume de création 1
									cvector(0.0,tf_larg,0.0),															// Volume de création 2
									cvector(0.0,0.0,tf_larg),															// Volume de création 3
									0.05)																					// Taux de génération
	else
	{
		GFX_Setv(ti_GFX_Boulettes, 13200, tv_pos)
		GFX_Setv(ti_GFX_Boulettes, 13201, (tv_direction * tf_speed_min) + tv_eparse_min)	// Vitesse min sur chaque axe
		GFX_Setv(ti_GFX_Boulettes, 13202, (tv_direction * tf_speed_max) + tv_eparse_max)	// Vitesse max sur chaque axe
		GFX_Setf(ti_GFX_Boulettes, 13011, tf_haut)															// Hauteur du sol
	}
}


//------------------------------------------------------------------------------------------------------------------
//								GENERATEUR DE COEUR BLEUS
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_FLARE_COEUR(byref object to_obj, byref int ti_GFX, vector tv_pos, float tf_taille, color tc_color)
{
	//---------------------------------------------
	// GENERATEUR EN GFX21
	//---------------------------------------------
//	if (ti_GFX == -1)
//	{
//		if (to_obj)
//			ti_GFX = @to_obj GFX_Add(21)                  							 						// ajout de leffet
//		else
//			ti_GFX = GFX_Add(21)                  							 						// ajout de leffet
//
//		GFX_Seti(ti_GFX, 21103, 1)															// halo simple
//		GFX_MaterialSet(ti_GFX, get_SFX_light_and_smoke, 81)					// affectation du matériau jaune
//		GFX_Seti(ti_GFX, 21101, tc_color)													// couleur du halo
//		GFX_Setf(ti_GFX, 21005, 0.5)															// Temps de mort
//	}
//
//	GFX_Setf(ti_GFX, 21000, tf_taille)														// taille du halo
//	GFX_Setv(ti_GFX, 21200, tv_pos)														// position de création

	if (ti_GFX == -1)
		PROC_SFX_GFX21(ti_GFX, 1, to_obj,						// ID GFX / Type de GFX (0 : orienté, 1 : simple)
									tv_pos, 									// Position de création
									81,										// ID matériau
									tc_color,									// Couleur
									tf_taille,									// Taille
									0.5)										// Temps de mort

	GFX_Setf(ti_GFX, 21000, tf_taille)														// taille du halo
	GFX_Setv(ti_GFX, 21200, tv_pos)														// position de création


	//---------------------------------------------
	// GENERATEUR EN GFX4
	//---------------------------------------------
//	if(ti_GFX == -1)
//	{
//		if (to_obj)
//			ti_GFX = @to_obj GFX_Add(4)																	// création du halo
//		else
//			ti_GFX = GFX_Add(4)																	// création du halo
//
//		GFX_FlagSet(ti_GFX, 2, 1)                       										// transparent
//		GFX_FlagSet(ti_GFX, 4, 1)															// detache de lobjet
//		GFX_MaterialSet(ti_GFX, get_SFX_light_and_smoke,81)					// affectation du matériau
//		GFX_Seti(ti_GFX, 4100, 3)																// flags
//		GFX_Setf(ti_GFX, 4001, 0.1)															// temps de disparition du halo lorsqu'il est occulté
//		GFX_Seti(ti_GFX, 4102, tc_color)													// couleur du halo
//		GFX_Setv( ti_GFX, 4200, tv_pos)													// position du halo
//		GFX_FlagSet(ti_GFX,0,1)                           										// activation
//	}
//	else
//		GFX_Setv( ti_GFX, 4200, tv_pos)													// position du halo
//		GFX_Setf( ti_GFX, 4000, -tf_taille) 													// taille du halo
}


//------------------------------------------------------------------------------------------------------------------
//								GENERATEUR DE PETITE ETOILES
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_PETITE_ETOILES(vector tv_pos, float tf_taille, color tc_color, float tf_speed)
{
	int 	ti_GFX_Stars
	float	tf_vit

	tf_vit = tf_taille * tf_speed * 15.0

	PROC_SFX_GFX13(ti_GFX_Stars, 																		// ID GFX
								tv_pos,																				// Position de création
								0, 0, 0, 0,																			// ID matériaux
								4, 4, 																					// Nombre de sprites simultanés / total à générer
								0.15, 0.15,																			// Durée de vie phase 1 et 2
								tf_taille * 0.65, tf_taille * 1.45, 0.1,											// Vitesse de croissance min / max / friction sur la croissance
								tf_taille * 0.01, tf_taille * 0.01, 0.0,											// Taille min / max à la création / gravité
								cvector(0.01, 0.01, 0.01), 														// Friction sur chaque axe
								PROC_DESATURATE_COLOR(PROC_INVERT_COLOR(tc_color),0.5),	// Couleur phase 1
								PROC_DESATURATE_COLOR(PROC_INVERT_COLOR(tc_color),0.5),	// Couleur phase 2
								COLOR_SetRGBA(0,0,0,0),													// Couleur phase 3
								tv_pos.z - 10.0,																	// Hauteur du sol
								tf_taille * tf_speed * 10.0, tf_taille * tf_speed * 20.0,					// Vitesse min / max
								@get_rayman OBJ_SightGet() * tf_speed*0.5,							// Vitesse min sur chaque axe
								@get_rayman OBJ_SightGet() * tf_speed,								// Vitesse max sur chaque axe
								Cv_NullVector, 																	// Vitesse de la position de création
								Cv_NullVector,																	// Friction sur la position de création
								Cv_NullVector, 																	// Vent
								Cv_NullVector,																	// Volume de création 1
								Cv_NullVector,																	// Volume de création 2
								Cv_NullVector,																	// Volume de création 3
								0.0)																					// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 					AUTRE SFX EXPLOSION CONNARD DE LAPINOU
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_MECA(vector tv_pos, float tf_taille)
{
	float tf_friction_grow, tf_dispersion
	int i_GFX_Souffle, i_GFX_Rocks, i_GFX_Nuage_cartoon2, i_GFX_Paf, ti_GFX_Etincelles_paf
	int	ti_tmp_ID

	tf_taille *= 6.0
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 1 : Nuage fumée principal
	//------------------------------------------------------------------------------------------------------------------
	tf_friction_grow = 0.4 / tf_taille
	tf_dispersion = tf_taille * 10.0
	PROC_SFX_GFX13(i_GFX_Souffle,												// ID GFX
								tv_pos,														// Position de création
								8, 8, 8, 8,													// ID matériaux
								25, 25,														// Nombre de sprites simultanés / au total
								0.45, 1.5,													// Durée de vie phase 1 et 2
								8.0 * tf_taille, 12.0 * tf_taille, 0.1,					// Vitesse de croissance min / max / friction
								0.1 * tf_taille, 0.2 * tf_taille, -1.0,						// Taille min / max à la création / gravité
								cvector(tf_friction_grow * 2.0, tf_friction_grow * 2.0, tf_friction_grow), 	// Friction sur chaque axe
								COLOR_SetRGBA(121,117,105,128),				// Couleur phase 1
								COLOR_SetRGBA(105,101,89,64),					// Couleur phase 2
								COLOR_SetRGBA(73,69,57,0),						// Couleur phase 3
								tv_pos.z - 10.0,											// Hauteur du sol
								tf_taille * 3.0, tf_taille * 6.0,							// Vitesse min / max
								cvector(-tf_dispersion, -tf_dispersion, -tf_taille * 3.0), 	// Vitesse min sur chaque axe
								cvector(tf_dispersion, tf_dispersion, tf_taille * 3.0),		// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 2 : Rochers
	//------------------------------------------------------------------------------------------------------------------
	ti_tmp_ID = tf_taille * 0.2
	PROC_SFX_GFX13(i_GFX_Rocks,												// ID GFX
								tv_pos,														// Position de création
								42, 42, 42, 42,												// ID matériaux
								ti_tmp_ID, ti_tmp_ID,									// Nombre de sprites simultanés / au total
								1.0, 0.5,														// Durée de vie phase 1 et 2
								0.0, 0.0, 1.0,												// Vitesse de croissance min / max / friction
								0.02 * tf_taille, 0.04 * tf_taille, -20.0,					// Taille min / max à la création / gravité
								Cv_NullVector, 											// Friction sur chaque axe
								COLOR_SetRGBA(0,0,0,255),						// Couleur phase 1
								COLOR_SetRGBA(0,0,0,255),						// Couleur phase 2
								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
								tv_pos.z - 10.0,											// Hauteur du sol
								tf_taille * 5.0, tf_taille * 20.0,							// Vitesse min / max
								cvector(-tf_taille * 3.0, -tf_taille * 3.0,-tf_taille * 5.0), 	// Vitesse min sur chaque axe
								cvector(tf_taille * 3.0, tf_taille * 3.0,tf_taille * 5.0),		// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération
	
	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 3 : Feu central
	//------------------------------------------------------------------------------------------------------------------
	ti_tmp_ID = 17 + MATH_RandInt(0,3)
	PROC_SFX_GFX13(ti_GFX_Etincelles_paf,									// ID GFX
								tv_pos + cvector(0.0, 0.0, 0.5),						// Position de création
								ti_tmp_ID, ti_tmp_ID, ti_tmp_ID, ti_tmp_ID,		// ID matériaux
								3, 3,															// Nombre de sprites simultanés / au total
								0.1, 0.2,														// Durée de vie phase 1 et 2
								2.0 * tf_taille, 3.0 * tf_taille, 0.1,						// Vitesse de croissance min / max / friction
								0.1 * tf_taille, 0.2 * tf_taille, 0.0,						// Taille min / max à la création / gravité
								Cv_NullVector, 											// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,255),				// Couleur phase 1
								COLOR_SetRGBA(255,255,255,64),				// Couleur phase 2
								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
								tv_pos.z - 10.0,											// Hauteur du sol
								0.5 * tf_taille, 2.0 * tf_taille,							// Vitesse min / max
								cvector(-0.5 * tf_taille, -0.5 * tf_taille, -0.5 * tf_taille), 	// Vitesse min sur chaque axe
								cvector(0.5 * tf_taille, 0.5 * tf_taille, 0.5 * tf_taille),		// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.0)															// Taux de génération

	//------------------------------------------------------------------------------------------------------------------
	// 					GENERATEUR DE PARCITULES 4 : Eclair paf
	//------------------------------------------------------------------------------------------------------------------
	ti_tmp_ID = 55 + MATH_RandInt(0,3)
	PROC_SFX_GFX13(i_GFX_Paf,													// ID GFX
								tv_pos + cvector(0.0, 0.0, 0.95),						// Position de création
								ti_tmp_ID, ti_tmp_ID, ti_tmp_ID, ti_tmp_ID,		// ID matériaux
								1,1,															// Nombre de sprites simultanés / au total
								0.03, 0.015,												// Durée de vie phase 1 et 2
								20.0 * tf_taille, 30.0 * tf_taille, 0.35,					// Vitesse de croissance min / max / friction
								0.1 * tf_taille, 0.2 * tf_taille, 0.0,						// Taille min / max à la création / gravité
								Cv_NullVector, 											// Friction sur chaque axe
								COLOR_SetRGBA(255,255,255,128),				// Couleur phase 1
								COLOR_SetRGBA(255,255,255,64),				// Couleur phase 2
								COLOR_SetRGBA(255,255,255,0),					// Couleur phase 3
								tv_pos.z,													// Hauteur du sol
								0.0, 0.0,														// Vitesse min / max
								Cv_NullVector, 											// Vitesse min sur chaque axe
								Cv_NullVector,											// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								cvector(0.01,0.0,0.0),									// Volume de création 1
								cvector(0.0,0.01,0.0),									// Volume de création 2
								cvector(0.0,0.0,0.0),										// Volume de création 3
								0.05)															// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
// 	GENERATEUR DE PARCITULES EN ETOILE POUR EXPLOSION MECA
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_EXPLOSION_MECA_ETINCELLES(vector tv_pos, float tf_taille)
{
	int		ti_GFX_Etincelles_paf

	tf_taille *= 6.0
	PROC_SFX_GFX13(ti_GFX_Etincelles_paf,									// ID GFX
								tv_pos,														// Position de création
								0, 0, 0, 0,													// ID matériaux
								50, 50,														// Nombre de sprites simultanés / au total
								0.25, 0.25,													// Durée de vie phase 1 et 2
								0.0, 0.0,	1.0,												// Vitesse de croissance min / max / friction
								0.1 * tf_taille, 0.2 * tf_taille, 0.0,						// Taille min / max à la création / gravité
								Cv_NullVector, 											// Friction sur chaque axe
								COLOR_SetRGBA(255,188,88,255),				// Couleur phase 1
								COLOR_SetRGBA(255,188,88,128),				// Couleur phase 2
								COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
								tv_pos.z - 10000.0,										// Hauteur du sol
								1200.0, 2000.0,											// Vitesse min / max
								cvector(-50.0,-50.0,-2.5), 								// Vitesse min sur chaque axe
								cvector(50.0,50.0,2.5),									// Vitesse max sur chaque axe
								Cv_NullVector, 											// Vitesse de la position de création
								Cv_NullVector,											// Friction sur la position de création
								Cv_NullVector, 											// Vent
								Cv_NullVector,											// Volume de création 1
								Cv_NullVector,											// Volume de création 2
								Cv_NullVector,											// Volume de création 3
								0.0)															// Taux de génération
}


//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 								GENERATEUR PETITES FUMEES
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void PROC_SFX_GEN_GROSSE_FUMEE(byref int ti_GFX, vector tv_pos, float tf_taille, color tc_fume)
{
	float		tf_distance
	int			ti_GFX_Fumee

	tf_distance = tf_taille * 0.5
	if (ti_GFX== -1)
		PROC_SFX_GFX13(ti_GFX,														// ID GFX
									tv_pos,														// Position de création
									41, 41, 41, 41,												// ID matériaux
									30, 0xFFFFFFFF,										// Nombre de sprites simultanés / au total
									1.5, 2.5,														// Durée de vie phase 1 et 2
									0.05 * tf_taille, 0.15 * tf_taille, 0.01,					// Vitesse de croissance min / max / friction
									tf_taille * 0.06, tf_taille * 0.24, 0.0,					// Taille min / max à la création / gravité
									cvector(0.015, 0.015, 0.0035), 						// Friction sur chaque axe
									tc_fume,														// Couleur phase 1
									COLOR_SetRGBA(128,128,128,128),				// Couleur phase 2
									COLOR_SetRGBA(0,0,0,0),							// Couleur phase 3
									tv_pos.z - 10000.0,										// Hauteur du sol
									tf_taille * 0.1, tf_taille * 0.5,							// Vitesse min / max
									cvector(-tf_distance, -tf_distance, tf_distance * 0.8), 	// Vitesse min sur chaque axe
									cvector(tf_distance, tf_distance, tf_distance * 1.6),		// Vitesse max sur chaque axe
									Cv_NullVector, 											// Vitesse de la position de création
									Cv_NullVector,											// Friction sur la position de création
									Cv_NullVector, 											// Vent
									Cv_NullVector,											// Volume de création 1
									Cv_NullVector,											// Volume de création 2
									Cv_NullVector,											// Volume de création 3
									0.25)															// Taux de génération

	GFX_Setv(ti_GFX, 13200, tv_pos)
}
