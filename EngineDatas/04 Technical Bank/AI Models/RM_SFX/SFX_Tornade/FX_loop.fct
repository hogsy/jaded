vector		tv_wind
vector		tv_expulsion_dir

//if (inc_actuel > Frequence)
//{
//	inc_actuel = 0
//}
//
//if (inc_actuel == 0)
{
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	// 						GENERATEUR DE PARCITULES FUMEE
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------

//	if (i_GFX_Test01 != -1)
//	{
//		GFX_Del(i_GFX_Test01)
//		i_GFX_Test01 = -1
//	}
		
	if (i_GFX_Test01 == -1)
	{
		//----------------------------------------------------------------------------
		// REGLAGES POSITION CREATION GENERATEUR
		//----------------------------------------------------------------------------
		// Création SFX
		i_GFX_Test01= GFX_Add(13)
	
//		// Position à la création
//		POS_FOR_GFX = @Reference OBJ_PosGet() + cvector(0,0,0)
//		GFX_Setv(i_GFX_Test01, 13200, POS_FOR_GFX)
		
		// Gravité
		GFX_Setf(i_GFX_Test01, 13007, 15.0)
	
		//Détermination BV de destination des particules
		XAX = cvector(4,0,0)
		YAX = cvector(0,4,0)
		
		// Volume de destination des particules : CreaPosAxe X
		GFX_Setv(i_GFX_Test01, 13207, XAX )
	
		// Volume de destination des particules : CreaPosAxe Y
		GFX_Setv(i_GFX_Test01, 13208, YAX )
	
		// Generation rate
//		GFX_Setf(i_GFX_Test01, 13008, 0.005)
		GFX_Setf(i_GFX_Test01, 13008, 0.08)
		
		// Main pos speed
		GFX_Setv(i_GFX_Test01, 13205, Cv_NullVector)
		
		// Main pos friction
		GFX_Setv(i_GFX_Test01, 13206, Cv_NullVector)
	
	
		//----------------------------------------
		// REGLAGES PARTICULES
		//----------------------------------------
		// VITESSE
		//---------------
		// Vitesse minimum des particules (valeur pour chaque axe)
		IntensiteEjection = 0.75
		GFX_Setv(i_GFX_Test01, 13201, cvector(-IntensiteEjection, -IntensiteEjection, 0.0))
	
		// Vitesse maximum des particules (valeur pour chaque axe)
		GFX_Setv(i_GFX_Test01, 13202, cvector(IntensiteEjection, IntensiteEjection, 0.0))
	
		// Vitesse min des particules (valeur globale en FLOAT)
		GFX_Setf(i_GFX_Test01, 13009, 2.0)
		
		// Vitesse max des particules (valeur globale en FLOAT)
		GFX_Setf(i_GFX_Test01, 13010, 10.0)
	
//		//---------------
//		// NOMBRE DE PARTICULES
//		// Nombre de sprites	en buffer
//		GFX_Seti(i_GFX_Test01, 13100, 50*Frequence/100)
//		
//		// Nombre de sprites à générer
//		GFX_Seti(i_GFX_Test01, 13106, 0xFFFFFFFF)
	
		//---------------
		// NOMBRE DE PARTICULES
		// Nombre de sprites	en buffer
		GFX_Seti(i_GFX_Test01, 13100, 50)
		// Nombre de sprites à générer
		GFX_Seti(i_GFX_Test01, 13106, 0xFFFFFFFF)

		//---------------
		// GROSSISSEMENT DES PARTICULES
		// Growing speed min
		GFX_Setf(i_GFX_Test01, 13000, 3.5 * 0.1)	
	
		// Growing speed max
		GFX_Setf(i_GFX_Test01, 13001, 6 *1.5)	
	
		//---------------
		// TAILLE
		// Taille min à la création
		GFX_Setf(i_GFX_Test01, 13005, 0.00)
	
		// Taille max à la création
		GFX_Setf(i_GFX_Test01, 13006, 0.00)
	
		//---------------
		// FRICTION
		// Friction grow
		GFX_Setf(i_GFX_Test01, 13002, 0.03)
	
		// Friction sur chaque axe
		GFX_Setv(i_GFX_Test01, 13203, cvector(0.015, 0.015, 0.1))
	
		//---------------
		// DUREE DE VIE
		// Durée de la phase d'apparition
		GFX_Setf(i_GFX_Test01, 13003, 0.2)
		
		// Durée de la phase de mort
		GFX_Setf(i_GFX_Test01, 13004, 1.8)
	
		// Time random
		GFX_Setf(i_GFX_Test01, 13012, 0.75)
	
	
		//-----------------------------------------------------
		// REGLAGE RENDU
		//-----------------------------------------------------
		// On attribue un matériau
		GFX_MaterialSet(i_GFX_Test01, get_SFX_light_and_smoke, -1)
		GFX_Seti(i_GFX_Test01, 13101, 41)
		
		// Sprites non triés
		GFX_Seti(i_GFX_Test01, 13107, 1)
		
		// Définition du matériau comme étant actif et transparent
		GFX_FlagSet(i_GFX_Test01, 0 , 1)
		GFX_FlagSet(i_GFX_Test01, 2 , 1)
	
		// Couleur phase d'apparition
		GFX_Seti(i_GFX_Test01, 13103, 0x00506478)
	
		// Couleur phase de transition
		GFX_Seti(i_GFX_Test01, 13104, 0x80506478)
	
		// Couleur phase de mort
		GFX_Seti(i_GFX_Test01, 13105, 0x00506478)
	}

	POS_FOR_GFX = @Reference OBJ_PosGet() + cvector(0,0,0)

//	f_rot_angle += MATH_RandFloat(0.2, 4.0) * TIME_GetDt()
	f_rot_angle += MATH_RandFloat(1.0, 5.0) * TIME_GetDt()
	if (f_rot_angle >= Cf_2Pi)
		f_rot_angle -= Cf_2Pi
	tv_expulsion_dir = MATH_VecRotate(cvector(10.0, 0.0, 5.0), Cv_VerticalVector, f_rot_angle)
	DBG_RenderSphere(POS_FOR_GFX + tv_expulsion_dir, 2.0, color_rouge)
	
	// VENT
	tv_wind = tv_expulsion_dir * MATH_RandFloat(0.1, 0.24)
//	tv_wind = Cv_NullVector
	GFX_Setv(i_GFX_Test01, 13204, tv_wind)

	// Position du générateur
	POS_FOR_GFX -= tv_wind * TIME_GetDt()
	GFX_Setv(i_GFX_Test01, 13200, POS_FOR_GFX)

//	// Vitesse minimum des particules (valeur pour chaque axe)
//	GFX_Setv(i_GFX_Test01, 13201, tv_expulsion_dir + cvector(-1.0, -1.0 , -1.0))
//	// Vitesse maximum des particules (valeur pour chaque axe)
//	GFX_Setv(i_GFX_Test01, 13202, tv_expulsion_dir + cvector(1.0, 1.0 , 1.0))
//
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	// 						GENERATEUR DE PARCITULES ROCHERS
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
//	if (i_GFX_Rocks != -1)
//	{
//		GFX_Del(i_GFX_Rocks)
//		i_GFX_Rocks = -1
//	}
	
	//----------------------------------------------------------------------------
	// REGLAGES POSITION CREATION GENERATEUR
	//----------------------------------------------------------------------------
	// Création SFX
	if (i_GFX_Rocks == -1)
	{
		i_GFX_Rocks= GFX_Add(13)
	
//		// Position à la création
//		POS_FOR_GFX = @Reference OBJ_PosGet() + cvector(0,0,0)
//		GFX_Setv(i_GFX_Rocks, 13200, POS_FOR_GFX)
		
		// Gravité
		GFX_Setf(i_GFX_Rocks, 13007, -20.0)
	
		//Détermination BV de destination des particules
		XAX = cvector(4,0,0)
		YAX = cvector(0,4,0)
		
	
		// Volume de destination des particules : CreaPosAxe X
		GFX_Setv(i_GFX_Rocks, 13207, XAX )
	
		// Volume de destination des particules : CreaPosAxe Y
		GFX_Setv(i_GFX_Rocks, 13208, YAX )
	
		// Main pos speed
		GFX_Setv(i_GFX_Rocks, 13205, Cv_NullVector)
		
		// Main pos friction
		GFX_Setv(i_GFX_Rocks, 13206, Cv_NullVector)
		
		// Hauteur du sol
		GFX_Setf(i_GFX_Rocks, 13011, @Reference OBJ_PosGet().z)
		
		//----------------------------------------
		// REGLAGES PARTICULES
		//----------------------------------------
		// VITESSE
		//---------------
		// Vitesse minimum des particules (valeur pour chaque axe)
		GFX_Setv(i_GFX_Rocks, 13201, cvector(-35, -35, 35.0))
		//GFX_Setv(i_GFX_Rocks, 13201, cvector(-35, -35, 35.0))
	
	
		// Vitesse maximum des particules (valeur pour chaque axe)
		GFX_Setv(i_GFX_Rocks, 13202, cvector(35, 35, 60.0))
	
		// Vitesse min des particules (valeur globale en FLOAT)
		GFX_Setf(i_GFX_Rocks, 13009, 5.0)
		
		// Vitesse max des particules (valeur globale en FLOAT)
		GFX_Setf(i_GFX_Rocks, 13010, 20.0)
	
		//---------------
		// NOMBRE DE PARTICULES
		// Generation rate
		GFX_Setf(i_GFX_Rocks, 13008, 0.04)
	
		// Nombre de sprites	en buffer
		GFX_Seti(i_GFX_Rocks, 13100, 50)
		
		// Nombre de sprites à générer
		GFX_Seti(i_GFX_Rocks, 13106, 0xFFFFFFFF)

		//---------------
		// GROSSISSEMENT DES PARTICULES
		// Growing speed min
		GFX_Setf(i_GFX_Rocks, 13000, 0.4)	
	
		// Growing speed max
		GFX_Setf(i_GFX_Rocks, 13001, 1.2)
	
		//---------------
		// TAILLE
		// Taille min à la création
		GFX_Setf(i_GFX_Rocks, 13005, 0.0)
	
		// Taille max à la création
		GFX_Setf(i_GFX_Rocks, 13006, 0.0)
	
		//---------------
		// FRICTION
		// Friction grow
		GFX_Setf(i_GFX_Rocks, 13002, 0.1)
	
		// Friction sur chaque axe
		GFX_Setv(i_GFX_Rocks, 13203, cvector(0.001, 0.001, 0.001))
	
		//---------------
		// DUREE DE VIE
		// Durée de la phase d'apparition
		GFX_Setf(i_GFX_Rocks, 13003, 0.05)
		
		// Durée de la phase de mort
		GFX_Setf(i_GFX_Rocks, 13004, 0.5)
	
		// Time random
		GFX_Setf(i_GFX_Rocks, 13012, 0.0)
	
	
		//-----------------------------------------------------
		// REGLAGE RENDU
		//-----------------------------------------------------
		// On attribue un matériau
		GFX_MaterialSet(i_GFX_Rocks, get_SFX_light_and_smoke, -1)
		GFX_Seti(i_GFX_Rocks, 13101, 42)
		
		// Sprites non triés
		GFX_Seti(i_GFX_Rocks, 13107, 1)
		
		// Définition du matériau comme étant actif et transparent
		GFX_FlagSet(i_GFX_Rocks, 0 , 1)
		GFX_FlagSet(i_GFX_Rocks, 2 , 1)
	
		// Couleur phase d'apparition
		GFX_Seti(i_GFX_Rocks, 13103, 0x00000000)
	
		// Couleur phase de transition
		GFX_Seti(i_GFX_Rocks, 13104, 0x80000000)
	
		// Couleur phase de mort
		GFX_Seti(i_GFX_Rocks, 13105, 0x00000000)
	}

	// Position du générateur
	POS_FOR_GFX = @Reference OBJ_PosGet() + cvector(0,0,0)
	GFX_Setv(i_GFX_Rocks, 13200, POS_FOR_GFX)

	// Hauteur du sol
	GFX_Setf(i_GFX_Rocks, 13011, @Reference OBJ_PosGet().z)
}

//inc_actuel++
