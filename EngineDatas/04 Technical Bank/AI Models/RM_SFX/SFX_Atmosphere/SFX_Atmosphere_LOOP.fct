#include "SFX_Atmosphere_VAR.var"

vector 	tv_pos
float		tf_val_nuit
int			ti_alpha
object	to_obj

DBG_StartRaster(5,"Cycle jour / nuit")
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
//			HEURE ET GESTION DU CYCLE JOUR / NUIT
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

//-----------------------------------------
//  Calcul de l'heure actuelle
//-----------------------------------------
f_heure_actuelle += f_vitesse * TIME_GetDt() * 0.00069056
f_heure_lune += f_vitesse * f_vitesse_moon * TIME_GetDt() * 0.00069056

if (f_heure_actuelle > 23.99)
	f_heure_actuelle -= 24.0

if (f_heure_lune  > 23.99)
	f_heure_lune -= 24.0


//-----------------------------------------------------------
// Calcul de la valeur du jour et de la nuit
//-----------------------------------------------------------
f_val_jour = PROC_CALC_JOUR(f_heure_actuelle)
tf_val_nuit = -f_val_jour 
if (tf_val_nuit < 0.0)
	tf_val_nuit = 0.0

//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
//							POSITION DES ASTRES
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

//------------------------------------------------
// Calcul de la position du soleil
//------------------------------------------------
tv_pos = PROC_CALC_POS_SUN(cvector(0.0,0.0,0.0), f_heure_actuelle, f_sun_ang_zenith * CF_PI_180 , f_sun_ang_trajec * CF_PI_180, f_sun_aplat_trajec, f_sun_dist)
@o_lgt_sun OBJ_PosSet(tv_pos)
@o_lgt_sun OBJ_OrientTo(OBJ_Me())

//---------------------------------------------------------
// Calcul de la position de l'atmosphère
//---------------------------------------------------------
tv_pos = @o_lgt_sun OBJ_SightGet()
@o_atmosphere OBJ_SightSet(tv_pos)
@o_atmosphere OBJ_PosSet(OBJ_PosGet())
// Le dummy chargé d'éclairer la lune prend le même sight que le soleil
@o_sight_moon OBJ_SightSet(tv_pos)


//------------------------------------------------
// Calcul de la position de la lune
//------------------------------------------------
tv_pos = PROC_CALC_POS_MOON(cvector(0.0,0.0,0.0), f_val_jour, f_heure_lune, f_moon_amplitude, f_angle_init, f_moon_dist, f_vitesse_moon)
@o_lgt_moon OBJ_PosSet(tv_pos)
@o_moon OBJ_PosSet(tv_pos)
@o_moon OBJ_OrientTo(OBJ_Me())
@o_lgt_moon OBJ_OrientTo(OBJ_Me())

//----------------------------------------------------------------------
// On vire la lune si i_affichage_moon est à faux
//----------------------------------------------------------------------
if (!i_affichage_moon)
	@o_moon OBJ_FlagInvisibleSet(vrai)

//------------------------------------------------------------
// Rotation et positionnement de l'espace
//------------------------------------------------------------
@o_espace OBJ_PosSet(OBJ_PosGet())


//-------------------------------------------------------
// Calcul de l'ensemble des lumières
//-------------------------------------------------------
AI_Execute("SFX_Atmosphere_Couleurs")

//------------------------------------------------------
// Opérations sur la mer de nuages
//------------------------------------------------------
AI_Execute("SFX_Atmosphere_MerDeNuages")


//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
//								EFFETS SPECIAUX
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

//-------------------------------------------------------
// Coloration nuages et atmosphere
//-------------------------------------------------------
if (f_val_jour > 0.0)
	@o_atmosphere MAT_MT_SetLocalAlpha(0,1,i_alpha_atmos * f_val_jour * 0.25)
else
	@o_atmosphere MAT_MT_SetLocalAlpha(0,1,0.0)


//----------------------------------------
// GodRay
//----------------------------------------
if (b_activ_godray)
{
	if (f_attenuation_godray > f_intensite_godray)
		f_attenuation_godray = f_intensite_godray

	AE_GodRays(MATH_AbsFloat(f_intensite_godray - f_attenuation_godray), @o_lgt_sun OBJ_SightGet())
}
else
	AE_GodRays(0.0, Cv_VerticalVector)

DBG_StopRaster(5)

//if (@get_global i_world_stopped)
if (@get_global i_world_stopped)// || !i_activation_cycle)
{
	f_vitesse = 0.0
	i_start_env = faux
	i_start_fog = faux
	f_time_fog = 0.0
}
else
{
	if ((!i_start_fog) && f_time_fog < 0.1)
	{
		f_time_fog = 0.0
		b_activ_blend_fog = vrai
		to_obj = LIGHT_FogGet()
		tc_old_fog = @to_obj LIGHT_ColorGet()
	}
	i_start_fog = vrai
	
	if (!i_activation_cycle)
	{
		f_vitesse = 0.0
		i_start_env = faux
	}
	else
	{
		f_vitesse = f_vitesse_old
		i_start_env = vrai
	}
}