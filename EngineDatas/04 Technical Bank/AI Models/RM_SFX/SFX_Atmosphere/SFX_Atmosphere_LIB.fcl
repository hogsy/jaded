Include_UltraProcedure_Header

#include "SFX_Atmosphere_VAR.var"

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  PROCEDURE CALCULANT LA POSITION D'UN OBJET TOURNANT AUTOUR DE LA MAP EN FONCTION DE L'HEURE ACTUELLE
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure_local vector PROC_CALC_POS_SUN(vector tv_ref, float tf_heure, float tf_ang_zenith, float tf_ang_trajec, float tf_aplat, float tf_dist)
{
	vector 	tv_retour
	float 		tf_ang

	tf_ang = ((tf_heure-6.0) * 15) * CF_PI_180

	tv_retour.x = tv_ref.x + (tf_dist * MATH_Cos(tf_ang))
	tv_retour.y = tv_ref.y
	tv_retour.z = tv_ref.z + (tf_dist * MATH_Sin(tf_ang))
	
	tv_retour = MATH_VecRotate(tv_retour,cvector(1.0,0.0,0.0), tf_ang_zenith)
	tv_retour = MATH_VecRotate(tv_retour,cvector(0.0,0.0,1.0), tf_ang_trajec)

	tv_retour.z = tv_retour.z + tv_ref.z - (tv_retour.z * tf_aplat)

	return (tv_retour + OBJ_PosGet())
}


//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  PROCEDURE CALCULANT LA POSITION D'UN OBJET TOURNANT AUTOUR DE LA MAP EN FONCTION DE L'HEURE ACTUELLE
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure_local vector PROC_CALC_POS_MOON(vector tv_ref, float tf_val_jour, float tf_heure_lune, float tf_amplitude, float tf_ang_init, float tf_dist, float tf_vitesse)
{
	vector 	tv_retour
	float 		tf_ang1, tf_ang2

	// Angle de rotation autour de l'axe des Z
	tf_ang1 = ((tf_heure_lune - 0.0) * 15) * CF_PI_180

	// Angle de rotation autour de l'axe des Y
	tf_ang2 = (tf_ang_init + (tf_amplitude * -tf_val_jour)) * CF_PI_180

	tv_retour.x = tv_ref.x + (tf_dist * MATH_Cos(tf_ang1) * MATH_Cos(tf_ang2))
	tv_retour.y = tv_ref.y + (tf_dist * MATH_Sin(tf_ang1) * MATH_Cos(tf_ang2))
	tv_retour.z = tv_ref.z + (tf_dist * MATH_Sin(tf_ang2))
	
	return (tv_retour + OBJ_PosGet())
}


//--------------------------------------------------------------------------------------------
//    PROCEDURE CALCULANT LA VALEUR DU JOUR
//--------------------------------------------------------------------------------------------
procedure_local float PROC_CALC_JOUR(float tf_heure)
{
	return MATH_Cos(((tf_heure * 15) - 180.0) * CF_PI_180)
}


//-------------------------------------------------------------------------------------------------------------------------
//    PROCEDURE CALCULANT LE FOG EN FONCTION DE L'ANGLE DE VUE
//-------------------------------------------------------------------------------------------------------------------------
procedure_local color PROC_CALC_FOG_SIGHT(vector tv_pos_sun, vector tv_pos, vector tv_sight,color tc_sat_color, color tc_full_color)
{
	float		tf_angle
	
	tf_angle = MATH_Cos(MATH_VecAbsAngle(tv_sight,cvector(tv_pos_sun.x, tv_pos_sun.y, tv_sight.z) - tv_pos) * 0.5)
	if (tf_angle < 0.0)
		tf_angle = 0.0

	f_attenuation_godray = 1 - tf_angle

	return COLOR_Blend(tc_sat_color, tc_full_color, tf_angle)
}


//--------------------------------------------------------------------------------------------
//    PROCEDURE DESACTIVANT LE CYCLE JOUR / NUIT
//--------------------------------------------------------------------------------------------
procedure_ultra void PROC_ATMOS_DESACTIVATE()
{
	i_activation_cycle = !i_activation_cycle
}


//--------------------------------------------------------------------------------------------
//    PROCEDURE CHANGEANT LA VITESSE DU CYCLE
//--------------------------------------------------------------------------------------------
procedure_ultra void PROC_ATMOS_CHANGE_SPEED(float tf_speed)
{
	f_vitesse = tf_speed
}