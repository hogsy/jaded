#include "SFX_Nuage_bestiolles_VAR.var"

int 		ti_cpt1, ti_display
vector	tv_dir, tv_old_pos, tv_old_dir, tv_dest, tv_gravite
float 		tf_vitesse, tf_tmp_amp

float		tf_lod

// LOD
tf_lod = OBJ_LodVisGet()
if (tf_lod < 0.2)
	return


DBG_StartRaster(0,"Raster LUCIOLLES")
	//---------------------------------------------------------------------------------------------------------------------
	//		MODIFICATION DE LA POSITION DES WP
	//---------------------------------------------------------------------------------------------------------------------
	for (ti_cpt1 = 0; ti_cpt1<i_nb_creatures ; ti_cpt1++)
	{
		// On initialise la gravité à Null
		tv_gravite = Cv_NullVector

		//-------------------------------------------------------
		// 	BACKUP ANCIENNES VALEURS
		//-------------------------------------------------------
		// On mémorise l'ancienne valeur de la direction
		tv_old_dir = v_list_dir_obj[ti_cpt1]
		// Idem pour l'ancienne position
		tv_old_pos = v_list_obj[ti_cpt1]
		// idem pour l'ancienne position de destination
		tv_dest = v_list_dest_obj[ti_cpt1]

		//-------------------------------------------------------
		// 	CALCUL NOUVELLE VALEURS
		//-------------------------------------------------------
		// On détermine la nouvelle direction à suivre
		tv_dir = tv_dest - tv_old_pos

		// Blindage vecteur nul v_attenuation
		if (f_attenuation < 0.0001)
			f_attenuation= 0.0001

		// On calcule la nouvelle position de la particule
		tf_vitesse = f_vitesse

		// On backup la direction de l'objet
		v_list_obj[ti_cpt1] = (tv_old_pos + (tf_vitesse * (tv_old_dir + (tv_dir * f_attenuation)) * TIME_GetDt()))

		v_list_dir_obj[ti_cpt1] = MATH_VecNormalize(v_list_obj[ti_cpt1] - tv_old_pos)

		//---------------------------------------------------------------------------------------------------------------------
		//			TEST DE DISTANCE PAR RAPPORT A LA DESTINATION
		//---------------------------------------------------------------------------------------------------------------------
		if (MATH_VecSquareNorm(v_list_obj[ti_cpt1] - v_list_dest_obj[ti_cpt1]) < f_distance)
		{
			i_list_jump[ti_cpt1] = faux
			v_list_dest_obj[ti_cpt1] = PROC_GEN_WP(BV_MinGet(), BV_MaxGet())
		}

		//---------------------------------------------------------------------------------------------------------------------
		//								RENDU DES PARTICULES
		//---------------------------------------------------------------------------------------------------------------------
		switch(i_type)
		{
			case 0 :
			{
				// OISEAUX
				if (o_list_obj[ti_cpt1])
				{
					@o_list_obj[ti_cpt1] OBJ_BankingSet(Cv_VerticalVector)
					@o_list_obj[ti_cpt1] OBJ_SightSet(v_list_dir_obj[ti_cpt1])
					@o_list_obj[ti_cpt1] OBJ_PosSet(OBJ_PosGet() + v_list_obj[ti_cpt1])
				}
				break
			}
			case 3 :
			{
				// LUCIOLLES
					ti_display = MATH_RandInt(0,i_frequence_disparition)
					if (ti_display == 0)
						if (i_SFX[ti_cpt1] != -1)
							PROC_DESTROY_SFX(i_SFX[ti_cpt1])

					ti_display = MATH_RandInt(0,i_frequence_apparition)
					if (ti_display == 0)
						if (i_SFX[ti_cpt1] == -1)
							i_SFX[ti_cpt1] = PROC_SFX_FLARE_02(f_taille_luciolles, 0.0, cvector(0.0,0.0,0.0), i_couleur, MATH_RandInt(0,255), i_amplitude_couleur)

					tf_tmp_amp = f_taille_luciolles + MATH_RandFloat(-f_amplitude_scintillement, f_amplitude_scintillement )
					GFX_Setv(i_SFX[ti_cpt1], 21200, OBJ_PosGet() + v_list_obj[ti_cpt1])
					GFX_Setf(i_SFX[ti_cpt1], 21000, tf_tmp_amp)
					break
			}
			case 2 :
			{
			// MOUCHES
				PROC_DISPLAY_WP(OBJ_PosGet() + v_list_obj[ti_cpt1], v_list_dir_obj[ti_cpt1], 0.25 )
				break
			}
			// MOUCHES
			case 1 :
			{
				PROC_DISPLAY_WP(OBJ_PosGet() + v_list_obj[ti_cpt1], v_list_dir_obj[ti_cpt1], 0.25 )
				break
			}
		}
}

DBG_StopRaster(0)