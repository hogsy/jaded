#include "SFX_GG_defines.var"

float				tf_time

int					tGFX_Ga

object			to_main_actor
object			to_object

vector			tv_pos
vector			tv_offset

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}

if (i_etat_courant != ETAT_Launch)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Launch
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_NeverDynamicFather | DYN_C_NeverDynamicHierarchy, none)
	DYN_GravitySet(Cv_NormalGravity)

	COL_CrossableSet(Gmat_RM_Crossable_Default, none)

	to_main_actor = AI_MainActorGet(C_ID_Kong)
	
	tv_pos = @to_main_actor OBJ_PosGet()

	tv_offset = OBJ_PosGet()
	tv_offset -= tv_pos
	tv_offset.z = 0.0
	MATH_VecSetNormalize(tv_offset)	

	tv_offset = MATH_VecRotate(tv_offset, Cv_VerticalVector, MATH_RandFloat(-Cf_PiBy3, Cf_PiBy3))
	tv_offset *= MATH_RandFloat(3.0, 5.0)

	tv_pos += tv_offset
	DBG_RenderVector(tv_pos, Cv_VerticalVector * 10.0, color_jaune)

//	DYN_SpeedSetVector(MATH_LIB_PHY_Impulsion_Get(OBJ_PosGet(), tv_pos, DYN_GravityVectorGet(), 30.0, tf_time))
//	if (tf_time != Cf_Infinit)
//		MATH_LIB_PHY_Display_Trajectory(OBJ_PosGet(), DYN_SpeedGetVector(), DYN_GravityVectorGet(), tf_time, 30)

	DYN_Impulsion(tv_pos, MATH_RandFloat(2.0, 4.0))

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ==============================================================================
if (f_time_start_etat)
{
	if (COL_CollideType(COL_C_Ground))
	{
		to_object = COL_ObjectGet(COL_C_Ground)
		macro_change_etat("SFX_GG_ETAT_Explode")
	}
	
	if (COL_CollideType(COL_C_Wall))
	{
		to_object = COL_ObjectGet(COL_C_Wall)
		macro_change_etat("SFX_GG_ETAT_Explode")
	}
}


tGFX_Ga = GFX_Add(13)																// Create the boum
			
GFX_MaterialSet(tGFX_Ga, get_SFX_light_and_smoke, 8)					// met le materiau

GFX_Seti(tGFX_Ga, 13100, 2)														// *Buffer number of sprite
GFX_Seti(tGFX_Ga, 13106, 2)														// *number of sprite to generate

GFX_Setf(tGFX_Ga, 13003, 0.1)														// Time fase 1
GFX_Setf(tGFX_Ga, 13004, 0.9)														// Time fase 2

GFX_Seti(tGFX_Ga, 13107, 0)														// Sprites non triés

GFX_FlagSet(tGFX_Ga, 0 , 1)
GFX_FlagSet(tGFX_Ga, 2 , 1)

GFX_Setf(tGFX_Ga, 13012, 0.75)													// Time random

GFX_Setv(tGFX_Ga, 13201, cvector(-1.0, -1.0, -1.0))							// Speed min
GFX_Setv(tGFX_Ga, 13202, cvector(1.0, 1.0, 1.0))								// Speed max

GFX_Setf(tGFX_Ga, 13000, 1.0)														// Growing speed min
GFX_Setf(tGFX_Ga, 13001, 1.2)														// Growing speed max
GFX_Setf(tGFX_Ga, 13002, 0.0001)												// Friction Grow

GFX_Setf(tGFX_Ga, 13005, 0.3)														// Creation size min
GFX_Setf(tGFX_Ga, 13006, 1.0)														// Creation size max

GFX_Setv(tGFX_Ga, 13203, cvector(0.1, 0.1, 0.2))								// friction speed

GFX_Seti(tGFX_Ga, 13103, 0x6080FFFF)										// Color fase 0
GFX_Seti(tGFX_Ga, 13104, 0x8020341B)											// Color fase 1
GFX_Seti(tGFX_Ga, 13105, 0x0020341B)											// Color fase 2

GFX_Setf(tGFX_Ga, 13009, 3.0)													// Norm speed min
GFX_Setf(tGFX_Ga, 13010, 7.0)													// Norm speed max

GFX_Setf(tGFX_Ga, 13008, 0.0)														// generation rate

GFX_Setv(tGFX_Ga, 13205, Cv_NullVector)										// Mainposspeed
GFX_Setv(tGFX_Ga, 13206, Cv_NullVector)										// Mainpossfriction
	
GFX_Setf(tGFX_Ga, 13007, 0.0)														// Gravity

GFX_Setv(tGFX_Ga, 13200, OBJ_PosGet()) 									// Creation Pos
GFX_Setv(tGFX_Ga, 13204, Cv_NullVector)										// wind