object	to_obj
float		tf_elap
int			ti_change
float		tf_temp, tf_temp1
color		tc_temp

object	to_cam 
float		tf_coef 

//---------------------------------------------------------------------
// TRAITEMENT DU FOG PAR ZONE
//---------------------------------------------------------------------
if(type_fog == 0)
{
	ti_change = faux
	
	if(AI_TriggerIsValid(zone1))
	{
		if(default_zone == 1 || call_trigger(zone1))
		{
			if(!in_zone1)
			{
				if(!in_zone1) time_fog = 0
				if(default_zone) time_fog = 1
				default_zone = 0
				in_zone1 = vrai
				
				to_obj = LIGHT_FogGet()
				if(fog_changenear) f_fog_near = zone1_fog_near else f_fog_near = @to_obj LIGHT_NearGet()
				if(fog_changefar) f_fog_far = zone1_fog_far else f_fog_far = @to_obj LIGHT_FarGet()
				if(fog_changecolor) f_fog_color = zone1_fog_color else f_fog_color = @to_obj LIGHT_ColorGet()
				if(fog_correction) 
				{
					f_fog_correction_near = zone1_correction_near
					f_fog_correction_far = zone1_correction_far
				}
				
				if(ambiant_change) f_amb_color = zone1_ambiant else f_amb_color = WOR_AmbiantColGet(0)
				if(ambiant2_change) f_amb_color2 = zone1_ambiant2 else f_amb_color2 = WOR_Ambiant2ColGet(0)
				if(background_change) f_back_color = zone1_back else f_back_color = WOR_BackColGet(0)
			}
		}
		else
		{
			in_zone1 = faux
		}
	}
	
	if(AI_TriggerIsValid(zone2))
	{
		if(default_zone == 2 || call_trigger(zone2))
		{
			if(!in_zone2)
			{
				if(!in_zone2) time_fog = 0
				if(default_zone) time_fog = 1
				default_zone = 0
				in_zone2 = vrai
				
				to_obj = LIGHT_FogGet()
				if(fog_changenear) f_fog_near = zone2_fog_near else f_fog_near = @to_obj LIGHT_NearGet()
				if(fog_changefar) f_fog_far = zone2_fog_far else f_fog_far = @to_obj LIGHT_FarGet()
				if(fog_changecolor) f_fog_color = zone2_fog_color else f_fog_color = @to_obj LIGHT_ColorGet()
				if(fog_correction) 
				{
					f_fog_correction_near = zone2_correction_near
					f_fog_correction_far = zone2_correction_far
				}
				
				if(ambiant_change) f_amb_color = zone2_ambiant else f_amb_color = WOR_AmbiantColGet(0)
				if(ambiant2_change) f_amb_color2 = zone2_ambiant2 else f_amb_color2 = WOR_Ambiant2ColGet(0)
				if(background_change) f_back_color = zone2_back else f_back_color = WOR_BackColGet(0)
			}
		}
		else
		{
			in_zone2 = faux
		}
	}
	
	if(AI_TriggerIsValid(zone3))
	{
		if(default_zone == 3 || call_trigger(zone3))
		{
			if(!in_zone3)
			{
				if(!in_zone3) time_fog = 0
				if(default_zone) time_fog = 1
				default_zone = 0
				in_zone3 = vrai
				
				to_obj = LIGHT_FogGet()
				if(fog_changenear) f_fog_near = zone3_fog_near else f_fog_near = @to_obj LIGHT_NearGet()
				if(fog_changefar) f_fog_far = zone3_fog_far else f_fog_far = @to_obj LIGHT_FarGet()
				if(fog_changecolor) f_fog_color = zone3_fog_color else f_fog_color = @to_obj LIGHT_ColorGet()
				if(fog_correction) 
				{
					f_fog_correction_near = zone3_correction_near
					f_fog_correction_far = zone3_correction_far
				}
				
				if(ambiant_change) f_amb_color = zone3_ambiant else f_amb_color = WOR_AmbiantColGet(0)
				if(ambiant2_change) f_amb_color2 = zone3_ambiant2 else f_amb_color2 = WOR_Ambiant2ColGet(0)
				if(background_change) f_back_color = zone3_back else f_back_color = WOR_BackColGet(0)
			}
		}
		else
		{
			in_zone3 = faux
		}
	}
	
	if(AI_TriggerIsValid(zone4))
	{
		if(default_zone == 4 || call_trigger(zone4))
		{
			if(!in_zone4)
			{
				if(!in_zone4) time_fog = 0
				if(default_zone) time_fog = 1
				default_zone = 0
				in_zone4 = vrai
				
				to_obj = LIGHT_FogGet()
				if(fog_changenear) f_fog_near = zone4_fog_near else f_fog_near = @to_obj LIGHT_NearGet()
				if(fog_changefar) f_fog_far = zone4_fog_far else f_fog_far = @to_obj LIGHT_FarGet()
				if(fog_changecolor) f_fog_color = zone4_fog_color else f_fog_color = @to_obj LIGHT_ColorGet()
				if(fog_correction) 
				{
					f_fog_correction_near = zone4_correction_near
					f_fog_correction_far = zone4_correction_far
				}
				
				if(ambiant_change) f_amb_color = zone4_ambiant else f_amb_color = WOR_AmbiantColGet(0)
				if(ambiant2_change) f_amb_color2 = zone4_ambiant2 else f_amb_color2 = WOR_Ambiant2ColGet(0)
				if(background_change) f_back_color = zone4_back else f_back_color = WOR_BackColGet(0)
			}
		}
		else
		{
			in_zone4 = faux
		}
	}
	
	if(AI_TriggerIsValid(zone5))
	{
		if(default_zone == 5 || call_trigger(zone5))
		{
			if(!in_zone5)
			{
				if(!in_zone5) time_fog = 0
				if(default_zone) time_fog = 1
				default_zone = 0
				in_zone5 = vrai
			}
			else
			{
				to_cam = @get_global o_camera
				if (to_cam)
					tf_coef = (1.0 + MATH_VecDotProduct( @to_cam OBJ_SightGet(), MATH_VecNormalize( @zone5_gao_sight OBJ_PosGet() - @to_cam OBJ_PosGet() ) ) ) * 0.5
				else
					tf_coef = 1.0
	
	//			Str_DisplayFloatOnce(tf_coef, cvector(0.5,0.5,0))
	
				to_obj = LIGHT_FogGet()
				if(fog_changenear) f_fog_near = MATH_FloatBlend(zone5_fog_near, zone5b_fog_near, tf_coef) else f_fog_near = @to_obj LIGHT_NearGet()
				if(fog_changefar) f_fog_far = MATH_FloatBlend(zone5_fog_far, zone5b_fog_far, tf_coef) else f_fog_far = @to_obj LIGHT_FarGet()
				if(fog_changecolor) f_fog_color = COLOR_Blend(zone5_fog_color,zone5b_fog_color,tf_coef)  else f_fog_color = @to_obj LIGHT_ColorGet()
				if(fog_correction)
				{
					f_fog_correction_near = MATH_FloatBlend(zone5_correction_near, zone5b_correction_near, tf_coef)
					f_fog_correction_far = MATH_FloatBlend(zone5_correction_far, zone5b_correction_far, tf_coef)
				}
				
				if(ambiant_change) f_amb_color = COLOR_Blend(zone5_ambiant, zone5b_ambiant, tf_coef) else f_amb_color = WOR_AmbiantColGet(0)
				if(ambiant2_change) f_amb_color2 = COLOR_Blend(zone5_ambiant2, zone5b_ambiant2, tf_coef) else f_amb_color2 = WOR_Ambiant2ColGet(0)
				if(background_change) f_back_color = COLOR_Blend(zone5_back, zone5b_back, tf_coef) else f_back_color = WOR_BackColGet(0)
			}
		}
		else
		{
			in_zone5 = faux
		}
	}
	
	
	// Time
	if(fog_speed_linear)
	{
		time_fog += fog_speed * TIME_GetDt()
		if(time_fog > 1) time_fog = 1
	}
	else
	{
		time_fog = MATH_FloatBlend(time_fog, 1, fog_speed * TIME_GetDt())
	}
	
	// Fog
	to_obj = LIGHT_FogGet()
	if(to_obj)
	{
		tf_temp = MATH_FloatBlend(@to_obj LIGHT_NearGet(), f_fog_near, time_fog)
		tf_temp1 = MATH_FloatBlend(@to_obj LIGHT_FarGet(), f_fog_far, time_fog)
		@to_obj LIGHT_NearFarSet(tf_temp, tf_temp1)
		tc_temp = COLOR_Blend(@to_obj LIGHT_ColorGet(), f_fog_color, time_fog)
		@to_obj LIGHT_ColorSet(tc_temp)
	}

	//	// Fog toujours actif.
	//if(fog_correction)
	if(f_fog_correction_near || f_fog_correction_far)
	{
		correction_near = MATH_FloatBlend(correction_near, f_fog_correction_near, time_fog)
		correction_far = MATH_FloatBlend(correction_far, f_fog_correction_far, time_fog)
		GSP_Set_After_Effct(13, vrai, 0, correction_near)
		GSP_Set_After_Effct(13, vrai, 1, correction_far)
	}

	// Ambiant
	if(ambiant_change)
	{
		tc_temp = COLOR_Blend(WOR_AmbiantColGet(0), f_amb_color, time_fog)
		WOR_AmbiantColSet(0, tc_temp)
	}

	if(ambiant2_change)
	{
		tc_temp = COLOR_Blend(WOR_Ambiant2ColGet(0), f_amb_color2, time_fog)
		WOR_Ambiant2ColSet(0, tc_temp)
	}

	if(background_change)
	{
		tc_temp = COLOR_Blend(WOR_BackColGet(0), f_back_color, time_fog)
		WOR_BackColSet(0, tc_temp)
	}
} // Fin du traitement par zones

//---------------------------------------------------------------------
// TRAITEMENT DU FOG LINEAIRE
//---------------------------------------------------------------------
else
{
	float tf_hauteur_rel, tf_U
	to_obj = LIGHT_FogGet()

	// Calcul de tf_U : float servant de coeff pour l'interpolation
	tf_hauteur_rel = @o_ref OBJ_PosGet().z - fog_L_bas
	tf_U = tf_hauteur_rel / fog_L_haut

	// Test du fog Change Near
	if(fog_changenear)
		f_fog_near = MATH_FloatBlend(zone1_fog_near, zone2_fog_near, tf_U)
	else f_fog_near = @to_obj LIGHT_NearGet()

	// Test du fog Change Far
	if(fog_changefar)
		f_fog_far = MATH_FloatBlend(zone1_fog_far, zone2_fog_far, tf_U)
	else f_fog_far = @to_obj LIGHT_FarGet()

	// Test du fog Change Color
	if(fog_changecolor)
		f_fog_color = COLOR_Blend(zone1_fog_color, zone2_fog_color, tf_U)
	else f_fog_color = @to_obj LIGHT_ColorGet()

	// Test du fog Correction
	if(fog_correction) 
	{
		MATH_FloatBlend(zone1_correction_near, zone2_correction_near, tf_U)
		MATH_FloatBlend(zone1_correction_far, zone2_correction_far, tf_U)
	}

	// Test du changement d'ambient
	if(ambiant_change)
		f_amb_color = COLOR_Blend(zone1_ambiant, zone2_ambiant, tf_U)
	else f_amb_color = WOR_AmbiantColGet(0)

	// Test du changement d'ambient2
	if(ambiant2_change)
		f_amb_color2 = COLOR_Blend(zone1_ambiant2, zone2_ambiant2, tf_U)
	else f_amb_color2 = WOR_Ambiant2ColGet(0)

	// Test du changement de background color
	if(background_change)
		f_back_color = COLOR_Blend(zone1_back, zone2_back, tf_U)
	else f_back_color = WOR_BackColGet(0)
	

	// Application des modifs
	to_obj = LIGHT_FogGet()

	@to_obj LIGHT_NearFarSet(f_fog_near, f_fog_far)
	
	@to_obj LIGHT_ColorSet(f_fog_color)

	GSP_Set_After_Effct(13, vrai, 0, f_fog_correction_near)
	GSP_Set_After_Effct(13, vrai, 1, f_fog_correction_far)

	WOR_AmbiantColSet(0, f_amb_color)
	WOR_Ambiant2ColSet(0, f_amb_color2)
	WOR_BackColSet(0, f_back_color)
}