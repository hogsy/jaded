vector	tv_start_pos, tv_direction
color		tc_color
float		SizeFactor
int			ti_color
//
//vector	tv_start_pos
vector	tv_dest_pos
//vector	tv_wind
vector	tv_temp
float		tf_temp

int			ti_GFX_Impact
int			ti_GFX_Feu
int			ti_nb_sprite
vector	tv_start
vector	XAX 
vector 	YAX 
vector	POS_FOR_GFX 
vector	BANKING_FOR_GFX 
vector	SIGHT_FOR_GFX  

ti_color = 0x04908070 // 1D293A
tf_temp = 1
tc_color = ti_color
SizeFactor = 0.5
tv_direction = OBJ_SightGet()
tv_start_pos = OBJ_PosGet()

if	(OBJ_CapaTest(OBJ_Capa_1))
{
	if	(i_SFX_flash_genere)
	{
		i_SFX_flash_genere -= 1
		OBJ_FlagInvisibleSet(vrai)
	}
	else
	{
	tc_color = Ci_Color_Impact_Etincelle
	tc_color = ti_color
	// SFX Bouche à feu
	POS_FOR_GFX =tv_start_pos 
	BANKING_FOR_GFX = OBJ_SightGet() //MATH_VecNormalizev_dest_pos - tv_start_pos)

	ti_GFX_Feu = GFX_Add(13)																	// Create the boum

	GFX_MaterialSet(ti_GFX_Feu, get_SFX_light_and_smoke, -1)					// met le materiau
	GFX_Seti(ti_GFX_Feu, 13101, 8)															// Materiau 0

	XAX = BANKING_FOR_GFX * 0.3
	POS_FOR_GFX -= BANKING_FOR_GFX * 0.2

	YAX = cvector(0,0,0)
	GFX_Setv(ti_GFX_Feu, 13207, XAX )				// CreaPosAxe X
	GFX_Setv(ti_GFX_Feu, 13208, YAX )				// CreaPosAxe Y
	GFX_Seti(ti_GFX_Feu, 13100, 5)															// *Buffer number of sprite
	GFX_Seti(ti_GFX_Feu, 13106, 5)															// *number of sprite to generate
	GFX_Setf(ti_GFX_Feu, 13003, 0.05)														// Time fase 1
	GFX_Setf(ti_GFX_Feu, 13004, 1.0)														// Time fase 2
	GFX_Seti(ti_GFX_Feu, 13107, 0)															// Sprites non triés
	GFX_FlagSet(ti_GFX_Feu, 0 , 1)
	GFX_FlagSet(ti_GFX_Feu, 2 , 1)
	GFX_Setf(ti_GFX_Feu, 13012, 0.0)														// Time random
	GFX_Setf(ti_GFX_Feu, 13000, 2.5 )						// Growing speed min
	GFX_Setf(ti_GFX_Feu, 13001, 5.0 )						// Growing speed max
	GFX_Setf(ti_GFX_Feu, 13002, 0.3)													// Friction Grow
	GFX_Setf(ti_GFX_Feu, 13005, 0.00)														// Creation size min
	GFX_Setf(ti_GFX_Feu, 13006, 0.00)														// Creation size max
	GFX_Setv(ti_GFX_Feu, 13203, cvector(0.2, 0.2, 0.2))							// friction speed
	GFX_Seti(ti_GFX_Feu, 13103, 0x40C0a0a0)											// Color fase 0
	GFX_Seti(ti_GFX_Feu, 13104, 0x0AC0a0a0)											// Color fase 1
	GFX_Seti(ti_GFX_Feu, 13105, 0x00C0a0a0)											// Color fase 2
	GFX_Setf(ti_GFX_Feu, 13009, 1.0)														// Norm speed min
	GFX_Setf(ti_GFX_Feu, 13010, 5.0)														// Norm speed max
	GFX_Setf(ti_GFX_Feu, 13008, 0.01)													// generation rate
	GFX_Setv(ti_GFX_Feu, 13205, Cv_NullVector)										// Mainposspeed
	GFX_Setv(ti_GFX_Feu, 13206, Cv_NullVector)										// Mainpossfriction
	GFX_Setv(ti_GFX_Feu, 13200, OBJ_PosGet()) 													// Creation Pos
	GFX_Setf(ti_GFX_Feu, 13007, 0.6)									// Gravity
	tv_temp = 0 * tf_temp * BANKING_FOR_GFX
	GFX_Setv(ti_GFX_Feu, 13201, tv_temp +(1*tf_temp *cvector(-1.2, -1.2, -1.0)))				// Speed min
	GFX_Setv(ti_GFX_Feu, 13202, tv_temp +(1*tf_temp *cvector(1.2, 1.2, 1.0)))					// Speed max
	GFX_Setv(ti_GFX_Feu, 13200, POS_FOR_GFX  )													// Creation Pos
	OBJ_FlagInvisibleSet(faux)
	i_SFX_flash_genere = 1
	}
}
else
	OBJ_FlagInvisibleSet(vrai)

//LIBGFX_GunsImpact( 0, 0, to_gao, shot_canal[ti_shot_index], 0 ,-1)
//LIBGFX_GunsImpact( shot_impact[ti_shot_index], shot_normal[ti_shot_index], to_gao, shot_canal[ti_shot_index], 0 ,-1)
if	(OBJ_CapaTest(OBJ_Capa_0))
{
	if	(i_SFX_impact_genere)
	{
		i_SFX_impact_genere -= 1
	}
	else
	{
	tv_direction = OBJ_SightGet()
	tv_start_pos = OBJ_PosGet()

	// Effets d'impacts
		// FUMEE
		ti_GFX_Impact = GFX_Add(13)																	// Create the boum
					
		GFX_MaterialSet(ti_GFX_Impact, get_SFX_light_and_smoke, -1)						// met le materiau
		GFX_Seti(ti_GFX_Impact, 13101, 8)															// Materiau 0
		
		GFX_Seti(ti_GFX_Impact, 13100, 6)															// *Buffer number of sprite
		GFX_Seti(ti_GFX_Impact, 13106, 6)															// *number of sprite to generate
		
		GFX_Setf(ti_GFX_Impact, 13003, 0.02)														// Time fase 1
		GFX_Setf(ti_GFX_Impact, 13004, 1.0)															// Time fase 2
		
		GFX_Seti(ti_GFX_Impact, 13107, 0)															// Sprites non triés
		
		GFX_FlagSet(ti_GFX_Impact, 0 , 1)
		GFX_FlagSet(ti_GFX_Impact, 2 , 1)
		
		GFX_Setf(ti_GFX_Impact, 13012, 0.0)														// Time random
		
		GFX_Setf(ti_GFX_Impact, 13000, 3.05)													// Growing speed min
		GFX_Setf(ti_GFX_Impact, 13001, 10.2)													// Growing speed max
		GFX_Setf(ti_GFX_Impact, 13002, 0.3)														// Friction Grow
		
		GFX_Setf(ti_GFX_Impact, 13005, 0.0)														// Creation size min
		GFX_Setf(ti_GFX_Impact, 13006, 0.0)															// Creation size max
		
		GFX_Setv(ti_GFX_Impact, 13203, cvector(0.15, 0.15, 0.15))							// friction speed
		
		tc_color = COLOR_SetRGBA(COLOR_GetR(tc_color), COLOR_GetG(tc_color), COLOR_GetB(tc_color), 0xA0)
		GFX_Seti(ti_GFX_Impact, 13103, tc_color)													// Color fase 0
		tc_color = COLOR_SetRGBA(COLOR_GetR(tc_color), COLOR_GetG(tc_color), COLOR_GetB(tc_color), 0x18)
		GFX_Seti(ti_GFX_Impact, 13104, tc_color)													// Color fase 1
		tc_color = COLOR_SetRGBA(COLOR_GetR(tc_color), COLOR_GetG(tc_color), COLOR_GetB(tc_color), 0x0)
		GFX_Seti(ti_GFX_Impact, 13105, tc_color)													// Color fase 2
		
		GFX_Setf(ti_GFX_Impact, 13009, 2.5)															// Norm speed min
		GFX_Setf(ti_GFX_Impact, 13010, 8.5)															// Norm speed max
	
		GFX_Setf(ti_GFX_Impact, 13008, 0.05)														// generation rate
		
		GFX_Setv(ti_GFX_Impact, 13205, Cv_NullVector)											// Mainposspeed
		GFX_Setv(ti_GFX_Impact, 13206, Cv_NullVector)											// Mainpossfriction
			
		GFX_Setf(ti_GFX_Impact, 13007, 2.0)															// Gravity
			
		GFX_Setv(ti_GFX_Impact, 13200, tv_start_pos) 											// Creation Pos
		
		tv_temp = tv_direction * 1.5
		GFX_Setv(ti_GFX_Impact, 13201, tv_temp + cvector(-1.0, -1.0, -1.0))				// Speed min
		GFX_Setv(ti_GFX_Impact, 13202, tv_temp + cvector(1.0, 1.0, 1.0))					// Speed max
		// ETINCELLES
		ti_GFX_Impact = GFX_Add(9)
		GFX_FlagSet(ti_GFX_Impact , 0, 1)
		GFX_FlagSet(ti_GFX_Impact , 2, 1)
		GFX_MaterialSet(ti_GFX_Impact , get_SFX_light_and_smoke, 5)
		GFX_Setf(ti_GFX_Impact, 9000, Cf_PiBy2*0.75)												// angle d'ouverture
		GFX_Setf(ti_GFX_Impact, 9001, 2.0)														// vitesse initiale minimum
		GFX_Setf(ti_GFX_Impact, 9002, 10.0)														// vitesse initiale maximum
		GFX_Setf(ti_GFX_Impact, 9003, 0.95 )														// friction
		GFX_Setf(ti_GFX_Impact, 9004, 0.05*SizeFactor )										// épaisseur
		GFX_Setf(ti_GFX_Impact, 9005, 0.02)														// durée de vie minimum
		GFX_Setf(ti_GFX_Impact, 9006, 0.20)														// durée de vie maximum
		GFX_Setf(ti_GFX_Impact, 9007, 1 )														// multiplicateur de longueur
		GFX_Setf(ti_GFX_Impact, 9008, 0.0005 )													// generation périod
		GFX_Setf(ti_GFX_Impact, 9009, 0.05)														// durée de mort minimun
		GFX_Setf(ti_GFX_Impact, 9010, 0.1)														// durée de mort maximun
		GFX_Seti(ti_GFX_Impact, 9100, 10)															// Nombre
		GFX_Seti(ti_GFX_Impact, 9102, 0b11000)												// Flags (1 => agrandissement centré)
		GFX_Setv(ti_GFX_Impact, 9200, tv_start_pos)													// Origine des étincelles
		GFX_Setv(ti_GFX_Impact, 9201, tv_direction)											// Direction
		GFX_Setv(ti_GFX_Impact, 9202, cvector(0.0, 0.0, -2.0) )								// gravity
		GFX_Seti(ti_GFX_Impact, 9101, 0xf080c0ff) 												// couleur}
		i_SFX_impact_genere = 5
	}
}

///

