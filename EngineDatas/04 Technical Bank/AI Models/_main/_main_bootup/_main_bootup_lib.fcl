//============================================
// set text and dialog num following the choosen langage
//============================================
procedure_local void mainbootup_SetLangId( int pi_lang )
{
	switch (pi_lang)
	{
	case	INO_e_French :
	case	INO_e_English :		
	case	INO_e_German :		
	case	INO_e_Italian		:	
	case	INO_e_Spanish	:
		@"univ" MENU_LangVost = 0
		lang_dialog = pi_lang
		lang_subtitle = pi_lang
		break

	case	INO_e_Danish	 :		
	case	INO_e_Dutch	:		
	case	INO_e_Finnish	:	
	case	INO_e_Swedish		:
	case	INO_e_Norwegian	:
	case	INO_e_Polish			:
	case	INO_e_Russian		:
	case	INO_e_Japanese		:
		@"univ" MENU_LangVost = 1
		lang_dialog = INO_e_English 
		lang_subtitle = pi_lang
		break

	case	INO_e_Portuguese :	
	case	INO_e_Chinese		:
	case	INO_e_Albanian		:
	case	INO_e_Arabic			:
	case	INO_e_Bulgarian		:
	case	INO_e_Byelorussian	:
	case	INO_e_Greek			:
	case	INO_e_Korean			:
	case	INO_e_Romanian		:
	case	INO_e_Serbian		:
	case	INO_e_Slovak			:
	case	INO_e_Slovenian		:
	case	INO_e_Turkish		:
	case	INO_e_Czech		:	
	case	INO_e_Hungarian	:	
	case	INO_e_Taiwanese :	
		@"univ" MENU_LangVost = 0
		lang_dialog = INO_e_English 
		lang_subtitle = INO_e_English 
		break

	}
	
	TEXT_SetSndLanguage( lang_dialog )
	TEXT_SetLanguage( lang_subtitle ) 
}

//============================================
// Do effect on lang screen
//============================================
procedure_local void mainbootup_DoLangScreen()
{
	int i
	
	if (!lang_screen)
		return 

	if (lang_screen_state == 0)
	{
		lang_screen_status = 1	
		lang_screen_img = -1
		if ( mf_Timer < 0 )
		{
			@lang_screen MAT_ConstantSet( 0xFFFFFFFF, 0)
			@lang_screen MAT_MT_SetLocalAlpha( 3, 0, 255.0 )
			@lang_screen MAT_MT_SetLocalAlpha( 4, 0, 255.0 )

			lang_screen_state = 1
		}
		else
		{
			@lang_screen MAT_ConstantSet( COLOR_Blend(0, 0xFFFFFFFF, 1 -(mf_Timer * 2)) , 0)
			@lang_screen MAT_MT_SetLocalAlpha( 3, 0, 255.0 * (1 -(mf_Timer * 2)))
			@lang_screen MAT_MT_SetLocalAlpha( 4, 0, 255.0 * (1 -(mf_Timer * 2)))

		}
		return
	}
//	else if (lang_screen_state == 1)
//	{
//		mf_Timer = MATH_RandFloat( 4, 8 )
//		lang_screen_img = MATH_Modulo( lang_screen_img + 1, 9 )
//
//		for (i = 0; i < 9; i++)
//		{
//			if ( i == lang_screen_img )
//			{
//				@lang_screen MAT_MT_EnableLevel(1,i,1)
//				@lang_screen MAT_MT_SetLocalAlpha(1,i,0)
//			}
//			else
//				@lang_screen MAT_MT_EnableLevel(1,i,0)
//		}
//		lang_screen_state = 2
//	}
//	else if (lang_screen_state == 2)
//	{
//		mf_Timer -= TIME_GetDt()
//		if (mf_Timer < 0 )
//		{
//			lang_screen_state = 3
//			mf_Timer = 1.0
//		}
//	}
//	else if (lang_screen_state == 3)
//	{
//		mf_Timer -= TIME_GetDt()
//		if (mf_Timer < 0)
//		{
//			@lang_screen MAT_MT_SetLocalAlpha(1,lang_screen_img, 255)
//			lang_screen_state = 4
//			mf_Timer = MATH_RandFloat( 4,8 )
//		}
//		else
//			@lang_screen MAT_MT_SetLocalAlpha(1,lang_screen_img,(1 - mf_Timer) * 255)
//	}
//	else if (lang_screen_state == 4)
//	{
//		mf_Timer -= TIME_GetDt()
//		if (mf_Timer < 0 )
//		{
//			lang_screen_state = 5
//			mf_Timer = 1.0
//		}
//	}
//	else if (lang_screen_state == 5)
//	{
//		mf_Timer -= TIME_GetDt()
//		if (mf_Timer < 0)
//		{
//			@lang_screen MAT_MT_SetLocalAlpha(1,lang_screen_img, 0)
//			lang_screen_state = 1
//			mf_Timer = MATH_RandFloat( 1, 2 )
//		}
//		else
//			@lang_screen MAT_MT_SetLocalAlpha(1,lang_screen_img,mf_Timer * 255)
//	}
}


//============================================
// Creating texte with normal string function
//============================================

//----( Set Frame with coordinates, if coordinates is a null rect, set frame for text )------
procedure_local void mainbootup_Text_SetFrameXY( int pi_id, int pi_color, vector min, vector max )
{	
	int self
	
	if (min==max) self = 1
	else self = 0
	if (!self)
	{
		OBJ_TextSet( pi_id, " " )
		OBJ_TextPivotSet( pi_id, cvector( 0, 0, 0))
		OBJ_TextColorSet( pi_id, 0, -1, 0xFFFFFFFF )
	}
	OBJ_TextFrameSet( pi_id, 9, 33 )
	OBJ_TextFrameBorderSet(pi_id, 0.02)
	OBJ_TextFrameColorSet( pi_id, pi_color )
	if ( self )
		OBJ_TextFlagSet( pi_id, OBJ_TextFlagGet(pi_id) | 256 + 32 )
	else
	{
		OBJ_TextFramePosSet( pi_id, min, max )
		OBJ_TextFlagSet( pi_id, 256 )
	}
}

//----( Start creation )-----
procedure_local void mainbootup_CreateText_Start( int pi_id )
{
	OBJ_TextSet( pi_id, "" )
}

//----( end of creation )-----
procedure_local void mainbootup_CreateText_End( int pi_id, vector pv_pos, float pf_height, int pi_justify, int pi_align, int pi_color, int pi_frame, int pi_page )
{
	int	ti_flags
	
	OBJ_TextPivotSet( pi_id, pv_pos )
	ti_flags = pi_justify + 16
	OBJ_TextFlagSet( pi_id, ti_flags | 16 )
	OBJ_TextColorSet( pi_id, 0, -1, pi_color )
	if (pi_page)
		OBJ_TextPageSet(pi_id, 0, -1, pi_page, 0 )
	OBJ_TextSizeSet( pi_id, 0, -1, cvector( -1, pf_height, 0 ) )
	if (pi_align != -1) OBJ_TextAlign( pi_id, 0 , -1, pi_align)
	if ( pi_frame )
		mainbootup_Text_SetFrameXY( pi_id, pi_color, Cv_NullVector, Cv_NullVector )
}

//----( create in one shot with sample string )-----
procedure_local	int mainbootup_SetText( int pi_id, int pi_txg, int pi_texte, vector pv_pos, float pf_height, int pi_justify, int pi_align, int pi_color, int pi_frame, int pi_Page )
{
	if (pi_texte != -1)
		OBJ_TextSet( pi_id, TEXT_Get( pi_txg, pi_texte ))
	else
		OBJ_TextSet( pi_id, "" )
		
	mainbootup_CreateText_End( pi_id,pv_pos, pf_height, pi_justify, pi_align, pi_color, pi_frame, pi_Page )
	return pi_id
}

//----( change color )-----
procedure_local void mainbootup_Text_ChangeColor( int pi_id, int pi_colorstart, int pi_colorend, float pf_time, float pf_delay )
{
	int i_effect
	i_effect = OBJ_TextEffectAdd( 4, pi_id, 0, -1 )
	OBJ_TextEffectSeti( i_effect, 1, 1)
	OBJ_TextEffectSeti( i_effect, 0, 1)
	OBJ_TextEffectSeti( i_effect, 400, pi_colorstart)
	OBJ_TextEffectSeti( i_effect, 401, pi_colorend)
	OBJ_TextEffectSetf( i_effect, 450, pf_time)
	OBJ_TextEffectSetf( i_effect, 451, pf_delay )
}


//----( Fade In )-----
procedure_local void mainbootup_Text_FadeIn( int pi_id, float pf_time, float pf_delay )
{
	int i_effect
	i_effect = OBJ_TextEffectAdd( 1, pi_id, 0, -1 )
	OBJ_TextEffectSeti( i_effect, 1, 1)
	OBJ_TextEffectSeti( i_effect, 0, 1)
	OBJ_TextEffectSetf( i_effect, 150, pf_time)
	OBJ_TextEffectSetf( i_effect, 151, pf_delay )
}

//----( Multiple Fade In )-----
procedure_local void mainbootup_Text_FadeInMulti( int pi_id_start, int pi_id_nb, float pf_time, float pf_delay )
{
	int i
	for ( i = 0; i < pi_id_nb; i++)
		mainbootup_Text_FadeIn( pi_id_start + i, pf_time, pf_delay )
}

//----( Fade Out )-----
procedure_local void mainbootup_Text_FadeOut( int pi_id, float pf_time )
{
	int i_effect
	i_effect = OBJ_TextEffectAdd( 1, pi_id, 0, -1 )
	OBJ_TextEffectSeti( i_effect, 1, 1)
	OBJ_TextEffectSetf( i_effect, 150, pf_time)
}

//----( Multiple Fade In )-----
procedure_local void mainbootup_Text_FadeOutMulti( int pi_id_start, int pi_id_nb, float pf_time )
{
	int i
	for ( i = 0; i < pi_id_nb; i++)
		mainbootup_Text_FadeOut( pi_id_start + i, pf_time )
}

//----( Reset several texte )-----
procedure_local void mainbootup_ResetTexte( int pi_start, int pi_nb )
{
	int ti_index
	for (ti_index =0; ti_index < pi_nb; ti_index++)
	{
		OBJ_TextSet( pi_start+ ti_index, "" )
		OBJ_TextFlagSet( pi_start + ti_index, 0 )
		OBJ_TextEffectSeti( 1, -1, pi_start + ti_index )
	}
}

//============================================
// Update joy state
//============================================
procedure_local void mainbootup_UpdateJoy( int pi_Dir, float pf_Val, int pi_button )
{
	if (pf_Val > 0.8 || pi_button)
	{
		if ( !mi_Joy[ pi_Dir ]  )
		{
			mi_Joy[ pi_Dir ] = 1
			mf_JoyTimer[ pi_Dir ] = 0.7
			mf_JoyTimerMax[ pi_Dir ] = 0.5
		}
		else
		{
			mf_JoyTimer[ pi_Dir ] -= TIME_GetDt()
			if (mf_JoyTimer[ pi_Dir ] < 0 )
			{
				mi_Joy[ pi_Dir ] = 1
				mf_JoyTimer[ pi_Dir ] = mf_JoyTimerMax[ pi_Dir ]
				mf_JoyTimerMax[ pi_Dir ] *= 0.98
				if (mf_JoyTimerMax[ pi_Dir ] < 0.3 )
					mf_JoyTimerMax[ pi_Dir ] = 0.3
			}
			else
				mi_Joy[ pi_Dir ] = 2
		}
	}
	else
		mi_Joy[ pi_Dir ] = 0
}

//============================================
// update cur selection
//============================================
procedure_local void mainbootup_UpdateCur_Vertical( int pi_max, int pi_loop )
{
	if ( mi_Joy[ 0 ] == 1)
	{
		lang_cur++
		if (lang_cur >= pi_max )
		{
			if (pi_loop ) lang_cur = 0
			else lang_cur = pi_max - 1
		}
	}
	
	if ( mi_Joy[ 1 ] == 1)
	{
		lang_cur--
		if (lang_cur < 0)
		{
			if (pi_loop) lang_cur = pi_max - 1
			else lang_cur= 0
		}
	}
}