#include "ROOT/EngineDatas/04 Technical Bank/AI Models/Global Library/menu_constant.var"

int 	ti_msg
int		i
int		ti_running
float	tf_val
int		text_access
int		text_nomemcard
int		text_nospace

#define mainbootup_TXG					0x4902e423
#define mainbootup_Title					0x4902E4A7
#define mainbootup_LangName			0x4902E4C5

#define mainbootup_PS2_Accessing	0x4902EC65
#define mainbootup_PS2_None			0x4902EC83
#define mainbootup_PS2_NoSpace		0x4902ECA2

#define mainbootup_GC_Accessing	0x0C0339BC
#define mainbootup_GC_None			0x0C0339DA
#define mainbootup_GC_NoSpace		0x0C0339F8

#define	mainbootup_Color_Title		0xFFFFFFFF
#define 	mainbootup_Color_Sel		0xFFFFFFFF
#define 	mainbootup_Color_NotSel	0xFF606060

switch ( AI_GetCurSystem() )
{
	// PS2
	case 1:	text_access = mainbootup_PS2_Accessing
				text_nomemcard = mainbootup_PS2_None
				text_nospace = mainbootup_PS2_NoSpace
				break
	// GC
	case 2:	text_access = mainbootup_GC_Accessing
				text_nomemcard = mainbootup_GC_None
				text_nospace = mainbootup_GC_NoSpace
				break
	// XBOX
	case 3:	text_access = mainbootup_PS2_Accessing
				text_nomemcard = mainbootup_PS2_None
				text_nospace = mainbootup_PS2_NoSpace
				break
	// AUTRE : PC / EDITOR
	default: 	text_access = mainbootup_PS2_Accessing
				text_nomemcard = mainbootup_PS2_None
				text_nospace = mainbootup_PS2_NoSpace
				break
}

//OBJ_TextMaxWidthSet( 0.8 )
//mainbootup_SetText( 0, mainbootup_TXG, text_nospace + lang_subtitle, cvector(0.5, 0.5,0),  0.0, 5, 0, mainbootup_Color_Title, 1, 0 )
//OBJ_TextMaxWidthSet( 0 )
//return

if ( MENU_NOMEMCARD )
{
	DBG_TraceString( "No mem card forced" )
	DBG_TraceEOL()
	AI_TrackCurChangeNow( "mbootup_go" )
	return
}

if ( ConsoleSpecificOption( 31 ) == 0 )
{
	DBG_TraceString( "No mem card forced by console configuration" )
	DBG_TraceEOL()
	AI_TrackCurChangeNow( "mbootup_go" )
	return
}

if ( mf_Timer > 0 )
{
	mf_Timer -= TIME_GetDt()
	if (mf_Timer < 0)
		mf_Timer = 0
	if ( lang_screen )
	{
		tf_val = (mf_Timer - 0.1) / 0.2
		if (tf_val < 0)
			tf_val = 0
		@lang_screen MAT_ConstantSet( COLOR_Blend(0, 0xFFFFFFFF, tf_val) , 0)
		tf_val *= 255
		for (i = 0; i < 9; i++)
		{
			if ( @lang_screen MAT_MT_GetLocalAlpha( 1, i) > tf_val )
				@lang_screen MAT_MT_SetLocalAlpha( 1, i, tf_val )
		}
		if ( @lang_screen MAT_MT_GetLocalAlpha( 3, 0) > tf_val )
			@lang_screen MAT_MT_SetLocalAlpha( 3, 0, tf_val )
		if ( @lang_screen MAT_MT_GetLocalAlpha( 4, 0) > tf_val )
			@lang_screen MAT_MT_SetLocalAlpha( 4, 0, tf_val )
	}
	return
}	

if ( mem_card_status == 0 )
{
	OBJ_TextReset()
	OBJ_TextMaxWidthSet( 0.8 )
	mainbootup_SetText( 0, mainbootup_TXG, text_access + lang_subtitle, cvector(0.5, 0.5,0),  0.0, 5, 0, mainbootup_Color_Title, 1, 0 )
	OBJ_TextMaxWidthSet( 0 )

	SAVE_Request(INO_e_SavRq_FreeRessource, 0)
	SAVE_Request(INO_e_SavRq_BootupTest, 0)
	mem_card_status = 1
	return
}

ti_msg = SAVE_Request(INO_e_SavRq_UserMessageId, 0)
ti_running = SAVE_Request(INO_e_SavRq_Status, 0)

if ( !ti_running )
{
	if (ti_msg == INO_e_SavMsg_Retrying )
		mem_card_status = 0
	else
	{
		AI_TrackCurChangeNow( "mbootup_go" ) 
		OBJ_TextReset()
	}
}
else
{
	if (ti_msg == INO_e_SavMsg_NoCard ) 
	{
		OBJ_TextMaxWidthSet( 0.8 )
		mainbootup_SetText( 0, mainbootup_TXG, text_nomemcard + lang_subtitle, cvector(0.5, 0.5,0),  0.0, 5, 0, mainbootup_Color_Title, 1, 0 )
		OBJ_TextMaxWidthSet( 0 )
	}
	else if (ti_msg == INO_e_SavMsg_NoMoreSpace )
	{
		OBJ_TextMaxWidthSet( 0.8 )
		mainbootup_SetText( 0, mainbootup_TXG, text_nospace + lang_subtitle, cvector(0.5, 0.5,0),  0.0, 5, 0, mainbootup_Color_Title, 1, 0 )
		OBJ_TextMaxWidthSet( 0 )
	}
}



