#include "PNJ_Quadri_defines.var"

int				ti_i
int				ti_index
int				ti_flag_stop

float			tf_speed
float			tf_coef
float			tf_target_speed

vector		tv_pos
vector		tv_pos2
vector		tv_new_sight
vector		tv_new_banking
vector		tv_speed
vector		tv_traction

object		to_eagle
object		to_head
object		to_pied_G
object		to_pied_D
object		to_torse
object		to_bassin

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux

//	COL_UnCollidableDel(o_eagle)

	ti_index = @o_rope_manager  Rope_Manager_Get_Corde_Index(OBJ_Me(), o_eagle)
	@o_rope_manager  Rope_Manager_Del(ti_index)

//	AI_CBDel(o_eagle, CallBack_After_Blend, "PNJ_Quadri_callback_set_pos")
	o_eagle = LNK_ServeurGet(Ci_LNK_GRAB_EAGLE, mid_eagle_LNK, faux, nofunc, nofunc)
	o_snap_bone = nobody

	f_wanted_traction = 0.0

	return
}

if (i_etat_courant != ETAT_Grabbed)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Grabbed
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}

//	AI_CBAdd(o_eagle, CallBack_After_Blend, "PNJ_Quadri_callback_set_pos")

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_GlobalFriction | DYN_C_VectorFriction | DYN_C_NeverDynamicFather | DYN_C_NeverDynamicHierarchy | DYN_C_HorizontalGrounds | DYN_C_ApplyRec | DYN_C_Col, none)
	DYN_GravitySet(cvector(0.0, 0.0, -40.0))

	v_grav_pos = @o_eagle OBJ_PosGet()
	v_grav_pos -= @o_eagle OBJ_BankingGet() * 2.0
	v_grav_speed = Cv_NullVector
	
	fct_last_etat = AI_TrackCurGet()

	o_snap_bone = LNK_GrabBoneGet(mid_eagle_LNK)

	f_grab_side_sign = MATH_FloatSign(MATH_VecDotProduct(OBJ_SightGet(), @o_eagle OBJ_HorizonGet()))

	COL_UnCollidableAdd(o_eagle)
	@o_rope_manager Rope_Manager_Add(OBJ_Me(), o_eagle, 0.0, 10.0, 0.0)

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
if (f_time_start_etat > 1.0 && f_ground_col_duration > 0.3)
	to_eagle = LNK_ServeurGet(Ci_LNK_GRAB_EAGLE, mid_eagle_LNK, faux, nofunc, nofunc)

to_eagle = LNK_ServeurGet(Ci_LNK_GRAB_EAGLE, mid_eagle_LNK, vrai, nofunc, nofunc)
if (to_eagle != o_eagle )
	macro_change_etat("PNJ_Quadri_ETAT_Basic")

v_joy_dir = MATH_VecBlendRotate(v_joy_dir, @to_eagle OBJ_SightGet(), 4.0 * TIME_GetDt())

//tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), MATH_VecBlendRotate(@to_eagle OBJ_SightGet(), @to_eagle OBJ_HorizonGet(), 0.75), 2.0 * TIME_GetDt())
//tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), @o_eagle OBJ_BankingGet(), 2.0 * TIME_GetDt())
//OBJ_BankingGeneralSet(tv_new_sight, tv_new_banking)

if (f_delay_since_last_ground_col < Cf_hysteresis_no_ground_col)
{
	PNJ_Quadri_Sight_And_Banking(@to_eagle OBJ_SightGet())
	PNJ_Quadri_Apply_Traction_And_Choose_Action(0.0)
}
else
{
	PNJ_Quadri_Sight_And_Banking(f_grab_side_sign  * @to_eagle OBJ_HorizonGet())
	PNJ_Quadri_Apply_Traction_And_Choose_Action(0.0)
}

//to_head = ANI_CanalObjectGet(Anim_Canal_Tete)
//tv_pos = @to_head OBJ_PosGet()
//tv_pos -= @to_head OBJ_SightGet() * 2.0
//tv_pos -= @to_head OBJ_BankingGet()

to_torse = ANI_CanalObjectGet(Anim_Canal_Ventre)
tv_pos = @to_torse OBJ_PosGet()
tv_pos -= @to_torse OBJ_SightGet()

//to_pied_G = @o_eagle ANI_CanalObjectGet(Anim_Canal_PiedGauche)
//to_pied_D = @o_eagle ANI_CanalObjectGet(Anim_Canal_PiedDroit)
////tv_pos2 = MATH_VecBlend(@to_pied_G OBJ_PosGet(), @to_pied_D OBJ_PosGet(), 0.5)
//tv_pos2 = @to_pied_D OBJ_PosGet() 
//tv_pos2 += @to_pied_D OBJ_BankingGet()

//to_bassin = @o_eagle ANI_CanalObjectGet(Anim_Canal_Bassin)
//tv_pos2 = @to_bassin OBJ_PosGet() 
//tv_pos2 -= @o_eagle OBJ_BankingGet() * 2.0

if (f_delay_since_last_ground_col > Cf_hysteresis_no_ground_col && f_delay_since_last_wall_col > Cf_hysteresis_no_ground_col)
{
	tv_pos2 = v_grav_pos
	tv_traction = cvector(0.0, 0.0, -40.0)
	tv_traction /= 1.5
	v_grav_speed = tv_traction - ((tv_traction - v_grav_speed) * MATH_Exp( - 1.5 * TIME_GetDt()))
	v_grav_pos += v_grav_speed * TIME_GetDt()
	v_grav_pos -= @o_eagle OBJ_PosGet()
	MATH_VecSetNormalize(v_grav_pos)
	OBJ_BankingGeneralSet(OBJ_SightGet(), -v_grav_pos)
	DBG_RenderVector(@o_eagle OBJ_PosGet(), v_grav_pos * 2.0, color_jaune)
	v_grav_pos *= 2.0
	v_grav_pos += @o_eagle OBJ_PosGet()
	v_grav_speed = (v_grav_pos - tv_pos2) / TIME_GetDt()
}
else
{
	tv_pos2 = v_grav_pos
	v_grav_pos -= @o_eagle OBJ_PosGet()
	MATH_VecSetNormalize(v_grav_pos)
	v_grav_pos = MATH_VecBlendRotate(v_grav_pos, -@o_eagle OBJ_BankingGet(), 6.0 * TIME_GetDt())
	DBG_RenderVector(@o_eagle OBJ_PosGet(), v_grav_pos * 2.0, color_jaune)
	v_grav_pos *= 2.0
	v_grav_pos += @o_eagle OBJ_PosGet()
	v_grav_speed = (v_grav_pos - tv_pos2) / TIME_GetDt()
}

tv_pos2 = v_grav_pos

ti_index = @o_rope_manager  Rope_Manager_Get_Corde_Index(OBJ_Me(), o_eagle)
@o_rope_manager Rope_Manager_Enable_Offset(ti_index, vrai, MATH_VecGlobalToLocal(tv_pos - OBJ_PosGet()), vrai, @o_eagle MATH_VecGlobalToLocal(tv_pos2 - @o_eagle OBJ_PosGet()))

if (f_delay_since_last_ground_col < Cf_hysteresis_no_ground_col)
	@o_rope_manager Rope_Manager_Update(ti_index, OBJ_Me(), o_eagle, 2.0, 0.0, 20.0, 20.0)
else
	@o_rope_manager Rope_Manager_Update(ti_index, OBJ_Me(), o_eagle, 0.0, 0.0, 20.0, 20.0)
