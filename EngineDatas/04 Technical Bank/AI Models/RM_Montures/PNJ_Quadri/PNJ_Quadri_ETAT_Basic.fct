#include "PNJ_Quadri_defines.var"

Include_UltraProcedure_Header

int				ti_index
int				ti_flag_main
int				ti_flag_boost

float			tf_norm
float			tf_hor_speed
float			tf_speed_coef
float			tf_wanted_traction
float			tf_next_wanted_traction

object		to_head

vector		tv_pos
vector		tv_joy_dir
vector		tv_speed
vector		tv_traction

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}


if (i_etat_courant != ETAT_Basic)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Basic
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	COL_ColSetActivationSet(C_bit_zdm_pied, none)

 	COL_SwapToSpecific(C_zdm_pied)
	COL_ZoneSizeSet(C_zdm_pied, cvector(Cf_zdm_size, Cf_zdm_size, Cf_zdm_size))
	COL_ZonePosSet(C_zdm_pied, cvector(0.0, 0.0, COL_ZoneSizeGet(C_zdm_pied)))

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_NeverDynamicFather | DYN_C_NeverDynamicHierarchy | DYN_C_HorizontalGrounds | DYN_C_SlipOnGroundEdge | DYN_C_ApplyRec | DYN_C_Col, none)
	DYN_GravitySet(cvector(0.0, 0.0, -40.0))

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
o_eagle = LNK_ServeurGet(Ci_LNK_GRAB_EAGLE, mid_eagle_LNK, vrai, "PNJ_Quadri_exec_LNK_Eagle", nofunc)
if (o_eagle)
	macro_change_etat("PNJ_Quadri_ETAT_Grabbed")

o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
if ( o_current_wp && ! o_Rided_Actor )
	macro_change_etat("PNJ_Quadri_ETAT_Course")
if ( o_fake_pilot )
	macro_change_etat("PNJ_Quadri_ETAT_Course")

if ( ! o_Rided_Actor && agressif )
	macro_change_etat("PNJ_Quadri_ETAT_Fight")

// RIDED ? -----------------------------------------------------------------
ti_flag_main = faux
ti_flag_boost = faux

tf_wanted_traction = 0.0

if ( o_Rided_Actor && ( ! o_montures_manager || o_current_wp) )
{
	if( i_hotspot )
	{
		HotSpot_Del_Obj(OBJ_Me())
		i_hotspot = faux
	}

	if (o_Rided_Actor == o_main_actor)
	{
		ti_flag_main = vrai
		
		tv_joy_dir = glob_joyvector_get
	
		if (Proc_JOY_Boost_Pressed())
			tf_wanted_traction = f_speed_max
		else
			tf_wanted_traction = f_analog_speed * glob_joynorm_get
			
		if (IO_ButtonJustPressed(RM_Monture_Button_Action1) || IO_ButtonJustPressed(RM_Monture_Button_Action2))
		{
			if ( monture_action )
				f_dash_duration = dash_duration
			else if (f_delay_since_last_ground_col < Cf_hysteresis_no_ground_col)
				ACT_ActionSet(Ci_Action_Saut_Deb)
		}
	}
	else
	{
		tv_joy_dir = Proc_PNJ_JoyGetMove(o_Rided_Actor)
		tf_wanted_traction = MATH_VecNorm(tv_joy_dir)
		if (tf_wanted_traction)
		{
			tv_joy_dir /= tf_wanted_traction
	
//			tf_wanted_traction /= @o_Rided_Actor DYN_FrictionVectorGet().y 
	
			if (tf_wanted_traction  > f_analog_speed)
				tf_wanted_traction = f_speed_max
		}
	}
}
else
{
	if( ! i_hotspot )
	{
		HotSpot_Add_Obj(OBJ_Me(), 0)
		i_hotspot = vrai
	}

	if( i_Rided_last_trame )
		f_Rided_last_time = TIME_Get()

	if (COL_LIB_Soft_Col(OBJ_Me(), tv_joy_dir))
	{
		tf_wanted_traction = f_analog_speed
	}
	else
	{
		tv_joy_dir = Cv_NullVector
	}
}

tf_norm = MATH_VecSquareNorm(tv_joy_dir)
if (tf_norm > 1.0)
	v_joy_dir	 = tv_joy_dir / MATH_FloatSqrt(tf_norm)
else if (tf_norm == 1.0)
	v_joy_dir	 = tv_joy_dir
else
	v_joy_dir = OBJ_SightGet()

tf_speed_coef = MATH_FloatLimit(f_real_speed * 0.5, 0.1, 1.0)

if (f_dash_duration)
	tf_wanted_traction = 2.0 * f_speed_max
//else
//	tf_wanted_traction *= tf_speed_coef

//if (i_flag_Y_slide && f_wanted_speed > f_real_speed + f_Y_limit_speed)
//{
//	// ANTI PATINAGE
//	tf_next_wanted_traction = f_wanted_speed + (f_acceleration * TIME_GetDt())
//	tf_wanted_traction = f_real_speed + f_Y_limit_speed - 0.1
//}

// COMPORTEMENT =========================================================
PNJ_Quadri_Sight_And_Banking(tv_joy_dir)
PNJ_Quadri_Apply_Traction_And_Choose_Action(tf_wanted_traction)

//if (o_Rided_Actor)
//{
//	@get_Kamera OBJ_FlagInactiveSet(vrai)
//	
////	tv_speed = DYN_SpeedGetVector()
////	tv_speed.z = 0.0
////	tf_hor_speed = MATH_VecSquareNorm(tv_speed)
////	if (tf_hor_speed)
////	{
////		tf_hor_speed = MATH_FloatSqrt(tf_hor_speed)
////		tv_speed /= tf_hor_speed
////	}
////	else
//	{
//		tv_speed = OBJ_SightGet()
//	}
//	
//	tv_pos = OBJ_PosGet()
////	tv_pos -= OBJ_SightGet() * 10.0
//	tv_pos -= tv_speed * 10.0
//	tv_pos += OBJ_BankingGet() * 5.0
//	
//	tv_pos = OBJ_PosGet() + MATH_VecBlendRotate(@get_Kamera OBJ_PosGet() - OBJ_PosGet(), tv_pos - OBJ_PosGet(), 8.0 * TIME_GetDt())
//
//	@get_Kamera OBJ_PosSet(tv_pos)
//	
//	tv_pos = OBJ_PosGet()
////	tv_pos += OBJ_SightGet() * 10.0
//	tv_pos += tv_speed * 10.0
//	
//	@get_Kamera OBJ_SightGeneralSet(tv_pos - @get_Kamera OBJ_PosGet(), Cv_VerticalVector)
//	
//	@get_Kamera VIEW_AssignObject(0)
//}
//else if (@get_Kamera OBJ_FlagsControlGet() & OBJ_C_ControlFlag_ForceInactive)
//{
//	@get_Kamera OBJ_FlagInactiveSet(faux)
//}

if (@o_main_actor PROC_RM_CHEAT_Mode())
{
	DYN_SpeedSetVector(Cv_NullVector)
	OBJ_BankingGeneralSet(OBJ_SightGet(), Cv_VerticalVector)
}

