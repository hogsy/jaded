Include_UltraProcedure_Header

procedure_ultra int Montures_Manager_Wp_Nb_Get(int ti_index)
{
	return(ai_car_wp_nb[ti_index])
}

procedure_ultra int Montures_Manager_Main_Wp_Nb_Get()
{
	return(i_main_actor_wp_nb)
}

procedure_ultra void Montures_Manager_Add_Gao(object to_gao, float tf_size, byref int ti_car_index)
{
	if (ti_car_index == -1)
	{
		ti_car_index = i_car_nb
		ao_car[ti_car_index] = to_gao
		af_car_size[ti_car_index] = tf_size
		i_car_nb++
	}
}

procedure_local void Montures_Manager_Reset_Bit_Field()
{
	int		ti_i
	
	for (ti_i = 0; ti_i < 32; ti_i++)
		ai_car_bit_field[ti_i] = 0
}

procedure_local void Montures_Manager_Check_Collision()
{
	int			ti_i
	int			ti_k
	int			ti_intersection_nb
	
	float		tf_inv_dt
	float		tf_size_A
	float		tf_size_B
	float		tf_dot_product

	vector	tv_pos_A
	vector	tv_speed_A
	vector	tv_pos_B	
	vector	tv_speed_B
	vector	tv_delta_speed	

	object	to_car_A
	object	to_car_B

	tf_inv_dt = 1.0 / TIME_GetDt()

	ti_intersection_nb = 0

	// PREDICTION DE COLLISION
	for (ti_i = 0; ti_i < i_car_nb; ti_i++)
	{
		AI_ClearStack()	
	
		for (ti_k = ti_i; ti_k < i_car_nb; ti_k++)
		{
			if (ti_i == ti_k)
			{
				af_car_col_time[ti_i][ti_k] = 0.0
				continue	
			}
		
//			if ( ! (ai_car_bit_field[ti_i] & (1 << ti_k) ) )
//			{
//				af_car_col_time[ti_i][ti_k] = Cf_Infinit
//				continue	
//			}			
			
			to_car_A = ao_car[ti_i]
			to_car_B = ao_car[ti_k]

			av_car_speed[ti_i] = @to_car_A DYN_SpeedGetVector()	
			av_car_speed[ti_k] = @to_car_B DYN_SpeedGetVector()	
			
			ti_intersection_nb	++

			tv_pos_A = @to_car_A OBJ_PosGet()
			tv_speed_A = av_car_speed[ti_i]
			tf_size_A = af_car_size[ti_i]

			tv_pos_A.z = 0.0
			tv_speed_A.z = 0.0
		
			tv_pos_B = @to_car_B OBJ_PosGet()
			tv_speed_B = av_car_speed[ti_k]
			tf_size_B = af_car_size[ti_k]
 
			tv_pos_B.z = 0.0
			tv_speed_B.z = 0.0

//			tf_dot_product = tf_size_A + tf_size_B
//			tf_dot_product *= tf_dot_product
//
//			if (MATH_VecSquareNorm(tv_pos_B - tv_pos_A) > tf_dot_product)
			{
				tf_dot_product = MATH_AbsFloat(MATH_VecDotProduct(@to_car_A OBJ_SightGet(), @to_car_B OBJ_SightGet()))
				tf_dot_product = MATH_FloatBlend(1.0, 0.5, tf_dot_product)
				
				tf_size_A *= tf_dot_product
				tf_size_B *= tf_dot_product
			}

			af_car_col_size[ti_i][ti_k] = tf_size_A
			af_car_col_size[ti_k][ti_i] = tf_size_B

			af_car_col_time[ti_i][ti_k] = MATH_LIB_Get_Intersection_Time(tv_pos_A, tv_speed_A, tf_size_A, tv_pos_B, tv_speed_B, tf_size_B)
			af_car_col_time[ti_k][ti_i] = af_car_col_time[ti_i][ti_k]

//			if (af_car_col_time[ti_i][ti_k] > 0.0 && af_car_col_time[ti_i][ti_k] < 2.0)
//			{
//				tv_pos_A = @to_car_A OBJ_PosGet()
//				tv_pos_A.z += 1.0
//				DBG_RenderVector(tv_pos_A, av_car_speed[ti_i] * af_car_col_time[ti_i][ti_k], color_rouge)
//				tv_pos_A += av_car_speed[ti_i] * af_car_col_time[ti_i][ti_k]
//				DBG_RenderCircle(tv_pos_A, tf_size_A, Cv_VerticalVector, color_rouge)		
//
//				tv_pos_B = @to_car_B OBJ_PosGet()
//				tv_pos_B.z += 1.0
//				DBG_RenderVector(tv_pos_B, av_car_speed[ti_k] * af_car_col_time[ti_k][ti_i], color_rouge)
//				tv_pos_B += av_car_speed[ti_k] * af_car_col_time[ti_k][ti_i]
//				DBG_RenderCircle(tv_pos_B, tf_size_B, Cv_VerticalVector, color_rouge)		
//				
//				DBG_RenderVector(tv_pos_A, tv_pos_B - tv_pos_A, color_rouge)
//				DBG_RenderVector(tv_pos_B, tv_pos_A - tv_pos_B, color_rouge)
//			}
		}
	}
	
	ti_intersection_nb = ti_intersection_nb

	return
}

procedure_local void Montures_Manager_CheckSector(object	to_start_wp, object to_dest_wp)
{
	// CA MARCHE AVEC LES QUADRILATAIRES CONVEXES, CONCAVES ET CROISES
	int			ti_i

	float		tf_sign	
	float		tf_point_sign[4]
	float		tf_dot_product

	vector tv_normale
	vector	tv_point[4]
	vector	tv_cross_product[4]
	vector	tav_triangle_sommet[3]
	vector	tav_triangle_normale[3]

	tv_point[0] = @to_start_wp OBJ_PosGet()
	tv_point[0] += @to_start_wp OBJ_HorizonGet() * ( (@to_start_wp OBJ_ScaleGet().x * 0.2) + wp_extrusion_length)

	tv_point[1] = @to_start_wp OBJ_PosGet()
	tv_point[1] -= @to_start_wp OBJ_HorizonGet() * ( (@to_start_wp OBJ_ScaleGet().x * 0.2) +  wp_extrusion_length)
	
	tv_point[2] = @to_dest_wp OBJ_PosGet()
	tv_point[2] -= @to_dest_wp OBJ_HorizonGet() * ( (@to_dest_wp OBJ_ScaleGet().x * 0.2) + wp_extrusion_length)

	tv_point[3] = @to_dest_wp OBJ_PosGet()
	tv_point[3] += @to_dest_wp OBJ_HorizonGet() * ( (@to_dest_wp OBJ_ScaleGet().x *  0.2) + wp_extrusion_length)

	tv_normale = Cv_VerticalVector

	// CALCUL DES NORMALES
	for (ti_i = 0; ti_i < 4; ti_i++)
		tv_cross_product[ti_i] = MATH_VecCrossProduct(tv_point[MATH_Modulo(ti_i + 1, 4)] - tv_point[ti_i], tv_normale)

	// TYPE DU QUADRILATAIRE
	tf_sign = 0.0
	for (ti_i = 0; ti_i < 4; ti_i++)
	{
		tf_dot_product = MATH_VecDotProduct(tv_point[MATH_Modulo(ti_i + 2, 4)] - tv_point[ti_i], tv_cross_product[ti_i])
		if (tf_dot_product)
		{
			tf_point_sign[ti_i] = MATH_FloatSign(tf_dot_product)
			tf_sign += tf_point_sign[ti_i]
		}
		else
		{
			tf_point_sign[ti_i] = 0.0
		}
	}

	if (MATH_AbsFloat(tf_sign) == 4.0)
	{
		// QUADRILATAIRE CONVEXE
	}
	else if (MATH_AbsFloat(tf_sign) == 2.0)
	{
		// QUADRILATAIRE CONCAVE
		for (ti_i = 0; ti_i < 4; ti_i++)
			DBG_RenderVector(tv_point[ti_i], tv_point[MATH_Modulo(ti_i + 1, 4)] - tv_point[ti_i], color_rouge)

		DBG_TraceString("Le secteur compris entre ")
		DBG_TraceObject(to_start_wp)
		DBG_TraceString(" et ")
		DBG_TraceObject(to_dest_wp)
		DBG_TraceString(" est concave")
		DBG_TraceEOL()
		
		DBG_Warning("Un secteur est concave")
	}
	else
	{
		// QUADRILATAIRE CROISE
		for (ti_i = 0; ti_i < 4; ti_i++)
			DBG_RenderVector(tv_point[ti_i], tv_point[MATH_Modulo(ti_i + 1, 4)] - tv_point[ti_i], color_rouge)

		DBG_TraceString("Le secteur compris entre ")
		DBG_TraceObject(to_start_wp)
		DBG_TraceString(" et ")
		DBG_TraceObject(to_dest_wp)
		DBG_TraceString(" est croisé")
		DBG_TraceEOL()

		DBG_Warning("Un secteur est croise")
	}
}


procedure_local void Montures_Manager_Init_Network()
{
	vector	tv_pos_right
	vector	tv_pos_left
	vector	tv_previous_sight
	vector	tv_wp_sight		

	object	to_root
	object	to_previous_wp
	object	to_current_wp
	object	to_next_wp
	
	#define Cf_largeur_max			25.0

	if ( ! n_course_net )
		return

	i_lap_wp_nb = 0

	to_root = WAY_RootGet(n_course_net)

	to_previous_wp = to_root
	to_current_wp = @to_previous_wp WAY_NetNextWP(n_course_net, to_previous_wp, NetNextWP_Mode_axe_de_visee, 0)
	to_next_wp = WAY_NetNextWP(n_course_net, to_current_wp, NetNextWP_Mode_choix_de_lindice, 0)	
	if (to_next_wp == to_previous_wp)
		to_next_wp = WAY_NetNextWP(n_course_net, to_current_wp, NetNextWP_Mode_choix_de_lindice, 1)	

	tv_wp_sight = @to_current_wp OBJ_PosGet() - @to_previous_wp OBJ_PosGet()

	while(1)
	{
		tv_previous_sight = tv_wp_sight	
	
		Montures_Manager_CheckSector(to_current_wp, to_next_wp)

		if (AUTO_WP_POS)
		{
			if (COL_RayObject_Dist(@to_current_wp OBJ_PosGet(), @to_current_wp OBJ_HorizonGet(), Cf_largeur_max, all, OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
				tv_pos_left = COL_RayObject_PosGet()
			else
				tv_pos_left = @to_current_wp OBJ_PosGet() + (@to_current_wp OBJ_HorizonGet() * Cf_largeur_max)

			if (COL_RayObject_Dist(@to_current_wp OBJ_PosGet(), - @to_current_wp OBJ_HorizonGet(), Cf_largeur_max, all, OBJ_C_IdentityFlag_Dyna, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
				tv_pos_right = COL_RayObject_PosGet()
			else
				tv_pos_right = @to_current_wp OBJ_PosGet() - (@to_current_wp OBJ_HorizonGet() * Cf_largeur_max)

			@to_current_wp OBJ_PosSet(MATH_VecBlend(tv_pos_left, tv_pos_right, 0.5))
		
			DBG_RenderVector(tv_pos_left, cvector(0.0, 0.0, 10.0), color_rouge)
			DBG_RenderVector(@to_current_wp OBJ_PosGet(), tv_pos_left - @to_current_wp OBJ_PosGet(), color_rouge)
			DBG_RenderVector(tv_pos_right, cvector(0.0, 0.0, 10.0), color_vert)
			DBG_RenderVector(@to_current_wp OBJ_PosGet(), tv_pos_right - @to_current_wp OBJ_PosGet(), color_vert)

			@to_current_wp OBJ_ZoomSet(1.0)
			@to_current_wp OBJ_ScaleSet(cvector(MATH_AbsFloat(MATH_VecDotProduct(@to_current_wp OBJ_HorizonGet(), tv_pos_right - tv_pos_left)) * 2.5, 1.0, 1.0))
		}

		to_previous_wp = to_current_wp
		to_current_wp = to_next_wp
		
		to_next_wp = WAY_NetNextWP(n_course_net, to_current_wp, NetNextWP_Mode_choix_de_lindice, 0)	
		if (to_next_wp == to_previous_wp)
			to_next_wp = WAY_NetNextWP(n_course_net, to_current_wp, NetNextWP_Mode_choix_de_lindice, 1)	
	
		WAY_LinkCapaSet(n_course_net, to_next_wp, to_current_wp, none, all)
		WAY_LinkCapaSet(n_course_net, to_next_wp, to_current_wp, OBJ_Capa_0, none)

		tv_wp_sight = @to_next_wp OBJ_PosGet() - @to_current_wp OBJ_PosGet()

//		DBG_RenderVector(@to_current_wp OBJ_PosGet() + Cv_VerticalVector, @to_next_wp OBJ_PosGet() - @to_current_wp OBJ_PosGet(), color_blanc)		

//		@to_current_wp OBJ_BankingGeneralSet(MATH_VecBlendRotate(tv_previous_sight, tv_wp_sight, 0.5), Cv_VerticalVector)
//		@to_current_wp OBJ_ScaleSet(cvector(10.0, 1.0, 1.0))
		
		i_lap_wp_nb++

		if (to_previous_wp == to_root)
			break
	}
}

procedure_ultra int Montures_Manager_Between_Wp(object to_start_wp, object to_dest_wp, vector tv_pos)
{
	int			ti_result
	int			ti_return

	vector	tv_A
	vector	tv_B
	vector	tv_C
	vector	tv_D

	tv_A = @to_start_wp OBJ_PosGet()
	tv_A += @to_start_wp OBJ_HorizonGet() * ( (@to_start_wp OBJ_ScaleGet().x * 0.2) + wp_extrusion_length)

	tv_B = @to_start_wp OBJ_PosGet()
	tv_B -= @to_start_wp OBJ_HorizonGet() * ( (@to_start_wp OBJ_ScaleGet().x * 0.2) + wp_extrusion_length)
	
	tv_C = @to_dest_wp OBJ_PosGet()
	tv_C -= @to_dest_wp OBJ_HorizonGet() * ( (@to_dest_wp OBJ_ScaleGet().x * 0.2) + wp_extrusion_length)

	ti_return = MATH_LIB_PointInTriangle(tv_pos, tv_A, tv_B, tv_C, Cv_VerticalVector, ti_result)
	if (ti_return)
	{
//		DBG_RenderVector(tv_A, tv_B - tv_A, color_vert)
//		DBG_RenderVector(tv_B, tv_C - tv_B, color_vert)
//		DBG_RenderVector(tv_C, tv_A - tv_C, color_vert)
		return(ti_return)
	}
	
	tv_D = @to_dest_wp OBJ_PosGet()
	tv_D += @to_dest_wp OBJ_HorizonGet() * ( (@to_dest_wp OBJ_ScaleGet().x * 0.2) + wp_extrusion_length)

	ti_return = MATH_LIB_PointInTriangle(tv_pos, tv_A, tv_C, tv_D, Cv_VerticalVector, ti_result)

//	if (ti_return)
//	{
//		DBG_RenderVector(tv_A, tv_C - tv_A, color_vert)
//		DBG_RenderVector(tv_C, tv_D - tv_C, color_vert)
//		DBG_RenderVector(tv_D, tv_A - tv_D, color_vert)
//	}
//	else
//	{
//		DBG_RenderVector(tv_A, tv_B - tv_A, color_rouge)
//		DBG_RenderVector(tv_B, tv_C - tv_B, color_rouge)
//		DBG_RenderVector(tv_C, tv_D - tv_C, color_rouge)
//		DBG_RenderVector(tv_D, tv_A - tv_D, color_rouge)
//	}

	return(ti_return)

//	return(MATH_LIB_InQuadrilatere(tv_A, tv_B, tv_C, tv_D, tv_pos, Cv_VerticalVector, Ci_QUADRILATAIRE_QUELCONQUE, faux))
}

procedure_local object Montures_Manager_Next_Wp_Get(object to_wp)
{
	object to_next

	if (!to_wp)
		return(nobody)

	to_next = WAY_NetNextWP(n_course_net, to_wp, NetNextWP_Mode_choix_de_lindice, 0)
	if (WAY_LinkCapaGet(n_course_net, to_wp, to_next) & OBJ_Capa_0)
		to_next = WAY_NetNextWP(n_course_net, to_wp, NetNextWP_Mode_choix_de_lindice, 1)

	return(to_next)
}

procedure_local object Montures_Manager_Previous_Wp_Get(object to_wp)
{
	object to_previous
	
	to_previous = WAY_NetNextWP(n_course_net, to_wp, NetNextWP_Mode_choix_de_lindice, 0)
	if ( ! (WAY_LinkCapaGet(n_course_net, to_wp, to_previous) & OBJ_Capa_0) )
		to_previous = WAY_NetNextWP(n_course_net, to_wp, NetNextWP_Mode_choix_de_lindice, 1)

	return(to_previous)
}

procedure_ultra object	Montures_Manager_Get_Wp(vector	tv_pos, network tn_net)
{
	object	to_current_wp
	object	to_next
	
	to_current_wp = WAY_RootGet(tn_net)
	to_next = Montures_Manager_Next_Wp_Get(to_current_wp)

	while(1)
	{
		if (Montures_Manager_Between_Wp(to_current_wp, to_next, tv_pos))
			return(to_current_wp)

		if (to_next == WAY_RootGet(tn_net))
			return(nobody)

		to_current_wp = to_next
		to_next = Montures_Manager_Next_Wp_Get(to_current_wp)
	}
}


procedure_local object Montures_Manager_Course_Started()
{
	int				ti_rank
	
	object		to_serveur
	object		to_client

	message	tmsg_filter	
	
	messageid	EVT_LNK_RIDE_ON_NMI

	ti_rank = -1
	for (	EVT_LNK_RIDE_ON_NMI = MSG_GlobalScan(Ci_LNK_EVENT_OFFSET + Ci_LNK_RIDE_ON_NMI, &ti_rank);
			MSG_GlobalIsValid(EVT_LNK_RIDE_ON_NMI);
			EVT_LNK_RIDE_ON_NMI = MSG_GlobalScan(Ci_LNK_EVENT_OFFSET + Ci_LNK_RIDE_ON_NMI, &ti_rank))
	{
		to_serveur = MSG_GlobalGetGao(EVT_LNK_RIDE_ON_NMI, SERVEUR)
		if (!to_serveur)
			continue
	
		to_client = MSG_GlobalGetSender(EVT_LNK_RIDE_ON_NMI)

		if (@to_client AI_IsModel(get_PNJ_Quadri_Path))
			return(to_client)
	}

	return(nobody)
}

procedure_local void Montures_Manager_Display_Time(int ti_index, float tf_time)
{
	int		ti_hours
	int		ti_minutes	

	float 	tf_hours
	float 	tf_minutes
	
	tf_hours = tf_time / 3600.0
	tf_hours -= 0.5
	ti_hours = tf_hours
	tf_time -= ti_hours * 3600

	if (ti_hours)
	{
		STR_AppendInt(ti_index, ti_hours)
		STR_AppendText(ti_index, ":")
	}

	tf_minutes = tf_time / 60.0
	tf_minutes -= 0.5
	ti_minutes = tf_minutes
	tf_time -= ti_minutes * 60

	if (ti_minutes < 10)
		STR_AppendInt(ti_index, 0)
	STR_AppendInt(ti_index, ti_minutes)
	STR_AppendText(ti_index, ":")
		
	if (tf_time < 10.0)
		STR_AppendInt(ti_index, 0)
	STR_AppendFloat(ti_index, tf_time, 2)
}

procedure_local void Montures_Manager_Course()
{
	int			ti_i	
	int			ti_k
	int			ti_index
	int			ti_rank
	int			ti_add_wp_nb
	int			ti_remove_wp_nb
	int			ti_rank_index[100]
	int			ti_main_index

	float		tf_ponderation
	float		taf_rank[100]

	vector	tv_pos

	object	to_main_vehicule
	object	to_root
	object	to_vehicule
	object	to_previous_wp
	object	to_current_wp
	object	to_next_wp

	if ( ! n_course_net )
		return

	ti_main_index = -1
	to_main_vehicule = Montures_Manager_Course_Started()
	if (to_main_vehicule)
	{
		if ( ! INSTANT_STARTUP && f_course_count_down)
		{
			if (f_course_count_down > 2.0)
			{
				tf_ponderation = f_course_count_down - 2.0
				tf_ponderation = MATH_FloatBlend(1.5, -0.5, tf_ponderation)
				ti_index = STR_CreateText("\h0.5\3 !!!", cvector(tf_ponderation, tf_ponderation, 0.0), 0.0)
			}
			else if (f_course_count_down > 1.0)
			{
				tf_ponderation = f_course_count_down - 1.0
				tf_ponderation = MATH_FloatBlend(1.5, -0.5, tf_ponderation)
				ti_index = STR_CreateText("\h0.5\2 !!!", cvector(tf_ponderation, 1.0 - tf_ponderation, 0.0), 0.0)
			}
			else
			{
				tf_ponderation = f_course_count_down
				tf_ponderation = MATH_FloatBlend(1.5, -0.5, tf_ponderation)
				ti_index = STR_CreateText("\h0.5\1 !!!", cvector(0.4, tf_ponderation, 0.0), 0.0)
			}
			
			f_course_count_down -= MATH_FloatMin(f_course_count_down, TIME_GetDt())
			return
		}	
	
		ti_main_index	= ARR_ObjSearch(&ao_car[0], i_car_nb, to_main_vehicule)

		f_course_time += TIME_GetDt()
		
		if ( ! INSTANT_STARTUP && f_course_time < 1.0)
		{
			tf_ponderation = f_course_time
			tf_ponderation = MATH_FloatBlend(-0.2, 1.2, tf_ponderation)
			ti_index = STR_CreateText("\h0.5\GOOO !!!", cvector(tf_ponderation, 0.15, 0.0), 0.0)
		}	

		ti_index = STR_CreateText("\h0.08\TIME : ", cvector(0.4, 0.01, 0.0), 0.0)
		if (i_flag_course_end)
		{
			Montures_Manager_Display_Time(ti_index, af_course_time[ti_main_index])
		}
		else
		{
			af_lap_time[ai_car_loop_nb[ti_main_index]] += TIME_GetDt()

			Montures_Manager_Display_Time(ti_index, f_course_time)
		}
	}

	if ( ! f_course_time )
		return

	to_root = WAY_RootGet(n_course_net)

	for (ti_i = 0; ti_i < i_car_nb; ti_i++)
	{
		to_vehicule = ao_car[ti_i]
		to_current_wp	= ao_car_wp[ti_i]

		if (to_current_wp)
		{
			to_next_wp = 	Montures_Manager_Next_Wp_Get(to_current_wp)
		
			if (Montures_Manager_Between_Wp(to_current_wp, to_next_wp, @to_vehicule OBJ_PosGet()))
			{
				// OK encore dans le même secteur
			}
			else
			{
				// DEVANT ?
				ti_add_wp_nb = 0
				to_current_wp	= Montures_Manager_Next_Wp_Get(to_current_wp)

				while(ti_add_wp_nb < 5)
				{
					to_next_wp = Montures_Manager_Next_Wp_Get(to_current_wp)
					ti_add_wp_nb ++ 

					if (Montures_Manager_Between_Wp(to_current_wp, to_next_wp, @to_vehicule OBJ_PosGet()))
					{
						ao_car_wp[ti_i] = to_current_wp

						if (ai_car_loop_nb[ti_i] < i_course_lap_nb)
						{
							ai_car_wp_nb[ti_i] += ti_add_wp_nb
							if (ai_car_wp_nb[ti_i] / i_lap_wp_nb > ai_car_loop_nb[ti_i])
								ai_car_loop_nb[ti_i]++

							if (ai_car_loop_nb[ti_i] == i_course_lap_nb)
								af_course_time[ti_i] = f_course_time
						}

						ti_add_wp_nb = 0

						break
					}
					
					to_current_wp = to_next_wp
				}
				
				if ( ti_add_wp_nb )
				{
					// DERRIERE
					ti_remove_wp_nb	= 0
					to_current_wp	= ao_car_wp[ti_i]
				
					while(ti_remove_wp_nb < ai_car_wp_nb[ti_i] && ti_remove_wp_nb < i_lap_wp_nb)
					{
						to_previous_wp = Montures_Manager_Previous_Wp_Get(to_current_wp)
						ti_remove_wp_nb ++ 
	
						if (Montures_Manager_Between_Wp(to_previous_wp, to_current_wp, @to_vehicule OBJ_PosGet()))
						{
							ao_car_wp[ti_i] = to_previous_wp

							if (ai_car_loop_nb[ti_i] < i_course_lap_nb)
								ai_car_wp_nb[ti_i] -= ti_remove_wp_nb

							break
						}
						
						to_current_wp = to_previous_wp
					}
				}
			}
			
		}
		else
		{
			ao_car_wp[ti_i] = Montures_Manager_Get_Wp(@to_vehicule OBJ_PosGet(), n_course_net)

			if (! ao_car_wp[ti_i] )
				DBG_Error("Une monture n'est pas sur le circuit à l'init")

			ai_car_wp_nb[ti_i] = -1
			to_current_wp = to_root
			to_previous_wp = Montures_Manager_Previous_Wp_Get(to_current_wp)

			while(ao_car_wp[ti_i] != to_previous_wp)
			{
				ai_car_wp_nb[ti_i]--
				
				to_current_wp = to_previous_wp
				to_previous_wp = Montures_Manager_Previous_Wp_Get(to_current_wp)
			}
		
			ai_car_loop_nb[ti_i] = 0
		}

		to_current_wp	= ao_car_wp[ti_i]
		to_next_wp = 	Montures_Manager_Next_Wp_Get(to_current_wp)

		@get_PNJ_Quadri_Path to_vehicule n_course_net = n_course_net
		@get_PNJ_Quadri_Path to_vehicule o_current_wp = to_current_wp
		@get_PNJ_Quadri_Path to_vehicule o_next_wp = to_next_wp
	
		if (af_course_time[ti_i])
		{
			tf_ponderation = af_course_time[ti_i]
		}
		else
		{
			tf_ponderation = 1000000.0
			tf_ponderation -= ai_car_wp_nb[ti_i] * 10.0
			tf_ponderation -= MATH_VecDotProduct(@ao_car[ti_i] OBJ_PosGet() - @to_current_wp OBJ_PosGet(), MATH_VecNormalize(@to_next_wp OBJ_PosGet() - @to_current_wp OBJ_PosGet())) * 0.01
		}

		taf_rank[ti_i] = tf_ponderation
	}

	// INFO POUR LES PREDICTIONS DE COLLISION
//	for (ti_i = 0; ti_i < i_car_nb; ti_i++)
//	{
//		for (ti_k = 0; ti_k < i_car_nb; ti_k++)
//		{
//			if (ti_i == ti_k)
//				continue	
//		
//			ti_rank = MATH_Modulo(ai_car_wp_nb[ti_k] - ai_car_wp_nb[ti_i] + i_lap_wp_nb, i_lap_wp_nb)
//
//			if (ti_rank >= 0 && ti_rank < 2)
//			{
//				ai_car_bit_field[ti_i] |= 1 << ti_k
//				ai_car_bit_field[ti_k] |= 1 << ti_i
//			}
//		}
//	}

	// Affichage du classement	
	ARR_LIB_QuickSort_OrderIndex(&ti_rank_index[0], &taf_rank[0], i_car_nb)
	for (ti_i = 0; ti_i < i_car_nb; ti_i++)
	{
		ti_rank = ti_rank_index[ti_i]

		to_vehicule = ao_car[ti_rank]
		@get_PNJ_Quadri_Path to_vehicule i_my_rank = ti_i

		if (ti_main_index == -1)
			continue
	
		if (ti_main_index == ti_rank)
		{
			i_main_actor_wp_nb	 = ai_car_wp_nb[ti_rank]
		
			ti_index = STR_CreateText("\h0.08\RANK: ", cvector(0.8, 0.01, 0.0), 0.0)
			STR_AppendInt(ti_index, ti_i + 1)
			STR_AppendText(ti_index, "/")
			STR_AppendInt(ti_index, i_car_nb)
		}

//		tv_pos = VIEW_3dWorldTo2d(0, @to_vehicule OBJ_PosGet() + cvector(0.0, 0.0, 3.0))
//		ti_index = STR_CreateText("\h0.08\", tv_pos, 0.0)
//		STR_AppendInt(ti_index, ti_i + 1)
//		ti_index = STR_CreateText("\h0.05\", tv_pos, 0.0)
//		STR_AppendFloat(ti_index, @get_PNJ_Quadri_Path to_vehicule tf_course_pilotage_coef, 2)

		if (DISPLAY)
		{
			tv_pos = cvector(0.8, 0.1 + (ti_i * 0.04), 0.0)
			if (ti_main_index == ti_rank)
			{
				ti_index = STR_CreateText("\cFF0000FF\\h0.05\", tv_pos, 0.0)
				STR_AppendInt(ti_index, ti_i + 1)
				STR_AppendText(ti_index, " : RAYMAN")
			}
			else
			{
				ti_index = STR_CreateText("\h0.05\", tv_pos, 0.0)
				STR_AppendInt(ti_index, ti_i + 1)
				STR_AppendText(ti_index, " : ")
				STR_AppendFloat(ti_index, @get_PNJ_Quadri_Path to_vehicule f_course_pilotage_coef, 2)
			}
		}
	}

	if (ti_main_index != -1)
	{
		if (ai_car_loop_nb[ti_main_index] >= i_course_lap_nb)
		{
			i_flag_course_end = vrai
			to_vehicule = ao_car[ti_main_index]
			@get_PNJ_Quadri_Path to_vehicule o_fake_pilot = OBJ_Me()
		}

		ti_index = STR_CreateText("\h0.08\LAP: ", cvector(0.01, 0.01, 0.0), 0.0)
		STR_AppendInt(ti_index, MATH_FloatMin(ai_car_loop_nb[ti_main_index] + 1, i_course_lap_nb))
		STR_AppendText(ti_index, "/")
		STR_AppendInt(ti_index, i_course_lap_nb)

		tv_pos = cvector(0.01, 0.1, 0.0) 	
		for (ti_i = 0; ti_i < MATH_FloatMin(ai_car_loop_nb[ti_main_index] + 1, i_course_lap_nb); ti_i++)
		{
			ti_index = STR_CreateText("\h0.05\LAP ", tv_pos, 0.0)
			STR_AppendInt(ti_index, ti_i + 1)
			STR_AppendText(ti_index, " : ")
			Montures_Manager_Display_Time(ti_index, af_lap_time[ti_i])
			tv_pos.y += 0.05
		}
		
		if (ai_car_loop_nb[ti_main_index] == i_course_lap_nb)
		{
			ti_index = STR_CreateText("\cFF0000FF\\h0.05\TOTAL : ", tv_pos, 0.0)
			Montures_Manager_Display_Time(ti_index, af_course_time[ti_main_index])
		}
	}

}

procedure_local void Montures_Manager_Render_Trajectory(float tf_course_pilotage_coef, int ti_color)
{
	float		tf_coef
	float		tf_link_length	
	float		tf_dot_product
	float		tf_anticipation_dist
	float		tf_coef_A
	float		tf_coef_B
	float		tf_coef_C
	float		tf_coef_D
	float		tf_zdm_size

	vector	tv_link
	vector	tv_pos
	
	vector	tv_A
	vector	tv_B
	vector	tv_C
	vector	tv_D
	vector	tv_sight
	vector	tv_point[4]

	object	to_current_wp
	object	to_next_wp
	object	to_next_next_wp

	tf_zdm_size = 0.0

	to_current_wp = WAY_RootGet(n_course_net)
	to_next_wp = WAY_NetNextWP(n_course_net, to_current_wp, NetNextWP_Mode_choix_de_lindice, 0)
	if (WAY_LinkCapaGet(n_course_net, to_current_wp, to_next_wp) & OBJ_Capa_0)
		to_next_wp = WAY_NetNextWP(n_course_net, to_current_wp, NetNextWP_Mode_choix_de_lindice, 1)
	to_next_next_wp = nobody

	while(to_next_next_wp == nobody || to_current_wp != WAY_RootGet(n_course_net))
	{
		tv_point[0] = @to_current_wp OBJ_PosGet()
		tv_point[0] += @to_current_wp OBJ_HorizonGet() * ( (@to_current_wp OBJ_ScaleGet().x * 0.2) + wp_extrusion_length)
	
		tv_point[1] = @to_current_wp OBJ_PosGet()
		tv_point[1] -= @to_current_wp OBJ_HorizonGet() * ( (@to_current_wp OBJ_ScaleGet().x * 0.2) +  wp_extrusion_length)
		
		tv_point[2] = @to_next_wp OBJ_PosGet()
		tv_point[2] -= @to_next_wp OBJ_HorizonGet() * ( (@to_next_wp OBJ_ScaleGet().x * 0.2) + wp_extrusion_length)
	
		tv_point[3] = @to_next_wp OBJ_PosGet()
		tv_point[3] += @to_next_wp OBJ_HorizonGet() * ( (@to_next_wp OBJ_ScaleGet().x *  0.2) + wp_extrusion_length)
		
		DBG_RenderVector(tv_point[1], tv_point[2] - tv_point[1], color_blanc)
		DBG_RenderVector(tv_point[0], tv_point[3] - tv_point[0], color_blanc)

		tv_link = @to_next_wp OBJ_PosGet() - @to_current_wp OBJ_PosGet()
		tf_link_length = WAY_LinkWeightGet(n_course_net, to_current_wp, to_next_wp)
		tv_link /= tf_link_length

		to_next_next_wp = WAY_NetNextWP(n_course_net, to_next_wp, NetNextWP_Mode_choix_de_lindice, 0)
		if (WAY_LinkCapaGet(n_course_net, to_next_wp, to_next_next_wp) & OBJ_Capa_0)
			to_next_next_wp = WAY_NetNextWP(n_course_net, to_next_wp, NetNextWP_Mode_choix_de_lindice, 1)

		tf_course_pilotage_coef = -1.0

		tv_A	= @to_current_wp OBJ_PosGet()
		tf_coef_A = @to_current_wp OBJ_ScaleGet().x * 0.2
		tf_coef_A = MATH_FloatMax(tf_coef_A - tf_zdm_size, 0.0)
		tf_coef_A *= MATH_FloatSign(MATH_VecDotProduct(@to_next_wp OBJ_PosGet() - tv_A, @to_current_wp OBJ_HorizonGet()))
		tf_coef_A *= tf_course_pilotage_coef
		tv_A += tf_coef_A * @to_current_wp OBJ_HorizonGet()
	
		tv_D = @to_next_wp OBJ_PosGet()
		tf_coef_D = @to_next_wp OBJ_ScaleGet().x * 0.2
		tf_coef_D = MATH_FloatMax(tf_coef_D - tf_zdm_size, 0.0)
		tf_coef_D *= MATH_FloatSign(MATH_VecDotProduct(@to_next_next_wp OBJ_PosGet() - tv_D, @to_next_wp OBJ_HorizonGet()))
		tf_coef_D *= tf_course_pilotage_coef
		tv_D += tf_coef_D * @to_next_wp OBJ_HorizonGet()
	
		tf_link_length = MATH_VecNorm(tv_D - tv_A)

		tf_coef_B = 0.33 * tf_link_length
		tf_coef_C = 0.33 * tf_link_length
		
		tv_B = tv_A + (@to_current_wp OBJ_SightGet() * tf_coef_B)
		tv_C = tv_D - (@to_next_wp OBJ_SightGet() * tf_coef_C)
	
		MATH_LIB_Bezier_Display(5, tv_A, tv_B, tv_C, tv_D, ti_color)

		tf_course_pilotage_coef = 1.0

		tv_A	= @to_current_wp OBJ_PosGet()
		tf_coef_A = @to_current_wp OBJ_ScaleGet().x * 0.2
		tf_coef_A = MATH_FloatMax(tf_coef_A - tf_zdm_size, 0.0)
		tf_coef_A *= MATH_FloatSign(MATH_VecDotProduct(@to_next_wp OBJ_PosGet() - tv_A, @to_current_wp OBJ_HorizonGet()))
		tf_coef_A *= tf_course_pilotage_coef
		tv_A += tf_coef_A * @to_current_wp OBJ_HorizonGet()
	
		tv_D = @to_next_wp OBJ_PosGet()
		tf_coef_D = @to_next_wp OBJ_ScaleGet().x * 0.2
		tf_coef_D = MATH_FloatMax(tf_coef_D - tf_zdm_size, 0.0)
		tf_coef_D *= MATH_FloatSign(MATH_VecDotProduct(@to_next_next_wp OBJ_PosGet() - tv_D, @to_next_wp OBJ_HorizonGet()))
		tf_coef_D *= tf_course_pilotage_coef
		tv_D += tf_coef_D * @to_next_wp OBJ_HorizonGet()
	
		tf_link_length = MATH_VecNorm(tv_D - tv_A)

		tf_coef_B = 0.33 * tf_link_length
		tf_coef_C = 0.33 * tf_link_length
		
		tv_B = tv_A + (@to_current_wp OBJ_SightGet() * tf_coef_B)
		tv_C = tv_D - (@to_next_wp OBJ_SightGet() * tf_coef_C)
	
		MATH_LIB_Bezier_Display(5, tv_A, tv_B, tv_C, tv_D, color_vert)

		
		to_current_wp = to_next_wp
		to_next_wp = to_next_next_wp
	}
}
