#include "PNJ_Snake_defines.var"

procedure_ultra void Proc_PNJ_Snake_External_Pilot(vector tv_dest_pos, float tf_wanted_speed)
{
	if (o_Rided_Actor == o_main_actor)
	{
		f_external_pilot = 0.0
	}
	else
	{
		f_external_pilot = 0.2
		v_external_pilot_dest_pos = tv_dest_pos
		f_external_pilot_wanted_speed = tf_wanted_speed
	}
}

procedure_ultra void Proc_PNJ_Snake_External_Jump()
{
	if (o_Rided_Actor == o_main_actor)	
		return

	i_flag_external_jump = vrai
}


procedure_ultra vector Proc_PNJ_Snake_RidedPosGet()
{
	object	to_bone
	vector	tv_pos
	
	switch(creature_type)
	{
		case Ci_CreatureType_Snake :	
			to_bone = ANI_CanalObjectGet(Anim_Canal_Tete)
			tv_pos = @to_bone OBJ_PosGet()
			tv_pos -= @to_bone OBJ_BankingGet() * 0.4
			tv_pos += @to_bone OBJ_SightGet() * 0.85
			return( tv_pos )
			break
			
		case Ci_CreatureType_Spider :
			to_bone = ANI_CanalObjectGet(Anim_Canal_Cou)
			tv_pos = @to_bone OBJ_PosGet()
			return( tv_pos )
			break

		case Ci_CreatureType_Quadri :
			to_bone = ANI_CanalObjectGet(Anim_Canal_Bassin)
			tv_pos = @to_bone OBJ_PosGet()
			return( tv_pos )
	}
}

procedure_ultra vector Proc_PNJ_Snake_RidedSightGet()
{
	vector	tv_sight
	object	to_bone

	switch(creature_type)
	{
		case Ci_CreatureType_Snake :	
			to_bone = ANI_CanalObjectGet(Anim_Canal_Tete)
			if (MATH_VecNull(v_joy_dir))
				tv_sight = @to_bone OBJ_SightGet()
			else
				tv_sight = MATH_VecInCone(v_joy_dir, @to_bone OBJ_SightGet(), Cf_PiBy4, 0)
			tv_sight -= MATH_VecDotProduct(tv_sight, @to_bone OBJ_BankingGet()) * @to_bone OBJ_BankingGet()
			break
			
		case 	Ci_CreatureType_Spider :
		case Ci_CreatureType_Quadri :
			tv_sight = OBJ_SightGet()			
			break
	}
		
	return( tv_sight )
}

procedure_ultra vector Proc_PNJ_Snake_RidedBankingGet()
{
	object	to_bone

	switch(creature_type)
	{
		case Ci_CreatureType_Snake :	
			to_bone = ANI_CanalObjectGet(Anim_Canal_Tete)
			return( @to_bone OBJ_BankingGet() )
			break
			
		case Ci_CreatureType_Spider :
		case Ci_CreatureType_Quadri :
			return( OBJ_BankingGet())
			break
	}
}


procedure_ultra vector Proc_PNJ_Snake_Rided_HotSpot_PosGet()
{
	return Proc_PNJ_Snake_RidedPosGet()	
}

procedure_ultra int Proc_PNJ_Snake_CreatureTypeGet()
{
	return i_monture_ID
}


// ATTAQUE CHARGE ====================================================
procedure_ultra void Proc_PNJ_Snake_ChargeAttack(object to_target)
{
	switch ( creature_type )
	{
		case Ci_CreatureType_Spider :
		case Ci_CreatureType_Quadri :

			if ( ! f_atk_charge_delai )
			{
				i_atk_charge_flag = vrai
				o_atk_charge_target = to_target
				f_atk_charge_duree += TIME_GetDt()
				f_atk_charge_duree = MATH_FloatMin(f_atk_charge_duree, Proc_PNJ_Snake_ChargeAttack_DureeGet())
			}
			break
	}
}

procedure_ultra float Proc_PNJ_Snake_ChargeAttack_DureeGet()
{
	switch(creature_type)
	{
		case Ci_CreatureType_Spider :
		case Ci_CreatureType_Quadri :
			return 2.0
			break
		default:
			return 0.0
	}
}

procedure_ultra float Proc_PNJ_Snake_ChargeAttack_RangeGet()
{
	switch(creature_type)
	{
		case Ci_CreatureType_Spider :
		case Ci_CreatureType_Quadri :
			return f_attaque_charge_distance
			break
		default:
			return 0.0
	}
}

procedure_ultra int Proc_PNJ_Snake_No_Col()
{
	if (f_delay_until_last_ground_col > 0.3 && f_delay_until_last_wall_col > 0.3)
		return(vrai)
		
	return(faux)
}