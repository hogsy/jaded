#include "PNJ_Snake_defines.var"

Include_UltraProcedure_Header
int						ti_rank
int						ti_i
int						ti_canal
int						ti_flag_burn
int						ti_flag_desappear
int						ti_flag_stop_sound
int						ti_flag_ok
int						ti_play_eat_loop
int						ti_paf_report

float					tf_dist
float					tf_speed

object				to_gao
object				to_me
object				to_duplicated
object				to_camera
object				to_joueur
object				to_father

vector				tv_speed
vector				tv_pos_2D
vector				tv_axis 

message			tm_filter

messageid			EVT_ID
messageid			tmid_interest

i_trame_nb++

o_main_actor = AI_MainActorGet(0)
COL_UnCollidableAdd(o_main_actor)

if (o_last_father)
{
	v_head_last_pos = @o_last_father OBJ_PosGet() + @o_last_father MATH_VecLocalToGlobal(v_head_last_pos)
	v_last_collided_pos = @o_last_father OBJ_PosGet() + @o_last_father MATH_VecLocalToGlobal(v_last_collided_pos)
	v_dest_banking = @o_last_father MATH_VecLocalToGlobal(v_dest_banking)
	v_ground_col_normal = @o_last_father MATH_VecLocalToGlobal(v_ground_col_normal)
	v_wall_col_normal = @o_last_father MATH_VecLocalToGlobal(v_wall_col_normal)
}

v_IK_banking = OBJ_BankingGet()

f_Z_noise = 0.0
f_force_Z_axis_duration -= MATH_FloatMin(f_force_Z_axis_duration, TIME_GetDt())
f_external_pilot -= MATH_FloatMin(f_external_pilot, TIME_GetDt())
f_atk_charge_delai -= MATH_FloatMin(f_atk_charge_delai, TIME_GetDt())

//// PAF ===========================================================================
//i_flag_paf = faux

// FACE DE MORT ==================================================================
if ( COL_GMatReportGet(i_gmat_death_bit) != -1 )
	i_flag_force_death = vrai

// FACE DE PAF ====================================================================
ti_paf_report = COL_GMatReportGet(i_gmat_paf_bit)
if (ti_paf_report != -1)
{
	tv_axis = COL_NormalGet(ti_paf_report + COL_C_ReportIndex)
	if (MATH_AbsFloat(tv_axis.z) > Cf_Cos45)
		tv_axis = MATH_VecNormalize(v_last_pos - OBJ_PosGet())
	tv_axis = MATH_VecBlend(tv_axis, Cv_VerticalVector, 0.5)
	EVENT_AddEventPaf( none,  C_PAF_RM_Fort, OBJ_Me(), Cf_EVENT_Duree_1Trame, OBJ_Me(), 10.0, tv_axis)
}
v_last_pos = OBJ_PosGet()

if (OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Dyna))
{
	DYN_FlagsSet(DYN_C_OptimizeColDisable, none)
	DYN_TractionSet(Cv_NullVector)
}

//// SOUND =============================================================
//ti_flag_stop_sound = faux
//
//if (f_lifecur && i_etat_courant != -1 && i_etat_courant != ETAT_Attente)
//{
//	tv_speed = OBJ_PosGet() - v_last_pos
//	tv_speed /= TIME_GetDt()
//	v_last_pos = OBJ_PosGet()
//	tf_speed = MATH_VecNorm(tv_speed)
//	f_real_speed = tf_speed
//	
//	tf_speed = MATH_FloatMin(tf_speed, 6.0) / 6.0
//	
//	tf_dist = OBJ_SqrDist(to_joueur) 
//	if (tf_dist < 400.0)
//	{
//		if (SND_move_1_loop == -1)
//			SND_move_1_loop = SND_RequestPlayLoopOnObjCanal(SND_MOVE_1, 2)
//		
//		if (SND_move_2_loop == -1)
//			SND_move_2_loop = SND_RequestPlayLoopOnObjCanal(SND_MOVE_2, 13)
//
//		switch(i_etat_courant)
//		{
//			case ETAT_Sol :
//			case ETAT_Devore :
//
//				ti_play_eat_loop = vrai
//				if (i_perceived_best_actor_index == -1)
//					ti_play_eat_loop = faux
//				else if (! ( ai_perceived_status[i_perceived_best_actor_index] & Ci_PERCEIVED_IS_DEAD) )
//					ti_play_eat_loop = faux
//				else if (ai_perceived_ID[i_perceived_best_actor_index] == C_ID_BatCharognard && ! @ao_perceived_actor[i_perceived_best_actor_index] OBJ_CapaTest(OBJ_Capa_15))
//					ti_play_eat_loop = faux
//				else if (i_etat_courant != ETAT_Devore && af_perceived_dist[i_perceived_best_actor_index] > 3.0)
//					ti_play_eat_loop = faux
//					
//				break
//				
//			default:
//				ti_play_eat_loop = faux
//		}
//		
//		if (ti_play_eat_loop && SND_eat_loop == -1)
//		{
//			if (SND_eat_loop == -1)
//				SND_eat_loop = SND_RequestPlayLoopOnObjCanal(SND_EAT, Anim_Canal_Tete)
//		}	
//		else if ( ! ti_play_eat_loop && SND_eat_loop != -1)
//		{
//			SND_Stop(SND_eat_loop)
//			SND_eat_loop = -1
//		}
//	}
//	else if (tf_dist > 600.0)
//	{
//		ti_flag_stop_sound = vrai
//	}
//}
//else
//{
//	ti_flag_stop_sound = vrai
//}
//
//if (ti_flag_stop_sound)
//{
//	if (SND_move_1_loop != -1)
//	{
//		SND_Stop(SND_move_1_loop)
//		SND_move_1_loop = -1
//	}
//	
//	if (SND_move_2_loop != -1)
//	{
//		SND_Stop(SND_move_2_loop)
//		SND_move_2_loop = -1
//	}
//	
//	if (SND_eat_loop != -1)
//	{
//		SND_Stop(SND_eat_loop)
//		SND_eat_loop = -1
//	}	
//}
//
//if (SND_move_1_loop != -1)
//{
//	SND_InsertVarSet(SND_move_1_loop, 23, tf_speed)
//}
//
//if (SND_move_2_loop != -1)
//{
//	SND_InsertVarSet(SND_move_2_loop, 23, tf_speed)
//}
//
//f_SND_burning_duration -= MATH_FloatMin(f_SND_burning_duration, TIME_GetDt())
//if (f_SND_burning_duration && f_ragdoll_damping)
//{
//	if (SND_burn_loop == -1)
//	{
//		SND_burn_loop = SND_RequestPlayLoop(SND_FIRE_LOOP)
//
//		SND_RequestPlay(SND_FIRE_START)
//		f_SND_between_scream_duration = MATH_RandFloat(0.5, 1.0)
//	}
//
//	if (f_SND_between_scream_duration)
//	{
//		f_SND_between_scream_duration -= TIME_GetDt()
//		if (f_SND_between_scream_duration <= 0.0)
//		{
//			f_SND_between_scream_duration = MATH_RandFloat(0.5, 1.0)
//			SND_RequestPlay(SND_FIRE_SCREAM)
//		}
//	}
//}
//else if (SND_burn_loop != -1)
//{
//	SND_Stop(SND_burn_loop)
//	SND_burn_loop = -1
//}
//
//
//
//// SOUND =============================================================


