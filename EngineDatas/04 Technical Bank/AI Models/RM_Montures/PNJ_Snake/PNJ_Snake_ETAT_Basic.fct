#include "PNJ_Snake_defines.var"

Include_UltraProcedure_Header

int				ti_i
int				ti_flag_orient
int				ti_col_report
int				ti_flag_ok
int				ti_flag_break_dir
int				ti_asp
int				ti_flag_soft_col
int				ti_zde_corps_nb

float			tf_coef
float			tf_dist
float			tf_dist_min
float			tf_dist_max
float			tf_speed
float			tf_target_speed
float			tf_norm
float			tf_rayon
float			tf_last_module_dist
float			tf_middle_module_dist
float			tf_archimede
float			tf_Z_offset
float			tf_sign
float			tf_dot_product

object		to_target
object		to_head_target
object		to_collide_object
object		tao_zde_corps_gao[100]

vector		tv_new_sight
vector		tv_new_banking
vector		tv_speed 
vector		tv_traction
vector		tv_pos
vector		tv_hor_sight
vector		tv_ray_start_pos
vector		tv_collide_pos
vector		tv_ray_col_normal
vector		tv_temp
vector		tv_temp2
vector		tv_cam_sight
vector		tv_cam_banking

//if (IO_KeyJustPressed(65))
//	DYN_SpeedSetVector(OBJ_BankingGet() * 10.0)


if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	DYN_GravitySet(Cv_NormalGravity)

	PNJ_Spider_All_Loop_Sound_Off()
	
	return
}

if (i_etat_courant != ETAT_Basic)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Basic
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = "PNJ_Snake_ETAT_Basic"
	
	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction  | DYN_C_NeverDynamicFather | DYN_C_SlipOnGroundEdge | DYN_C_HorizontalGrounds, DYN_C_NeverDynamicHierarchy)
	
	switch(i_dernier_etat)
	{
		case ETAT_GetUp :
			PNJ_Snake_Virtual_Net_Init(vrai, nobody)
			break
			
		default:
			f_delay_until_last_ground_col = 0.0
			PNJ_Snake_Virtual_Net_Init(faux, nobody)
	}
	
	COL_ColSetActivationSet(C_bit_zdm_pied, none)

	f_keep_sight_delay = MATH_RandFloat(3.0, 5.0)

	f_angle_oscillation = 0.0
	f_on_ground_dist = 0.0
	
	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
	DYN_GravitySet(Cv_NormalGravity)
}

// ANALYSE ===============================================================
o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)

if (creature_type == Ci_CreatureType_Quadri && (f_burn_duration < 30.0 || o_Rided_Actor == o_main_actor))
{
	f_burn_duration -= MATH_FloatMin(f_burn_duration, TIME_GetDt())
	if ( ! f_burn_duration )
	{
		PROC_SFX_EXPLOSION_REALISTE(5.0, 2.0, OBJ_PosGet())
		PROC_SFX_EXPLOSION_ARBRE(OBJ_PosGet(), 3.0, 3.0)

		COL_SwapToSpecific(C_zde_corps)
		COL_ZonePosSet(C_zde_corps, Cv_NullVector)
		COL_ZoneSizeSet(C_zde_corps, cvector(6.0, 6.0, 6.0))

		if (o_Rided_Actor)
			@o_Rided_Actor OBJ_PosSet(OBJ_PosGet() + OBJ_BankingGet())

		ti_zde_corps_nb =  COL_ZDE_ZDEListGet(&tao_zde_corps_gao[0], C_zde_corps, C_zde_corps, all, none, Ci_Filter_IdentityFlag)
		for (ti_i = 0; ti_i < ti_zde_corps_nb; ti_i++)
		{
			if (tao_zde_corps_gao[ti_i] == o_Rided_Actor)
				EVENT_AddEventPafCanal( C_EVENT_FILTER_Object, C_PAF_RM_Fort | C_PAF_RM_Grenade, OBJ_Me(), Cf_EVENT_Duree_1Trame, tao_zde_corps_gao[ti_i], -1, 0.0, OBJ_BankingGet(), OBJ_PosGet())
			else
				EVENT_AddEventPafCanal( C_EVENT_FILTER_Object, C_PAF_RM_Fort | C_PAF_RM_Grenade, OBJ_Me(), Cf_EVENT_Duree_1Trame, tao_zde_corps_gao[ti_i], -1, 0.0, @tao_zde_corps_gao[ti_i] OBJ_PosGet() - OBJ_PosGet(), OBJ_PosGet())
		}
		
		o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, faux, nofunc, nofunc)

		OBJ_Destroy()
	}
}

switch( i_monture_ID )
{
	case C_ID_Monture_Araignee :
	case C_ID_Monture_Quadripode :
		AI_Execute("PNJ_Snake_Exec_check_paf")
		if (i_paf_flag)
			macro_change_etat("PNJ_Snake_ETAT_Paf")
		break
}
//else if (IO_KeyJustPressed(VK_SPACE))
//{
//	macro_change_etat("PNJ_Snake_ETAT_Paf")
//}

o_eagle = LNK_ServeurGet(Ci_LNK_GRAB_EAGLE, mid_eagle_LNK, vrai, "PNJ_Snake_exec_LNK_Eagle", nofunc)
if (o_eagle)
	macro_change_etat("PNJ_Snake_ETAT_Grabbed")

switch(creature_type)
{
	case Ci_CreatureType_Snake :

		if  (f_time_start_etat && o_Rided_Actor == o_main_actor && i_on_virtual_net_modules_nb  > 10)
		{
			if (IO_ButtonJustPressed(RM_Monture_Button_Action1) || IO_ButtonJustPressed(RM_Monture_Button_Action2))
				macro_change_etat("PNJ_Snake_ETAT_GetUp")
		}
			
		break
}

// COMPORTEMENT =========================================================
tv_traction = Cv_NullVector

if (COL_CollideType(COL_C_Ground))
{
	f_delay_until_last_ground_col = 0.0
	o_ground_actor = COL_ObjectGet(COL_C_Ground)
	OBJ_HierarchySet(o_ground_actor)	

	v_ground_pos = COL_CollidedPointGet(COL_C_Ground)
	v_last_collided_pos = v_ground_pos

	v_ground_normal	= COL_ZonePosGet(C_zdm_pied)
	v_ground_normal -= v_ground_pos
	MATH_VecSetNormalize(v_ground_normal)

	v_ground_col_normal = COL_NormalGet(COL_C_Ground)
	
	if (v_ground_normal.z > 0.0)
		f_on_ground_dist += DYN_SpeedGet() * TIME_GetDt()
	else
		f_on_ground_dist = 0.0
}
else
{
	f_delay_until_last_ground_col += TIME_GetDt()

	if (v_ground_normal.z < 0.0 || f_delay_until_last_ground_col > 0.2)
		f_on_ground_dist = 0.0
	else
		f_on_ground_dist += DYN_SpeedGet() * TIME_GetDt()
}

if (COL_CollideType(COL_C_Wall))
{
	f_delay_until_last_wall_col = 0.0

	o_wall_actor = COL_ObjectGet(COL_C_Wall)
	OBJ_HierarchySet(o_wall_actor)

	v_last_collided_pos = COL_CollidedPointGet(COL_C_Wall)

	v_wall_normal	= COL_ZonePosGet(C_zdm_pied)
	v_wall_normal -= v_last_collided_pos
	MATH_VecSetNormalize(v_wall_normal)

	v_wall_col_normal = COL_NormalGet(COL_C_Wall)
}
else
{
	f_delay_until_last_wall_col += TIME_GetDt()
}

if (i_modules_nb && i_on_virtual_net_modules_nb < i_modules_nb - 1)
{
	tv_pos = @ao_modules[i_modules_nb - 1] OBJ_PosGet()
	tv_pos.z = MATH_FloatMax(tv_pos.z, OBJ_PosGet().z)
	
	if (COL_RayObject_Dist(tv_pos, -Cv_VerticalVector, 10.0, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
	{
		v_ray_pos = MATH_VecBlend(v_ray_pos, COL_RayObject_PosGet(), 4.0 * TIME_GetDt())
		v_ray_normal = MATH_VecBlendRotate(v_ray_normal, COL_RayObject_NormalGet(), 4.0 * TIME_GetDt())
	}
}

DYN_GravitySet(v_Snake_Gravity)

if (  i_trame_nb == 1 || f_delay_until_last_ground_col < 0.2 || f_delay_until_last_wall_col < 0.2)
{
	if ( ! f_delay_until_last_ground_col && ! f_delay_until_last_wall_col )
	{
		if (MATH_VecDotProduct(v_ground_normal, OBJ_SightGet()) < MATH_VecDotProduct(v_wall_normal, OBJ_SightGet()))
//			v_dest_banking = v_ground_normal
			v_dest_banking = MATH_VecBlendRotate(v_ground_normal, v_wall_normal, 0.25)
		else
//			v_dest_banking = v_wall_normal
			v_dest_banking = MATH_VecBlendRotate(v_ground_normal, v_wall_normal, 0.75)
	}
	else if ( ! f_delay_until_last_wall_col ) 
		v_dest_banking = v_wall_normal
	else if ( ! f_delay_until_last_ground_col ) 
		v_dest_banking = v_ground_normal
	else
		v_dest_banking = MATH_VecNormalize(OBJ_PosGet() - v_last_collided_pos)

	if (f_delay_until_last_ground_col && f_delay_until_last_wall_col && COL_RayObject_Dist(OBJ_PosGet(), -v_dest_banking, COL_ZoneSizeGet(C_zdm_pied) * 2.0, all, none, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
	{
		v_dest_banking = COL_RayObject_NormalGet()

		if (MATH_AbsFloat(v_dest_banking.z) > Cf_Cos60)
		{
			v_ground_col_normal = v_dest_banking
			f_delay_until_last_ground_col = 0.0
		}
		else
		{
			v_wall_col_normal = v_dest_banking
			f_delay_until_last_wall_col = 0.0
		}
		
		tv_temp = OBJ_PosGet() - COL_RayObject_PosGet()
		tf_norm = MATH_VecSquareNorm(tv_temp)
		if (tf_norm)
			v_dest_banking = tv_temp / MATH_FloatSqrt(tf_norm)

		if ( i_trame_nb == 1 )
		{
			tv_traction = v_dest_banking * v_Snake_Gravity.z
			tv_traction *= DYN_FrictionVectorGet().x * f_size_coef
		}
	}

	if (v_dest_banking.z < Cf_Cos45)
	{
		DYN_GravitySet(cvector(0.0, 0.0, 0.0))

		if (f_delay_until_last_ground_col && f_delay_until_last_wall_col)
		{
			if (f_delay_until_last_wall_col < f_delay_until_last_ground_col)
				tv_traction = v_wall_col_normal * v_Snake_Gravity.z
			else
				tv_traction = v_ground_col_normal * v_Snake_Gravity.z
		
	//		tv_traction = v_dest_banking * v_Snake_Gravity.z
			tv_traction *= DYN_FrictionVectorGet().x * f_size_coef
		}
	}
}
else
{
	v_dest_banking = MATH_VecBlendRotate(v_dest_banking, Cv_VerticalVector, MATH_FloatMax(f_delay_until_last_ground_col, 8.0 * TIME_GetDt()))
}

ti_col_report =COL_GMatReportGet(i_gmat_water_bit)
if (ti_col_report != -1)
{
	OBJ_HierarchyReset()	

	to_collide_object = COL_ObjectGet(COL_C_ReportIndex + ti_col_report)
	tv_collide_pos = COL_CollidedPointGet(COL_C_ReportIndex + ti_col_report) 
	tv_ray_col_normal = COL_NormalGet(COL_C_ReportIndex + ti_col_report)

	if (MATH_AbsFloat(tv_ray_col_normal.z) > Cf_Cos60)
	{
		i_on_ground_modules_nb = 0
		f_water_Z = tv_collide_pos.z
	}
}

tf_Z_offset = COL_ZoneSizeGet(C_zdm_pied)

tf_archimede = f_water_Z - OBJ_PosGet().z + tf_Z_offset
tf_archimede /= tf_Z_offset
tf_archimede = MATH_FloatLimit(tf_archimede, 0.0, 4.0)
if (tf_archimede)
{
	DYN_GravitySet(v_Snake_Gravity)
	
	tv_traction = Cv_NullVector
	tv_traction.z -= tf_archimede * v_Snake_Gravity.z * 0.75

	if (v_dest_banking.z < 0.0)
		v_dest_banking *= -1.0

	tv_new_sight = OBJ_SightGet()
	tv_new_sight.z = 0.0
	if (MATH_VecDotProduct(tv_new_sight, v_dest_banking) > 0.0)
		v_dest_banking = Cv_VerticalVector
}
else // if ( ! PNJ_Snake_IsWater(OBJ_PosGet()) )
{
	tf_archimede = 0.0
	f_water_Z = -Cf_Infinit
}

tf_target_speed = 0.0

if (i_flag_external_jump)
{
	i_flag_external_jump = faux

	OBJ_HierarchyReset()

	if (f_delay_until_last_ground_col < f_delay_until_last_wall_col)
		DYN_SpeedSetVector(v_ground_col_normal * 20.0)
	else
		DYN_SpeedSetVector(v_wall_col_normal * 20.0)

	f_delay_until_last_ground_col = 1000.0
	f_delay_until_last_wall_col = 1000.0

	DYN_FlagsSet(DYN_C_GlobalFriction, none)
	DYN_FrictionVectorSet(cvector(2.0, 2.0, 0.0))

}
else if (tf_archimede || f_delay_until_last_ground_col < 0.2 || f_delay_until_last_wall_col < 0.2)
{
	DYN_FlagsSet(none, DYN_C_GlobalFriction)
	DYN_FrictionVectorSet(cvector(6.0, 6.0, 6.0))	

	if ( o_Rided_Actor != o_main_actor && ! f_external_pilot )
		ti_flag_soft_col = COL_LIB_Soft_Col(OBJ_Me(), tv_temp) 
	else
		ti_flag_soft_col = faux

	if (ti_flag_soft_col)
	{
		tv_new_sight = OBJ_PosGet()
		tv_new_sight += tv_temp
		
//		DBG_RenderVector(OBJ_PosGet(), tv_new_sight - OBJ_PosGet(), color_cyan)

		tf_target_speed = move_speed
		tf_target_speed *= 1.0 + (MATH_Sin(TIME_Get() * 4.0) * 0.25)
	}
	else if (o_Rided_Actor)
	{
//		if( i_hotspot )
//		{
//			HotSpot_Del_Obj(OBJ_Me())
//			i_hotspot = faux
//		}
		
		f_rand_pos_duration = 0.0
		
		if  (!f_external_pilot)
			v_init_pos = OBJ_PosGet()

		v_joy_dir	 = OBJ_SightGet()
	
		if (f_keep_sight_delay)
		{
			f_keep_sight_delay -= MATH_FloatMin(f_keep_sight_delay, TIME_GetDt())
		}
		else
		{
			if ( f_keep_sight_duration )
			{
				f_keep_sight_duration -= TIME_GetDt()
				if (f_keep_sight_duration <= 0.0)
				{
					f_keep_sight_duration = 0.0
					f_keep_sight_delay = MATH_RandFloat(3.0, 5.0)
				}
			}
			else
			{
				f_keep_sight_duration = MATH_RandFloat(0.25, 1.0)
			}
		}

		if (o_atk_charge_target)
		{
			tv_new_sight = @o_atk_charge_target OBJ_PosGet()
			tf_target_speed = 1.5
		}
		else if (o_Rided_Actor == o_main_actor)
		{
			tv_temp = IO_JoyGetMove()
			tf_dist = MATH_VecSquareNorm(tv_temp) 
			if (tf_dist > 0.01)
			{
				tv_temp /= MATH_FloatSqrt(tf_dist)
				v_joy_dir = -tv_temp
			
				tv_cam_sight = @get_Kamera OBJ_SightGet()
				tv_cam_banking = @get_Kamera OBJ_BankingGet()
	
				if (f_delay_until_last_ground_col < f_delay_until_last_wall_col)
				{
					if (f_joy_wall_duration)
					{
						f_joy_wall_duration = 0.0
						i_flag_change_joy_mode = vrai
					}
					
					f_joy_ground_duration += TIME_GetDt()	
	
					v_joy_dir	 = @get_Kamera MATH_VecLocalToGlobal(v_joy_dir)
				}
				else
				{
					@get_Kamera OBJ_SightGeneralSet(-v_wall_col_normal, Cv_VerticalVector) 	
				
					if (f_joy_ground_duration)
					{
						f_joy_ground_duration = 0.0
						i_flag_change_joy_mode = vrai
					}	
				
					f_joy_wall_duration += TIME_GetDt()
					
	//				v_joy_dir.z = -v_joy_dir.y
	//				v_joy_dir.y = 0.0
	
					v_joy_dir.z = -v_joy_dir.y
					v_joy_dir.y = 0.0
	
					v_joy_dir	 = @get_Kamera MATH_VecLocalToGlobal(v_joy_dir)
				}
		
				@get_Kamera OBJ_SightGeneralSet(tv_cam_sight, tv_cam_banking) 
	
				if (i_flag_change_joy_mode)
				{
					if (MATH_VecDotProduct(tv_temp, v_joy_last_dir) > Cf_Cos10)
						v_joy_dir = OBJ_SightGet()
					else
						i_flag_change_joy_mode = faux
					DBG_RenderVector(OBJ_PosGet(), v_joy_dir * 10.0, color_rouge)
				}
				else
				{
					v_joy_last_dir = tv_temp
					DBG_RenderVector(OBJ_PosGet(), v_joy_dir * 10.0, color_jaune)
				}
			}
			else
			{
				i_flag_change_joy_mode = faux
				v_joy_last_dir = Cv_NullVector
			}

			if (Proc_JOY_Boost_Pressed())
			{
				tf_target_speed = move_speed
				tf_target_speed *= 1.0 + (MATH_Sin(TIME_Get() * 4.0) * 0.25)
			}
			else if (glob_joynorm_get)
			{
				tf_target_speed = glob_joynorm_get
				tf_target_speed *= move_speed * 0.5
				tf_target_speed *= 1.0 + (MATH_Sin(TIME_Get() * 4.0) * 0.25)
			}

			tv_new_sight = OBJ_PosGet()
			tv_new_sight += v_joy_dir * 5.0
		}
		else if (f_external_pilot)
		{
			if (f_keep_sight_duration)
			{
				tv_new_sight = OBJ_PosGet()
				tv_new_sight += OBJ_SightGet() * 5.0
	
				if (f_external_pilot_wanted_speed != -1.0)
					tf_target_speed = f_external_pilot_wanted_speed
				else
					tf_target_speed = move_speed
				tf_target_speed *= 1.0 + (MATH_Sin(TIME_Get() * 4.0) * 0.25)
			}
			else
			{
				tv_new_sight = v_external_pilot_dest_pos
		
				DBG_RenderVector(OBJ_PosGet(), v_external_pilot_dest_pos - OBJ_PosGet(), color_bleu)
		
				if (f_external_pilot_wanted_speed != -1.0)
					tf_target_speed = f_external_pilot_wanted_speed
				else
					tf_target_speed = move_speed
				tf_target_speed *= 1.0 + (MATH_Sin(TIME_Get() * 4.0) * 0.25)
			}
		}
		else
		{
			v_joy_dir = Proc_PNJ_JoyGetMove(o_Rided_Actor)

			tf_target_speed = MATH_VecNorm(v_joy_dir)
			if (tf_target_speed)
			{
				if (f_keep_sight_duration)
				{
					v_joy_dir = OBJ_SightGet()
		
					tf_target_speed = move_speed
					tf_target_speed *= 1.0 + (MATH_Sin(TIME_Get() * 4.0) * 0.25)
				}
				else
				{
					v_joy_dir /= tf_target_speed
	
					tf_target_speed = move_speed
					tf_target_speed *= 1.0 + (MATH_Sin(TIME_Get() * 4.0) * 0.25)
				}
			}
			else if (f_time_start_etat && i_on_virtual_net_modules_nb == 14)
			{
				macro_change_etat("PNJ_Snake_ETAT_GetUp")
			}

			tv_new_sight = OBJ_PosGet()
			tv_new_sight += v_joy_dir * 5.0
		}	
	}	
	else
	{
//		if( ! i_hotspot )
//		{
//			HotSpot_Add_Obj(OBJ_Me(), 0)
//			i_hotspot = vrai
//		}
		
		f_rand_pos_duration -= MATH_FloatMin(f_rand_pos_duration, TIME_GetDt())

		if ( ! f_rand_pos_duration || MATH_VecDotProduct(v_rand_dest_pos - OBJ_PosGet(), v_rand_dest_pos - OBJ_PosGet()) < 1.0)
		{
			f_rand_pos_duration	= MATH_RandFloat(2.0, 4.0)
		
			tv_new_sight = v_init_pos
			tv_new_sight -= OBJ_PosGet()
			tf_norm = MATH_VecNorm(tv_new_sight)
			if (tf_norm > 0.001)
				tv_new_sight /= tf_norm
			else
				tv_new_sight = OBJ_SightGet()
	
			tv_new_sight = MATH_VecCrossProduct(tv_new_sight, OBJ_BankingGet())
			tf_norm = MATH_VecNorm(tv_new_sight)
			if (tf_norm > 0.001)
				tv_new_sight /= tf_norm
			else
				tv_new_sight = OBJ_SightGet()
			
			tv_new_sight *= MATH_FloatSign(MATH_RandFloat(-1.0, 1.0))
			tv_new_sight *= MATH_RandFloat(5.0, 15.0) * f_size_coef
			
			v_rand_dest_pos = v_init_pos
			v_rand_dest_pos += tv_new_sight
		}
		
		tv_new_sight = v_rand_dest_pos
	}

	// Z MOVE ??? ============================================================
	if  (! o_Rided_Actor && (! tf_archimede && MATH_VecDotProduct(OBJ_SightGet(), tv_new_sight - OBJ_PosGet()) < 0.0) )
	{
		if (f_delay_until_last_wall_col < 0.1)
		{
			f_force_Z_axis_duration = 0.2
	
			if (MATH_VecDotProduct(v_wall_normal, tv_new_sight - OBJ_PosGet()) < 0.0)
				tv_new_sight = OBJ_PosGet() + Cv_VerticalVector
			else
				tv_new_sight = OBJ_PosGet() - Cv_VerticalVector
		}
		else if (f_force_Z_axis_duration)
		{
			tv_new_sight -= OBJ_PosGet()
			tv_new_sight.z = 0.0
			MATH_VecSetNormalize(tv_new_sight)
		
			if (MATH_VecDotProduct(v_wall_normal, tv_new_sight - OBJ_PosGet()) < 0.0)
				tv_new_sight = OBJ_PosGet() + MATH_VecBlend(tv_new_sight, Cv_VerticalVector, 0.5)
			else
				tv_new_sight = OBJ_PosGet() + MATH_VecBlend(tv_new_sight, -Cv_VerticalVector, 0.5)
		}
	}
	
//	if  (! o_Rided_Actor )
//	{
//		tv_temp = tv_new_sight
//		tv_temp -= OBJ_PosGet()
//
//		if (MATH_VecDotProduct(tv_temp, OBJ_SightGet()) < -1.0 && MATH_AbsFloat(MATH_VecDotProduct(MATH_VecNormalize(tv_temp), OBJ_BankingGet())) > Cf_Cos45)
//			tv_new_sight = OBJ_PosGet() + OBJ_SightGet()
//		
////		if (MATH_VecDotProduct(tv_temp, OBJ_SightGet()) < -1.0 && MATH_AbsFloat(MATH_VecDotProduct(tv_temp, OBJ_BankingGet())) > f_size_coef * 2.0)
////		{
////			if (f_delay_until_last_wall_col < 0.1 && MATH_VecDotProduct(v_ground_col_normal, tv_temp) < 0.0)
////				tv_new_sight = OBJ_PosGet() + MATH_VecBlendRotate(v_ground_col_normal, MATH_VecCrossProduct(v_ground_col_normal, v_wall_col_normal), 0.5)
////			else if (f_delay_until_last_ground_col < 0.1 && MATH_VecDotProduct(v_wall_col_normal, tv_temp) < 0.0)
////				tv_new_sight = OBJ_PosGet() + MATH_VecBlendRotate(v_wall_col_normal, MATH_VecCrossProduct(v_ground_col_normal, v_wall_col_normal), 0.5)
////		}
//	}

	// CALCUL DE LA DIRECTION
	tv_new_sight -= OBJ_PosGet()
	tv_new_sight -= MATH_VecDotProduct(tv_new_sight, OBJ_BankingGet()) * OBJ_BankingGet()
	tf_norm = MATH_VecNorm(tv_new_sight)

	if ( i_modules_nb )
	{
		tf_middle_module_dist = OBJ_SqrDist(ao_modules[i_modules_nb >> 1])
		tf_last_module_dist = OBJ_SqrDist(ao_modules[i_modules_nb - 1])
	}

	ti_flag_orient = vrai
	if (tf_norm < 0.001)
		ti_flag_orient = faux
	else if (o_Rided_Actor || ti_flag_soft_col)
		ti_flag_orient = vrai
	else if (i_modules_nb && tf_middle_module_dist > 0.001 && tf_middle_module_dist < f_middle_module_min_dist)
	{
		ti_flag_orient = vrai	
	
		tv_new_sight = OBJ_PosGet()
		tv_new_sight -= @ao_modules[i_modules_nb >> 1] OBJ_PosGet()

		tf_middle_module_dist = MATH_FloatSqrt(tf_middle_module_dist)
		tv_new_sight /= tf_middle_module_dist
		
		if (MATH_VecDotProduct(tv_new_sight, @ao_modules[i_modules_nb >> 1] OBJ_SightGet()) > 0.0)
		 	tv_new_sight = - @ao_modules[i_modules_nb >> 1] OBJ_SightGet()
	}
	else if (i_modules_nb && tf_last_module_dist > 0.001 && tf_last_module_dist < f_last_module_min_dist)
	{
		ti_flag_orient = vrai	
	
		tv_new_sight = OBJ_PosGet()
		tv_new_sight -= @ao_modules[i_modules_nb - 1] OBJ_PosGet()

		tf_last_module_dist = MATH_FloatSqrt(tf_last_module_dist)
		tv_new_sight /= tf_last_module_dist

		if (MATH_VecDotProduct(tv_new_sight, @ao_modules[i_modules_nb - 1] OBJ_SightGet()) > 0.0)
			tv_new_sight = - @ao_modules[i_modules_nb - 1] OBJ_SightGet()
	}

	tf_speed = MATH_VecDotProduct((OBJ_PosGet() - v_head_last_pos) / TIME_GetDt(), OBJ_SightGet())
	tf_speed = MATH_FloatMax(tf_speed / f_size_coef, 0.0)

	if (ti_flag_orient)
	{
		tf_coef = MATH_FloatMin(tf_speed * 0.5, 1.0)
		tf_coef *= 4.0
	
		tv_new_sight /= tf_norm
//		DBG_RenderVector(OBJ_PosGet(), tv_new_sight * 10.0, color_cyan)
		
		if (MATH_VecDotProduct(OBJ_SightGet(), tv_new_sight) > 0.0)
			tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, tf_coef * TIME_GetDt())
		else
			tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), MATH_FloatSign(MATH_VecDotProduct(tv_new_sight, OBJ_HorizonGet())) * OBJ_HorizonGet(), tf_coef * TIME_GetDt())
	}
	else
	{
		tv_new_sight = OBJ_SightGet()
	}

	tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), v_dest_banking, 4.0 * TIME_GetDt())

	if (creature_type == Ci_CreatureType_Snake)
	{
		if (o_Rided_Actor != o_main_actor)
		{
			f_angle_oscillation += TIME_GetDt() * MATH_RandFloat(Cf_Pi, Cf_2Pi)
			while(f_angle_oscillation > Cf_2Pi)
				f_angle_oscillation -= Cf_2Pi
		
			tf_coef = MATH_Sin(f_angle_oscillation)
			if (tf_archimede)
				tf_coef *= MATH_FloatMin(tf_speed, 0.15)
			else
				tf_coef *= MATH_FloatMin(tf_speed * 0.2, 0.1)
	
			tv_new_sight = MATH_VecRotate(tv_new_sight, tv_new_banking, tf_coef)
		}
	
		if (i_on_virtual_net_modules_nb < i_modules_nb - 1)
		{
			tf_coef = i_on_virtual_net_modules_nb
			tf_coef /= i_modules_nb
			tf_coef = 1.0 - tf_coef
	
			tf_target_speed = MATH_FloatMax(tf_target_speed, f_size_coef * (tf_coef * 6.0))
	
			tv_new_sight = MATH_VecInCone(tv_new_sight, OBJ_SightGet(), Cf_2Pi * TIME_GetDt(), 1)
		}
	}

	if (tf_archimede)
		tf_target_speed *= 0.75

	if (@get_global f_vitesse_limit)
		tf_target_speed = MATH_FloatMin(tf_target_speed, @get_global f_vitesse_limit)

	if (f_move_speed > tf_target_speed)
		f_move_speed = MATH_FloatBlend(f_move_speed, tf_target_speed, 12.0 * TIME_GetDt())	
	else
		f_move_speed = MATH_FloatBlend(f_move_speed, tf_target_speed, 4.0 * TIME_GetDt())	

	if (tf_archimede)
		tv_new_sight.z = MATH_FloatMax(tv_new_sight.z, 0.0)

	if (creature_type == Ci_CreatureType_Snake)
		tv_new_sight = MATH_VecInCone(tv_new_sight, @ao_modules[1] OBJ_SightGet(), Cf_PiBy3, 0)

	OBJ_BankingGeneralSet(tv_new_sight, tv_new_banking)
	
	tv_speed = Cv_NullVector
	
	if (f_move_speed)
	{
		f_Z_noise = MATH_RandFloat(-0.05, 0.05)
		f_Z_noise *= f_size_coef

		tv_speed += OBJ_SightGet() * f_move_speed
		if (tf_archimede)
			tv_speed.z = MATH_FloatMax(tv_speed.z, 0.0)
		else
			tv_speed -= MATH_FloatMax(MATH_VecDotProduct(tv_speed, v_dest_banking), 0.0) * v_dest_banking
	}
	
	if (o_Rided_Actor == o_main_actor)
	{
		if (IO_ButtonPressed(RM_Monture_Button_Action1) || IO_ButtonPressed(RM_Monture_Button_Action2))
		{
			Proc_PNJ_Snake_ChargeAttack(nobody)
		}

		if (IO_ButtonJustPressed(RM_Joy_Jump))
		{
			switch(creature_type)
			{
				case Ci_CreatureType_Spider :

					for (ti_i = 0; ti_i < 8; ti_i++)
						f_IK_ground_coef[ti_i] = 0.0
						
				case Ci_CreatureType_Quadri :
				
					DYN_FlagsSet(DYN_C_GlobalFriction, none)
					DYN_FrictionVectorSet(cvector(2.0, 2.0, 0.0))
					DYN_GravitySet(v_Snake_Gravity)
				
					f_delay_until_last_ground_col = 1000.0
					f_delay_until_last_wall_col = 1000.0
			
//					tv_speed += OBJ_SightGet() *  1.0 * f_size_coef

					tv_speed += OBJ_BankingGet() * 10.0 * f_size_coef
					
					if (o_Rided_Actor == o_main_actor && glob_joynorm_get)
						tv_speed += v_joy_dir * 20.0 * f_size_coef
			
					break
			}
		}
	}
	
	DYN_SpeedSetVector(tv_speed)

	switch(creature_type)
	{
		case Ci_CreatureType_Spider :
		case Ci_CreatureType_Quadri :
			if (f_move_speed > 0.2)
			{
				tf_coef = f_move_speed / af_anim_speed[0]
			
				ACT_ActionSet(Action_Marche)
				ACT_LIB_ActionFrequencyMultiply(tf_coef)
	
				PNJ_Spider_Wait_Sound_Off()
	
				if (o_Rided_Actor == o_main_actor)
				{
					tf_coef = MATH_FloatLimit(tf_coef, 0.0, 1.0)
					PNJ_Spider_Move_Sound_On(tf_coef)
				}
				else
				{
					PNJ_Spider_Move_Sound_Off()
				}
			}
			else
			{
				ACT_ActionSet(Action_Attente)	
	
				if (o_Rided_Actor == o_main_actor)
					PNJ_Spider_Wait_Sound_On()
				else
					PNJ_Spider_Wait_Sound_Off()
	
				PNJ_Spider_Move_Sound_Off()
			}
			break
	}
}
else
{
	DYN_FlagsSet(DYN_C_GlobalFriction, none)
	DYN_FrictionVectorSet(cvector(2.0, 2.0, 0.0))

	PNJ_Spider_All_Loop_Sound_Off()
	
	switch(creature_type)
	{
		case Ci_CreatureType_Snake :
			tf_speed = DYN_SpeedGet()
			if (tf_speed > 0.001)
			{
				tv_new_sight = DYN_SpeedGetVector()
				tv_new_sight /= tf_speed
				tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 4.0 * TIME_GetDt())
			}
			else
			{
				tv_new_sight = OBJ_SightGet()
			}
		
			tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), v_dest_banking, 4.0 * TIME_GetDt())
			OBJ_SightGeneralSet(tv_new_sight, tv_new_banking)
			break
			
		case Ci_CreatureType_Spider :
		case Ci_CreatureType_Quadri :

			ACT_ActionSet(Action_Attente)	

			tf_speed = MATH_VecSquareNorm(DYN_SpeedGetVector())

//			if (f_delay_until_last_ground_col > 0.5 && f_delay_until_last_wall_col > 0.5 && DYN_SpeedGetVector().z < - 1.0)
//			{
//				if (tf_speed > 0.001)
//				{
//					tf_speed = MATH_FloatSqrt(tf_speed)
//					tv_new_banking = DYN_SpeedGetVector()
//					tv_new_banking /= tf_speed
//					tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), -tv_new_banking, 2.0 * TIME_GetDt())
//				}
//				else
//				{
//					tv_new_banking = OBJ_BankingGet()
//				}
//			
//				OBJ_BankingGeneralSet(OBJ_SightGet(), tv_new_banking)
//			}
//			else
//			{
//				if (tf_speed > 0.001)
//				{
//					tf_speed = MATH_FloatSqrt(tf_speed)
//					tv_new_sight = DYN_SpeedGetVector()
//					tv_new_sight /= tf_speed
//					tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 4.0 * TIME_GetDt())
//				}
//				else
//				{
//					tv_new_sight = OBJ_SightGet()
//				}
//			
//				tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), v_dest_banking, 4.0 * TIME_GetDt())
//				OBJ_SightGeneralSet(tv_new_sight, tv_new_banking)
//			}	

				if (tf_speed > 0.001)
				{
					tf_speed = MATH_FloatSqrt(tf_speed)
					tv_new_sight = DYN_SpeedGetVector()
					tv_new_sight /= tf_speed
					tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 4.0 * TIME_GetDt())
				}
				else
				{
					tv_new_sight = OBJ_SightGet()
				}
			
				tv_new_banking = MATH_VecBlendRotate(OBJ_BankingGet(), v_dest_banking, 4.0 * TIME_GetDt())
				OBJ_BankingGeneralSet(tv_new_sight, tv_new_banking)

			break
	}
}

//tv_traction -= MATH_FloatMin(MATH_VecDotProduct(tv_traction, OBJ_SightGet()), 0.0) * OBJ_SightGet()
//DBG_RenderVector(OBJ_PosGet(), v_ground_col_normal * 10.0, color_rouge)
//DBG_RenderVector(OBJ_PosGet(), v_wall_col_normal * 10.0, color_vert)
//DBG_RenderVector(OBJ_PosGet(), -tv_traction, color_cyan)

tv_traction += PROC_ForceStreamGet(OBJ_PosGet(), ti_asp) * DYN_FrictionVectorGet().y

DYN_TractionSet(tv_traction)

if (@o_main_actor PROC_RM_CHEAT_Mode())
{
	DYN_SpeedSetVector(Cv_NullVector)
	OBJ_BankingGeneralSet(OBJ_SightGet(), Cv_VerticalVector)
}


PNJ_Snake_Modules_Update(0, nobody)
PNJ_Quadri_GFX_Burn()

