#include "Splinter_Bunny_defines.var"

Include_UltraProcedure_Header

int		ti_i
int		ti_flag_ok
int		ti_flag_impulsion

float	tf_coef

object	to_obj
object	to_bascule

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux

	o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, faux, nofunc, nofunc)	

	return
}

if (i_etat_courant != ETAT_Rided)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Rided
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
//	BV_MinSet(cvector(-20.0, -20.0, -20.0))
//	BV_MaxSet(cvector(20.0, 20.0, 20.0))

	f_rided_rope_coef = 2.0
	i_rided_module_index = f_rided_rope_coef / f_rope_length
	
	av_modules_pos[i_rided_module_index] = @o_Rided_Actor OBJ_PosGet()
	av_modules_speed[i_rided_module_index] = Cv_NullVector
	ai_modules_locked[i_rided_module_index] = vrai

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
if ( ! o_Rided_Actor )
//	macro_change_etat("Splinter_Bunny_ETAT_Attente")
	macro_change_etat("Splinter_Bunny_ETAT_Death")

// COMPORTEMENT =========================================================
@o_Rided_Actor COL_ColSetActivationSet(C_bit_zdm_pied, none)

if (@o_Rided_Actor COL_CollideType(COL_C_Ground))
{
	to_obj = @o_Rided_Actor COL_ObjectGet(COL_C_Ground)
	if ( ! @to_obj OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Anims))
		macro_change_etat("Splinter_Bunny_ETAT_Death")
}
if (OBJ_CapaTest(OBJ_Capa_0) && @o_Rided_Actor COL_CollideType(COL_C_Wall))
{
	to_obj = @o_Rided_Actor COL_ObjectGet(COL_C_Wall)
	if ( ! @to_obj OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Anims))
		macro_change_etat("Splinter_Bunny_ETAT_Death")
}
if (f_rided_rope_coef >= f_rope_length)
	macro_change_etat("Splinter_Bunny_ETAT_Death")
if (MATH_VecDotProduct(@o_Rided_Actor OBJ_PosGet() - v_ground_pos, v_ground_normal) < 1.0)
	macro_change_etat("Splinter_Bunny_ETAT_Death")

ti_flag_impulsion = faux
if (o_Rided_Actor == AI_MainActorGet(0))
{
	if (IO_JoyGetMove().y < -0.5)
		ti_flag_impulsion = vrai
}
else if (f_time_start_etat > 1.0)
{
	ti_flag_impulsion = vrai
}
	

f_dt = TIME_GetDt()

if (OBJ_CapaTest(OBJ_Capa_0))
	ti_flag_ok = faux
else if (f_impulsion_duration)
	ti_flag_ok = faux
else if (f_on_wall_duration)
	ti_flag_ok = vrai
else if (@o_Rided_Actor COL_CollideType(COL_C_Wall) )
	ti_flag_ok = vrai
//else if (@o_Rided_Actor COL_CollideType(COL_C_Ground) )
//	ti_flag_ok = vrai
else if (MATH_VecDotProduct(av_modules_speed[i_rided_module_index], OBJ_SightGet()) > 0.0 && MATH_VecDotProduct(@o_Rided_Actor OBJ_PosGet() - OBJ_PosGet(), OBJ_SightGet()) > -1.0 )
	ti_flag_ok = vrai
else
	ti_flag_ok = faux

if (ti_flag_ok)
{
	f_on_wall_duration += TIME_GetDt()

	ai_modules_locked[i_rided_module_index] = vrai
//	av_modules_pos[i_rided_module_index] = @o_Rided_Actor OBJ_PosGet()

	if (f_on_wall_duration > 0.5 && ti_flag_impulsion)
	{	
		f_on_wall_duration = 0.0
//		f_impulsion_duration = 0.6
		ai_modules_locked[i_rided_module_index] = faux
		av_modules_speed[i_rided_module_index] -= OBJ_SightGet() * 200.0
	}
}
else if (ti_flag_impulsion)
{
	f_rided_rope_coef += f_speed  * TIME_GetDt()
	f_rided_rope_coef = MATH_FloatMin(f_rided_rope_coef, f_rope_length)
}

f_impulsion_duration -= MATH_FloatMin(f_impulsion_duration, TIME_GetDt())

i_rided_module_index = f_rided_rope_coef / f_rope_length

av_modules_pos[0] = OBJ_PosGet()
Splinter_Bunny_Rag_Doll()

tf_coef = f_rided_rope_coef / f_segment_length
ti_i = tf_coef + 0.5 
ti_i--
tf_coef -= ti_i

ti_i = MATH_FloatLimit(ti_i, 1, Ci_modules_nb - 1)

v_rided_pos = MATH_VecBlend(av_modules_pos[ti_i - 1], av_modules_pos[ti_i], tf_coef)
v_rided_banking = MATH_VecBlendRotate(v_rided_banking, av_modules_pos[ti_i - 1] - av_modules_pos[ti_i], 4.0 * f_dt)

if (OBJ_CapaTest(OBJ_Capa_0))
	v_rided_sight = MATH_VecBlendRotate(@o_Rided_Actor OBJ_SightGet(), @o_main_actor OBJ_PosGet() - v_rided_pos, 4.0 * TIME_GetDt())
else
	v_rided_sight = OBJ_SightGet()

Splinter_Bunny_Display()


to_bascule = OBJ_HierarchyGet()
while(to_bascule)
{
	if (@to_bascule AI_IsModel(get_RM_Bascule_path))
	{
		@to_bascule RM_Bascule_Add(o_Rided_Actor, av_modules_speed[i_rided_module_index], 1.0)
		break
	}
	to_bascule = @to_bascule OBJ_HierarchyGet()
}