#include "PNJ_Shark_defines.var"

int				ti_flag_in_water
int				ti_asp
int				ti_flag_surface	

float			tf_coef
float			tf_attenuation_coef
float			tf_speed
float			tf_norm
float			tf_action_speed
float			tf_action_speed_coef
float			tf_dot_product
float			tf_profondeur
float			tf_friction

vector		tv_read_joy
vector		tv_pos
vector		tv_Y
vector		tv_joy_dir
vector		tv_traction
vector		tv_speed_limit
vector		tv_impulsion
vector		tv_last_sight
vector		tv_last_banking
vector		tv_archimede

object		to_cou
object		to_head
object		to_gao

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	
	o_grab_actor = LNK_ClientGet(Ci_LNK_GRAB_EAGLE, mid_grab_actor_LNK_ID, faux, "PNJ_Shark_exec_GRAB_Init", nofunc, "PNJ_Shark_exec_GRAB_Init")

	if (i_SND_Move_Loop1 != -1)
	{
		SND_Stop(i_SND_Move_Loop1)
		i_SND_Move_Loop1 = -1
	}

	if (i_SND_Move_Loop2_L != -1)
	{
		SND_Stop(i_SND_Move_Loop2_L)
		i_SND_Move_Loop2_L = -1
	}

	if (i_SND_Move_Loop2_R != -1)
	{
		SND_Stop(i_SND_Move_Loop2_R)
		i_SND_Move_Loop2_R = -1
	}

	if (i_SND_Move_Loop3 != -1)
	{
		SND_Stop(i_SND_Move_Loop3)
		i_SND_Move_Loop3 = -1
	}

	return
}


if (i_etat_courant != ETAT_Basic)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Basic
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	ODE_Enable(faux)


	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction| DYN_C_NeverDynamicFather | DYN_C_NeverDynamicHierarchy | DYN_C_HorizontalGrounds | DYN_C_SlipOnGroundEdge, none)
	DYN_GravitySet(cvector(0.0, 0.0, -30.0))

//	f_delay_until_last_ground_col = 0.0
//	PNJ_Shark_Virtual_Net_Init(faux, nobody)

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
o_eagle = LNK_ServeurGet(Ci_LNK_GRAB_EAGLE, mid_eagle_LNK, vrai, "PNJ_Shark_exec_LNK_Eagle", nofunc)
if (o_eagle)
	macro_change_etat("PNJ_Shark_ETAT_Grabbed")

// RIDED ? -----------------------------------------------------------------
o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
if ( o_Rided_Actor )
{
}
else
{
}

// COMPORTEMENT ===============================================================
tv_traction = Cv_NullVector

PNJ_Shark_Water_Col()

f_water_Z = MATH_FloatMax(f_water_Z, WTR_GetDif(OBJ_PosGet()).z)

if (OBJ_PosGet().z >  f_water_Z + COL_ZoneSizeGet(C_zdm_pied))
	ti_flag_in_water = faux
else
	ti_flag_in_water = vrai

if (ti_flag_in_water && MATH_AbsFloat(OBJ_PosGet().z -  f_water_Z) < COL_ZoneSizeGet(C_zdm_pied))
	ti_flag_surface = vrai
else
	ti_flag_surface = faux

tv_last_sight = OBJ_SightGet()
tv_last_banking = OBJ_BankingGet()

if (ti_flag_in_water)
{
	if ( ! i_flag_in_water )
	{
		i_flag_in_water = vrai
		SND_RequestPlay(Ci_SND_Water_In)
	}	

	OBJ_BankingGeneralSet(v_virtual_sight, OBJ_BankingGet())

	DYN_FlagsSet(none, DYN_C_GlobalFriction)
	DYN_FrictionVectorSet(cvector(6.0, 1.0, 6.0))
}
else
{
	if ( i_flag_in_water )
	{
		i_flag_in_water = faux
		SND_RequestPlay(Ci_SND_Water_Out)
	}	
	

	DYN_FlagsSet(DYN_C_GlobalFriction, none)

	if (f_no_ground_col_duration > 0.2)
		DYN_FrictionVectorSet(cvector(0.5, 0.5, 0.0))
	else
		DYN_FrictionVectorSet(cvector(4.0, 4.0, 0.0))

}

// COLLISION =====================================================================
if (COL_CollideType(COL_C_Ground))
{
	f_no_ground_col_duration = 0.0
	
	to_gao = COL_ObjectGet(COL_C_Ground)

	v_ground_pos = COL_CollidedPointGet(COL_C_Ground)

	v_ground_normal = COL_ZonePosGet(C_zdm_pied)
	v_ground_normal -= v_ground_pos
	DBG_RenderVector(v_ground_pos, v_ground_normal, color_jaune)
	MATH_VecSetNormalize(v_ground_normal)
	
	v_ray_pos = v_ground_pos
	v_ray_normal = COL_NormalGet(COL_C_Ground)
	DBG_RenderVector(v_ray_pos, v_ray_normal, color_bleu)

//	if (v_ground_normal.z < 0.0)
//		v_ground_normal *= -1.0
}
else
{
	f_no_ground_col_duration += TIME_GetDt()
	
	if (f_no_ground_col_duration > 0.2)
	{
		v_ray_pos = cvector(0.0, 0.0, -Cf_Infinit)
		v_ray_normal = Cv_VerticalVector
	}
}

// LECTURE JOY ============================================================================
tv_read_joy = Cv_NullVector
tv_joy_dir = v_virtual_sight

f_rot_torque = 0.0
tf_friction = f_rot_friction	

if (o_Rided_Actor)
{
	if (Proc_JOY_Boost_Pressed())
		tf_friction = f_rot_boost_friction

	if (COL_CollideType(COL_C_Wall) && ! (COL_GMAT_FlagsGet(COL_C_Wall) & Gmat_RM_Dont_Slide)) 
	{
		tf_friction = 6.0

		tv_Y = COL_ZonePosGet(C_zdm_pied)
		tv_Y -= COL_CollidedPointGet(COL_C_Wall)
		MATH_VecSetNormalize(tv_Y)
		
		if (MATH_VecDotProduct(OBJ_SightGet(), tv_Y) < 0.0)
			f_rot_torque = MATH_FloatSign(MATH_VecDotProduct(tv_Y, OBJ_HorizonGet()))
		else
			f_rot_torque = MATH_VecDotProduct(tv_Y, OBJ_HorizonGet())
			
		f_rot_torque *= 3.0
	}
	else if (glob_joynorm_get)
	{
		tv_joy_dir = glob_joyvector_get_normalized
		
		if (Proc_JOY_Boost_Pressed() || ! ti_flag_surface )
		{
			f_rot_torque = - IO_JoyGetMove().x * f_rot_boost_speed_max
		}
		else
		{
			if (MATH_VecDotProduct(tv_joy_dir, OBJ_SightGet()) < 0.0)
			{
				if (MATH_VecDotProduct(tv_joy_dir, OBJ_HorizonGet()) > 0.0)
					tv_joy_dir = OBJ_HorizonGet()
				else
					tv_joy_dir = -OBJ_HorizonGet()
			}
			else
			{
				tv_joy_dir *= glob_joynorm_get
			}

			f_rot_torque = MATH_VecDotProduct(tv_joy_dir, OBJ_HorizonGet())
			f_rot_torque *= f_rot_speed_max
		}
	}
}
else
{
	f_rot_torque = 3.0 
}


PNJ_Shark_Rotation_Speed_Compute(ti_flag_in_water, tf_friction)

tv_joy_dir = OBJ_SightGet()

if (o_Rided_Actor)
{
	if ( ! ti_flag_surface || (Proc_JOY_Boost_Pressed() && ti_flag_in_water) )
	{
		i_shark_status_flags &= ~Ci_Shark_Status_MarioControlMode

		tf_coef = IO_JoyGetMove().y
		if (MATH_AbsFloat(tf_coef) > 0.15)
		{
			tf_coef = MATH_FloatSign(tf_coef) * MATH_FloatMin(MATH_AbsFloat(tf_coef), 1.0)
			tf_coef -= MATH_FloatSign(tf_coef) * 0.15
			tf_coef /= 0.85
			
			if (creature_type == Ci_CreatureType_Requin)
				tv_joy_dir = MATH_VecRotate(tv_joy_dir, OBJ_HorizonGet(), tf_coef * 2.0 * TIME_GetDt() * f_rotX_boost_speed)
			else
				tv_joy_dir = MATH_VecRotate(tv_joy_dir, OBJ_HorizonGet(), tf_coef * Cf_2Pi * TIME_GetDt() * f_rotX_boost_speed)
		}
	}
	else
	{
		i_shark_status_flags |= Ci_Shark_Status_MarioControlMode

		tv_Y = tv_joy_dir
		tv_Y.z = 0.0
		tv_joy_dir = MATH_VecBlendRotate(tv_joy_dir, tv_Y, 2.0 * TIME_GetDt())
	}
}
else
{
	if (ti_flag_in_water)
	{
		if (OBJ_PosGet().z < f_water_Z - COL_ZoneSizeGet(C_zdm_pied))
		{
			tv_joy_dir = MATH_VecRotate(tv_joy_dir, OBJ_HorizonGet(), -1.0 * TIME_GetDt())
		}
		else
		{
			tv_Y = tv_joy_dir
			tv_Y.z = 0.0
			tv_joy_dir = MATH_VecBlendRotate(tv_joy_dir, tv_Y, 6.0 * TIME_GetDt())
		}
	}
}

// COMPORTEMENT SOL / AIR ================================================================
if (ti_flag_in_water)
{
	tf_speed = MATH_VecDotProduct(DYN_SpeedGetVector(), OBJ_SightGet())
	if (creature_type == Ci_CreatureType_Requin)
	{
		if (o_Rided_Actor && Proc_JOY_Boost_Pressed())
		{
			tf_speed = MATH_FloatLimit(tf_speed / f_speed_water_boost * 2.0, 0.0, 1.0)

			f_angle_oscillation += TIME_GetDt() * MATH_FloatBlend(2.5, 7.0, tf_speed)
		}
		else
		{
			tf_speed = MATH_FloatLimit(tf_speed / f_size_coef * 0.35, 0.0, 1.0)
			f_angle_oscillation += TIME_GetDt() * MATH_FloatBlend(0.0, 4.5, tf_speed)
		}
	}
	else
	{
		tf_speed = MATH_FloatLimit(tf_speed / f_size_coef * 0.35, 0.0, 1.0)
		f_angle_oscillation += TIME_GetDt() * MATH_FloatBlend(0.0, 8.0, tf_speed)
	}
	
	while(f_angle_oscillation > Cf_2Pi)
		f_angle_oscillation -= Cf_2Pi

	if (f_no_ground_col_duration > 0.2)
	{	
		tv_Y = tv_joy_dir
		MATH_VecSetHorzNormalize(tv_Y)

		if (creature_type == C_ID_Monture_Requin)
			tv_joy_dir = MATH_VecInCone(tv_joy_dir, tv_Y, Cf_PiBy3, 0)
		else
			tv_joy_dir = MATH_VecInCone(tv_joy_dir, tv_Y, 1.3, 0)
	
		OBJ_SightGeneralSet(tv_joy_dir, MATH_VecBlendRotate(tv_last_banking, Cv_VerticalVector, 4.0 * TIME_GetDt()))
	}
//	else if ( (o_Rided_Actor && Proc_JOY_Boost() ) || MATH_VecDotProduct(tv_joy_dir, v_ground_normal) >= 0.0)
	else if (  MATH_VecDotProduct(tv_joy_dir, v_ground_normal) >= 0.0)
	{
		OBJ_SightGeneralSet(tv_joy_dir, MATH_VecBlendRotate(tv_last_banking, Cv_VerticalVector, 4.0 * TIME_GetDt()))
	}
	else
	{
		if (v_ground_normal.z > 0.0)
			tv_Y = v_ground_normal
//			tv_Y = MATH_VecBlendRotate(v_ground_normal, -OBJ_SightGet(), 0.1)
		else
			tv_Y = -v_ground_normal
//			tv_Y = MATH_VecBlendRotate(-v_ground_normal, OBJ_SightGet(), 0.1)

		OBJ_BankingGeneralSet(tv_joy_dir, MATH_VecBlendRotate(tv_last_banking, tv_Y, 4.0 * TIME_GetDt()))
	}

	v_virtual_sight = OBJ_SightGet()

	switch(creature_type)
	{
		case Ci_CreatureType_Requin :
			if (o_Rided_Actor && Proc_JOY_Boost_Pressed())
			{
				tf_dot_product = MATH_VecDotProduct(tv_joy_dir, OBJ_HorizonGet())
			
				tf_attenuation_coef = MATH_AbsFloat(tf_dot_product)
				tf_attenuation_coef *= tf_attenuation_coef
				tf_attenuation_coef = 1.0 - tf_attenuation_coef
			
				tf_coef = MATH_Sin(f_angle_oscillation)
			
				if (MATH_FloatSign(tf_dot_product) == MATH_FloatSign(tf_coef))
					tf_coef *= tf_attenuation_coef
	
				to_cou = ANI_CanalObjectGet(Anim_Canal_Bassin)
				@to_cou OBJ_RestoreInitMatrix()
				@to_cou OBJ_RotateLocalZ(0.5 * tf_coef * MATH_FloatBlend(0.0, 0.5, tf_speed))
	
				@ao_modules[0] OBJ_RestoreInitMatrix()
				@ao_modules[0] OBJ_RotateLocalZ(tf_coef * MATH_FloatBlend(0.0, 0.5, tf_speed))
				break
			}
			else
			{
				to_cou = ANI_CanalObjectGet(Anim_Canal_Bassin)
				@to_cou OBJ_RestoreInitMatrix()
				@ao_modules[0] OBJ_RestoreInitMatrix()
			}
			
		case Ci_CreatureType_PoissonLumiere :
			tf_dot_product = MATH_VecDotProduct(tv_joy_dir, OBJ_HorizonGet())
		
			tf_attenuation_coef = MATH_AbsFloat(tf_dot_product)
			tf_attenuation_coef *= tf_attenuation_coef
			tf_attenuation_coef = 1.0 - tf_attenuation_coef
		
			tf_coef = MATH_Sin(f_angle_oscillation)
		
			if (MATH_FloatSign(tf_dot_product) == MATH_FloatSign(tf_coef))
				tf_coef *= tf_attenuation_coef
		
			if (creature_type == Ci_CreatureType_PoissonLumiere)
				OBJ_RotateLocalZ(tf_coef * 0.2)
			else
				OBJ_RotateLocalZ(tf_coef * 0.35)
			break
	}

//	to_cou = ANI_CanalObjectGet(Anim_Canal_Bassin)
//	@to_cou OBJ_RestoreInitMatrix()
//	@to_cou OBJ_RotateLocalZ(tf_coef * MATH_FloatBlend(0.0, 0.2, tf_speed))
//	@to_cou OBJ_PosSet(@to_cou OBJ_PosGet() - (OBJ_HorizonGet() * tf_coef * 1.0))

}
else
{
	f_angle_oscillation = 0.0
	
	if (f_no_ground_col_duration < 0.2)
	{	
		if (v_ground_normal.z > 0.0)
			OBJ_BankingGeneralSet(tv_joy_dir, MATH_VecBlendRotate(tv_last_banking, v_ground_normal, 4.0 * TIME_GetDt()))
		else
			OBJ_BankingGeneralSet(tv_joy_dir, MATH_VecBlendRotate(tv_last_banking, -v_ground_normal, 4.0 * TIME_GetDt()))
	}
	else if (MATH_VecSquareNorm(DYN_SpeedGetVector()))
	{
		tv_joy_dir = MATH_VecBlendRotate(OBJ_SightGet(), DYN_SpeedGetVector(), 4.0 * TIME_GetDt())
		OBJ_SightGeneralSet(tv_joy_dir, MATH_VecBlendRotate(tv_last_banking, Cv_VerticalVector, 4.0 * TIME_GetDt()))
	}
	
	v_virtual_sight = MATH_VecBlendRotate(v_virtual_sight, OBJ_SightGet(), 8.0 * TIME_GetDt())
}

if (ti_flag_in_water)
{
	if (o_Rided_Actor) 
	{
//		if (Proc_JOY_Boost() && MATH_VecDotProduct(@get_Kamera OBJ_PosGet() - OBJ_PosGet(), OBJ_SightGet()) < 0.0)
//			f_wanted_speed += MATH_FloatMin(f_speed_water_boost - f_wanted_speed, 4.0 * TIME_GetDt())
//		else if (f_wanted_speed > glob_joynorm_get * f_speed_water_joy)
//			f_wanted_speed -=  MATH_FloatMin(f_wanted_speed - (glob_joynorm_get * f_speed_water_joy), 8.0 * TIME_GetDt())
//		else
//			f_wanted_speed +=  MATH_FloatMin((glob_joynorm_get * f_speed_water_joy) - f_wanted_speed, 8.0 * TIME_GetDt())

//		if ( ! f_dash_duration && IO_ButtonJustPressed(RM_Joy_Ride_NMI_Action))
//			f_dash_duration = 2.0

//		if (f_dash_duration)
//		{
//			f_wanted_speed = f_speed_water_boost * 4.0
//		}
//		else
		if (Proc_JOY_Boost_Pressed())
		{
			if (MATH_VecDotProduct(@get_Kamera OBJ_PosGet() - OBJ_PosGet(), OBJ_SightGet()) < 0.0)
				f_wanted_speed = f_speed_water_boost
			else
				f_wanted_speed = f_speed_water_joy
		}
		else
		{
			f_wanted_speed = glob_joynorm_get * f_speed_water_joy
		}
	}
	else
	{
		f_wanted_speed =  f_speed_water_alone
	}

	tv_traction += OBJ_SightGet() * f_wanted_speed * DYN_FrictionVectorGet().y
}
else
{
	f_wanted_speed = 0.0

	if (f_no_ground_col_duration < 0.2 && o_Rided_Actor && Proc_JOY_Boost_JustPressed())
	{
		tv_impulsion = OBJ_SightGet() * 3.0 * f_size_coef
		tv_impulsion += OBJ_BankingGet() * 2.0 * f_size_coef
		DYN_SpeedSetVector(DYN_SpeedGetVector() + tv_impulsion)
	}
}

// ARCHIMEDE
tv_speed_limit = cvector(0.0, 0.0, f_water_Z - OBJ_PosGet().z)
tv_speed_limit.z += COL_ZoneSizeGet(C_zdm_pied)

tf_profondeur = tv_speed_limit.z

//if (MATH_AbsFloat(tv_speed_limit.z) < f_size_coef * 2.0 && MATH_AbsFloat(OBJ_SightGet().z) < 0.3)
//{
//	DBG_RenderVector(OBJ_PosGet(), tv_speed_limit, 0x80FF0000)
//
//	tv_speed_limit = 2.0 * tv_speed_limit / TIME_GetDt()	
//
////	DYN_LIB_Traction_To_Reach_Speed(vector tv_current_speed, vector tv_wanted_speed, vector tv_friction, vector tv_gravity, vector tv_traction, vector tv_stream, float tf_dt)
//	tv_archimede = DYN_LIB_Traction_To_Reach_Speed(DYN_SpeedGetVector(), tv_speed_limit - cvector(0.0, 0.0, DYN_SpeedGetVector().z), DYN_FrictionVectorGet(), DYN_GravityVectorGet(), tv_traction, DYN_StreamVectorGet(), 0.2)
//
//	tv_archimede.x = 0.0
//	tv_archimede.y = 0.0
//
//	tv_traction += tv_archimede
//}
//else
if (tf_profondeur > 0.0)
{
	tf_profondeur /= COL_ZoneSizeGet(C_zdm_pied) * 1.5
	tf_profondeur = MATH_FloatMin(tf_profondeur, 1.0)
	
	tv_archimede = cvector(0.0, 0.0, -tf_profondeur * DYN_GravityVectorGet().z)

	tv_traction += tv_archimede
}

tv_traction += PROC_ForceStreamGet(OBJ_PosGet(), ti_asp) * DYN_FrictionVectorGet().y
DYN_TractionSet(tv_traction)

//PNJ_Shark_Modules_Update(0, nobody)
//PNJ_Shark_Modules_Update2()

PNJ_Shark_Sound()

if (@o_main_actor PROC_RM_CHEAT_Mode())
{
	DYN_SpeedSetVector(Cv_NullVector)
	OBJ_BankingGeneralSet(OBJ_SightGet(), Cv_VerticalVector)
}

PNJ_Shark_Snake(0, 10.0, Cv_NullVector, 0.0, 0.5)

//to_cou = ANI_CanalObjectGet(Anim_Canal_Cou)
//@to_cou OBJ_BankingSet(MATH_VecBlendRotate(@to_cou OBJ_BankingGet(), v_virtual_sight, 0.5))
//
//to_head = ANI_CanalObjectGet(Anim_Canal_Tete)
//@to_head OBJ_BankingSet(MATH_VecBlendRotate(@to_head OBJ_BankingGet(), v_virtual_sight, 0.75))

//if (o_Rided_Actor)
//{
//	@get_Kamera OBJ_FlagInactiveSet(vrai)
//	
//	tv_pos = OBJ_PosGet()
//	tv_pos -= v_virtual_sight * 20.0
//	tv_pos += OBJ_BankingGet() * 8.0
//	
//	if (OBJ_PosGet().z > f_water_Z - 2.0)
//		tv_pos.z = MATH_FloatMax(tv_pos.z, f_water_Z + 4.0)
//	else //  if (OBJ_PosGet().z < f_water_Z - 3.0)
//		tv_pos.z = MATH_FloatMin(tv_pos.z, f_water_Z  - 3.0)
//	
//	tv_pos = OBJ_PosGet() + MATH_VecBlendRotate(@get_Kamera OBJ_PosGet() - OBJ_PosGet(), tv_pos - OBJ_PosGet(), 12.0 * TIME_GetDt())
//
//	@get_Kamera OBJ_PosSet(tv_pos)
//	
//	tv_pos = OBJ_PosGet()
//	tv_pos += v_virtual_sight * 10.0
//	
//	@get_Kamera OBJ_SightGeneralSet(tv_pos - @get_Kamera OBJ_PosGet(), Cv_VerticalVector)
//	
//	@get_Kamera VIEW_AssignObject(0)
//}
//else if (@get_Kamera OBJ_FlagsControlGet() & OBJ_C_ControlFlag_ForceInactive)
//{
//	@get_Kamera OBJ_FlagInactiveSet(faux)
//}

if ( i_monture_ID == C_ID_Monture_PoissonLumiere )
{
	@o_machoire OBJ_RestoreInitMatrix()
	@o_machoire OBJ_RotateLocalX( 0.2 * MATH_Sin(TIME_Get()*6.0))

	if (o_projectile_light)
	{
		to_head = ANI_CanalObjectGet(Anim_Canal_Tete)
		tv_pos = @to_head OBJ_PosGet()
		tv_pos += @to_head OBJ_BankingGet() * 1.3
		tv_pos -= @to_head OBJ_SightGet() * 1.1
		@o_projectile_light OBJ_PosSet(tv_pos) 
	}
}
