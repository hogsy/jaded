#include "PNJ_Volant_defines.var"

Include_UltraProcedure_Header

int				ti_i
int				ti_link_nb
int				ti_inactive_bunny_nb

vector		tv_X
vector		tv_Y
vector		tv_pos
vector		tv_current_link
vector		tv_next_link
vector		tv_cross_link
vector		tv_B_pos
vector		tv_C_pos
vector		tv_dest_sight
vector		tv_dest_banking
vector		tv_main_speed
vector		tv_temp

float			tf_wanted_traction
float			tf_coef
float			tf_speed_coef
float			tf_main_speed
float			tf_pond
float			tf_best_pond
float			tf_sign
float			tf_norm

object		to_last_wp	
object		to_next_wp
object		to_monture
object		to_bullet

network		tn_net

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}

if (i_etat_courant != ETAT_Shoot)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Shoot
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	DYN_Off()
	COL_ColSetActivationSet(none, all)
	COL_ColMapActivationSet(none, all)

	COL_UnCollidableAdd(o_main_actor)

//	if (o_bascule)
//	{
//		@o_bascule OBJ_PosSet(OBJ_PosGet())
//		@o_bascule OBJ_BankingGeneralSet(OBJ_SightGet(), OBJ_BankingGet())
//		@o_bascule COL_StartMatrixSet(OBJ_PosGet())
//		@o_bascule OBJ_HierarchySet(OBJ_Me())
//	}

	f_spline_coef = 0.0

	// NEXT NEXT WP
	if ( OBJ_LodVisGet() )
	{
		v_spline_A = OBJ_PosGet()
		v_spline_B = OBJ_SightGet()
	}
	else
	{
		tf_sign = MATH_FloatSign(MATH_RandFloat(-1.0, 1.0))
	
		tv_dest_sight = @get_camera OBJ_SightGet()
		tv_dest_sight.z = 0.0
		tf_norm = MATH_VecSquareNorm(tv_dest_sight)
		if (tf_norm)
			tv_dest_sight /= MATH_FloatSqrt(tf_norm)
		else
			tv_dest_sight = @o_main_actor OBJ_SightGet()
			
		tv_temp = MATH_VecCrossProduct(tv_dest_sight, Cv_VerticalVector)
		MATH_VecSetNormalize(tv_temp)
		
		tv_pos = @get_camera OBJ_PosGet()
		tv_pos += MATH_VecRotate(tv_dest_sight, Cv_VerticalVector, tf_sign * Cf_PiBy4) * 200.0
		tv_pos.z = MATH_FloatMax(tv_pos.z, @get_camera OBJ_PosGet().z + 200.0)
		COL_RayObject_Dist(tv_pos, -Cv_VerticalVector, 1000.0, all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
		tv_pos = COL_RayObject_PosGet()
		tv_pos.z = MATH_FloatMax(@o_main_actor OBJ_PosGet().z + 20.0, tv_pos.z + 20.0)
		OBJ_PosSet(tv_pos)
	
		v_spline_A = tv_pos
	
		tv_pos = tv_temp
		tv_pos *= - MATH_FloatSign(MATH_VecDotProduct(OBJ_PosGet() - @get_camera OBJ_PosGet(), tv_pos))
		OBJ_SightGeneralSet(tv_pos, Cv_VerticalVector)
		
		v_spline_B = OBJ_SightGet()
	}

	v_spline_B.z = 0.0	

	v_spline_C = @get_camera OBJ_SightGet()

	v_spline_D = @o_main_actor OBJ_PosGet()
	v_spline_D.z += 4.0

	f_shoot_duration = 0.0
	i_flag_fake_shoot = vrai

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
//EVENT_AddEventEnemy(OBJ_Me())
EVENT_AddEventLockCam(OBJ_Me(), 0, OBJ_BankingGet())

o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
if (  o_Rided_Actor )
{
	SND_RequestPlay(Ci_Aigle_SND_JumpOnMe)
	o_Rided_Actor_old = o_Rided_Actor
	macro_change_etat("PNJ_Volant_ETAT_Basic")
}

//v_spline_D = MATH_VecBlend(v_spline_D, @o_main_actor OBJ_PosGet() + cvector(0.0, 0.0, 4.0), 4.0 * TIME_GetDt())
v_spline_D = @o_main_actor OBJ_PosGet()
v_spline_D.z += 3.0

f_spline_segment_length = MATH_VecNorm(v_spline_D - v_spline_A)

tv_B_pos = v_spline_A
tv_B_pos += v_spline_B * (f_spline_segment_length * 0.33)

v_spline_C = MATH_VecBlendRotate(v_spline_C, @get_camera OBJ_SightGet(), 6.0 * TIME_GetDt())
//v_spline_C = @get_camera OBJ_SightGet()

tv_C_pos = v_spline_C
tv_C_pos.z = 0.0
tv_C_pos *= f_spline_segment_length * 0.66
tv_C_pos += v_spline_D

if (f_spline_speed >= 40.0)
	f_spline_speed -= MATH_FloatMin(f_spline_speed - 40.0, 20.0 * TIME_GetDt())
else
	f_spline_speed += MATH_FloatMin(40.0 - f_spline_speed, 20.0 * TIME_GetDt())

f_spline_coef += f_spline_speed * TIME_GetDt()
if (f_spline_coef > f_spline_segment_length)
	macro_change_etat("PNJ_Volant_ETAT_Balade")

MATH_LIB_Bezier_Display(30, v_spline_A, tv_B_pos, tv_C_pos, v_spline_D, color_blanc)
tv_pos = MATH_LIB_Bezier_Pos_Get(f_spline_coef / f_spline_segment_length, v_spline_A, tv_B_pos, tv_C_pos, v_spline_D, tv_dest_sight)

OBJ_PosSet(tv_pos)
OBJ_SightGeneralSet(tv_dest_sight, Cv_VerticalVector)

PNJ_Volant_Penching()

if ( ! i_flag_fake_shoot && f_spline_segment_length < 30.0)
	i_flag_fake_shoot = @o_main_actor PROC_RM_Dodge()

if ( ! f_shoot_duration && OBJ_LodVisGet() > 0.02)
{
	f_shoot_duration = 0.15

	to_bullet = @get_Bullet OBJ_Duplicate(OBJ_PosGet())

	to_monture = @o_main_actor PROC_RM_MontureGet()
	if (to_monture)
		tv_main_speed = @to_monture DYN_SpeedGetVector()
	else
		tv_main_speed = @o_main_actor DYN_SpeedGetVector()
	tv_main_speed *= MATH_VecNorm(@o_main_actor OBJ_PosGet() - OBJ_PosGet()) * 0.01
	tv_main_speed.z = 0.0

	tv_dest_sight = @o_main_actor OBJ_PosGet()
	tv_dest_sight.z += 1.0
	tv_dest_sight += tv_main_speed

	tf_coef = (1.0 - MATH_FloatLimit((f_spline_coef + 10.0 ) / f_spline_segment_length, 0.0, 1.0))

	tv_temp = OBJ_PosGet()
	tv_temp	-= tv_dest_sight
	tv_temp.z = 0.0
	tv_temp *= 0.5 * tf_coef
	tv_dest_sight += tv_temp

	if ( ! tf_coef )
		f_shoot_duration = 1000.0

	tv_dest_sight -= OBJ_PosGet()
	DBG_RenderVector(OBJ_PosGet(), tv_dest_sight, color_blanc)
	

//	tv_dest_sight -= MATH_VecDotProduct(tv_dest_sight, OBJ_HorizonGet()) * OBJ_HorizonGet()
	@to_bullet OBJ_SightGeneralSet(tv_dest_sight, OBJ_BankingGet())

	@get_RM_Bullet_path to_bullet i_GFX_color = 0x800080
	@get_RM_Bullet_path to_bullet f_GFX_taille = 1.0
	if (i_flag_fake_shoot)
		to_bullet.des_object1 = o_main_actor
	else
		to_bullet.des_object1 = OBJ_Me()
	to_bullet.des_vec1 = cvector(100.0, 0.0, 0.0) // Vitesse
	to_bullet.des_float1 = 10.0 // Dommage
	to_bullet.des_float2 = 300.0 // Portée
}
else
{
	f_shoot_duration -= MATH_FloatMin(f_shoot_duration, TIME_GetDt())
}


