#include "PNJ_Volant_defines.var"

int				ti_flag_soft_col
int				ti_i
int				ti_k
int				ti_asp
float			tf_flap_duration
float			tf_norm
float			tf_action_speed
float			tf_action_speed_coef
float			tf_angle

vector		tv_pos
vector		tv_X
vector		tv_Y
vector		tv_Z
vector		tv_joy_dir
vector		tv_traction
vector		tv_wing_traction
vector		tv_speed_limit
vector		tv_traction_limit
vector		tv_current_speed

object		to_rope_gao

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}


if (i_etat_courant != ETAT_Alone)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Alone
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	ODE_Enable(faux)

//	DYN_On()
//	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather | DYN_C_NeverDynamicHierarchy | DYN_C_HorizontalGrounds | DYN_C_SlipOnGroundEdge, none)
//	DYN_GravitySet(cvector(0.0, 0.0, -40.0))
//	DYN_FrictionVectorSet(cvector(0.2, 0.2, 0.2))

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction| DYN_C_NeverDynamicFather | DYN_C_NeverDynamicHierarchy | DYN_C_HorizontalGrounds | DYN_C_SlipOnGroundEdge, none)

	f_before_cri_delay = MATH_RandFloat(10.0, 20.0)

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
if ( ! i_flag_main_ground_col )
{
	if (@o_main_actor COL_CollideType(COL_C_Ground) && @o_main_actor COL_NormalGet(COL_C_Ground).z > 0.0)
	{
		i_flag_main_ground_col = vrai
		v_main_ground_pos = @o_main_actor COL_CollidedPointGet(COL_C_Ground)

		i_net_pos_index = MATH_Modulo(i_net_pos_index + 1, 100)
		av_net_pos[i_net_pos_index] = v_main_ground_pos
	}
	else if (MATH_VecSquareNorm(av_net_pos[i_net_pos_index] - @o_main_actor OBJ_PosGet()) > 225.0)
	{
		i_net_pos_index = MATH_Modulo(i_net_pos_index + 1, 100)
		av_net_pos[i_net_pos_index] = @o_main_actor OBJ_PosGet()
	}
}

// RIDED ? -----------------------------------------------------------------
o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
if (  o_Rided_Actor )
{
	SND_RequestPlay(Ci_Aigle_SND_JumpOnMe)
	o_Rided_Actor_old = o_Rided_Actor
	macro_change_etat("PNJ_Volant_ETAT_Basic")
}

// COMPORTEMENT ===============================================================
tv_traction = Cv_NullVector

// LECTURE JOY ============================================================================
f_rot_torque = 0.0
tv_joy_dir = OBJ_SightGet()

i_flag_boost = faux

#ifndef _FINAL_
if (AI_GetCurSystem() == Ci_CurSystem_Editeur)
{
	ti_i = i_net_my_pos_index
	while (ti_i != i_net_pos_index)
	{
		ti_k = MATH_Modulo(ti_i + 1, 100)
		DBG_RenderVector(av_net_pos[ti_i], av_net_pos[ti_k] - av_net_pos[ti_i], color_bleu)
		ti_i = ti_k
	}
}
#endif

while(i_net_my_pos_index != i_net_pos_index && MATH_VecSquareNorm(av_net_pos[i_net_my_pos_index] - OBJ_PosGet()) < 225.0)
	i_net_my_pos_index = MATH_Modulo(i_net_my_pos_index + 1, 100)

// COLLISION =====================================================================
if (COL_CollideType(COL_C_Ground) && COL_NormalGet(COL_C_Ground).z > 0.0)
{
	f_no_ground_col_duration = 0.0
	f_on_ground_duration += TIME_GetDt()

	v_col_ground_pos = COL_CollidedPointGet(COL_C_Ground)
	v_col_ground_normal = COL_NormalGet(COL_C_Ground)
}
else
{
	f_no_ground_col_duration += TIME_GetDt()
	f_on_ground_duration = 0.0
}

if (i_col_flag_on_ground && (f_take_off_duration > 1.0 || f_no_ground_col_duration > 1.0))
{
	i_col_flag_on_ground = faux
}
else if ( ! i_col_flag_on_ground )
{
	if ( ! f_no_ground_col_duration && i_net_my_pos_index == i_net_pos_index && tf_norm < 15.0 )
	{
		i_col_flag_on_ground = vrai
		i_flag_landing = vrai
	}
}

if (i_col_flag_on_ground && COL_LIB_Soft_Col(OBJ_Me(), tv_joy_dir))
{
	ti_flag_soft_col = vrai
	tv_joy_dir += OBJ_PosGet()
}
else
{
	ti_flag_soft_col = faux
	tv_joy_dir = av_net_pos[i_net_my_pos_index]
}

tv_joy_dir -= OBJ_PosGet()
tf_norm = MATH_VecNorm(tv_joy_dir)
if (tf_norm)
	tv_joy_dir /= tf_norm
else
	tv_joy_dir = OBJ_SightGet()

if (ti_flag_soft_col || ! i_flag_main_ground_col || i_net_my_pos_index != i_net_pos_index || tf_norm > 10.0)
	i_flag_boost = vrai

if (ACT_ActionGet() != Action_Atterrissage)
{
	if ( ! ti_flag_soft_col && i_flag_boost && i_col_flag_on_ground)
		f_take_off_duration += TIME_GetDt()
	else
		f_take_off_duration -= MATH_FloatMin(f_take_off_duration, TIME_GetDt())
		
	DBG_RenderSphere(OBJ_PosGet(), f_take_off_duration * 3.0, color_jaune)
}
else
{
	f_take_off_duration = 0.0
}

if (COL_CollideType(COL_C_Wall))
{
	tv_Y = COL_ZonePosGet(C_zdm_pied)
	tv_Y -= COL_CollidedPointGet(COL_C_Wall)
	MATH_VecSetNormalize(tv_Y)
	
	if (MATH_VecDotProduct(OBJ_SightGet(), tv_Y) < 0.0)
		f_rot_torque = MATH_FloatSign(MATH_VecDotProduct(tv_Y, OBJ_HorizonGet()))
	else
		f_rot_torque = MATH_VecDotProduct(tv_Y, OBJ_HorizonGet())
}
else if (i_flag_boost)
{
	if (MATH_VecDotProduct(OBJ_SightGet(), tv_joy_dir) < 0.0)
	{
		i_flag_boost = faux	
	
//		if (MATH_AbsFloat(f_rot_speed) > 1.5)
//			f_rot_torque = MATH_FloatSign(f_rot_speed)
//		else
			f_rot_torque = MATH_FloatSign(MATH_VecDotProduct(tv_joy_dir, OBJ_HorizonGet()))
	}
	else
	{
		if (tv_joy_dir.z < 0.0 && MATH_VecDotProduct(DYN_SpeedGetVector(), OBJ_SightGet()) > f_air_speed_R2 * 0.9)
			i_flag_boost = faux
	
		f_rot_torque = MATH_VecDotProduct(tv_joy_dir, OBJ_HorizonGet())
	}
}

f_rot_torque *= f_rot_speed_max * f_rot_friction


if (PNJ_Volant_Get_Rope_Gao(tv_Y))
{
	i_flag_boost = vrai

	tv_Y -= OBJ_PosGet()
	MATH_VecSetNormalize(tv_Y)
	
	if (MATH_VecDotProduct(tv_joy_dir, tv_Y) < 0.0)
	{
//		tv_Y = MATH_VecCrossProduct(tv_Y, OBJ_BankingGet())
//		tv_Y *= MATH_FloatSign(MATH_VecDotProduct(OBJ_SightGet(), tv_Y))
	
		tv_joy_dir = tv_Y
	
		f_rot_torque = MATH_VecDotProduct(tv_joy_dir, OBJ_HorizonGet())
		f_rot_torque *= f_rot_speed_max * f_rot_friction
		
		DBG_RenderVector(OBJ_PosGet(), tv_Y * 5.0, color_rouge)
	}
}

PNJ_Volant_Rotation_Speed_Compute()

if (MATH_VecDotProduct(tv_joy_dir, OBJ_SightGet()) < 0.0)
{
	tv_joy_dir *= -1.0
	tv_joy_dir.z -= tv_joy_dir.z * 2.0
//	tv_joy_dir.z = 0.0
}
tv_joy_dir -= MATH_VecDotProduct(tv_joy_dir, OBJ_HorizonGet()) * OBJ_HorizonGet()
tv_joy_dir = MATH_VecBlendRotate(OBJ_SightGet(), tv_joy_dir, 4.0 * TIME_GetDt())

if  ( i_col_flag_on_ground )
{
}
else
{
	if (MATH_VecDotProduct(DYN_SpeedGetVector(), OBJ_SightGet()) < 0.0)
	{
		tv_joy_dir = OBJ_SightGet()
		tv_joy_dir.z = -0.1
	
		tv_joy_dir = MATH_VecBlendRotate(OBJ_SightGet(), tv_joy_dir, 2.0 * TIME_GetDt())
	}
//	else if ( ! i_flag_boost  )
//	{
//		tv_joy_dir = OBJ_SightGet()
//		tv_joy_dir.z = -0.1
//	
//		tv_joy_dir = MATH_VecBlendRotate(OBJ_SightGet(), tv_joy_dir, 1.0 * TIME_GetDt())
//	}
}

// COMPORTEMENT SOL / AIR ================================================================
if (i_col_flag_on_ground && f_take_off_duration < 1.0)
{	
	PNJ_Volant_SND_AuSol()

	f_before_cri_delay -= TIME_GetDt()
	if (f_before_cri_delay <= 0.0)
	{
		SND_RequestPlayOnObjCanal(Ci_Aigle_SND_CriVol, Anim_Canal_Tete)
		f_before_cri_delay = MATH_RandFloat(10.0, 20.0)
	}

	DYN_FlagsSet(DYN_C_GlobalFriction, none)
	if (i_flag_landing || ACT_ActionGet() == Action_Atterrissage)
		DYN_FrictionVectorSet(cvector(4.0, 4.0, 0.0))	
	else
		DYN_FrictionVectorSet(cvector(12.0, 12.0, 0.0))	
	DYN_GravitySet(Cv_On_Ground_Gravity)

	tv_joy_dir = MATH_VecBlendRotate(OBJ_SightGet(), tv_joy_dir, 2.0 * TIME_GetDt())

	tv_X = MATH_VecCrossProduct(OBJ_SightGet(), Cv_VerticalVector)
	MATH_VecSetNormalize(tv_X)
	tv_Z = v_col_ground_normal
	tv_Z -= MATH_VecDotProduct(tv_Z, tv_X) * tv_X
	tv_Z = MATH_VecBlendRotate(OBJ_BankingGet(), tv_Z, 2.0 * TIME_GetDt())

	OBJ_BankingGeneralSet(tv_joy_dir, tv_Z)
}
else
{
	PNJ_Volant_SND_EnVol()
	
	DYN_FlagsSet(none, DYN_C_GlobalFriction)
	if (i_flag_boost)
		v_friction_air.y = 1.0
	else
		v_friction_air.y = 0.2
	DYN_FrictionVectorSet(v_friction_air)
	DYN_GravitySet(v_gravity)

	// BRIDAGE JOY DANS UN CONE DE 120° ===========================================================
	if (f_no_ground_col_duration > 0.2)
	{
		tv_Y = tv_joy_dir
		MATH_VecSetHorzNormalize(tv_Y)
		
		switch(creature_type)
		{
			case Ci_CreatureType_Aigle :
			case Ci_CreatureType_Soucoupe :
				tv_joy_dir = MATH_VecInCone(tv_joy_dir, tv_Y, Cf_PiBy3, 0)
				break
			case Ci_CreatureType_Bat :
				tv_joy_dir = MATH_VecInCone(tv_joy_dir, tv_Y, 1.3, 0)
				break
		}
		
		OBJ_SightGeneralSet(tv_joy_dir, Cv_VerticalVector)
	}
	else
	{
		DBG_RenderSphere(OBJ_PosGet(), 2.0, color_rouge)	
	
		tv_X = MATH_VecCrossProduct(OBJ_SightGet(), Cv_VerticalVector)
		MATH_VecSetNormalize(tv_X)
		tv_Z = v_col_ground_normal
		tv_Z -= OBJ_SightGet() * 0.5
		tv_Z -= MATH_VecDotProduct(tv_Z, tv_X) * tv_X
		DBG_RenderVector(OBJ_PosGet(), tv_Z * 10.0, color_rouge)
		tv_Z = MATH_VecBlendRotate(OBJ_BankingGet(), tv_Z, 6.0 * TIME_GetDt())
	
		OBJ_BankingGeneralSet(OBJ_SightGet(), tv_Z)
	}
}

PNJ_Volant_Penching()

PNJ_Volant_Select_Action(tv_traction)

tv_traction += PROC_ForceStreamGet(OBJ_PosGet(), ti_asp) * DYN_FrictionVectorGet().y
DYN_TractionSet(tv_traction)

if (o_grab_actor)
{
	COL_ColSetActivationSet(C_bit_zdm_recalagespecial, none)
	COL_SwapToSpecific(C_zdm_recalagespecial)
	
	tv_X.x = @o_grab_actor COL_ZoneSizeGet(C_zdm_pied)// * @o_grab_actor OBJ_ZoomGet()
	tv_X.y = tv_X.x
	tv_X.z = tv_X.x
	COL_ZoneSizeSet(C_zdm_recalagespecial, tv_X / OBJ_ZoomGet())
	COL_ZonePosSet(C_zdm_recalagespecial, MATH_VecGlobalToLocal(@o_grab_actor COL_ZonePosGet(C_zdm_pied) - OBJ_PosGet()) / OBJ_ZoomGet())
}
else
{
	COL_ColSetActivationSet(none, C_bit_zdm_recalagespecial)
}

if (@o_main_actor PROC_RM_CHEAT_Mode())
{
	DYN_SpeedSetVector(Cv_NullVector)
	OBJ_BankingGeneralSet(OBJ_SightGet(), Cv_VerticalVector)
}

