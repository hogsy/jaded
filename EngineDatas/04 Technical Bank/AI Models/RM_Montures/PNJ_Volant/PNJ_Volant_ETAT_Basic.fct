#include "PNJ_Volant_defines.var"

int				ti_flag_input_dir
int				ti_asp

float			tf_coef
float			tf_norm
float			tf_action_speed
float			tf_action_speed_coef

vector		tv_pos
vector		tv_X
vector		tv_Y
vector		tv_Z
vector		tv_joy_dir
vector		tv_traction
vector		tv_wing_traction
vector		tv_speed_limit
vector		tv_traction_limit
vector		tv_current_speed

object		to_rope_gao
object		to_ride_actor

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}


if (i_etat_courant != ETAT_Basic)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Basic
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	ODE_Enable(faux)

//	DYN_On()
//	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather | DYN_C_NeverDynamicHierarchy | DYN_C_HorizontalGrounds | DYN_C_SlipOnGroundEdge, none)
//	DYN_GravitySet(cvector(0.0, 0.0, -40.0))
//	DYN_FrictionVectorSet(cvector(0.2, 0.2, 0.2))

	COL_ColSetActivationSet(all, none)
	COL_ColMapActivationSet(all, none)


	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction| DYN_C_NeverDynamicFather | DYN_C_NeverDynamicHierarchy | DYN_C_HorizontalGrounds | DYN_C_SlipOnGroundEdge, none)

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================

// RIDED ? -----------------------------------------------------------------
to_ride_actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
if (  ! to_ride_actor &&  o_Rided_Actor )
{
	o_Rided_Actor = nobody

	i_flag_main_ground_col = faux

	i_net_pos_index = 0
	av_net_pos[i_net_pos_index] = OBJ_PosGet()

	i_net_pos_index = MATH_Modulo(i_net_pos_index + 1, 100)
	av_net_pos[i_net_pos_index] = @o_main_actor OBJ_PosGet()

	i_net_my_pos_index = 0

	o_grab_actor = LNK_ClientGet(Ci_LNK_GRAB_EAGLE, mid_grab_actor_LNK_ID, faux, "PNJ_Volant_exec_GRAB_Init", nofunc, "PNJ_Volant_exec_GRAB_Init")	
}

if (o_Rided_Actor_old != o_Rided_Actor && o_Rided_Actor)
	SND_RequestPlay(Ci_Aigle_SND_JumpOnMe)

o_Rided_Actor_old = o_Rided_Actor

switch(creature_type)
{
	case Ci_CreatureType_Aigle :
	case Ci_CreatureType_Bat :

		if ( ! i_flag_wait_ground_col && ! o_Rided_Actor )
			macro_change_etat("PNJ_Volant_ETAT_Alone")
			
		break
		
	case Ci_CreatureType_Soucoupe :
		if (o_start_wp && ! o_Rided_Actor )
			macro_change_etat("PNJ_Volant_ETAT_Balade")
	
		break
}

// COMPORTEMENT ===============================================================
tv_traction = Cv_NullVector

// COLLISION =====================================================================
if (COL_CollideType(COL_C_Ground) && COL_NormalGet(COL_C_Ground).z > 0.0)
{
	if (i_flag_wait_ground_col)
	{
		i_flag_wait_ground_col = faux

		i_flag_main_ground_col = vrai
		v_main_ground_pos = OBJ_PosGet()
	}

	f_no_ground_col_duration = 0.0
	f_on_ground_duration += TIME_GetDt()

	v_col_ground_pos = COL_CollidedPointGet(COL_C_Ground)
	v_col_ground_normal = COL_NormalGet(COL_C_Ground)
}
else
{
	f_no_ground_col_duration += TIME_GetDt()
	f_on_ground_duration = 0.0
}

if (i_flag_wait_ground_col)
{
	i_col_flag_on_ground = vrai
}
else if (i_col_flag_on_ground && (f_take_off_duration > 0.5 || f_no_ground_col_duration > 1.0))
{
	i_col_flag_on_ground = faux
}
else if ( ! i_col_flag_on_ground )
{
	if (o_Rided_Actor && Proc_JOY_Boost_Pressed())
	{
//		if (f_on_ground_duration > 0.8)
//		{
//			i_col_flag_on_ground = vrai
//			i_flag_landing = vrai
//		}
	}
	else if ( ! f_no_ground_col_duration )
	{
		i_col_flag_on_ground = vrai
		i_flag_landing = vrai
	}
}

// LECTURE JOY ============================================================================
f_rot_torque = 0.0
ti_flag_input_dir = faux
tv_joy_dir = OBJ_SightGet()

if (o_Rided_Actor == o_main_actor)
{
	switch(creature_type)
	{
		case 	Ci_CreatureType_Soucoupe :
			f_take_off_duration = 1.0
			break
	
		default:	
			if (Proc_JOY_Boost_Pressed())
			{
				if (i_col_flag_on_ground)
					f_take_off_duration += TIME_GetDt()
				else
					f_take_off_duration -= MATH_FloatMin(f_take_off_duration, TIME_GetDt())
					
				DBG_RenderSphere(OBJ_PosGet(), f_take_off_duration * 3.0, color_jaune)
			}
			else
			{
				f_take_off_duration = 0.0
			}
			break
	}

	if (COL_CollideType(COL_C_Wall) && ! (COL_GMAT_FlagsGet(COL_C_Wall) & Gmat_RM_Dont_Slide)) 
	{
		tv_Y = COL_ZonePosGet(C_zdm_pied)
		tv_Y -= COL_CollidedPointGet(COL_C_Wall)
		MATH_VecSetNormalize(tv_Y)
		
		if (MATH_VecDotProduct(OBJ_SightGet(), tv_Y) < 0.0)
			f_rot_torque = MATH_FloatSign(MATH_VecDotProduct(tv_Y, OBJ_HorizonGet()))
		else
			f_rot_torque = MATH_VecDotProduct(tv_Y, OBJ_HorizonGet())
			
		f_rot_torque *= f_rot_speed_max * f_rot_friction
	}
	else if (glob_joynorm_get)
	{
		ti_flag_input_dir = vrai	

//		if (i_col_flag_on_ground)
//			f_take_off_duration += 0.5 * TIME_GetDt()
//		else
//			f_take_off_duration -= MATH_FloatMin(f_take_off_duration, TIME_GetDt())
	
		tv_joy_dir = glob_joyvector_get_normalized
	
		f_rot_torque = MATH_VecDotProduct(glob_joynorm_get * tv_joy_dir, OBJ_HorizonGet())
	
		switch(creature_type)
		{
			case Ci_CreatureType_Bat :
				f_rot_torque *= f_rot_speed_max * f_rot_friction
				break
				
			case Ci_CreatureType_Aigle :
			case Ci_CreatureType_Soucoupe :
				if (Proc_JOY_Boost_Pressed())
				{
					f_rot_speed_max = 2.0
					f_rot_friction = 6.0
				}
				else
				{
					f_rot_speed_max = 4.0
					f_rot_friction = 3.0
				}
				f_rot_torque *= f_rot_speed_max * f_rot_friction
				break
		}
	}

	switch(creature_type)
	{
		case Ci_CreatureType_Bat :
		case Ci_CreatureType_Aigle :
			if (ACT_ActionGet() == Action_Atterrissage)
				f_take_off_duration = 0.0
			break
	}
}

if (PNJ_Volant_Get_Rope_Gao(tv_Y))
{
	ti_flag_input_dir = vrai

	tv_Y -= OBJ_PosGet()
	MATH_VecSetNormalize(tv_Y)
	
	if (MATH_VecDotProduct(tv_joy_dir, tv_Y) < 0.0)
	{
//		tv_Y = MATH_VecCrossProduct(tv_Y, OBJ_BankingGet())
//		tv_Y *= MATH_FloatSign(MATH_VecDotProduct(OBJ_SightGet(), tv_Y))
	
		tv_joy_dir = tv_Y
	
		f_rot_torque = MATH_VecDotProduct(tv_joy_dir, OBJ_HorizonGet())
		f_rot_torque *= f_rot_speed_max * f_rot_friction

		DBG_RenderVector(OBJ_PosGet(), tv_Y * 5.0, color_rouge)
	}
}

PNJ_Volant_Rotation_Speed_Compute()

if (i_col_flag_on_ground)	
{
	if (f_take_off_duration > 0.5)
		tv_joy_dir = MATH_VecRotate(OBJ_SightGet(), OBJ_HorizonGet(), -Cf_PiBy4 * TIME_GetDt())
	else
		tv_joy_dir = OBJ_SightGet()
}
else
{
	switch(creature_type)
	{
		case Ci_CreatureType_Aigle :
		case Ci_CreatureType_Soucoupe :
			tv_joy_dir = MATH_VecRotate(OBJ_SightGet(), OBJ_HorizonGet(), IO_JoyGetMove().y * Cf_PiBy3 * TIME_GetDt())
			break
		case Ci_CreatureType_Bat :
			tv_joy_dir = MATH_VecRotate(OBJ_SightGet(), OBJ_HorizonGet(), IO_JoyGetMove().y * Cf_PiBy2 * TIME_GetDt())
			break
	}

	if (MATH_VecDotProduct(DYN_SpeedGetVector(), OBJ_SightGet()) < 0.0)
	{
		tv_joy_dir = OBJ_SightGet()
		tv_joy_dir.z = -0.1
	
		tv_joy_dir = MATH_VecBlendRotate(OBJ_SightGet(), tv_joy_dir, 2.0 * TIME_GetDt())
	}
	else if ( ! ti_flag_input_dir && ! f_take_off_duration )
	{
		tv_joy_dir = OBJ_SightGet()
		tv_joy_dir.z = -0.1
	
		tv_joy_dir = MATH_VecBlendRotate(OBJ_SightGet(), tv_joy_dir, 1.0 * TIME_GetDt())
	}
}

// COMPORTEMENT SOL / AIR ================================================================
if (i_col_flag_on_ground && f_take_off_duration < 1.0)
{	
	PNJ_Volant_SND_AuSol()

	DYN_FlagsSet(DYN_C_GlobalFriction, none)

	switch(creature_type)
	{
		case Ci_CreatureType_Soucoupe :
			DYN_FrictionVectorSet(cvector(4.0, 4.0, 0.0))	
			break
			
		default:
			if (i_flag_landing || ACT_ActionGet() == Action_Atterrissage)
				DYN_FrictionVectorSet(cvector(4.0, 4.0, 0.0))	
			else
				DYN_FrictionVectorSet(cvector(12.0, 12.0, 0.0))	
			break
	}

	DYN_GravitySet(Cv_On_Ground_Gravity)

	tv_joy_dir = MATH_VecBlendRotate(OBJ_SightGet(), tv_joy_dir, 2.0 * TIME_GetDt())

	tv_X = MATH_VecCrossProduct(OBJ_SightGet(), Cv_VerticalVector)
	MATH_VecSetNormalize(tv_X)
	tv_Z = v_col_ground_normal
	tv_Z -= MATH_VecDotProduct(tv_Z, tv_X) * tv_X
	tv_Z = MATH_VecBlendRotate(OBJ_BankingGet(), tv_Z, 2.0 * TIME_GetDt())

	OBJ_BankingGeneralSet(tv_joy_dir, tv_Z)
}
else
{
	PNJ_Volant_SND_EnVol()
	
	DYN_FlagsSet(none, DYN_C_GlobalFriction)
	if (Proc_JOY_Boost_Pressed())
		DYN_FrictionVectorSet(cvector(v_friction_air.x, 1.0, v_friction_air.z))
	else
		DYN_FrictionVectorSet(v_friction_air)
	DYN_GravitySet(v_gravity)

	// BRIDAGE JOY DANS UN CONE DE 120° ===========================================================
	if (f_no_ground_col_duration > 0.2)
	{
		tv_Y = tv_joy_dir
		MATH_VecSetHorzNormalize(tv_Y)
		
		switch(creature_type)
		{
			case Ci_CreatureType_Aigle :
			case Ci_CreatureType_Soucoupe :
				tv_joy_dir = MATH_VecInCone(tv_joy_dir, tv_Y, Cf_PiBy3, 0)
				break

			case Ci_CreatureType_Bat :
				tv_joy_dir = MATH_VecInCone(tv_joy_dir, tv_Y, 1.3, 0)
				break
		}
		
		OBJ_SightGeneralSet(tv_joy_dir, Cv_VerticalVector)
	}
	else
	{
		DBG_RenderSphere(OBJ_PosGet(), 2.0, color_rouge)	
	
		tv_X = MATH_VecCrossProduct(OBJ_SightGet(), Cv_VerticalVector)
		MATH_VecSetNormalize(tv_X)
		tv_Z = v_col_ground_normal

//		// Pour se décoller du sol automatiquement
		tv_Z -= OBJ_SightGet() * 0.3
//		// Pour se décoller du sol automatiquement

		tv_Z -= MATH_VecDotProduct(tv_Z, tv_X) * tv_X
		DBG_RenderVector(OBJ_PosGet(), tv_Z * 10.0, color_rouge)
		tv_Z = MATH_VecBlendRotate(OBJ_BankingGet(), tv_Z, 6.0 * TIME_GetDt())
	
		OBJ_BankingGeneralSet(OBJ_SightGet(), tv_Z)
	}
}

PNJ_Volant_Penching()

PNJ_Volant_Select_Action(tv_traction)

tv_traction += PROC_ForceStreamGet(OBJ_PosGet(), ti_asp) * DYN_FrictionVectorGet().y

if (creature_type == Ci_CreatureType_Soucoupe)
{
	tv_Y = OBJ_PosGet()
	tv_Y += OBJ_SightGet() * 10.0
	tv_Y.z = 0.0
	DBG_RenderVector(tv_Y, cvector(0.0, 0.0, 75.0), color_blanc)	

	tf_coef = OBJ_PosGet().z - 50.0
	tf_coef /= 25.0
	tf_coef *= tf_coef * tf_coef

	tv_speed_limit= DYN_SpeedGetVector()
	tv_speed_limit.z = MATH_FloatBlend(tv_speed_limit.z, MATH_FloatMin(tv_speed_limit.z, 0.0), tf_coef)
	DYN_SpeedSetVector(tv_speed_limit)
	
	tv_Y = OBJ_SightGet()
	tv_Y.z = MATH_FloatBlend(tv_Y.z, MATH_FloatMin(tv_Y.z, 0.0), tf_coef)
	OBJ_SightGeneralSet(tv_Y, OBJ_BankingGet())

	tv_traction.z = MATH_FloatBlend(tv_traction.z, MATH_FloatMin(tv_traction.z, 0.0), tf_coef)
}

DYN_TractionSet(tv_traction)

if (o_Rided_Actor == o_main_actor && creature_type == Ci_CreatureType_Aigle)
{
	if (o_grab_actor)
	{
		if (IO_ButtonJustPressed(RM_Monture_Button_Action1) || IO_ButtonJustPressed(RM_Monture_Button_Action2))
			o_grab_actor = LNK_ClientGet(Ci_LNK_GRAB_EAGLE, mid_grab_actor_LNK_ID, faux, "PNJ_Volant_exec_GRAB_Init", nofunc, "PNJ_Volant_exec_GRAB_Init")
		else
			o_grab_actor = LNK_ThisClientGet(o_grab_actor, Ci_LNK_GRAB_EAGLE, mid_grab_actor_LNK_ID, vrai, "PNJ_Volant_exec_GRAB_Init", nofunc, "PNJ_Volant_exec_GRAB_Init")
	}
	else if (ACT_ActionGet() == Action_Attaque)
	{	
		o_grab_actor = LNK_ClientGet(Ci_LNK_GRAB_EAGLE, mid_grab_actor_LNK_ID, vrai, "PNJ_Volant_exec_GRAB_Init", nofunc, "PNJ_Volant_exec_GRAB_Init")
		if (o_grab_actor)
		{
			f_grab_side_sign = MATH_FloatSign(MATH_VecDotProduct(@o_grab_actor OBJ_SightGet(), OBJ_HorizonGet()))
		}
	}
}

if (o_grab_actor)
{
	COL_ColSetActivationSet(C_bit_zdm_recalagespecial, none)
	COL_SwapToSpecific(C_zdm_recalagespecial)
	
	tv_X.x = @o_grab_actor COL_ZoneSizeGet(C_zdm_pied)// * @o_grab_actor OBJ_ZoomGet()
	tv_X.y = tv_X.x
	tv_X.z = tv_X.x
	COL_ZoneSizeSet(C_zdm_recalagespecial, tv_X / OBJ_ZoomGet())
	COL_ZonePosSet(C_zdm_recalagespecial, MATH_VecGlobalToLocal(@o_grab_actor COL_ZonePosGet(C_zdm_pied) - OBJ_PosGet()) / OBJ_ZoomGet())
}
else
{
	COL_ColSetActivationSet(none, C_bit_zdm_recalagespecial)
}

if (@o_main_actor PROC_RM_CHEAT_Mode())
{
	DYN_SpeedSetVector(Cv_NullVector)
	OBJ_BankingGeneralSet(OBJ_SightGet(), Cv_VerticalVector)
}

if (0)
{
	if (o_Rided_Actor)
	{
		@get_Kamera OBJ_FlagInactiveSet(vrai)
		
		tv_pos = OBJ_PosGet()
		tv_pos -= OBJ_SightGet() * 20.0
		tv_pos += OBJ_BankingGet() * 8.0
		
		tv_pos = OBJ_PosGet() + MATH_VecBlendRotate(@get_Kamera OBJ_PosGet() - OBJ_PosGet(), tv_pos - OBJ_PosGet(), 6.0 * TIME_GetDt())
	
		@get_Kamera OBJ_PosSet(tv_pos)
		
		tv_pos = OBJ_PosGet()
		tv_pos += OBJ_SightGet() * 10.0
		
		@get_Kamera OBJ_SightGeneralSet(tv_pos - @get_Kamera OBJ_PosGet(), Cv_VerticalVector)
		
		@get_Kamera VIEW_AssignObject(0)
	}
	else if (@get_Kamera OBJ_FlagsControlGet() & OBJ_C_ControlFlag_ForceInactive)
	{
		@get_Kamera OBJ_FlagInactiveSet(faux)
	}
}