#include "PNJ_Volant_defines.var"

Include_UltraProcedure_Header

int				ti_i
int				ti_link_nb
int				ti_inactive_bunny_nb

vector		tv_X
vector		tv_Y
vector		tv_pos
vector		tv_current_link
vector		tv_next_link
vector		tv_cross_link
vector		tv_B_pos
vector		tv_C_pos
vector		tv_dest_sight
vector		tv_dest_banking
vector		tv_main_speed

float			tf_wanted_traction
float			tf_coef
float			tf_speed_coef
float			tf_main_speed
float			tf_pond
float			tf_best_pond

object		to_last_wp	
object		to_next_wp
object		to_monture

network		tn_net

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}

if (i_etat_courant != ETAT_Balade)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Balade
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	DYN_Off()
	COL_ColSetActivationSet(none, all)
	COL_ColMapActivationSet(none, all)

	COL_UnCollidableAdd(o_main_actor)

//	if (o_bascule)
//	{
//		@o_bascule OBJ_PosSet(OBJ_PosGet())
//		@o_bascule OBJ_BankingGeneralSet(OBJ_SightGet(), OBJ_BankingGet())
//		@o_bascule COL_StartMatrixSet(OBJ_PosGet())
//		@o_bascule OBJ_HierarchySet(OBJ_Me())
//	}

	f_spline_coef = 0.0

	// NEXT NEXT WP
	v_spline_A = OBJ_PosGet()
	v_spline_D = @o_start_wp OBJ_PosGet()

	f_spline_segment_length = MATH_VecNorm(v_spline_D - v_spline_A)

	@o_start_wp OBJ_SightSet(@o_start_wp OBJ_PosGet() - OBJ_PosGet())
	to_next_wp = @o_start_wp WAY_NetNextWP(@o_start_wp WAY_NetOfObj(), o_start_wp, NetNextWP_Mode_axe_de_visee, 0)

	o_spline_next_wp = to_next_wp

	v_spline_B = OBJ_SightGet()

	tv_current_link = v_spline_D - v_spline_A
	tv_current_link /= f_spline_segment_length
	tv_next_link = MATH_VecNormalize(@to_next_wp OBJ_PosGet() - v_spline_D)
	tv_cross_link = MATH_VecCrossProduct(-tv_current_link, tv_next_link)
	
	v_spline_C = MATH_VecBlendRotate(-tv_current_link, tv_next_link, 0.5)
	v_spline_C = MATH_VecCrossProduct(v_spline_C, tv_cross_link)
	v_spline_C.z = 0.0
	MATH_VecSetNormalize(v_spline_C)

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
//EVENT_AddEventEnemy(OBJ_Me())
EVENT_AddEventLockCam(OBJ_Me(), 0, OBJ_BankingGet())

o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
if (  o_Rided_Actor )
{
	SND_RequestPlay(Ci_Aigle_SND_JumpOnMe)
	o_Rided_Actor_old = o_Rided_Actor
	macro_change_etat("PNJ_Volant_ETAT_Basic")
}

if (IO_KeyJustPressed(VK_SPACE))
	macro_change_etat("PNJ_Volant_ETAT_Shoot")

//tf_wanted_traction = f_speed_max

if (v_spline_D.z > v_spline_A.z)
	v_spline_A.z += MATH_FloatMin(v_spline_D.z - v_spline_A.z, 5.0 * TIME_GetDt())

if (f_spline_speed >= 60.0)
	f_spline_speed -= MATH_FloatMin(f_spline_speed - 60.0, 20.0 * TIME_GetDt())
else
	f_spline_speed += MATH_FloatMin(60.0 - f_spline_speed, 20.0 * TIME_GetDt())

f_spline_coef += f_spline_speed * TIME_GetDt()

while (f_spline_coef > f_spline_segment_length)
{
	f_spline_coef -= f_spline_segment_length

	v_spline_A = @o_start_wp OBJ_PosGet()

	to_last_wp	= o_start_wp

	// NEXT WP
	o_start_wp = o_spline_next_wp // WAY_NetNextWP(@o_start_wp WAY_NetOfObj(), o_start_wp, NetNextWP_Mode_aleatoire, 0)
	v_spline_D = @o_start_wp OBJ_PosGet()
	f_spline_segment_length = MATH_VecNorm(v_spline_D - v_spline_A)

	// NEXT NEXT WP
	@o_start_wp OBJ_SightSet(@o_start_wp OBJ_PosGet() - OBJ_PosGet())

	tf_best_pond = -1.0

	ti_link_nb = WAY_GetNumLinks(@o_start_wp WAY_NetOfObj(), o_start_wp)
	for (ti_i = 0; ti_i < ti_link_nb; ti_i++)
	{
		to_next_wp = @o_start_wp WAY_NetNextWP(@o_start_wp WAY_NetOfObj(), o_start_wp, NetNextWP_Mode_choix_de_lindice, ti_i)
		if (to_next_wp == to_last_wp)
			continue
	
		tf_pond = MATH_RandFloat(0.0, 1.0)
		if (tf_pond > tf_best_pond)
		{
			o_spline_next_wp = to_next_wp
			tf_best_pond = tf_pond
		}
	}
	
	v_spline_B = -v_spline_C

	tv_current_link = v_spline_D - v_spline_A
	tv_current_link /= f_spline_segment_length
	tv_next_link = MATH_VecNormalize(@o_spline_next_wp OBJ_PosGet() - v_spline_D)
	tv_cross_link = MATH_VecCrossProduct(-tv_current_link, tv_next_link)
	
	v_spline_C = MATH_VecBlendRotate(-tv_current_link, tv_next_link, 0.5)
	v_spline_C = MATH_VecCrossProduct(v_spline_C, tv_cross_link)
	MATH_VecSetNormalize(v_spline_C)
}


tv_B_pos = v_spline_A
tv_B_pos += v_spline_B * f_spline_segment_length * 0.33

tv_C_pos = v_spline_D
tv_C_pos += v_spline_C * f_spline_segment_length * 0.33

//DBG_RenderVector(v_spline_A, v_spline_B * f_spline_segment_length * 0.33, color_rouge)
//DBG_RenderVector(v_spline_D, v_spline_C * f_spline_segment_length * 0.33, color_vert)
MATH_LIB_Bezier_Display(30, v_spline_A, tv_B_pos, tv_C_pos, v_spline_D, color_blanc)
tv_pos = MATH_LIB_Bezier_Pos_Get(f_spline_coef / f_spline_segment_length, v_spline_A, tv_B_pos, tv_C_pos, v_spline_D, tv_dest_sight)

OBJ_PosSet(tv_pos)
OBJ_SightGeneralSet(tv_dest_sight, Cv_VerticalVector)

PNJ_Volant_Penching()