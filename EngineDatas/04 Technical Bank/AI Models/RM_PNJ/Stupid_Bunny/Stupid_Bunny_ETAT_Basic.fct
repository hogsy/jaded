#include "Stupid_Bunny_defines.var"

Include_UltraProcedure_Header

int			ti_i
int			ti_flag_soft_col
int			ti_flag_move
int			ti_flag_col
int			ti_flag_recompute_way
int			ti_occluder
int			ti_flag_force_recompute

float		taf_fake[1]
float		tf_hor_speed
float		tf_action_speed

vector	tv_pos
vector	tv_dest_pos
vector	tv_dest_sight
vector	tv_occluderNextPos
vector	tv_speed
vector	tv_action_offset
vector	tv_soft_col_pos

object	to_next_wp
object	to_occluderJump
object	tao_fake[1]
object	to_head
object	to_dest_gao
object	to_col_gao

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}

if (i_etat_courant != ETAT_Basic)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Basic
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	COL_SwapToSpecific(C_zdm_pied)
	COL_ZoneSizeSet(C_zdm_pied, cvector(Cf_zdm_size, Cf_zdm_size, Cf_zdm_size))
	COL_ZonePosSet(C_zdm_pied, cvector(0.0, 0.0, COL_ZoneSizeGet(C_zdm_pied)))

	DYN_On()
	DYN_FlagsSet(DYN_C_BasicForces | DYN_C_VectorFriction | DYN_C_GlobalFriction | DYN_C_NeverDynamicFather | DYN_C_NeverDynamicHierarchy | DYN_C_HorizontalGrounds | DYN_C_SlipOnGroundEdge, none)
	DYN_FrictionVectorSet(cvector(12.0, 12.0, 0.0))
	DYN_GravitySet(cvector(0.0, 0.0, -40.0))

	ACT_ActionSet(0)

	f_hide_duration = 0.0
	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================

DYN_StreamSet(Cv_NullVector)
DYN_TractionSet(Cv_NullVector)
DYN_FlagsSet(DYN_C_IgnoreStream, none)

//if (IO_KeyJustPressed(VK_CONTROL))
//	i_stupid_rabbit_mode = MATH_Modulo(i_stupid_rabbit_mode + 1, 2)

ti_flag_force_recompute = faux
if (IO_ButtonJustPressed(JoyPSX_Button_triangle))
{
	ti_flag_force_recompute = vrai
	i_stupid_rabbit_mode = MATH_Modulo(i_stupid_rabbit_mode + 1, 2)
}

// POSITION CIBLE
if (i_stupid_rabbit_mode)
{
	// ON VA VERS LE MAIN ACTOR
	tv_dest_pos = @o_main_actor OBJ_PosGet()
	to_dest_gao = o_main_actor
}
else
{
	// ON FUIT LE DODGE ACTOR	
	Stupid_Bunny_Add_Spot()	

	if  ( f_delay_before_compute <= 0.0 )
	{
			if (@get_global PATH_LIB_dodge_current_client_ID > i_dodge_client_ID)
			{
				i_dodge_client_ID = @get_global PATH_LIB_dodge_new_client_ID
				@get_global PATH_LIB_dodge_new_client_ID++
			}
	
		if (@get_global PATH_LIB_dodge_current_client_ID == i_dodge_client_ID)
		{
			PATH_LIB_Avoid_Visibility(	@o_dodge_actor OBJ_PosGet(),
													o_dodge_actor,
													o_dodge_actor_wp,
													v_hide_pos,
													o_dest_wp,
													n_net,
													i_net_wp_nb,
													&ao_net_wp[0], 
													1.5,
													OBJ_PosGet(),
													o_current_wp,
													all,
													"Stupid_Bunny_exec_check_hide_pos")
													
//			f_delay_before_compute = 1.0
		}
	}
	else
	{
		f_delay_before_compute -= TIME_GetDt()
	}
	
	tv_dest_pos = v_hide_pos
	to_dest_gao = nobody
}

//if (i_stupid_rabbit_mode)
//{
	tv_dest_pos = PATH_LIB_Get_Next_Pos(	OBJ_PosGet(),		// POSITION DE DEPART
																OBJ_Me(),
																o_current_wp,			// WP DE DEPART (BYREF)
																tv_dest_pos,			// POSITION D'ARRIVEE
																to_dest_gao,
																o_dest_wp,				// WP D'ARRIVEE (BYREF)
																2.0,						// EXTRUSION (LA TAILLE DE L'ACTEUR)
																n_net,					// LE RESEAU UTILISE
																i_net_wp_nb,			// LE NOMBRE DE POINTS DU RESEAU
																&ao_net_wp[0],		// LES WPS DU RESEAU
																i_way_wp_nb,			// LE NOMBRE DE WP DU CHEMIN (BYREF)
																&ao_way_wp[0],		// LES WPS DU CHEMIN (BYREF)
																ti_flag_force_recompute,						// FORCE LE RECALCUL DU CHEMIN (VRAI / FAUX)
																i_client_ID)
//}
//else
//{
//	tv_dest_pos = PATH_LIB_Flee_Get_Next_Pos(OBJ_PosGet(),
//																OBJ_Me(),
//																o_current_wp,
//																@o_main_actor OBJ_PosGet(),
//																8.0,
//																2.0,
//																n_net,
//																i_net_wp_nb,
//																&ao_net_wp[0],		// LES WPS DU RESEAU
//																i_way_wp_nb,			// LE NOMBRE DE WP DU CHEMIN (BYREF)
//																&ao_way_wp[0])		// LES WPS DU CHEMIN (BYREF)
//}

ti_flag_soft_col = COL_LIB_Soft_Col(OBJ_Me(), tv_soft_col_pos)
if (ti_flag_soft_col)
{
	tv_dest_pos = tv_soft_col_pos
	tv_dest_pos += OBJ_PosGet()
}

if (i_way_wp_nb || ti_flag_soft_col)
{
	DBG_RenderVector(OBJ_PosGet() + Cv_VerticalVector, tv_dest_pos - OBJ_PosGet(), color_blanc)	

	WAY_LIB_Fill_Territory_List_With_Gao(i_way_wp_nb, &ao_way_wp[0])

	// GESTION DES OCCLUDERS =============================================================
	ti_occluder = WAY_LIB_Test_Occluder(OBJ_PosGet() + Cv_VerticalVector, 
										OBJ_SightGet(), 
										0.5,
										tv_dest_pos, 
										o_current_wp.des_int2,
										tv_occluderNextPos,
										to_occluderJump, 
										&tao_fake[0],
										&taf_fake[0],
										0,
										0)

	@get_global WAY_LIB_Territory_List_Size = 0
										
	if (ti_occluder)
		tv_dest_pos = tv_occluderNextPos
	
	// GESTION DU SLIDE SI ON COLLISIONNE UN MUR
	if (COL_CollideType(COL_C_Wall))
	{
		to_col_gao = COL_ObjectGet(COL_C_Wall)
	
		tv_dest_sight = COL_NormalGet(COL_C_Wall)
		tv_dest_sight.z = 0.0
		tv_dest_sight = MATH_VecCrossProduct(tv_dest_sight, Cv_VerticalVector)
		tv_dest_sight *= MATH_FloatSign(MATH_VecDotProduct(tv_dest_sight, tv_dest_pos - OBJ_PosGet()))
		tv_dest_sight = MATH_VecBlendRotate(tv_dest_sight, COL_NormalGet(COL_C_Wall), 0.1)
	}
	else
	{
		tv_dest_sight = tv_dest_pos - OBJ_PosGet()
		tv_dest_sight.z = 0.0
	}
	
	if ( i_way_wp_nb == 1 && MATH_VecSquareNorm(tv_dest_sight) < 1.0 && ! COL_CollideType(COL_C_Wall) && ! ti_occluder && ! ti_flag_soft_col)
	{
//		if ( ! i_stupid_rabbit_mode )
//		{
//			i_flag_jump_phase = vrai
//			
//			if ( i_flag_hide_snd )
//			{
//				f_hide_duration += TIME_GetDt()
//				if (f_hide_duration > 0.5)
//				{
//					f_hide_duration = 0.0
//					i_flag_hide_snd = faux
//					SND_RequestPlay(12)
//				}
//			}
//		}
	
		tv_dest_sight = OBJ_SightGet()
		ACT_ActionSet(0)
	}
	else
	{
//		i_flag_hide_snd = vrai
//		f_hide_duration = 0.0
//	
//		if ( ! i_stupid_rabbit_mode && i_flag_jump_phase && f_time_start_etat > 3.0)
//		{
//			macro_change_etat("Stupid_Bunny_ETAT_Jump")
//		}
//		else
		{
			tv_dest_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_dest_sight, 12.0 * TIME_GetDt())
			ACT_ActionSet(1)
		}
		
//		i_flag_jump_phase = faux
	}
}
else
{
//	tv_dest_sight = OBJ_SightGet()

	tv_dest_sight = @o_main_actor OBJ_PosGet()
	tv_dest_sight -= OBJ_PosGet()
	
	tv_dest_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_dest_sight, 6.0 * TIME_GetDt())

	ACT_ActionSet(0)
}

// COMPORTEMENT =========================================================
OBJ_BankingGeneralSet(tv_dest_sight, Cv_VerticalVector)

DYN_TractionSet(Cv_NullVector)

if (ACT_ActionGet() == 1)
{
	if (i_way_wp_nb <= 1)
		DYN_TractionSet(OBJ_SightGet() * 5.0 * DYN_FrictionVectorGet().y)
	else
		DYN_TractionSet(OBJ_SightGet() * f_speed * DYN_FrictionVectorGet().y)
	
	ACT_MagicBoxMoveGet(&tv_action_offset, &tf_action_speed, ACT_ActionGet(), 0)
	ACT_LIB_ActionFrequencyMultiply(MATH_VecDotProduct(DYN_SpeedGetVector(), OBJ_SightGet()) / tf_action_speed)
}
	
//if ( ! i_stupid_rabbit_mode )
//{
//	@get_Kamera OBJ_FlagInactiveSet(vrai)
//	
//	tv_speed = DYN_SpeedGetVector()
//	tv_speed -= MATH_VecDotProduct(tv_speed, OBJ_BankingGet()) * OBJ_BankingGet()
////	tv_speed.z = 0.0
//	tf_hor_speed = MATH_VecSquareNorm(tv_speed)
//	if (tf_hor_speed)
//	{
//		tf_hor_speed = MATH_FloatSqrt(tf_hor_speed)
//		tv_speed /= tf_hor_speed
//	}
//	else
//	{
//		tv_speed = OBJ_SightGet()
//	}
//
//	tv_pos = OBJ_PosGet()
////	tv_pos -= OBJ_SightGet() * 10.0
//	tv_pos -= tv_speed * 5.0
//	tv_pos.z += 1.0
//	
//	tv_pos = OBJ_PosGet() + MATH_VecBlendRotate(@get_Kamera OBJ_PosGet() - OBJ_PosGet(), tv_pos - OBJ_PosGet(), 8.0 * TIME_GetDt())
//	tv_pos.z = MATH_FloatMax(tv_pos.z, OBJ_PosGet().z + 1.0)
//
//	@get_Kamera OBJ_PosSet(tv_pos)
//
//	to_head = ANI_CanalObjectGet(Anim_Canal_Tete)
//	
//	tv_pos = @to_head OBJ_PosGet()
//	tv_pos.z = OBJ_PosGet().z + 1.5
//	
//	@get_Kamera OBJ_SightGeneralSet(tv_pos - @get_Kamera OBJ_PosGet(), Cv_VerticalVector)
//	
//	@get_Kamera VIEW_AssignObject(0)
//}
//else if (@get_Kamera OBJ_FlagsControlGet() & OBJ_C_ControlFlag_ForceInactive)
//{
//	@get_Kamera OBJ_FlagInactiveSet(faux)
//}
//
