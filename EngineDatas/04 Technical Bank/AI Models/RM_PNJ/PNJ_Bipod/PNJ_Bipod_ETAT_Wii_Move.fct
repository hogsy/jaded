#include "PNJ_Bipod_defines.var"

int			ti_i
int			ti_flag_force_stop
int			ti_index

float		tf_last_angle
float		tf_coef
float		tf_target_speed
float		tf_limit_dt
float		tf_dist
float		tf_acceleration

vector	tv_pos
vector	tv_dest_sight
vector	tv_new_sight
vector	tv_new_banking
vector	tv_temp

object	to_main_father
object	to_monture

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}

if (i_etat_courant != ETAT_Wii_Move)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Wii_Move
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}

	v_dest_sight = OBJ_SightGet()
	v_dest_move = OBJ_SightGet()
	i_flag_can_stop_ik = faux

	fct_last_etat = AI_TrackCurGet()

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

switch(AI_GetCurSystem())
{
	case Ci_CurSystem_REVO :

		// RIGHT MVT
		if (IO_JoyGetLASTMOVE(0))
		{
			f_lastmovetimer_right = Cf_MoveTimer_ForRumble
			i_move_num_right += 1
		}
		if (f_lastmovetimer_right <= 0.0)
			i_move_num_right = 0

		// LEFT MVT
		if (IO_JoyGetLASTMOVE(1))
		{
			f_lastmovetimer_left = Cf_MoveTimer_ForRumble
			i_move_num_left += 1
		}
		if (f_lastmovetimer_left <= 0.0)
			i_move_num_left = 0
	
		// Rumble
		if ((i_move_num_left > Ci_MaxMvt_BeforeRumble) || (i_move_num_right > Ci_MaxMvt_BeforeRumble))
			macro_change_etat("PNJ_Bipod_ETAT_Wii_Rumble")
		
		// Jump test
		if (i_flag_jump && i_lock_feet)
			macro_change_etat("PNJ_Bipod_ETAT_Saute")
		if ((f_lastmovetimer_left > 0.0) && (f_lastmovetimer_right > 0.0))
			i_flag_jump = vrai

		// Init sfx
		if (Gfx_Test == -1)
		{
			Gfx_Test= GFX_Add(21)
			GFX_FlagSet(Gfx_Test, 4, 1)
			GFX_MaterialSet(Gfx_Test, get_SFX_light_and_smoke, 0)	
			GFX_Setf(Gfx_Test, 21002, 0.1)							// extraction par rapport au point de génération (vers la cam)
			GFX_Seti(Gfx_Test, 21103, 1)		
			GFX_Seti(Gfx_Test, 21101, 0xFFFF80FF)	
		}
			
		PNJ_Bipod_RayInsensitve(vrai)
//		if (COL_RayObject_Dist(@get_camera OBJ_PosGet(), PNJ_Bipod_Wii_GetPointerDir(), Cf_Infinit, all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
//		{
//			v_dest_sight = COL_RayObject_PosGet()
//			GFX_Setv(Gfx_Test, 21200, v_dest_sight)
//			GFX_Setf(Gfx_Test, 21000, 20.0)			// rayon	
//			v_dest_sight -= OBJ_PosGet()
//			v_dest_sight.z = 0.0
//			MATH_VecSetNormalize(v_dest_sight)
//		}
		if (MATH_LIB_Intersection_Dir_Plane(@get_camera OBJ_PosGet(), PNJ_Bipod_Wii_GetPointerDir(), OBJ_PosGet(), Cv_VerticalVector, tf_dist, tv_dest_sight))
		{
			v_dest_sight = tv_dest_sight
			GFX_Setv(Gfx_Test, 21200, v_dest_sight)
			GFX_Setf(Gfx_Test, 21000, 20.0)			// rayon	
			v_dest_sight -= OBJ_PosGet()
			MATH_VecSetNormalize(v_dest_sight)
		}
		PNJ_Bipod_RayInsensitve(faux)

		if (i_flag_jump)
		{
			tf_target_speed = 0.0
		}
		else if (glob_joynorm_get)
		{
			v_dest_move = glob_joyvector_get_normalized
			tf_target_speed = 60.0
		}
		else
		{
			if (MATH_VecDotProduct(OBJ_SightGet(), v_dest_sight) > Cf_Cos20)
			{
				tf_target_speed = 0.0 
			}
			else
			{
				v_dest_move = v_dest_sight
				tf_target_speed = 0.0 // 20.0
				f_walk_force_angle = 0.0
			}
		}

		break
	
	default:
		if (IO_ButtonPressed(joy_button_R))
			macro_change_etat("PNJ_Bipod_ETAT_Wii_Rumble")
		
		if (i_flag_jump && i_lock_feet)
			macro_change_etat("PNJ_Bipod_ETAT_Saute")
			
		if (IO_ButtonJustPressed(JoyPSX_Button_croix))
			i_flag_jump = vrai
		
		tv_temp = -IO_JoyGetMove1()
		if (MATH_VecSquareNorm(tv_temp) > tolerance_joynull * tolerance_joynull)
		{
			tv_temp.z = -tv_temp.y
			tv_temp.y = 0.0
			v_dest_sight = @get_camera MATH_VecLocalToGlobal(tv_temp)
			v_dest_sight.z = 0.0
			MATH_VecSetNormalize(v_dest_sight)
		}

		if (i_flag_jump)
		{
			tf_target_speed = 0.0
		}
		else if (glob_joynorm_get)
		{
			v_dest_move = glob_joyvector_get_normalized
			tf_target_speed = 60.0
		}
		else
		{
			if (MATH_VecDotProduct(v_IK_constraint_sight, v_dest_sight) > Cf_Cos30)
			{
				tf_target_speed = 0.0 
			}
			else
			{
				v_dest_move = v_dest_sight
				tf_target_speed = 0.0 // 20.0
				f_walk_force_angle = 0.0
			}
		}

		break
}

if (IO_ButtonPressed(joy_button_R2))
{
	OBJ_CapaSet(OBJ_Capa_1, none)

	tf_acceleration	 = 200.0	

	if (MATH_VecDotProduct(OBJ_SightGet(), v_dest_sight) < Cf_Cos20)
	{
		i_flag_ik_shoot = faux
		f_walk_force_angle = -1.0

		tf_target_speed = 60.0
	}
	else
	{
		if (i_lock_feet &&  ! i_flag_ik_shoot )
		{
			i_flag_ik_shoot = vrai
			f_walk_force_angle = 0.0

			if (MATH_VecDotProduct(v_IK_dest_pos[0] - OBJ_PosGet(), v_me_to_main) < MATH_VecDotProduct(v_IK_dest_pos[1] - OBJ_PosGet(), v_me_to_main))
				f_foot_side_sign = 1.0
			else
				f_foot_side_sign = -1.0
		}
		
		tf_target_speed = 0.0
	}
}
else if (i_flag_ik_shoot)
{
	i_flag_ik_shoot = faux
	f_walk_force_angle = 0.0
}

f_dt += TIME_GetDt()

DBG_RenderVector(@o_bassin OBJ_PosGet(), v_dest_sight * 100.0, color_rouge)
DBG_RenderVector(@o_bassin OBJ_PosGet(), v_dest_move * 100.0, color_vert)

tv_dest_sight = v_dest_sight
tf_acceleration = 200.0

if (f_speed <= tf_target_speed)
	f_speed += MATH_FloatMin(tf_target_speed - f_speed, tf_acceleration * f_dt)
else
	f_speed -= MATH_FloatMin(f_speed - tf_target_speed, tf_acceleration * f_dt)

tv_pos = OBJ_PosGet()

if (f_speed >= 5.0 || f_walk_force_angle != -1.0)
{
	i_lock_feet = faux

	if (i_SND_Motor_Loop == -1)
		i_SND_Motor_Loop = SND_RequestPlayLoopOnObjCanal(Ci_SND_Motor_Loop, Anim_Canal_Tete)

	// OSCILLATION PIED GAUCHE / DROIT
	if ( f_bassin_shake )
	{
		if (i_SND_Move_Loop != -1)
		{
			SND_Stop(i_SND_Move_Loop)
			i_SND_Move_Loop = -1
		}
	}
	else
	{
		tf_last_angle = f_walk_angle
		if (f_walk_force_angle != -1.0)
		{
			f_walk_angle += Cf_Pi * f_dt

			f_walk_force_angle += Cf_Pi * f_dt
			if (f_walk_force_angle >= Cf_Pi)
				f_walk_force_angle = -1.0
		}
		else
		{
			f_walk_angle += f_speed * 0.04 * f_dt
		}

		if (tf_last_angle < Cf_PiBy2 && f_walk_angle >= Cf_PiBy2)
		{
			f_walk_angle = Cf_PiBy2
			i_lock_feet = vrai
		}
		else if (tf_last_angle < Cf_Pi && f_walk_angle >= Cf_Pi)
		{
			f_walk_angle = 0.0
			i_lock_feet = vrai
		}

		// DEPLACEMENT
		v_IK_move_dir = MATH_VecBlendRotate(v_IK_move_dir, v_dest_move, 4.0 * f_dt)
		tv_pos += v_IK_move_dir * f_speed * f_dt

		// AXE POUR LES PIEDS (ANTICIPATION)
		tv_new_sight = MATH_VecInCone(tv_dest_sight, OBJ_SightGet(), Cf_PiBy6, 0)
		v_IK_feet_sight = MATH_VecBlendRotate(v_IK_feet_sight, tv_new_sight, 4.0 * f_dt)
	}

	// VISEE
	tv_new_sight = MATH_VecInCone(tv_dest_sight, v_IK_constraint_sight, Cf_PiBy6, 0)
	tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 2.0 * f_dt)
	OBJ_BankingGeneralSet(tv_new_sight, OBJ_BankingGet())
}
else
{
	if ( i_lock_feet )
	{
		if (i_SND_Motor_Loop != -1)
		{
			SND_Stop(i_SND_Motor_Loop)
			i_SND_Motor_Loop = -1
		}
	}
	else
	{
		if (f_walk_angle <= Cf_PiBy2)
		{
			f_walk_angle += Cf_PiBy2 * f_dt
			if (f_walk_angle > Cf_PiBy2)
			{
				i_lock_feet = vrai
				f_walk_angle = Cf_PiBy2
			}
		}
		else
		{
			f_walk_angle += Cf_PiBy2 * f_dt
			if (f_walk_angle > Cf_Pi)
			{
				i_lock_feet = vrai
				f_walk_angle = 0.0
			}
		}

		// DEPLACEMENT
		v_IK_move_dir = MATH_VecBlendRotate(v_IK_move_dir, v_dest_move, 4.0 * f_dt)
		
		// AXE POUR LES PIEDS (ANTICIPATION)
		tv_new_sight = MATH_VecInCone(tv_dest_sight, OBJ_SightGet(), Cf_PiBy6, 0)
		v_IK_feet_sight = MATH_VecBlendRotate(v_IK_feet_sight, tv_new_sight, 4.0 * f_dt)
	}
	
	// VISEE
	tv_new_sight = MATH_VecInCone(tv_dest_sight, v_IK_constraint_sight, Cf_PiBy6, 0)
	tv_new_sight = MATH_VecBlendRotate(OBJ_SightGet(), tv_new_sight, 2.0 * f_dt)
	OBJ_BankingGeneralSet(tv_new_sight, OBJ_BankingGet())
}

DBG_RenderVector(@o_bassin OBJ_PosGet(), v_IK_constraint_sight * 1000.0, color_cyan)
//DBG_RenderVector(@o_bassin OBJ_PosGet(), v_IK_feet_sight * 1000.0, color_blanc)
//DBG_RenderVector(@o_bassin OBJ_PosGet(), v_IK_move_dir * 1000.0, color_jaune)

if (f_walk_angle <= Cf_PiBy2)
	tv_pos.z = MATH_FloatBlend(tv_pos.z, v_IK_ground_pos[0].z, 8.0 * f_dt)
else
	tv_pos.z = MATH_FloatBlend(tv_pos.z, v_IK_ground_pos[1].z, 8.0 * f_dt)
//tv_pos.z = MATH_FloatBlend(tv_pos.z, (v_IK_ground_pos[0].z + v_IK_ground_pos[1].z) * 0.5, 12.0 * f_dt)
OBJ_PosSet(tv_pos)

PNJ_Bipod_IK()
PNJ_Bipod_Oreille()
PNJ_Bipod_Update_Col()

PNJ_Bipod_Spawn()
////PNJ_Bipod_Bomb()
PNJ_Bipod_Laser()
PNJ_Bipod_GFX_Accumulation()

PNJ_Bipod_Wii_Cam()

f_dt = 0.0