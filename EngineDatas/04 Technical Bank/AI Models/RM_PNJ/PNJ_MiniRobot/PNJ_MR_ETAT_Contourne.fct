#include "PNJ_mr_defines.var"

float tf_dist2


// SORTIE ETAT ===================================================================
if( i_sort_etat )
{
	i_sort_etat = faux
	return
}

// INITIALISATION ETAT ==============================================================
if( i_etat_courant != ETAT_PNJ_MR_Contourne)
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_PNJ_MR_Contourne
	if( fct_last_etat )
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	i_rotate=vrai
	v_posContour=MATH_VecCrossProduct(COL_NormalGet(COL_C_Wall),Cv_VerticalVector)
	DBG_RenderVector(OBJ_PosGet(),COL_NormalGet(COL_C_Wall),color_rouge)
	if(MATH_VecDotProduct(v_posContour,@o_fight_target OBJ_PosGet()-OBJ_PosGet())<0)
		v_posContour=-v_posContour
	DBG_RenderVector(OBJ_PosGet(),v_posContour,color_vert)
	v_posContour=MATH_VecBlendRotate(v_posContour,COL_NormalGet(COL_C_Wall),0.2)
	DBG_RenderVector(OBJ_PosGet(),v_posContour,color_bleu)
	DBG_RenderVector(OBJ_PosGet(),OBJ_SightGet(),color_rose)
	v_posContour+=OBJ_PosGet()
	f_PasDeRotate=0.0
	OBJ_CapaSet(none,Obj_Capa_Fight)
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// STIMULI ===========================================================================

if(i_rotate==faux)
{
	f_PasDeRotate=1.3
	AI_TrackCurChangeNow("PNJ_MR_ETAT_Move")
}

if(!PNJ_MR_InBV(OBJ_PosGet() + OBJ_SightGet()))
{
	AI_TrackCurChangeNow("PNJ_MR_ETAT_Move")
}


// COMPORTEMENT ===========================================================================

PNJ_MR_Move(v_posContour,OBJ_PosGet())
