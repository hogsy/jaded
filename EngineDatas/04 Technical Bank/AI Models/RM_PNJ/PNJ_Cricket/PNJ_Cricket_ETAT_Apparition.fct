#include "PNJ_Cricket_defines.var"

Include_UltraProcedure_Header

int			ti_i

float		tf_dt

float		tf_sin
float		tf_dist
float		tf_dot_product
float		tf_best_dot

vector	tv_dest_pos
vector	tv_pseudo_speed

object	to_camera
object	to_start_wp

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux

	OBJ_CapaSet(none, OBJ_Capa_0)

	return
}

if (i_etat_courant != ETAT_Apparition)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Apparition
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}

	fct_last_etat = AI_TrackCurGet()
	
	meta(@get_global i_cricket_respawn > 5)
	{
		// Un seul respawn par trame
	}

	@get_global i_cricket_respawn ++

	if (i_my_index == -1)
		i_my_index = @get_global GG_SNP_AddGao(OBJ_Me())

	f_respawn_duration = 0.0
	f_rand_offset = MATH_RandFloat(0.0, 10.0)

	to_camera = @get_global o_camera

	tf_best_dot = -Cf_Infinit
	ti_i = 0
	while(ti_i < 5 && ES[ti_i])
	{
		@ES[ti_i] OBJ_RestoreInitMatrix()
		
		tf_dot_product = MATH_VecDotProduct(@to_camera OBJ_SightGet(), @ES[ti_i] OBJ_PosGet() - @to_camera OBJ_PosGet())

		if (tf_dot_product > 0.0)
			tf_dot_product = MATH_RandFloat(0.0, 1.0)

		if (tf_dot_product > tf_best_dot)
		{
			tf_best_dot = tf_dot_product
			to_start_wp = ES[ti_i]
		}
			
		ti_i++
	}
	
	OBJ_FlagInvisibleSet(faux)

	OBJ_PosSet(@to_start_wp OBJ_PosGet())
	OBJ_SightGeneralSet(@to_start_wp OBJ_SightGet(), Cv_VerticalVector)

	f_speed = MATH_RandFloat(1.0, 20.0)
	v_speed = OBJ_SightGet() * f_speed

	OBJ_CapaSet(OBJ_Capa_0, none)

	i_flag_in_BV = faux

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

tf_dt = TIME_GetDt()

v_speed.z -= 20.0 * TIME_GetDt()
tv_pseudo_speed = v_speed

OBJ_PosSet(OBJ_PosGet() + (tv_pseudo_speed * tf_dt))

//if (i_flag_in_BV || PNJ_Cricket_In_BV_Limit())
//{
//	i_flag_in_BV = vrai
	PNJ_Cricket_Keep_In_BV()
	
	if (i_flag_ground_col)
		macro_change_etat("PNJ_Cricket_ETAT_Sol")
//}

PNJ_Cricket_Update_Modules_Pos()