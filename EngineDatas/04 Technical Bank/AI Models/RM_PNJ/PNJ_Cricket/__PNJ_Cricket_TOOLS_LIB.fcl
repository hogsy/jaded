procedure_local void PNJ_Cricket_RenderBV(int ti_color)
{
	object	to_gao	

	vector	tv_min
	vector	tv_max
	vector	tv_temp

	to_gao = OBJ_Me()

	tv_min = @to_gao BV_MinGet()
	tv_max = @to_gao BV_MaxGet()

	tv_temp = @to_gao OBJ_PosGet()
	tv_temp += tv_min
	DBG_RenderVector(tv_temp, cvector(tv_max.x - tv_min.x, 0.0, 0.0), ti_color)
	DBG_RenderVector(tv_temp, cvector(0.0, tv_max.y - tv_min.y, 0.0), ti_color)
	DBG_RenderVector(tv_temp, cvector(0.0, 0.0, tv_max.z - tv_min.z), ti_color)

	tv_temp += cvector(0.0, 0.0, tv_max.z - tv_min.z)
	DBG_RenderVector(tv_temp, cvector(tv_max.x - tv_min.x, 0.0, 0.0), ti_color)
	DBG_RenderVector(tv_temp, cvector(0.0, tv_max.y - tv_min.y, 0.0), ti_color)

	tv_temp += cvector(tv_max.x - tv_min.x, 0.0, 0.0)
	DBG_RenderVector(tv_temp, cvector(0.0, 0.0, tv_min.z - tv_max.z), ti_color)

	tv_temp = @to_gao OBJ_PosGet()
	tv_temp += tv_max
	DBG_RenderVector(tv_temp, cvector(tv_min.x - tv_max.x, 0.0, 0.0), ti_color)
	DBG_RenderVector(tv_temp, cvector(0.0, tv_min.y - tv_max.y, 0.0), ti_color)
	DBG_RenderVector(tv_temp, cvector(0.0, 0.0, tv_min.z - tv_max.z), ti_color)

	tv_temp += cvector(0.0, 0.0, tv_min.z - tv_max.z)
	DBG_RenderVector(tv_temp, cvector(tv_min.x - tv_max.x, 0.0, 0.0), ti_color)
	DBG_RenderVector(tv_temp, cvector(0.0, tv_min.y - tv_max.y, 0.0), ti_color)
	
	tv_temp += cvector(tv_min.x - tv_max.x, 0.0, 0.0)
	DBG_RenderVector(tv_temp, cvector(0.0,  0.0, tv_max.z - tv_min.z), ti_color)
}

procedure_local void PNJ_Cricket_Update_Modules_Pos()
{
	int		ti_i
	
	float		tf_inv_dt

	vector	tv_pos
	vector	tv_old_pos
	vector	tv_BV_min
	vector	tv_BV_max	
	
	return

	PNJ_Cricket_RenderBV(color_rouge)

	tf_inv_dt = 1.0 / TIME_GetDt()

	tv_BV_min = OBJ_PosGet()
	tv_BV_max = tv_BV_min
	
	tv_BV_min += BV_MinGet()
	tv_BV_min.x += f_size_coef * 0.5
	tv_BV_min.y += f_size_coef * 0.5
	tv_BV_min.z += f_size_coef * 0.5

	tv_BV_max += BV_MaxGet()
	tv_BV_max.x -= f_size_coef * 0.5
	tv_BV_max.y -= f_size_coef * 0.5
	tv_BV_max.z -= f_size_coef * 0.5

	for (ti_i = 0; ti_i < 4; ti_i++)
	{
		tv_old_pos = @ao_modules[ti_i] OBJ_PosGet()

		av_modules_speed[ti_i].x += MATH_RandFloat(-1.0, 1.0)
		av_modules_speed[ti_i].y += MATH_RandFloat(-1.0, 1.0)
		av_modules_speed[ti_i].z += MATH_RandFloat(-1.0, 1.0)
//		av_modules_speed[ti_i].z -= 20.0 * TIME_GetDt()

		tv_pos = tv_old_pos
		tv_pos += av_modules_speed[ti_i] * TIME_GetDt()
		tv_pos.x = MATH_FloatLimit(tv_pos.x, tv_BV_min.x, tv_BV_max.x) 
		tv_pos.y = MATH_FloatLimit(tv_pos.y, tv_BV_min.y, tv_BV_max.y) 
		tv_pos.z = MATH_FloatLimit(tv_pos.z, tv_BV_min.z, tv_BV_max.z) 
	
		@ao_modules[ti_i] OBJ_PosSet(tv_pos)

//		DBG_RenderVector(OBJ_PosGet(), tv_pos - OBJ_PosGet(), color_vert)

		av_modules_speed[ti_i] = tv_pos - tv_old_pos
		av_modules_speed[ti_i] *= tf_inv_dt

		if (MATH_VecSquareNorm(av_modules_speed[ti_i]))
			@ao_modules[ti_i] OBJ_BankingGeneralSet(av_modules_speed[ti_i], OBJ_BankingGet())
	}
}

procedure_local int PNJ_Cricket_In_BV_Limit()
{
	vector	tv_pos
	
	tv_pos = OBJ_PosGet()
	tv_pos -= @BV_Limit OBJ_PosGet()
//	tv_pos = @BV_Limit MATH_VecGlobalToLocal(tv_pos)
	
	if (tv_pos.x < v_bv_min.x)
		return(faux)

	if (tv_pos.x > v_bv_max.x)
		return(faux)

	if (tv_pos.y < v_bv_min.y)
		return(faux)

	if (tv_pos.y > v_bv_max.y)
		return(faux)

	if (tv_pos.z < v_bv_min.z)
		return(faux)

	if (tv_pos.z > v_bv_max.z)
		return(faux)

	return(vrai)
}

procedure_local int PNJ_Cricket_Target_In_BV(object to_gao)
{
	vector	tv_pos
	vector	tv_bv_min
	vector	tv_bv_max

	tv_bv_min = @BV_Limit BV_MinGet()
	tv_bv_max = @BV_Limit BV_MaxGet()

	tv_pos = @to_gao OBJ_PosGet()
	tv_pos -= @BV_Limit OBJ_PosGet()
//	tv_pos = @BV_Limit MATH_VecGlobalToLocal(tv_pos)
	
	if (tv_pos.x < tv_bv_min.x)
		return(faux)

	if (tv_pos.x > tv_bv_max.x)
		return(faux)

	if (tv_pos.y < tv_bv_min.y)
		return(faux)

	if (tv_pos.y > tv_bv_max.y)
		return(faux)

	if (tv_pos.z < tv_bv_min.z)
		return(faux)

	if (tv_pos.z > tv_bv_max.z)
		return(faux)

	return(vrai)
}


procedure_local int PNJ_Cricket_Keep_In_BV()
{
	int			ti_flag	

	float		tf_dist

	vector	tv_pos
	vector	tv_me_to_bv	

	tv_pos = OBJ_PosGet()
	tv_pos -= @BV_Limit OBJ_PosGet()
//	tv_pos = @BV_Limit MATH_VecGlobalToLocal(tv_pos)

	ti_flag = faux

//	tv_me_to_bv = tv_pos
//	tv_me_to_bv.z += 0.2
////	tv_me_to_bv -= @BV_Limit OBJ_PosGet()
////	
//	tf_dist = MATH_VecDotProduct(tv_me_to_bv, tv_me_to_bv) 
//	if (tf_dist < 4.0)
//	{
//		ti_flag = vrai
//		i_flag_ground_col = vrai
//	
//		tf_dist = MATH_FloatSqrt(tf_dist)
//		tv_me_to_bv /= tf_dist
//		tv_me_to_bv *= 2.0 - tf_dist
//		tv_pos += tv_me_to_bv
//	}
	
	if (tv_pos.x < v_bv_min.x)
	{
		ti_flag = vrai
		tv_pos.x = v_bv_min.x
	}
	else if (tv_pos.x > v_bv_max.x)
	{
		ti_flag = vrai
		tv_pos.x = v_bv_max.x
	}
	
	if (tv_pos.y < v_bv_min.y)
	{
		ti_flag = vrai
		tv_pos.y = v_bv_min.y
	}
	else if (tv_pos.y > v_bv_max.y)
	{
		ti_flag = vrai
		tv_pos.y = v_bv_max.y
	}

	if (tv_pos.z < v_bv_min.z)
	{
		i_flag_ground_col = vrai
		ti_flag = vrai
		tv_pos.z = v_bv_min.z
	}
	else if (tv_pos.z > v_bv_max.z)
	{
		ti_flag = vrai
		tv_pos.z = v_bv_max.z
	}

//	tv_pos.x = MATH_FloatLimit(tv_pos.x, v_bv_min.x, v_bv_max.x)
//	tv_pos.y = MATH_FloatLimit(tv_pos.y, v_bv_min.y, v_bv_max.y)
//	tv_pos.z = MATH_FloatLimit(tv_pos.z, v_bv_min.z, v_bv_max.z)
	
//	tv_pos = @BV_Limit MATH_VecLocalToGlobal(tv_pos)
	tv_pos += @BV_Limit OBJ_PosGet()

	OBJ_PosSet(tv_pos)

	return(ti_flag)
}

procedure_local void PNJ_Cricket_Soft_Col()
{
	int			ti_i
	
	float		tf_dist

	vector	tv_me_to_cricket
	vector	tv_move_dir

	object	to_cricket

	if (i_my_index == -1)
		return

	if (OBJ_CapaTest(OBJ_Capa_0))
		return

	tv_move_dir = Cv_NullVector
	for (ti_i = 0; ti_i < MATH_FloatMin(@get_global ai_snp_col_gao_nb[i_my_index], 5); ti_i++)
	{
		to_cricket = @get_global ao_snp_col_gao[i_my_index][ti_i]
		tv_me_to_cricket = @to_cricket OBJ_PosGet()
		tv_me_to_cricket -= OBJ_PosGet()
		if (ti_i && tv_me_to_cricket.z <= 0.0)
		{
			i_cricket_ignore_gravity_cpt = ti_i
			tv_me_to_cricket.z -= ti_i * 0.05
		}
		tv_me_to_cricket.x += MATH_RandFloat(-0.1, 0.1)
		tv_me_to_cricket.y += MATH_RandFloat(-0.1, 0.1)
		tv_move_dir -= tv_me_to_cricket
	}

	tf_dist = MATH_VecSquareNorm(tv_move_dir) 
	if (tf_dist)
	{
		tv_move_dir /= MATH_FloatSqrt(tf_dist)
		tv_move_dir *= 4.0 * TIME_GetDt()
	}

	tv_move_dir -= MATH_VecDotProduct(tv_move_dir, OBJ_SightGet()) * OBJ_SightGet()

	// Collision avec le main =======================================
	tv_me_to_cricket = OBJ_PosGet() - @o_main_actor OBJ_PosGet()
	tv_me_to_cricket.z -= 0.5
	tf_dist = MATH_VecSquareNorm(tv_me_to_cricket)
	if (tf_dist > 0.001 && tf_dist < 1.0)
	{
		tf_dist = MATH_FloatSqrt(tf_dist)
		tv_me_to_cricket /= tf_dist
		tv_move_dir += tv_me_to_cricket * (1.0 - tf_dist)
	}

	OBJ_PosSet(OBJ_PosGet() + tv_move_dir)
}	

