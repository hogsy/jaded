#include "PNJ_Bunny_Saucer_defines.var"

Include_UltraProcedure_Header

int				ti_i
int				ti_link_nb
int				ti_inactive_bunny_nb

vector		tv_pos
vector		tv_dest_sight
vector		tv_dest_banking
vector		tv_temp

float			tf_wanted_traction
float			tf_coef
float			tf_speed_coef
float			tf_sign
float			tf_norm
float			tf_start_dist
float			tf_dest_dist

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}

if (i_etat_courant != ETAT_In_The_Sky || i_cam_cut == 1)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_In_The_Sky
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()

	DYN_Off()
	COL_ColSetActivationSet(none, all)
	COL_ColMapActivationSet(none, all)

	COL_UnCollidableAdd(o_main_actor)

	BV_MinSet(cvector(-2.0, -2.0, -2.0))
	BV_MaxSet(cvector(2.0, 2.0, 2.0))

	f_time_start_etat = 0.0

	tf_sign = MATH_FloatSign(MATH_RandFloat(-1.0, 1.0))

	tv_dest_sight = @get_camera OBJ_SightGet()
	tv_dest_sight.z = 0.0
	tf_norm = MATH_VecSquareNorm(tv_dest_sight)
	if (tf_norm)
		tv_dest_sight /= MATH_FloatSqrt(tf_norm)
	else
		tv_dest_sight = @o_main_actor OBJ_SightGet()
		
	tv_temp = MATH_VecCrossProduct(tv_dest_sight, Cv_VerticalVector)
	MATH_VecSetNormalize(tv_temp)
	

	tf_start_dist = MATH_RandFloat(0.0, 300.0)

	tv_pos = @get_camera OBJ_PosGet()
	tv_pos += MATH_VecRotate(tv_dest_sight, Cv_VerticalVector, tf_sign * Cf_PiBy4) * tf_start_dist
	tv_pos.z = MATH_FloatMax(tv_pos.z, @get_camera OBJ_PosGet().z + 200.0)
	COL_RayObject_Dist(tv_pos, -Cv_VerticalVector, 1000.0, all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
	tv_pos = COL_RayObject_PosGet()
	tv_pos.z += MATH_FloatBlend(3.0, 50.0, tf_start_dist / 300.0)
	OBJ_PosSet(tv_pos)

	v_spline_start_pos = tv_pos

	tv_pos = tv_temp
	tv_pos *= - MATH_FloatSign(MATH_VecDotProduct(OBJ_PosGet() - @get_camera OBJ_PosGet(), tv_pos))
	OBJ_SightGeneralSet(tv_pos, Cv_VerticalVector)

//	tv_pos = MATH_VecRotate(tv_pos, OBJ_HorizonGet(), MATH_RandFloat(-Cf_PiBy3, 0.0))
//	OBJ_SightGeneralSet(tv_pos, Cv_VerticalVector)

	tf_dest_dist = MATH_RandFloat(0.0, 300.0)

	tv_pos = @get_camera OBJ_PosGet()
	tv_pos += MATH_VecRotate(tv_dest_sight, Cv_VerticalVector, -tf_sign * Cf_PiBy4) * MATH_RandFloat(0.0, 500.0)
	tv_pos.z = MATH_FloatMax(tv_pos.z, @get_camera OBJ_PosGet().z + 200.0)
	COL_RayObject_Dist(tv_pos, -Cv_VerticalVector, 1000.0, all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
	tv_pos = COL_RayObject_PosGet()
	tv_pos.z += MATH_FloatBlend(3.0, 50.0, tf_dest_dist / 300.0)

	v_spline_dest_pos = tv_pos

	f_spline_segment_length = MATH_VecNorm(v_spline_dest_pos - v_spline_start_pos)

	v_spline_start_axis = v_spline_start_pos + (OBJ_SightGet() * f_spline_segment_length * 0.33)
	
	tv_pos = OBJ_SightGet()
	tv_pos.z = 0.0
	MATH_VecSetNormalize(tv_pos)
	v_spline_dest_axis = v_spline_dest_pos - (tv_pos * f_spline_segment_length * 0.33)

	f_spline_coef = 0.0

	if (i_cam_cut == 1)
		f_spline_coef = MATH_RandFloat(0.0, f_spline_segment_length)

	o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, faux, nofunc, nofunc)
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
if (f_time_start_etat > 0.3 && OBJ_LodVisGet() <= 0.001)
{
	i_etat_courant = -1
	returntrack
}

//DBG_RenderVector(OBJ_PosGet(), @o_main_actor OBJ_PosGet() - OBJ_PosGet(), color_rouge)

//v_spline_start_pos.z += MATH_FloatMin(v_spline_dest_pos.z - v_spline_start_pos.z, 5.0 * TIME_GetDt())

if (tf_wanted_traction >= f_wanted_traction)
	f_wanted_traction += MATH_FloatMin(tf_wanted_traction - f_wanted_traction, 20.0 * TIME_GetDt())
else
	f_wanted_traction -= MATH_FloatMin(f_wanted_traction - tf_wanted_traction, 20.0 * TIME_GetDt())

f_spline_coef += f_speed_max * TIME_GetDt()

if (f_spline_coef > f_spline_segment_length)
{
	OBJ_PosSet(OBJ_PosGet() + (OBJ_SightGet() * f_speed_max * TIME_GetDt()))
	returntrack
}

//DBG_RenderVector(v_spline_start_pos, v_spline_start_axis * f_spline_segment_length * 0.33, color_rouge)
//DBG_RenderVector(v_spline_dest_pos, v_spline_dest_axis * f_spline_segment_length * 0.33, color_vert)
//MATH_LIB_Bezier_Display(30, v_spline_start_pos, v_spline_start_axis, v_spline_dest_axis, v_spline_dest_pos, color_blanc)
tv_pos = MATH_LIB_Bezier_Pos_Get(f_spline_coef / f_spline_segment_length, v_spline_start_pos, v_spline_start_axis, v_spline_dest_axis, v_spline_dest_pos, tv_dest_sight)

OBJ_PosSet(tv_pos)
OBJ_SightGeneralSet(tv_dest_sight, Cv_VerticalVector)

//if (COL_Pivot_BVCollide(o_start_wp))
//{
//	f_boost_duration = 0.5
//	@o_start_wp OBJ_SightSet(@o_start_wp OBJ_PosGet() - @o_main_actor OBJ_PosGet())
//	o_start_wp = @o_start_wp WAY_NetNextWP(@o_start_wp WAY_NetOfObj(), o_start_wp, NetNextWP_Mode_axe_de_visee, 0)
//}


