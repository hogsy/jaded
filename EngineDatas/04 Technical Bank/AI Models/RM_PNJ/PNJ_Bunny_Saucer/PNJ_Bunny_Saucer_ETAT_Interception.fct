#include "PNJ_Bunny_Saucer_defines.var"

Include_UltraProcedure_Header

int				ti_i
int				ti_link_nb

vector		tv_X
vector		tv_Y
vector		tv_pos
vector		tv_current_link
vector		tv_next_link
vector		tv_cross_link
vector		tv_B_pos
vector		tv_C_pos
vector		tv_dest_sight
vector		tv_dest_banking
vector		tv_main_speed

float			tf_wanted_traction
float			tf_coef
float			tf_speed_coef
float			tf_main_speed
float			tf_pond
float			tf_best_pond

object		to_last_wp	
object		to_next_wp
object		to_monture
object		to_ray_actor

network		tn_net

if (i_flag_sortie_etat)
{
	i_flag_sortie_etat = faux
	return
}

if (i_etat_courant != ETAT_Interception)
{
	// INTIALISATION
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Interception
	
	if (fct_last_etat)
	{
		i_flag_sortie_etat = vrai
		AI_Execute(fct_last_etat)
	}
	
	fct_last_etat = AI_TrackCurGet()
	
	DYN_Off()
	COL_ColSetActivationSet(none, all)
	COL_ColMapActivationSet(none, all)

	COL_UnCollidableAdd(o_main_actor)

	if (i_SND_Move_Loop1 == -1)
		i_SND_Move_Loop1 = SND_RequestPlayLoop(Ci_SND_Move_Loop1)

	f_spline_coef = -1.0

	f_time_start_etat = 0.0
}
else
{
	f_time_start_etat += TIME_GetDt()
}

// ANALYSE ===============================================================
//EVENT_AddEventEnemy(OBJ_Me())
EVENT_AddEventLockCam(OBJ_Me(), 0, OBJ_BankingGet())

o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
if ( o_last_Rided_Actor && ! o_Rided_Actor )
	macro_change_etat("PNJ_Bunny_Saucer_ETAT_Crash")
o_last_Rided_Actor = o_Rided_Actor

if (o_bascule && @o_main_actor OBJ_HierarchyGet() == o_bascule)
	macro_change_etat("PNJ_Bunny_Saucer_ETAT_Balade")

if (o_bascule)
	@o_bascule RM_Bascule_Add(OBJ_Me(), Cv_NullVector, 3.0)

#ifndef _FINAL_
PNJ_Bunny_Saucer_Render_Trajectory(color_rouge)
#endif

if (f_spline_coef == -1.0)
{
//	f_wanted_traction -= MATH_FloatMin(f_wanted_traction, 20.0 * TIME_GetDt())

	v_cam_sight = @get_camera OBJ_SightGet()
	v_cam_horizon = @get_camera OBJ_HorizonGet()

	v_spline_dest_pos = @o_main_actor OBJ_PosGet()
	v_spline_dest_pos += v_cam_sight * 40.0
	v_spline_dest_pos.z += 50.0

	if (MATH_VecDotProduct(OBJ_HorizonGet(), v_spline_dest_pos - OBJ_PosGet()) > 0.0)
		tv_dest_sight = MATH_VecBlendRotate(OBJ_SightGet(), OBJ_HorizonGet(), f_time_start_etat * 2.0 * TIME_GetDt())
	else
		tv_dest_sight = MATH_VecBlendRotate(OBJ_SightGet(), -OBJ_HorizonGet(), f_time_start_etat * 2.0 * TIME_GetDt())

//	tv_dest_sight = MATH_VecBlendRotate(OBJ_SightGet(), v_spline_dest_pos - OBJ_PosGet(), f_time_start_etat * 2.0 * TIME_GetDt())
	tv_dest_banking = MATH_VecBlendRotate(OBJ_BankingGet(), Cv_VerticalVector, 6.0 * TIME_GetDt())
	OBJ_BankingGeneralSet(tv_dest_sight, tv_dest_banking)

	tv_pos = OBJ_PosGet()
	tv_pos += OBJ_SightGet() * f_wanted_traction * TIME_GetDt()
	OBJ_PosSet(tv_pos)

	if (MATH_VecDotProduct(OBJ_SightGet(), v_spline_dest_pos - OBJ_PosGet()) > 0.0)
	{
		f_spline_coef = 0.0
		v_spline_start_pos = OBJ_PosGet()
		v_spline_start_axis = OBJ_SightGet()
	
		if (MATH_VecDotProduct(OBJ_PosGet() - @get_camera OBJ_PosGet(), v_cam_horizon) > 0.0)
			v_spline_dest_axis = v_cam_horizon
		else
			v_spline_dest_axis = -v_cam_horizon
		
		v_spline_dest_axis.z = 0.0
		MATH_VecSetNormalize(v_spline_dest_axis)
	}
}
else
{
	v_spline_dest_pos = @o_main_actor OBJ_PosGet()
	v_spline_dest_pos += v_cam_sight * 40.0
	v_spline_dest_pos.z += 50.0
	if (o_bascule)
		to_ray_actor = o_bascule
	else
		to_ray_actor = OBJ_Me()
	if (@to_ray_actor COL_RayObject_Dist(v_spline_dest_pos, -Cv_VerticalVector, 1000.0, all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable))
	{
		v_spline_dest_pos = COL_RayObject_PosGet()
		v_spline_dest_pos.z = MATH_FloatMax(@o_main_actor OBJ_PosGet().z + 12.0, v_spline_dest_pos.z + 12.0)
	}
	
	f_spline_segment_length = MATH_VecNorm(v_spline_dest_pos - v_spline_start_pos)
	
	//if (MATH_VecDotProduct(OBJ_PosGet() - @get_camera OBJ_PosGet(), v_cam_horizon) > 0.0)
	//	v_spline_dest_axis = MATH_VecBlendRotate(v_cam_horizon, v_cam_sight, f_spline_coef / f_spline_segment_length)
	//else
	//	v_spline_dest_axis = MATH_VecBlendRotate(-v_cam_horizon, v_cam_sight, f_spline_coef / f_spline_segment_length)
	//v_spline_dest_axis.z = 0.0
	//MATH_VecSetNormalize(v_spline_dest_axis)
	
	OBJ_CapaSet(OBJ_Capa_0, none)

	to_monture = @o_main_actor PROC_RM_MontureGet()
	if (to_monture)
		tv_main_speed = @to_monture DYN_SpeedGetVector()
	else
		tv_main_speed = @o_main_actor DYN_SpeedGetVector()
	tv_main_speed.z = 0.0
	tf_main_speed = MATH_VecNorm(tv_main_speed)
	
	if (@o_main_actor OBJ_HierarchyGet() != o_bascule)
		f_main_on_me_duration -= MATH_FloatMin(f_main_on_me_duration, TIME_GetDt())
	else
		f_main_on_me_duration = 3.0
		
	if (f_main_on_me_duration)
		tf_wanted_traction = 5.0
	else
		tf_wanted_traction = 100.0 // f_speed_max
	
	if (tf_wanted_traction >= f_wanted_traction)
		f_wanted_traction += MATH_FloatMin(tf_wanted_traction - f_wanted_traction, 20.0 * TIME_GetDt())
	else
		f_wanted_traction -= MATH_FloatMin(f_wanted_traction - tf_wanted_traction, 20.0 * TIME_GetDt())
	

	tf_coef = f_spline_segment_length - f_spline_coef 
	if (tf_coef < 50.0)
	{
		tf_coef /= 50.0
		tf_coef *= tf_coef
		tf_coef = MATH_FloatMax(tf_coef, 0.1)
		
		if (f_spline_segment_length - f_spline_coef < 10.0)
			f_door_coef += MATH_FloatMin(1.0 - f_door_coef, TIME_GetDt())
	}
	else
	{
		tf_coef = 1.0
	}
	
	tf_wanted_traction = f_wanted_traction
	tf_wanted_traction *= tf_coef
	tf_wanted_traction += tf_main_speed
	f_spline_coef += tf_wanted_traction * TIME_GetDt()
	
	if (f_spline_coef > f_spline_segment_length)
		macro_change_etat("PNJ_Bunny_Saucer_ETAT_Largage")
	
	tv_B_pos = v_spline_start_pos
	tv_B_pos += v_spline_start_axis * f_spline_segment_length * 0.33
	
	tv_C_pos = v_spline_dest_pos
	tv_C_pos += v_spline_dest_axis * f_spline_segment_length * 0.5
	
	//DBG_RenderVector(v_spline_start_pos, v_spline_start_axis * f_spline_segment_length * 0.33, color_rouge)
	//DBG_RenderVector(v_spline_dest_pos, v_spline_dest_axis * f_spline_segment_length * 0.33, color_vert)
	MATH_LIB_Bezier_Display(30, v_spline_start_pos, tv_B_pos, tv_C_pos, v_spline_dest_pos, color_blanc)
	tv_pos = MATH_LIB_Bezier_Pos_Get(f_spline_coef / f_spline_segment_length, v_spline_start_pos, tv_B_pos, tv_C_pos, v_spline_dest_pos, tv_dest_sight)
	
	OBJ_PosSet(tv_pos)
	
	tv_dest_banking = MATH_VecBlendRotate(OBJ_BankingGet(), Cv_VerticalVector, 6.0 * TIME_GetDt())
	OBJ_BankingGeneralSet(tv_dest_sight, tv_dest_banking)
}

//if (COL_Pivot_BVCollide(o_start_wp))
//{
//	f_boost_duration = 0.5
//	@o_start_wp OBJ_SightSet(@o_start_wp OBJ_PosGet() - @o_main_actor OBJ_PosGet())
//	o_start_wp = @o_start_wp WAY_NetNextWP(@o_start_wp WAY_NetOfObj(), o_start_wp, NetNextWP_Mode_axe_de_visee, 0)
//}

PNJ_Bunny_Spawn_Soucoupe()

