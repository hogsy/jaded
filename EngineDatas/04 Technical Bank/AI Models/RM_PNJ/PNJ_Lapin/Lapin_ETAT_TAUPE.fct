#include "PNJ_Lapin_defines.var"

vector	tv_pos
vector	tv_offset
vector	tv_temp
vector	tv_ray_start
vector	tv_ray_dir
vector	tv_ray_end
int			ti_ok
int			ti_i
int			ti_cpt
int			ti_nb_to_check
int			tai_checked[5]
object	to_wp
object	to_ray
float		tf_duree
float		tf_coef


// SORTIE ETAT ===================================================================
if( i_sort_etat )
{
	i_1st_ingame_valid_pos_goback = faux
	i_taupe_to_keep_moving_flag = faux
	Lapin_TARGETTING(vrai)
	Lapin_EXPRESSION(Cf_Expr_Mouth_Closed)
	if( i_taupe_in_back_flag )
	{
		f_taupe_in_back_delai = MATH_RandFloat(10.0,20.0)
		if( i_etat_courant != ETAT_Lapin_JUMP )
			i_taupe_in_back_flag = faux
	}
	i_sort_etat = faux
	return
}

// INITIALISATION ETAT ==============================================================
if( i_etat_courant != ETAT_Lapin_TAUPE )
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Lapin_TAUPE
	if( fct_last_etat )
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	Lapin_DBG_Trace_String(DBG_Trace_Etat, "TAUPE")
	fct_previous_etat = fct_last_etat
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	
	f_time_sous_mode = 0.0
	if( @get_rayman PROC_RM_Current_HotSpot_Get() == OBJ_Me() )
		@get_global i_grappin_hotspot_nmi_died = vrai		// cancel grappin
	Lapin_TARGETTING(faux)
	
	i_taupe_phase = 0
	v_bassin_visual_offset = v_bassin_visual_offset_default
	i_frappe_target_nb = 0		// raz acteurs déjà paffés
	i_taupe_paf_done = faux
	DYN_SpeedSetVector(Cv_NullVector)
	Lapin_EXPRESSION(Cf_Expr_Mouth_Full)
	i_depl_jump_cpt = 0		// spécial
}
else
{
	f_time_start_etat += TIME_GetDt()
	f_time_sous_mode += TIME_GetDt()
}


// STIMULI ===========================================================================
AI_Execute("Lapin_exec_check_vision")

AI_Execute("Lapin_exec_update_best_interest")

if( ! MSG_GlobalIsValid(mid_best_interet) )
{
	i_taupe_phase = 4
	o_taupe_target = nobody
}
else
	o_taupe_target = EVENT_InteretTargetGet(mid_best_interet)

// COMPORTEMENT ===================================================================

if( ! i_taupe_destruction_0hp && ! i_taupe_in_back_flag )
{
	if( i_taupe_paf_done )
		i_taupe_phase = 4		// ressortir après avoir paffé ma target
	
	if( f_wall_col_duration > 1.0 && ! i_taupe_to_keep_moving_flag )
		i_taupe_phase = 4		// je bloque sur un mur
}

Lapin_ACTION_Set(Action_Fuite_Taupe)
COL_ColSetActivationSet(none, C_bit_zde_corps)
switch( i_taupe_phase )
{
	case 0 :	// anim taupe
		v_way_destpos = Cv_NullVector
		if( i_taupe_in_back_flag )
			tf_duree = 0.0
		else
			tf_duree = 0.5
		if( f_time_start_etat >= tf_duree )
			i_taupe_phase++
		Lapin_TAUPE_GFX()
		break
	case 1 :	// rentrer sous la terre
		v_way_destpos = Cv_NullVector
		tv_offset = - f_taupe_offset * Cv_VerticalVector
		if( o_RideMount_before_Taupe_backup )
		{
			Lapin_TAUPE_GFX()
			tf_coef = 1.5
			tf_duree = 0.5
		}
		else if( i_taupe_in_back_flag )
		{
			tf_coef = 3.0
			tf_duree = 0.25
		}
		else
		{
			tf_coef = 1.5
			tf_duree = 0.25
		}
		// bassin offset
		v_bassin_visual_offset = MATH_VecBlend(v_bassin_visual_offset, tv_offset, tf_coef * TIME_GetDt())
		@o_canal_bassin OBJ_PosSet(OBJ_PosGet() + v_bassin_visual_offset)
		if( o_item && ! MATH_VecNullToler(v_bassin_visual_offset, 0.01) )
			@o_item OBJ_PosSet(OBJ_PosGet() + v_bassin_visual_offset)
		// en bas
		if( MATH_VecNullToler(v_bassin_visual_offset - tv_offset, tf_duree) )
		{
			if( i_Att_Delai_Disparition_flag || i_taupe_destruction_0hp )
			{
				// REINIT LAPIN
				AI_TrackStop(0)
				AI_TrackStop(1)
				AI_TrackStop(3)
				AI_TrackStop(4)
				AI_TrackCurChangeNow("Lapin_track_reinit")
			}
			else
			{
				// monture ??
				if( o_RideMount_before_Taupe_backup )
					@o_RideMount_before_Taupe_backup OBJ_FlagInvisibleSet(vrai)		// invisible quand je suis sous terre (avec tous les GFX devant)
				
				i_taupe_phase++
				f_time_sous_mode = 0.0
			}
		}
		break
		
	case 2 :	// attendre avant teleportation
		v_way_destpos = Cv_NullVector
		i_invisible_flag = vrai
		if( i_taupe_in_back_flag )
			tf_duree = 0.5
		else
			tf_duree = MATH_RandFloat(2.0,3.0)
		if( f_time_sous_mode >= tf_duree )
		{
			// apparition ou attente !!!
			if( ! i_1st_ingame_valid_pos_goback && ! i_taupe_to_keep_moving_flag && ! i_taupe_in_back_flag )
			{
				if( o_App_next_wp )
				{
					if( WAY_App )
						o_App_next_wp = WAY_NetNextWP(WAY_App, o_App_next_wp, NetNextWP_Mode_aleatoire, none)
					else
						o_App_next_wp = nobody		// fin du mode spawn
				}
				else if( o_Att_ronde_next_wp )
				{
					o_Att_ronde_next_wp = WAY_NetNextWP(Att_WAY, o_Att_ronde_next_wp, NetNextWP_Mode_aleatoire, none)
				}
			}
			// teleportation au point de début de mouvement
			if( i_taupe_in_back_flag )
			{
				tv_pos = @o_taupe_target OBJ_PosGet()
//				tv_temp = tv_pos - OBJ_PosGet()
//				tv_temp = Proc_Vec_HorzNormalise(tv_temp, OBJ_SightGet())
//				v_taupe_in_back_pos = @o_taupe_target OBJ_PosGet() 
//				v_taupe_in_back_pos += (1.5 * tv_temp)
//				v_taupe_in_back_pos.z = tv_pos.z
//				tv_pos = v_taupe_in_back_pos
				DBG_RenderVector(OBJ_PosGet(), tv_pos - OBJ_PosGet(), color_cyan)
			}
			else if( i_1st_ingame_valid_pos_goback )
			{
				if( Territory_Error_wp_safe )
					tv_pos = @Territory_Error_wp_safe OBJ_PosGet()
				else
					tv_pos = v_1st_ingame_valid_pos
			}
			else if( i_taupe_to_keep_moving_flag )
				tv_pos = v_taupe_to_keep_moving_pos
			else if( o_App_next_wp )
				tv_pos = @o_App_next_wp OBJ_PosGet()
			else if( o_Att_ronde_next_wp )
				tv_pos = @o_Att_ronde_next_wp OBJ_PosGet()
			else
			{
				// teleport to wp pos if any
				ti_nb_to_check = 0
				for( ti_i = 0; ti_i < 5; ti_i++ )
				{
					if( Surgit_du_sol_wp[ti_i] )
						ti_nb_to_check++
				}
				ti_ok = faux
				if( ti_nb_to_check )
				{
					for( ti_i = 0; ti_i < 5; ti_i++ )
						tai_checked[ti_i] = faux
					ti_cpt = 0
					while( ! ti_ok )
					{
						ti_i = MATH_RandInt(0, 5)
						while( ! Surgit_du_sol_wp[ti_i] )
							ti_i = MATH_RandInt(0, 5)
						to_wp = Surgit_du_sol_wp[ti_i]
						ti_cpt++
						if( OBJ_SqrDistHorz(to_wp) > 25.0 && @o_taupe_target OBJ_SqrDistHorz(to_wp) > 25.0 )
							ti_ok = vrai
						if( ti_cpt == ti_nb_to_check )
							break
					}
				}
				if( ti_ok )		// j'en ai trouvé 1 valide
					tv_pos = @to_wp OBJ_PosGet()
				else
					tv_pos = OBJ_PosGet()
			}
			// LRAY pour détecter le niveau du sol !!!
			tv_ray_start = tv_pos + cvector(0,0,4)
			tv_ray_dir = - Cv_VerticalVector
			DBG_RenderVector(tv_ray_start, tv_ray_dir * 10.0, color_vert)
			to_ray = COL_RayObject_Dist(tv_ray_start, tv_ray_dir, 10.0, all, OBJ_C_IdentityFlag_Anims, Ci_Filter_IdentityFlag, COL_C_Ray_on_ColMap_NoCrossable)
			if( to_ray )
			{
				tv_ray_end = COL_RayObject_PosGet()
				tv_pos.z = tv_ray_end.z
				DBG_RenderVector(tv_ray_start, tv_ray_end - tv_ray_start, color_rouge)
			}
			OBJ_PosSet(tv_pos)
			COL_StartMatrixSet(tv_pos)
			SND_RequestPlay(Ci_SND_Apparition_Sol_Smoke)
			// apparition ou attente !!!
			if( o_App_next_wp )
			{
				if( WAY_App )
				{
					o_App_next_wp = WAY_NetNextWP(WAY_App, o_App_next_wp, NetNextWP_Mode_aleatoire, none)
					if( ! o_App_next_wp )
						fct_main_etat = "Lapin_ETAT_ATTENTE"
				}
				else
					o_App_next_wp = nobody		// fin du mode spawn
			}
			else if( o_Att_ronde_next_wp )
			{
				o_Att_ronde_next_wp = WAY_NetNextWP(Att_WAY, o_Att_ronde_next_wp, NetNextWP_Mode_aleatoire, none)
			}
			// calcul de la position à atteindre
			if( o_App_next_wp )
				v_way_destpos = @o_App_next_wp OBJ_PosGet()
			else if( o_Att_ronde_next_wp )
				v_way_destpos = @o_Att_ronde_next_wp OBJ_PosGet()
			else
				v_way_destpos = @o_taupe_target OBJ_PosGet()
			// go back to safe pos !!!!
//			if( i_1st_ingame_valid_pos_goback || i_taupe_to_keep_moving_flag ) // || i_taupe_in_back_flag )
//			{
//				i_taupe_phase = 4
//				// paffe
//				i_flag_zde_fight_enable = vrai
//				i_taupe_attack_flag = vrai
//				if( i_taupe_in_back_flag )
//					i_taupe_in_back_attack_flag = vrai
//			}
//			else
				i_taupe_phase++
			f_time_sous_mode = 0.0
		}
		break
		
	case 3 :	// déplacement vers la position
		MACRO_CHECK_CHUTE		// je peux sortir de la terre si c'est une falaise !!!
		i_invisible_flag = vrai
		// délai poursuite
		if( i_taupe_in_back_flag || i_1st_ingame_valid_pos_goback || i_taupe_to_keep_moving_flag )
			tf_duree = 0.5
		else
		{
			tf_duree = Surgit_du_sol_duree_poursuite
			Lapin_TAUPE_Paffe()
		}
		if( f_time_sous_mode > tf_duree )
		{
			i_taupe_phase++
			Lapin_TAUPE_Paffe()
			break
		}
		// calcul de la position à atteindre
		if( i_taupe_in_back_flag || i_1st_ingame_valid_pos_goback || i_taupe_to_keep_moving_flag )
			v_way_destpos = Cv_NullVector		// sur place
		else if( o_App_next_wp )
			v_way_destpos = @o_App_next_wp OBJ_PosGet()
		else if( o_Att_ronde_next_wp )
			v_way_destpos = @o_Att_ronde_next_wp OBJ_PosGet()
		else
			v_way_destpos = @o_taupe_target OBJ_PosGet()
		tv_temp = v_way_destpos - OBJ_PosGet()
		tv_temp.z = 0.0
		if( MATH_VecNullToler(tv_temp, 0.5) )
		{
			i_taupe_phase++
			break
		}
		Lapin_TAUPE_GFX()
		break
		
	case 4 : // ressurgir du sol
		v_way_destpos = Cv_NullVector
		Lapin_TAUPE_GFX()
		// monture ?
		if( o_RideMount_before_Taupe_backup )
		{
			tv_pos = OBJ_PosGet() + cvector(0,0,0.5)
			@o_RideMount_before_Taupe_backup OBJ_PosSet(tv_pos)
			@o_RideMount_before_Taupe_backup OBJ_BankingGeneralSet(OBJ_SightGet(), OBJ_BankingGet())
			@o_RideMount_before_Taupe_backup COL_StartMatrixSet(tv_pos)
			i_flag_jump_to_ride_a_mount = vrai
			o_RideMount_Nearest = o_RideMount_before_Taupe_backup
			i_RideMount_Nearest_ID = Proc_CreatureTypeGet(o_RideMount_before_Taupe_backup)
		}
		// bassin offset
		v_bassin_visual_offset = Cv_NullVector
		@o_canal_bassin OBJ_PosSet(OBJ_PosGet() + v_bassin_visual_offset)
		if( o_item && ! MATH_VecNullToler(v_bassin_visual_offset, 0.01) )
			@o_item OBJ_PosSet(OBJ_PosGet() + v_bassin_visual_offset)
		// jump
		tv_pos = OBJ_PosGet() - (f_taupe_offset * Cv_VerticalVector)
		OBJ_PosSet(tv_pos)
		COL_StartMatrixSet(tv_pos)
		if( i_taupe_in_back_flag )
			i_taupe_in_back_attack_flag = vrai
		i_flag_jump_taupe = vrai
		v_jump_dest_pos = OBJ_PosGet() + (f_taupe_jump_offset * Cv_VerticalVector )
		i_invisible_flag = faux		// raz même en apparition
		macro_change_etat("Lapin_ETAT_JUMP")
		break
}

i_target_territory_ID = Lapin_PROC_POS_GET_TERRITORY_ID(v_way_destpos)
AI_Execute("Lapin_exec_way_find")
AI_Execute("Lapin_exec_way_move")

if( o_App_next_wp )
	v_force_sight = @o_App_next_wp OBJ_PosGet() - OBJ_PosGet()
else if( o_Att_ronde_next_wp )
	v_force_sight = @o_Att_ronde_next_wp OBJ_PosGet() - OBJ_PosGet()
else if( ! o_taupe_target )
{
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" => ETAT TAUPE avec bug ( ! o_taupe_target ) \n")
	DBG_TraceString("position = ")
	DBG_TraceVector(OBJ_PosGet())
	DBG_TraceEOL()
	DBG_TraceString("i_dernier_etat = ")
	DBG_TraceInt(i_dernier_etat)
	DBG_TraceEOL()
	DBG_TraceString("i_1st_ingame_valid_pos_goback = ")
	DBG_TraceInt(i_1st_ingame_valid_pos_goback)
	DBG_TraceString(" / v_1st_ingame_valid_pos = ")
	DBG_TraceVector(v_1st_ingame_valid_pos)
	DBG_TraceEOL()
	DBG_TraceString("i_taupe_to_keep_moving_flag = ")
	DBG_TraceInt(i_taupe_to_keep_moving_flag)
	DBG_TraceEOL()
	DBG_TraceString("i_Att_Delai_Disparition_flag = ")
	DBG_TraceInt(i_Att_Delai_Disparition_flag)
	DBG_TraceString(" / Att_Delai_Disparition = ")
	DBG_TraceFloat(Att_Delai_Disparition)
	DBG_TraceEOL()
	DBG_Warning("Appelez Vinc svp c super important !!! merci :)")
}
else
	v_force_sight = @o_taupe_target OBJ_PosGet() - OBJ_PosGet()
AI_Execute("Lapin_exec_way_orientation")

if( i_flag_zde_fight_enable )
	Lapin_INTERET_Attack()

if( o_taupe_target )
	OBJ_CapaSet(Obj_Capa_Fight, none)

//if( o_RideMount_before_Taupe_backup )
//	@o_RideMount_before_Taupe_backup OBJ_PosSet(OBJ_PosGet())

