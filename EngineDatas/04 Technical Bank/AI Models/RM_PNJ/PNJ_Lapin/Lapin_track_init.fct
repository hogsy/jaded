#include "PNJ_Lapin_defines.var"

int			ti_i
int			ti_cpt
int			ti_1, ti_2, ti_3, ti_4
int			ti_k
int			ti_membre_index
int			ti_SF_AlreadyDead
int			ti_SF_LumRecupere
float		tf_life
float		tf_zoom
float		tf_angle
vector	tv_pos
vector	tv_temp
object	to_bone
object	to_obj
object	to_main
object	to_occluder

// SHAPE ?
switch( Config_Lapin )
{
	case Config_Lapin_Terminator :
	case Config_Lapin_Boucher :
		i_SHAPE_ID = 1
		break
	default:
		if( Shape )		// LD !!!!
		{
			if( Shape < 1 || Shape > 6 )
				DBG_Error("la shape du lapin doit etre comprise entre 1 et 6")
			i_SHAPE_ID = Shape
		}
		else
			i_SHAPE_ID = MATH_RandInt(1,7)
		break
}
ANI_ShapeSelect(Anim_Canal_Tete, i_SHAPE_ID)

AI_CBAdd(OBJ_Me(), CallBack_WhenDestroy, "Lapin_callback_WhenDestroy")
AI_CBAdd(OBJ_Me(), CallBack_SectoActOn, "Lapin_callback_SectoActOn")
AI_CBAdd(OBJ_Me(), CallBack_SectoActOff, "Lapin_callback_SectoActOff")
AI_CBAdd(OBJ_Me(), CallBack_SectoVisOn, "Lapin_callback_SectoVisOn")

o_rope_manager = @get_global o_rope_manager
if ( ! o_rope_manager )
	returntrack

if( App_WP )
{
	OBJ_PosSet(@App_WP OBJ_PosGet())
	OBJ_BankingGeneralSet(@App_WP OBJ_SightGet(), @App_WP OBJ_BankingGet())
	COL_StartMatrixSet(OBJ_PosGet())
}

o_canal_tete = ANI_CanalObjectGet(Anim_Canal_Tete)
o_canal_bassin = ANI_CanalObjectGet(Anim_Canal_Bassin)
o_canal_decomp = o_canal_tete
AI_CBAdd(OBJ_Me(), CallBack_After_Blend, "Lapin_callback_AfterBlend")		// avant les items !!!

Lapin_PRIORITY_Set(Ci_AI_Priority_NORMAL)

// SPECIAL FLAGS
if( ! OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Generated) )
{
	if (i_SF_NePasSeRejouerSiMort)
	{
		i_SF_AlreadyDead = AI_SFDynGet(Ci_SF_DejaMort, SF_MinById, SF_MaxById)		// Alloc
		SpecialFlag_get(i_SF_AlreadyDead, ti_SF_AlreadyDead)			// Test SF
		if( ti_SF_AlreadyDead )																	// Si SF = 1 alors DESTROY
		{
			OBJ_Destroy()
		}
	}
}



//========================================================================================================
// CONFIGS DE LAPINS 
//========================================================================================================

Grappin_HotSpot = faux

switch( Config_Lapin )
{
	case Config_Lapin_Fourbe :
		Depl_MontureRayman = vrai
		Depl_Speed_Max_Course = 10.0
		Depl_Speed_Max_Nage = 2.0
		Depl_Stream_Pct = 1.0
		Item_Arme_Utilisable = Ci_Item_Arme_All
		Item_Rafale = 1
		Item_Prioritaire = Ci_Item_Prioritaire_Aucun
		Item_Distance_de_Filature = 0.0
		if( ! App_Item_Gao )
			App_Item_Gao = get_ITEM_CarrotGun
		Atk_Vision_Dist = 0.0
		Atk_Vision_Angle = Cf_Atk_Vision_Angle_default
//		Atk_Meute_Dist_Detection = 0.0
		Atk_Simultanees_max_nb = 0
		Atk_Poing_Delai = 0.0
		Atk_Protect = Ci_Atk_Protect_None
		Atk_Dodge = Ci_Atk_Dodge_None
		Atk_Deplacement = Ci_Atk_Deplacement_Occluders_Caches_GoMelee	
		Fuite_Speed_Max = 10.0
		Fuite_Apres_Pafs = Ci_Fuite_Apres_Pafs_A_Chaque_Paf
		Fuite_Apres_Attaque = Ci_Fuite_Apres_Attaque_Toujours
		Fuite_HP = Ci_Fuite_HP_Aucune
		Fuite_Apres_Dodge = Ci_Fuite_Apres_Dodge_Jamais
		Fuite_Deplacement = Ci_Fuite_Deplacement_Caches
		Fuite_Speed_Max = 10.0
		Fuite_Vision_Angle = Cf_Fuite_Vision_Angle_default
		Mort_SeReleve_Duree = 15.0
		break
	case Config_Lapin_SplinterCell : 
		Depl_MontureRayman = vrai
		Depl_Speed_Max_Course = 10.0
		Depl_Speed_Max_Nage = 2.0
		Depl_Stream_Pct = 1.0
		Item_Arme_Utilisable = Ci_Item_Arme_All
		Item_Rafale = 3
		Item_Prioritaire = Ci_Item_Prioritaire_Aucun
		Item_Distance_de_Filature = 0.0
		if( ! App_Item_Gao )
			App_Item_Gao = get_ITEM_CarrotGun
		Atk_Vision_Dist = 0.0
		Atk_Vision_Angle = Cf_Atk_Vision_Angle_default
//		Atk_Meute_Dist_Detection = 0.0
		Atk_Simultanees_max_nb = 0
		Atk_Poing_Delai = 0.0
		Atk_Protect = Ci_Atk_Protect_None
		Atk_Dodge = Ci_Atk_Dodge_All
		Atk_Deplacement = Ci_Atk_Deplacement_Occluders_Caches_FleeMelee
		Fuite_Apres_Pafs = Ci_Fuite_Apres_Pafs_A_Chaque_Paf
		Fuite_Apres_Attaque = Ci_Fuite_Apres_Attaque_Toujours
		Fuite_HP = Ci_Fuite_HP_Aucune
		Fuite_Apres_Dodge = Ci_Fuite_Apres_Dodge_Toujours
		Fuite_Deplacement = Ci_Fuite_Deplacement_Caches
		Fuite_Speed_Max = 10.0
		Fuite_Vision_Angle = Cf_Fuite_Vision_Angle_default
		Mort_SeReleve_Duree = 15.0
		break
	case Config_Lapin_VoleurDeClef_Peureux : 	
	case Config_Lapin_VoleurDeClef_Agressif : 	
		Depl_MontureRayman = vrai
		Depl_Speed_Max_Course = 10.0
		Depl_Speed_Max_Nage = 2.0
		Depl_Stream_Pct = 1.0
		Item_Prioritaire = Ci_Item_Prioritaire_CLE
		Item_Distance_de_Filature = 0.0
		Atk_Vision_Dist = 0.0
		Atk_Vision_Angle = Cf_Atk_Vision_Angle_default
//		Atk_Meute_Dist_Detection = 0.0
		Atk_Simultanees_max_nb = -1
		Atk_Poing_Delai = 0.0
		Atk_Protect = Ci_Atk_Protect_None
		Atk_Dodge = Ci_Atk_Dodge_None
		Atk_Deplacement = Ci_Atk_Deplacement_Tout_Droit
		Fuite_Apres_Pafs = Ci_Fuite_Apres_Pafs_A_Chaque_Paf
		Fuite_Apres_Attaque = Ci_Fuite_Apres_Attaque_Jamais
		Fuite_HP = Ci_Fuite_HP_Aucune
		Fuite_Apres_Dodge = Ci_Fuite_Apres_Dodge_Jamais
		// Fuite_Deplacement = Ci_Fuite_Deplacement_WP_Speficique
		Fuite_dist_min_wp_rayman = 15.0
//		Fuite_dist_min_moi_rayman = 0.0
//		Fuite_Speed_Max = 10.0
		Fuite_Vision_Angle = Cf_Fuite_Vision_Angle_default
		Mort_SeReleve_Duree = 15.0
		if( Config_Lapin == Config_Lapin_VoleurDeClef_Peureux )
		{
			// Peureux
			Item_Arme_Utilisable = Ci_Item_Arme_None
			Item_Rafale = 1
			Fuite_Si_Clef = vrai
		}
		else
		{
			// Agressif
			Item_Arme_Utilisable = Ci_Item_Arme_All
			Item_Rafale = 3
			Fuite_Si_Clef = faux
		}
		break
	case Config_Lapin_Boucher :
		Grappin_HotSpot = vrai
		break
	case Config_Lapin_Brutus :
		Depl_MontureRayman = vrai
		Depl_Speed_Max_Course = 2.0
		Depl_Speed_Max_Nage = 2.0
		Depl_Stream_Pct = 1.0
		Item_Arme_Utilisable = Ci_Item_Arme_None
		Item_Rafale = 1
		Item_Prioritaire = Ci_Item_Prioritaire_Aucun
		Item_Distance_de_Filature = 0.0
		Atk_Vision_Dist = 0.0
		Atk_Vision_Angle = Cf_Atk_Vision_Angle_default
//		Atk_Meute_Dist_Detection = 0.0
		Atk_Simultanees_max_nb = -1
		Atk_Poing_Delai = 3.0
		Atk_Protect = Ci_Atk_Protect_None
		Atk_Dodge = Ci_Atk_Dodge_None
		Atk_Deplacement = Ci_Atk_Deplacement_Tout_Droit
		Fuite_Apres_Pafs = Ci_Fuite_Apres_Pafs_Jamais
		Fuite_Apres_Attaque = Ci_Fuite_Apres_Attaque_Jamais
		Fuite_HP = Ci_Fuite_HP_Aucune
		Fuite_Apres_Dodge = Ci_Fuite_Apres_Dodge_Jamais
		Fuite_Deplacement = Ci_Fuite_Deplacement_OpposeNmi
		Fuite_Speed_Max = 2.0
		Fuite_Vision_Angle = Cf_Fuite_Vision_Angle_default
		Mort_SeReleve_Duree = 15.0
		break
	case Config_Lapin_Zombie :	
		Depl_MontureRayman = vrai
		Depl_Speed_Max_Course = 1.0
		Depl_Speed_Max_Nage = 1.0
		Depl_Stream_Pct = 1.0
		Item_Arme_Utilisable = Ci_Item_Arme_None
		Item_Rafale = 1
		Item_Prioritaire = Ci_Item_Prioritaire_Aucun
		Item_Distance_de_Filature = 0.0
		Atk_Vision_Dist = 0.0
		Atk_Vision_Angle = Cf_Atk_Vision_Angle_default
//		Atk_Meute_Dist_Detection = 0.0
		Atk_Simultanees_max_nb = -1
		Atk_Poing_Delai = 3.0
		Atk_Protect = Ci_Atk_Protect_None
		Atk_Dodge = Ci_Atk_Dodge_None
		Atk_Deplacement = Ci_Atk_Deplacement_Tout_Droit
		Fuite_Apres_Pafs = Ci_Fuite_Apres_Pafs_Jamais
		Fuite_Apres_Attaque = Ci_Fuite_Apres_Attaque_Jamais
		Fuite_HP = Ci_Fuite_HP_Aucune
		Fuite_Apres_Dodge = Ci_Fuite_Apres_Dodge_Jamais
		Fuite_Deplacement = Ci_Fuite_Deplacement_OpposeNmi
		Fuite_Speed_Max = 1.0
		Fuite_Vision_Angle = Cf_Fuite_Vision_Angle_default
		Mort_SeReleve_Duree = 15.0
		break
	case Config_Lapin_Terminator :	
		Depl_MontureRayman = faux
		Depl_Speed_Max_Course = 3.0
		Depl_Speed_Max_Nage = 1.0
		Depl_Stream_Pct = 0.5
		Depl_Jump = faux		// il peux y avoir de l'eau
		Depl_Taupe = faux		// il peux y avoir de l'eau
		Item_Arme_Utilisable = Ci_Item_Arme_All
		Item_Rafale = 3
		Item_Prioritaire = Ci_Item_Prioritaire_Aucun
		Item_Distance_de_Filature = 0.0
		if( ! App_Item_Gao )
			App_Item_Gao = get_ITEM_CarrotGun
		Atk_Vision_Dist = 0.0
		Atk_Vision_Angle = Cf_Atk_Vision_Angle_default
//		Atk_Meute_Dist_Detection = 0.0
		Atk_Simultanees_max_nb = -1
		Atk_Poing_Delai = 0.0
		Atk_Protect = Ci_Atk_Protect_None
		Atk_Dodge = Ci_Atk_Dodge_None
		Atk_Deplacement = Ci_Atk_Deplacement_Tout_Droit
		Fuite_Apres_Pafs = Ci_Fuite_Apres_Pafs_Jamais
		Fuite_Apres_Attaque = Ci_Fuite_Apres_Attaque_Jamais
		Fuite_HP = Ci_Fuite_HP_Aucune
		Fuite_Apres_Dodge = Ci_Fuite_Apres_Dodge_Jamais
		Fuite_Deplacement = Ci_Fuite_Deplacement_OpposeNmi
		Fuite_Speed_Max = 1.0
		Fuite_Vision_Angle = Cf_Fuite_Vision_Angle_default
		Mort_SeReleve_Duree = 5.0
		Mort_JeMeNoie = vrai
		break
}

if( Atk_Grappin_Controle )
	Grappin_HotSpot = vrai			// si je rembobine le grappin je dois être un hotspot


//========================================================================================================
// TERRITORY MANAGMENT 
//========================================================================================================

// RESTRICTION
ti_cpt = 0
i_Territory_BV_Occluders_nb = 0
if( Territory_BV )
{
	ti_cpt++
	
	// Optim occluders dans ma BV
	for (ti_i = 0; ti_i < @get_list_manager i_occluder_nb; ti_i++)
	{
		to_occluder = @get_list_manager ao_occluder[ti_i]
		if( Lapin_Pos_in_Territory_BV(WAY_LIB_Occluder_Position_Get(to_occluder)) )
		{
			ao_Territory_BV_Occluders[i_Territory_BV_Occluders_nb] = to_occluder
			i_Territory_BV_Occluders_nb++
		}
	}	
}
if( Territory_Colmap )
	ti_cpt++
if( Territory_Path )
	ti_cpt++
if( ti_cpt > 1 )
	DBG_Error("vous devez choisir 1 mode de gestion de territoire")


// TERRITORY ID COLMAP
if( Territory_Colmap )
{
	Lapin_PROC_WAY_Init()
	Lapin_PROC_WAY_Compute_Territory()
}

// TERRITORY PATHFINDING 
Lapin_PATH_Init()



// ACTIONS =============================================================
Lapin_ACTION_Speed_Init()


// LAPIN SETTINGS ========================================================
if( Type == 9 )
	Type = Lapin_Type_Moyen

if( Type == Lapin_Type_Geant )
{
	if ( ! OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Generated) )		// pas pour les lapins générés (par le vaisseau)
		i_SF_LumRecupere = AI_SFDynGet(Ci_SF_LumDejaRecupere, SF_MinById, SF_MaxById)		// Alloc

	SpecialFlag_get(i_SF_LumRecupere, ti_SF_LumRecupere)				// Test SF
	if( ti_SF_LumRecupere )
	{
		Type = Lapin_Type_Moyen
		Bonus_Lum = 0
	}
	else
	{
		Bonus_Lum = 1
	}
}
else
	Bonus_Lum = 0

Lapin_TAILLE_Init(f_zoom)
OBJ_ZoomSet(f_zoom)
f_LIFE_cur = f_LIFE_max

Lapin_BV_Init()

// ZDE CORPS
COL_SwapToSpecific(C_zde_corps)
// ZDE FIGHT
COL_SwapToSpecific(C_zde_fight)
COL_ZonePosSet(C_zde_corps, cvector(0,0,0.75))
// ZDM
COL_SwapToSpecific(C_zdm_pied)
v_zdm_cur_size = cvector(0.5,0.5,0.5)
COL_ZoneSizeSet(C_zdm_pied, v_zdm_cur_size)
v_zdm_cur_offset = cvector(0,0,0.5)
COL_ZonePosSet(C_zdm_pied, v_zdm_cur_offset)

// COLMAP
if( ! OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_ColMap) )
{
	DBG_TraceString("***** Le lapin")
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" n'a pas de colmap, veuillez faire un update prefab SVP\n")
	DBG_Warning("Un lapin (cf. log) n'a pas de colmap")
}
COL_ColMapActivationSet(all, none)

// MOVE
i_way_move_bit = Ci_WAY_BIT_WALK

// MODE FUITE
if( Fuite_Deplacement == Ci_Fuite_Deplacement_WP_Speficique && ! Fuite_wp_specifique[0] )
	DBG_Error("pas de Fuite_wp_specifique !!!")


// IK NECK INIT ================================================================================================
i_head_bone_nb = 4
for (ti_i = 0; ti_i < i_head_bone_nb; ti_i++)
{
	ao_head_bones[ti_i] = ANI_CanalObjectGet(Anim_Canal_Tete + ti_i)

	if (ti_i)	
	{
		af_neck_bone_length[ti_i - 1] = MATH_VecNorm(@ao_head_bones[ti_i - 1] OBJ_PosGet() - @ao_head_bones[ti_i] OBJ_PosGet())
		f_neck_length += af_neck_bone_length[ti_i - 1]
	}
}
ao_head_bones[i_head_bone_nb] = ANI_CanalObjectGet(Anim_Canal_Bassin)

// IK LEGS INIT ================================================================================================
tv_pos = OBJ_PosGet()

for (ti_i = 0; ti_i < 2; ti_i++)
{
	switch(ti_i)
	{
		case Ci_IK_pied_gauche :
			ti_membre_index = Anim_Canal_PiedGauche
			break
		case Ci_IK_pied_droit :
			ti_membre_index = Anim_Canal_PiedDroit
			break
		case Ci_IK_main_gauche :
			ti_membre_index = Anim_Canal_MainGauche + 1
			break
		case Ci_IK_main_droite :
			ti_membre_index = Anim_Canal_MainDroite + 1
			break
	}	

	for (ti_k = 0; ti_k < 3; ti_k++)
	{
		to_bone = ANI_CanalObjectGet(ti_membre_index + (2 - ti_k))
		ao_IK_bones[ti_i][ti_k] = to_bone
	}

	switch(ti_i)
	{
		case Ci_IK_pied_gauche :
			ti_membre_index = Anim_Canal_OrteilGauche
			break
		case Ci_IK_pied_droit :
			ti_membre_index = Anim_Canal_OrteilDroit
			break
		case Ci_IK_main_gauche :
			ti_membre_index = Anim_Canal_MainGauche
			break
		case Ci_IK_main_droite :
			ti_membre_index = Anim_Canal_MainDroite
			break
	}	

	ao_IK_bones[ti_i][3] = ANI_CanalObjectGet(ti_membre_index)
		
	af_IK_bones_length[ti_i][0] = MATH_VecNorm(@ao_IK_bones[ti_i][1] OBJ_PosGet() - @ao_IK_bones[ti_i][0] OBJ_PosGet())
	af_IK_bones_length[ti_i][1] = MATH_VecNorm(@ao_IK_bones[ti_i][2] OBJ_PosGet() - @ao_IK_bones[ti_i][1] OBJ_PosGet())
	af_IK_bones_length[ti_i][2] = MATH_VecNorm(@ao_IK_bones[ti_i][3] OBJ_PosGet() - @ao_IK_bones[ti_i][2] OBJ_PosGet())

	f_IK_leg_length[ti_i] = af_IK_bones_length[ti_i][0]
	f_IK_leg_length[ti_i] += af_IK_bones_length[ti_i][1]
	f_IK_leg_length[ti_i] += af_IK_bones_length[ti_i][2]
	f_IK_leg_length[ti_i] *= 1.75

	v_IK_bone_last_valid_sight[ti_i] = @ao_IK_bones[ti_i][2] OBJ_SightGet()
	v_IK_bone_last_valid_banking[ti_i] = @ao_IK_bones[ti_i][2] OBJ_BankingGet()

	if (ti_i < 2)
		v_IK_feet_Z_axis[ti_i] = @ao_IK_bones[ti_i][3] MATH_VecGlobalToLocal(Cv_VerticalVector)	
}


// LOOK
f_look_axis_length = 5.0
v_look_head_pos = MATH_VecGlobalToLocal(@ao_head_bones[0] OBJ_PosGet() - OBJ_PosGet())
v_look_banking = MATH_VecGlobalToLocal(@ao_head_bones[0] OBJ_BankingGet())
v_look_axis = OBJ_SightGet() * f_look_axis_length


COL_CrossableSet(Gmat_RM_Crossable_Default, none)

OBJ_FlagsTypeSet(none, OBJ_C_TypeFlag_DodgeCamera)

Lapin_OBBOX_Init(1.0)


// VISION ===============================================================
if( Atk_Vision_Dist <= 0.0 )
{
	switch( Type )
	{
		case Lapin_Type_Petit :
			Atk_Vision_Dist = 10.0
			break
		case Lapin_Type_Moyen :
			Atk_Vision_Dist = 20.0
			break
		case Lapin_Type_Geant :
			Atk_Vision_Dist = 30.0
			break
		default:
			DBG_Error("????")
	}
}
if( Atk_Vision_Angle < 0.0 )
	DBG_Error("Atk_Vision_Angle < 0.0 !!!")
if( Atk_Vision_Angle > Cf_Pi )
	DBG_Error("Atk_Vision_Angle > Cf_Pi !!!")
if( Fuite_Vision_Angle < 0.0 )
	DBG_Error("Fuite_Vision_Angle < 0.0 !!!")
if( Fuite_Vision_Angle > Cf_Pi )
	DBG_Error("Fuite_Vision_Angle > Cf_Pi !!!")
if( Fuite_Vision_Angle > Atk_Vision_Angle )
	DBG_Error("Fuite_Vision_Angle > Atk_Vision_Angle !!!")

// APPARITION DEFAULT SPEED
if( App_Speed_Max <= 0.0 )
{
	switch( Type )
	{
		case Lapin_Type_Petit :
			App_Speed_Max = Cf_Speed_Max_Lapin_Petit
			break
		case Lapin_Type_Moyen :
			App_Speed_Max = Cf_Speed_Max_Lapin_Moyen
			break
		case Lapin_Type_Geant :
			App_Speed_Max = Cf_Speed_Max_Lapin_Geant
			break
		default:
			DBG_Error("????")
	}
}

if( Atk_Poing_Delai < 0.0 )
	DBG_Error("Atk_Poing_Delai < 0.0 !!!!")

// MOVE DEFAULT SPEED
if( Depl_Speed_Max_Course <= 0.0 )
{
	switch( Type )
	{
		case Lapin_Type_Petit :
			Depl_Speed_Max_Course = Cf_Speed_Max_Lapin_Petit
			break
		case Lapin_Type_Moyen :
			Depl_Speed_Max_Course = Cf_Speed_Max_Lapin_Moyen
			break
		case Lapin_Type_Geant :
			Depl_Speed_Max_Course = Cf_Speed_Max_Lapin_Geant
			break
		default:
			DBG_Error("????")
	}
}

// FUITE DIST
if( Fuite_dist_min_wp_rayman < 6.0 )
	DBG_Error("Fuite_dist_min_wp_rayman trop petit !!!!")
if( Fuite_dist_min_moi_rayman > 0.0 )
{
	if( Fuite_dist_min_moi_rayman < Cf_fuite_dist_safe_hysteresis + 2.0 )
		DBG_Error("Fuite_dist_min_moi_rayman trop petite !!!")
}


// NAGE ===========================================================
switch( Type )
{
	case Lapin_Type_Petit :
		f_water_offset_start_blend = 0.4
		f_water_offset_position = 0.1
		break
	case Lapin_Type_Moyen :
		f_water_offset_start_blend = 0.7
		f_water_offset_position = 0.4
		break
	case Lapin_Type_Geant :
		f_water_offset_start_blend = 1.0
		f_water_offset_position = 0.7
		break
	default:
		DBG_Error("???")
}

// FUITE SOUS TERRE ====================================================
switch( Type )
{
	case Lapin_Type_Petit :
		f_taupe_offset= 2.0
		f_taupe_jump_offset = 3.0
		break
	case Lapin_Type_Moyen :
		f_taupe_offset = 3.0
		f_taupe_jump_offset = 4.5
		break
	case Lapin_Type_Geant :
		f_taupe_offset = 4.0
		f_taupe_jump_offset = 6.0
		break
	default:
		DBG_Error("???")
}


// OLD VARS
if( Mort_Immortel )
{
	DBG_Warning("IA PNJ_Lapin : Utilisez Mort_SeReleve au lieu de Mort_Immortel")
	DBG_TraceString("********* ")
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" : utilisez Mort_SeReleve au lieu de Mort_Immortel\n")
	Mort_SeReleve = Mort_Immortel
}
if( Speed_Max )
{
	DBG_Warning("IA PNJ_Lapin : Utilisez Depl_Speed_Max_Course au lieu de Speed_Max")
	DBG_TraceString("********* ")
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" : utilisez Depl_Speed_Max_Course au lieu de Speed_Max\n")
	Depl_Speed_Max_Course = Speed_Max
}
if( Nage_Speed_Max )
{
	DBG_Warning("IA PNJ_Lapin : Utilisez Depl_Speed_Max_Nage au lieu de Nage_Speed_Max")
	DBG_TraceString("********* ")
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" : utilisez Depl_Speed_Max_Nage au lieu de Nage_Speed_Max\n")
	Depl_Speed_Max_Nage = Nage_Speed_Max
}
if( Item_Arme )
{
	DBG_Warning("IA PNJ_Lapin : Utilisez Item_Arme_Utilisable au lieu de Item_Arme")
	DBG_TraceString("********* ")
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" : utilisez Item_Arme_Utilisable au lieu de Item_Arme\n")
	Item_Arme_Utilisable = Item_Arme
}
if( Item_dist_Keep_Safe )
{
	DBG_Warning("IA PNJ_Lapin : Utilisez Item_Distance_de_Filature au lieu de Item_dist_Keep_Safe")
	DBG_TraceString("********* ")
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" : utilisez Item_Distance_de_Filature au lieu de Item_dist_Keep_Safe\n")
	Item_Distance_de_Filature = Item_dist_Keep_Safe
}
if( Fuite_dist_Safe )
{
	DBG_Warning("IA PNJ_Lapin : Utilisez Fuite_dist_min_moi_rayman au lieu de Fuite_dist_Safe")
	DBG_TraceString("********* ")
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" : utilisez Fuite_dist_min_moi_rayman au lieu de Fuite_dist_Safe\n")
	Fuite_dist_min_moi_rayman = Fuite_dist_Safe	
}

f_action_desynchro = MATH_RandFloat(0.7,1.3)

// APPARITION MONTURE ===================================================
to_obj = nobody
App_Monture_ID = -1
tv_pos = OBJ_PosGet()
if( App_Monture_Gao )
{
	if (	@App_Monture_Gao AI_IsModel(get_PNJ_Snake_path))		// si c'est une araignée
		if( OBJ_BankingGet().z > 0.0 )		// si je ne suis pas spawné à l'envers (sous l'arbre)
			tv_pos += OBJ_BankingGet()		// alors je spawne la monture à 1m de +
	
	if( App_Monture_duplication )
	{
		to_obj = @App_Monture_Gao OBJ_Duplicate(tv_pos)
	}
	else
	{
		to_obj = App_Monture_Gao
		if( ! App_Monture_dont_modify )
		{
			@to_obj OBJ_Reinit(vrai)
			@to_obj OBJ_PosSet(tv_pos)
			@to_obj COL_StartMatrixSet(tv_pos)
		}
	}
	
	if( ! App_Monture_dont_modify )
	{
		@to_obj OBJ_BankingGeneralSet(OBJ_SightGet(), OBJ_BankingGet())
		@to_obj COL_StartMatrixSet(@to_obj OBJ_PosGet())
	}
}
if( to_obj )
{
	SCT_GetOf(&ti_1,&ti_2,&ti_3,&ti_4)
	@to_obj SCT_SetOf(ti_1,ti_2,ti_3,ti_4)
	@to_obj OBJ_FlagInvisibleSet(faux)
	@to_obj OBJ_FlagInactiveSet(faux)
	o_gao_init_liaison = to_obj
	meta( App_Monture_ID == -1 )
	{
		App_Monture_ID = Proc_CreatureTypeGet(o_gao_init_liaison)
	}
	to_obj = o_gao_init_liaison
	o_gao_init_liaison = nobody
	i_RideMount_ID = App_Monture_ID
	
	@to_obj OBJ_HierarchySet(OBJ_HierarchyGet())
	COL_UnCollidableAdd(to_obj)
	OBJ_HierarchyReset()
	
	@to_obj OBJ_FlagInvisibleSet(vrai)
	
	// positionnement du lapin pour que la monture accepte le ride
	o_gao_init_liaison = to_obj
	meta( ! o_RideMount_Actor )
	{
		to_obj = @o_gao_init_liaison ANI_CanalObjectGet(Anim_Canal_Tete)
		if( ! to_obj )
			to_obj = o_gao_init_liaison
		OBJ_PosSet(@to_obj OBJ_PosGet())
		o_RideMount_Actor = LNK_ClientGet(Ci_LNK_RIDE_ON_NMI, mid_RideMount_LNK_ID, vrai, nofunc, nofunc, nofunc)
	}
	o_App_Monture_Gao_this_one = o_gao_init_liaison
	o_gao_init_liaison = nobody
	f_RideMount_coef = 1.0

	// délai de disparition en mode attente
	if( App_Monture_ID != C_ID_Monture_Rope && Att_Delai_Disparition > 0.0 && ! Territory_BV )
		DBG_Error("BUG Lapin avec monture configuré pour s'enterrer après un délai en attente... ceci est prévu uniquement avec le mode Territoire 1 BV !!!")
}
// Autoriser à remonter sur ma monture :)
switch( i_RideMount_ID )
{
	case C_ID_Monture_Aigle :
		Monture_Aigle = vrai
		break
	case C_ID_Monture_Araignee :
	case C_ID_Monture_Quadripode :
		Monture_Araignee = vrai
		break
	case C_ID_Monture_Bat :
		Monture_Bat = vrai
		break
	case C_ID_Monture_PoissonLumiere :
		Monture_PoissonLumiere = vrai
		break
	case C_ID_Monture_Requin :
		Monture_Requin = vrai
		break
	case C_ID_Monture_Rhino :
		Monture_Rhino = vrai
		break
	case C_ID_Monture_Serpent :
		Monture_Serpent = vrai
		break
	case C_ID_Monture_Tigre :
		Monture_Tigre = vrai
		break
}


// DYNAMIQUE (après monture !!!) ==========================================================
Lapin_DYNA(vrai)


// APPARITION ITEM ===================================================
to_obj = nobody
if( App_Item_Gao )
{
	// OBJET EN PARAMETRE
	if( ! @App_Item_Gao AI_IsModel(get_RM_Weapon_path) )
		DBG_Error("les seuls items que le lapin peut posséder à l'init sont des armes ou des clefs / ptizêtres")
	if( App_Item_duplication )
		to_obj = @App_Item_Gao OBJ_Duplicate(OBJ_PosGet())
	else
	{
		to_obj = App_Item_Gao
		@to_obj OBJ_Reinit(vrai)
		@to_obj OBJ_PosSet(OBJ_PosGet())
		@to_obj COL_StartMatrixSet(OBJ_PosGet())
	}
	@to_obj OBJ_FlagInactiveSet(faux)
	i_item_to_get_ID = @to_obj PROC_WEAPON_TypeGet()
}
// LIAISON A ETABLIR ?
if( to_obj )
{
	@to_obj OBJ_FlagInvisibleSet(vrai)
	@to_obj OBJ_FlagInactiveSet(faux)
	@get_RM_Weapon_path to_obj o_spawn_grab_actor = OBJ_Me()
	o_gao_init_liaison = to_obj
	switch( i_item_to_get_ID )
	{
		case RM_WEAPON_TYPE_CLE :
			meta( ! o_key )
			{
				o_key = LNK_ThisClientGet(o_gao_init_liaison, Ci_LNK_GRAB_OBJECT, mid_key_LNK_ID, vrai, "Lapin_exec_grab_item_param", nofunc, nofunc)
				if( o_key )
					Lapin_ITEM_Key_Init_Values()
			}
			break
		default:
			meta( ! o_item )
			{
				o_item = LNK_ThisClientGet(o_gao_init_liaison, Ci_LNK_GRAB_OBJECT, mid_item_LNK_ID, vrai, "Lapin_exec_grab_item_param", nofunc, nofunc)
				if( o_item )
					Lapin_ITEM_Init_Values()
			}
			break
	}
	o_gao_init_liaison = nobody
}
i_item_to_get_ID = 0


f_no_ground_timer = 0.0


// OFFSET / ANIM =============================================================
ACT_ActionSet(Action_Fight_Gun_Shoot)
to_main = ANI_CanalObjectGet(Anim_Canal_MainDroite)
tv_temp = @to_main OBJ_PosGet() - OBJ_PosGet()
v_use_gun_offset = MATH_VecGlobalToLocal(tv_temp)
ACT_ActionSet(Action_Fight_Grenade_Launch)
to_main = ANI_CanalObjectGet(Anim_Canal_MainDroite)
tv_temp = @to_main OBJ_PosGet() - OBJ_PosGet()
v_use_grenade_offset = MATH_VecGlobalToLocal(tv_temp)

v_bassin_visual_offset_default = @o_canal_bassin OBJ_PosGet() - OBJ_PosGet()


// SHIELD ??? ===============================================================
if( Atk_Protect )
{
	o_shield = @get_ITEM_Bouclier OBJ_Duplicate(OBJ_PosGet())
	@o_shield OBJ_FlagInvisibleSet(vrai)
	@o_shield COL_ColMapActivationSet(none, all)
	@o_shield COL_ColSetActivationSet(none, all)
	@o_shield OBJ_ZoomSet(0.75 * OBJ_ZoomGet())
}


i_Att_Delai_Disparition_flag = faux		// si reinit
f_jump_in_back_delai = MATH_RandFloat(5.0,15.0)
f_taupe_in_back_delai = MATH_RandFloat(5.0,15.0)
v_speed_oldpos = OBJ_PosGet()
o_Commander_cur = Commander


// SFX ======================================================================
tf_angle = 0.0
for (ti_cpt = 0; ti_cpt < Ci_SFX_NB_ETOILES; ti_cpt++)
{
	i_GFX_Couronne_etoiles[ti_cpt] = -1
	f_GFX_Couronne_angle[ti_cpt] = tf_angle 
	tf_angle += 360 / Ci_SFX_NB_ETOILES
}
i_GFX_Couronne_etoiles_modulo = MATH_RandInt(5, 10)

// BEAT ===================================================================
if( Beat_Config == Ci_BEAT_Config_Sensible )
	ACT_KitMerge(get_Kit_Danse, RM_Act_Danse_Att,RM_Act_Danse_FIN)
            

// TRACKS & CALLBACKS ======================================================
AI_CBAdd(OBJ_Me(), CallBack_After_Rec, "Lapin_callback_AfterRec")
AI_CBAdd(OBJ_Me(), CallBack_Client, "Lapin_callback_Client")
AI_CBAdd(OBJ_Me(), CallBack_Reinit, "Lapin_callback_Reinit")
macro_add_callback_after_cam("Lapin_callback_AfterCam")
AI_CBAdd(OBJ_Me(), CallBack_ShortWay, "Lapin_callback_ShortWay")
if( Config_Lapin == Config_Lapin_Terminator )
{
	AI_CBAdd(OBJ_Me(), CallBack_Before_Display, "Lapin_callback_BeforeDisplay")
	AI_CBAdd(OBJ_Me(), CallBack_After_Display, "Lapin_callback_AfterDisplay")
}

if( Type == Lapin_Type_Geant && i_RideMount_ID == C_ID_Monture_Rope)
	DBG_Log_Allowed = vrai

if( DBG_Anim )
{
	ACT_ActionSet(DBG_Anim)
	AI_TrackChange(1, "Lapin_track_anim")
}
else
{
	AI_TrackChange(1, "Lapin_track_reflex")
	
	if( App_WP || AI_TriggerIsValid(App_Trigger) )
	{
		// APPARITION =========================================
		OBJ_FlagInvisibleSet(vrai)
		Lapin_APPARITION_Initialisation()
		
		if( o_RideMount_Actor )
			AI_TrackChange(2, "Lapin_ETAT_RIDE_MOUNT")
		else
			AI_TrackChange(2, "Lapin_ETAT_APPARITION")
	}
	else
	{
		// ATTENTE ===========================================
		OBJ_FlagInvisibleSet(faux)
		i_App_Trigger_done = vrai
		i_invisible_flag = faux
		v_last_pos = OBJ_PosGet()
		if( o_item )
			@o_item OBJ_FlagInvisibleSet(faux)
		if( o_key )
			@o_key OBJ_FlagInvisibleSet(faux)
		if( o_shield )
			@o_shield OBJ_FlagInvisibleSet(faux)
		if( o_RideMount_Actor )
			@o_RideMount_Actor OBJ_FlagInvisibleSet(faux)
		
		Lapin_TARGETTING(vrai)
		
		if( o_RideMount_Actor )
			AI_TrackChange(2, "Lapin_ETAT_RIDE_MOUNT")
		else
			AI_TrackChange(2, "Lapin_ETAT_ATTENTE")
	}
	AI_TrackChange(3, "Lapin_track_end")
	AI_TrackChange(4, "Lapin_track_debug")
}
AI_TrackCurStop()



