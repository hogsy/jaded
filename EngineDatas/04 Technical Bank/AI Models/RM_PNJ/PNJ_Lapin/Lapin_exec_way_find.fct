#include "PNJ_Lapin_defines.var"

//	PARAMETRES D'ENTREE =============================================
//	
//	i_target_territory_ID
//	v_way_destpos
// 	
//	PARAMETRES DE SORTIE =============================================
//	v_next_pos
//	o_next_wp
//	i_next_territory
//

object	to_dest_wp
object	to_start_wp
object	to_last_wp
object	to_dest_gao
object	to_target
vector	tv_dest_pos
vector	tv_temp
int			ti_territory_ID
int			ti_flag_get_next_wp
int			ti_way_nb_wp
int			ti_capa
int			ti_ok
float		tf_dist



//=========================================================================
// COMMANDER
//=========================================================================
if( o_Commander_cur )
{
	v_next_pos = v_way_destpos
	return
}


//=========================================================================
// SNIPER
//=========================================================================
if( Att_Protect_Gao && Lapin_APPARITION_Terminee() )
{
	// j'ai un gao à protéger
	if( Att_Protect_Gao_Dist < 1.0 )
		DBG_Error("Att_Protect_Gao_Dist doit etre > 1m !!!!")
	DBG_RenderCircle(@Att_Protect_Gao OBJ_PosGet() + Cv_VerticalVector, Att_Protect_Gao_Dist, Cv_VerticalVector, 0xFFFF)
	
	ti_ok = faux
	to_target = nobody
	tv_temp = OBJ_PosGet() - @Att_Protect_Gao OBJ_PosGet()
	tv_temp.z = 0.0
//	if( i_Att_Protect_last_trame_in_circle )
		tf_dist = Att_Protect_Gao_Dist
//	else
//		tf_dist = Att_Protect_Gao_Dist - 1.5
	if( MATH_VecDotProduct(tv_temp, tv_temp) > (tf_dist * tf_dist) )
	{
		i_Att_Protect_last_trame_in_circle = faux
		ti_ok = vrai		// je suis hors du rayon => go protect !
	}
	else 
	{
		i_Att_Protect_last_trame_in_circle = vrai
		if( ! MSG_GlobalIsValid(mid_best_interet) )
			ti_ok = vrai		// pas d'intéret => go protect !
		else
		{
			to_target = EVENT_InteretTargetGet(mid_best_interet)
			if( ! to_target )
				ti_ok = vrai		// pas de target => go protect !
			else
			{
				tv_temp = @to_target OBJ_PosGet() - @Att_Protect_Gao OBJ_PosGet()
				tv_temp.z = 0.0
				if( MATH_VecDotProduct(tv_temp, tv_temp) > (Att_Protect_Gao_Dist * Att_Protect_Gao_Dist) )
					ti_ok = vrai		// ma target est loin de mon gao => go protect !
			}
		}
	}
	if( ti_ok )
	{
		// je dois retourner protéger mon gao
		tv_temp = OBJ_PosGet() - @Att_Protect_Gao OBJ_PosGet()
		tv_temp.z = 0.0
		tf_dist = Att_Protect_Gao_Dist
		if( MATH_VecDotProduct(tv_temp, tv_temp) > (tf_dist * tf_dist) )
		{
			v_next_pos = @Att_Protect_Gao OBJ_PosGet()
			return
		}
		else
		{
			v_next_pos = OBJ_PosGet()
			
			// je suis en place, dois-je regarder rayman ???
			if( Att_Protect_Gao_Vision )
			{
				v_look_pos = @o_main_actor OBJ_PosGet()
				v_force_sight = @o_main_actor OBJ_PosGet() - OBJ_PosGet()
			}
			return
		}
	}
}


//=========================================================================
// DON'T MOVE ????
//=========================================================================
if( MATH_VecNullToler(v_way_destpos, 0.01) )
{
	v_next_pos = Cv_NullVector	// OBJ_PosGet()
	return
}


//=========================================================================
// PATHFINDING 
//=========================================================================
if( Territory_Path )
{
	Lapin_PATH_Init()
	
//	// OPTIM GET WP DU MAIN ACTOR
//	if( MSG_GlobalIsValid(mid_best_interet) 
//	&& EVENT_InteretTargetGet(mid_best_interet) == o_main_actor 
//	&& @get_global PATH_LIB_main_actor_wp )
//		o_path_dest_wp = @get_global PATH_LIB_main_actor_wp
	
	to_dest_gao = nobody

	if (MATH_VecSquareNorm(v_way_destpos - @o_main_actor OBJ_PosGet()) <  1.0)
	{
		to_dest_gao = o_main_actor
		v_next_pos = v_path_way_to_main_next_pos
	}
	else
	{
		if (MATH_VecNull(v_way_destpos))
			tv_dest_pos = OBJ_PosGet()
		else
			tv_dest_pos = v_way_destpos
		
		// durée depuis laquelle je n'ai plus de chemin ?
		if( f_path_way_no_way_duree > 0.5 )
		{
			i_path_way_force_recompute_flag = vrai
			f_path_way_no_way_duree = 0.0
		}
		
		v_next_pos = PATH_LIB_Get_Next_Pos(	OBJ_PosGet(),			// POSITION DE DEPART
																OBJ_Me(),					// ACTEUR DU DEPART
																o_path_start_wp,			// WP DE DEPART (BYREF)
																tv_dest_pos,				// POSITION D'ARRIVEE
																to_dest_gao, 				// ACTEUR ARRIVEE
																o_path_dest_wp,			// WP D'ARRIVEE (BYREF)
																1.5 + Lapin_MOVE_Offset_Get(),	// 2.0,							// EXTRUSION (LA TAILLE DE L'ACTEUR)
																Territory_Path,					// LE RESEAU UTILISE
																i_path_net_wp_nb,		// LE NOMBRE DE POINTS DU RESEAU
																&ao_path_net_wp[0],	// LES WPS DU RESEAU
																i_path_way_wp_nb,		// LE NOMBRE DE WP DU CHEMIN (BYREF)
																&ao_path_way_wp[0],	// LES WPS DU CHEMIN (BYREF)
																i_path_way_force_recompute_flag,		// FORCE LE RECALCUL DU CHEMIN (VRAI / FAUX)
																i_path_client_ID)
		// durée depuis laquelle je n'ai plus de chemin ?
		if( ! i_path_way_wp_nb )
			f_path_way_no_way_duree += TIME_GetDt()
		else
			f_path_way_no_way_duree = 0.0
		
		if( ! o_path_start_wp )
			v_next_pos = v_way_destpos
		else if( ! o_path_dest_wp )
		{
			if( i_AI_computed_dest_pos_flag )
				v_next_pos = v_way_destpos		// c une pos calculée y aller qd même...
		}
	}

//	// MEMORISATION DU WP DEST POUR OPTIMISATION
//	if( MSG_GlobalIsValid(mid_best_interet) 
//	&& EVENT_InteretTargetGet(mid_best_interet) == o_main_actor 
//	&& o_path_dest_wp )
//		@get_global PATH_LIB_main_actor_wp = o_path_dest_wp
	
	return
}


//=========================================================================
// PAS DE RECHERCHE DE CHEMIN
//=========================================================================
if( ! Territory_Colmap )
{
	if( Territory_BV )
	{
		if( Lapin_Pos_in_Territory_BV(v_way_destpos) )
			v_next_pos = v_way_destpos
		else
		{
			switch( i_etat_courant )
			{
				case ETAT_Lapin_TAUPE :
				case ETAT_Lapin_ATTENTE :
					v_next_pos = v_way_destpos
					break
				default:
					if( o_App_next_wp )
						v_next_pos = v_way_destpos
					else if( i_AI_computed_dest_pos_flag )
						v_next_pos = v_way_destpos		// c une pos calculée y aller qd même...
					else
						v_next_pos = Cv_NullVector
					break
			}
		}
	}
	else
		v_next_pos = v_way_destpos
	return
}


//=========================================================================
// COLMAP TERRITOIRE 
//=========================================================================
ti_territory_ID = 0	// SET THIS TO INTERRUPT WAY TO TARGET( FLEE FIRE OR ELSE)
if ( ! Lapin_PROC_WAY_TERRITORY_ID_ALLOWED(i_target_territory_ID))
{
	// DESTINATION TERRITORY NOT AVAILABLE
	if( i_flag_in_my_territory )
	{
		// MY TERRITORY IS GOOD I CAN STAY HERE
		v_next_pos = Cv_NullVector
		o_next_wp = nobody
		return
	}
	else
	{
		// MY TERRITORY IS NO MORE AVAILABLE FLEE
		ti_territory_ID = Lapin_PROC_WAY_FLEE_TERRITORY(i_my_territory_ID)
		if ( ti_territory_ID == -1 )
		{
			// NOWHERE TO FLEE JUST DIE HERE
			v_next_pos = Cv_NullVector
			o_next_wp = nobody
			return
		}
	}
}

if ( i_my_territory_ID == i_target_territory_ID
&& ! ti_territory_ID)
{
	// SAME TERRITORY THAN MY CURRENT TARGET GO WITH OCCLUDER ONLY
	v_next_pos = v_way_destpos
	i_next_territory = i_target_territory_ID
	o_next_wp = nobody
	return
}
else
{
	// CHECK SHORT WAY BEETWEEN THE 2 TERRITORIES
	if ( ! ti_territory_ID && i_my_territory_ID)
	{
		// LOOK FOR TERRITORY PATH
		ti_territory_ID = Lapin_PROC_WAY_REACH_TERRITORY( i_my_territory_ID, i_target_territory_ID)
	}	
	// UPDATE WAY
	if ( !o_next_wp || o_next_wp.des_int2 != i_next_territory )	// Nowhere or new territory
	{
		ti_way_nb_wp = Lapin_PROC_WAY_TERRITORY_PATH(i_my_territory_ID, ti_territory_ID, i_way_move_bit)
		if ( ti_way_nb_wp == -1)
		{
			// NOWHERE TO GO
			v_next_pos = Cv_NullVector
			o_next_wp = nobody
			return			
		}
		else if ( !ti_way_nb_wp)
		{
			// NOT IN A TERRITORY CANNOT CHOOSE
			v_next_pos = Cv_NullVector
			o_next_wp = nobody
			return					
		}
		o_current_wp = ao_way_wp[i_way_wp_nb]
		o_next_wp = ao_way_wp[i_way_wp_nb - 1]
		if (i_way_wp_nb > 1)
			o_next_next_wp = ao_way_wp[i_way_wp_nb - 2]
	}
	else if ( COL_Pivot_BVCollide( o_next_wp))
	{
		// On enlève ce wp puisqu'il est atteint
		if (i_way_wp_nb)
		{
			o_current_wp = o_next_wp
			i_way_wp_nb--
			ao_way_wp[i_way_wp_nb] = nobody
		}
		// On regarde si on a un wp suivant
		if (i_way_wp_nb)
			o_next_wp = ao_way_wp[i_way_wp_nb - 1]		
		else
			o_next_wp = nobody
	}

	// NEW NEXT VALUES
	if ( o_next_wp)
	{
		v_next_pos = @o_next_wp OBJ_PosGet()
		i_next_territory = o_next_wp.des_int2

		if ( o_current_wp)
			ti_capa = WAY_LinkCapaGet(Territory_Colmap,o_current_wp, o_next_wp)
		else
			ti_capa = 0
	}
}

