#include "PNJ_Lapin_defines.var"

int			ti_i
int			ti_flag_ok
int			ti_interet_cpt
int			ti_target_item_checked
int			ti_gao_ray_insensitive

float		tf_test_dist
float		tf_dist, tf_dist2
float		tf_dot_product
float		tf_sqr_dist
float		tf_norm
float		tf_me_to_target_dist
float		tf_range

vector	tv_temp
vector	tv_sight
vector	tv_pos
vector	tv_me_to_target 
vector	tv_ray_start
vector	tv_ray_dir

object	to_target
object	to_target_ref_bone
object	to_obj
object	to_gao


if( f_item_weapon_use_delai )
	return

if( ! o_item )
	return

if( i_item_ID != RM_WEAPON_TYPE_GUN )
	return

if( ! o_RideMount_Actor )
	return
	
if( i_RideMount_ID != C_ID_Scooter )
	return

if( ! @o_RideMount_Actor OBJ_CapaTest(OBJ_Capa_0))
	return

if( ! @o_RideMount_Actor OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Dyna))
	return

if( @o_RideMount_Actor DYN_SpeedGet() > 5.0 )
	return

if( i_perceived_best_actor_index == -1)
	return

to_target = ao_perceived_actor[i_perceived_best_actor_index]

if( ! to_target )
	return

//if( f_OnScreen_Pct < 0.9 )
//	return		// HORS CHAMP !!!!

ti_flag_ok = faux
ti_target_item_checked = faux

//tf_range = f_item_range
tf_range = 100.0

tf_sqr_dist = tf_range
tf_sqr_dist *= tf_sqr_dist

to_gao = to_target

to_target_ref_bone = @to_gao ANI_CanalObjectGet(Anim_Canal_Tete)
if ( ! to_target_ref_bone )
	to_target_ref_bone = to_gao

tv_temp = @to_gao OBJ_PosGet()
tv_temp -= OBJ_PosGet()
tv_me_to_target = tv_temp

tv_ray_start = v_look_head_pos
tv_temp = @to_target_ref_bone OBJ_PosGet()
tv_temp -= tv_ray_start

tf_dist = MATH_VecDotProduct(tv_temp, tv_temp)

if (tf_dist < f_item_dist_too_close * f_item_dist_too_close )
{
	return		// too close !!!!
}
else if (tf_dist > tf_sqr_dist)
{
	return		// too far !!!!
}
else if( Lapin_ITEM_Is_Reloading() )
{
	return		// reload !!!
}
else
	ti_flag_ok = vrai		// pas d'obstacle

// On peut tirer / lancer
if( ti_flag_ok )
{
	f_item_weapon_use_delai = MATH_RandFloat(5.0, 8.0)
	macro_change_etat("Lapin_ETAT_USE_ITEM")
}
