//#include "PNJ_Lapin_defines.var"
//
//object	to_target
//object	to_occluder
//object	to_best_cache
//object	tao_wp[10]
//vector	tv_progression
//vector	tv_pos
//vector	tv_temp
//vector	tv_temp1
//vector	tv_temp2
//vector	tv_sight
//vector	tv_next_pos
//vector	tv_dest_pos
//vector	tv_occluder_pos
//vector	tv_start_pos
//float		tf_dist
//float		tf_dist0
//float		tf_best_dist
//float		tf_size
//float		tf_occluder_size
//float		tf_occluder_length
//int			ti_i
//int			ti_territory
//int			ti_way_wp_nb
//int			ti_ind
//network	tway_occluder
//
//
//if( Progression_Strategie != Ci_Progression_Strategie_Caches_Progression )
//	return
//
//if ( ! i_flag_in_my_territory )
//	return
//
//if( i_progression_cache_done )
//	return
//
//tv_sight = OBJ_SightGet()
//tv_sight.z = 0.0
//MATH_VecSetNormalize(tv_sight)
//
//ti_territory = i_my_territory_ID
////if( o_progression_cache )
////{
//////	if( o_progression_cache_old )
//////		tv_start_pos = ( WAY_LIB_Occluder_Centre_Position(o_progression_cache) + WAY_LIB_Occluder_Centre_Position(o_progression_cache_old) / 2 )
//////	else
////		tv_start_pos = WAY_LIB_Occluder_Centre_Position(o_progression_cache)
////}
////else
//	tv_start_pos = OBJ_PosGet()
//
//to_target = EVENT_InteretTargetGet(mid_best_interet)
//tv_progression = @to_target OBJ_PosGet() - tv_start_pos
//tv_progression.z = 0.0
//tf_dist0 = MATH_VecNorm(tv_progression)
//DBG_RenderVector(tv_start_pos + Cv_VerticalVector, tv_progression, color_cyan)
//tv_progression /= tf_dist0
//
//
////tf_best_dist = Cf_Infinit
//tf_best_dist = tf_dist0		// ne pas choisir un occluder derrière rayman
//to_best_cache = nobody
//
//// JE CHERCHE LES OCCLUDERS CACHE !!!
//for (ti_i = 0; ti_i < @get_list_manager i_occluder_nb; ti_i++)
//{
//	to_occluder = @get_list_manager ao_occluder[ti_i]
//	
//	if( ! @to_occluder OBJ_CapaTest(Ci_Capa_Occluder_Cache_Progression) )
//		continue
//	
//	if (ti_territory != -1 && to_occluder.des_int2 != ti_territory)
//		continue
//	
//	if (@to_occluder OBJ_FlagsControlGet() & (OBJ_C_ControlFlag_SectoInactive | OBJ_C_ControlFlag_ForceInactive))
//		continue
//	
//	// TEST ANNULATION DES OCCLUDERS DANS LESQUELS JE SUIS DEJA (trouver le next)
////	tv_dest_pos = OBJ_PosGet()
////	tf_size = 1.0
////	if (@to_occluder OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_Links))
////	{
////		// =============================================================================================
////		// GEOMETRIE
////		// =============================================================================================
////		tway_occluder = @to_occluder WAY_NetOfObj()
////		ti_way_wp_nb = WAY_NetFill(tway_occluder, WAY_RootGet(tway_occluder), &tao_wp[0])
////		if( WAY_LIB_In_Geometrie(tv_dest_pos, tv_sight, tf_size, &tao_wp[0], ti_way_wp_nb, tv_next_pos) )
////			continue
////	}
////	else
////	{
////		// GELLULE OU SPHERE
////		tv_temp = @to_occluder OBJ_ScaleGet()
////		tv_occluder_pos = WAY_LIB_Occluder_Centre_Position(to_occluder)
////		tv_occluder_pos.z = tv_dest_pos.z
////		if (tv_temp.x > tv_temp.y)
////		{
////			tf_occluder_size = tv_temp.y
////			tf_occluder_length = tv_temp.x - tf_occluder_size
////			tf_occluder_size *= 0.5
////		}
////		else
////		{
////			tf_occluder_size = tv_temp.x
////			tf_occluder_length = tv_temp.y - tf_occluder_size
////			tf_occluder_size *= 0.5
////		}
////		if (tf_occluder_length)
////		{
////			// =============================================================================================
////			// GELLULE
////			// =============================================================================================
////			if( WAY_LIB_In_Gellule(tv_dest_pos, tv_sight, tf_size, to_occluder, tv_next_pos) )
////				continue
////		}
////		else
////		{
////			// =============================================================================================
////			// SPHERE
////			// =============================================================================================
////			if( WAY_LIB_In_Sphere(tv_dest_pos, tv_sight, tf_size, tv_occluder_pos, tf_occluder_size, @to_occluder OBJ_SightGet(), @to_occluder OBJ_HorizonGet(), @to_occluder OBJ_CapaTest(Ci_Capa_Occ_180), tv_next_pos) )
////				continue
////		}
////	}
//	
//	tv_pos = WAY_LIB_Occluder_Centre_Position(to_occluder)
//	Str_DisplayGaoOnce(to_occluder, VIEW_3dWorldTo2d(0, tv_pos))
//	tv_temp = tv_pos - tv_start_pos
//	tv_temp.z = 0.0
//	DBG_RenderVector(tv_start_pos + Cv_VerticalVector, tv_temp, color_blanc)
//	
////	if( o_progression_cache && to_occluder == o_progression_cache )
////	{
////		DBG_RenderVector(tv_start_pos + Cv_VerticalVector, tv_temp, color_noire)
////		continue		// cet occluder est exclu de la recherche
////	}
////	
////	if( o_progression_cache_old && to_occluder == o_progression_cache_old )
////	{
////		DBG_RenderVector(tv_start_pos + Cv_VerticalVector, tv_temp, color_noire)
////		continue		// cet occluder est exclu de la recherche
////	}
//	
//	if( o_cache_not_safe && to_occluder == o_cache_not_safe )
//		continue
//	
//	ti_ind = ARR_ObjSearch(&ao_progression_cache[0], i_progression_cache_nb, to_occluder )
//	if( ti_ind != -1 )
//	{
//		DBG_RenderVector(tv_start_pos + Cv_VerticalVector, tv_temp, color_noire)
//		continue		// cet occluder est exclu de la recherche
//	}
//	
//	tv_temp1 = MATH_VecNormalize(tv_temp)
//	if( MATH_VecDotProduct(tv_progression, tv_temp1) < Cf_Cos60 )
//	{
//		DBG_RenderVector(tv_start_pos + Cv_VerticalVector, tv_temp, color_rouge)
//		continue			// progression, pas régression !!! :)
//	}
//	
////	if( MATH_VecDotProduct(tv_sight, tv_temp) < 0.0 )
////	{
////		DBG_RenderVector(tv_start_pos + Cv_VerticalVector, tv_temp, color_jaune)
////		continue			// progression, pas régression !!! :)
////	}
////	
//	tf_dist = MATH_VecDotProduct(tv_temp, tv_progression)
//	Str_DisplayFloatOnce(tf_dist, VIEW_3dWorldTo2d(0, tv_pos) + cvector(0,0.05,0))
//	if( tf_dist < tf_best_dist )
//	{
//		tf_best_dist = tf_dist
//		to_best_cache = to_occluder
//		DBG_RenderVector(tv_start_pos + Cv_VerticalVector, tv_temp, color_vert)
//	}
//}
//
//if( to_best_cache )
//{
//	o_cache = to_best_cache
//	o_cache_actor = to_target
//	i_cache_mode = Ci_CACHE_Mode_Progression
////	o_progression_cache_old = o_progression_cache
////	o_progression_cache = o_cache		// backup poru progression next cache
//	Lapin_Progression_Cache_Add(o_cache)
//	macro_change_etat("Lapin_ETAT_CACHE")
//}
//else
//{
//	i_progression_cache_done = vrai		// ne plus checker les caches
//}
//