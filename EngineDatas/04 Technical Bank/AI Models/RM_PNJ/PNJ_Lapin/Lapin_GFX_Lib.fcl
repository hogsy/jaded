

procedure_local void Lapin_GFX_Etincelles()
{
	vector tv_pos
	tv_pos = cvector(MATH_FloatSign(MATH_RandFloat(-1,1)) * MATH_RandFloat(0.25,0.75), 
							MATH_FloatSign(MATH_RandFloat(-1,1)) * MATH_RandFloat(0.25,0.75), 
							MATH_FloatSign(MATH_RandFloat(-1,1)) * MATH_RandFloat(0.25,0.75))
 	tv_pos *= OBJ_ZoomGet()
	tv_pos += @o_canal_tete OBJ_PosGet()
	
//	if( i_GFX_Destruction_Etincelle == -1 )
	{
		i_GFX_Destruction_Etincelle = GFX_Add(9)
		GFX_FlagSet(i_GFX_Destruction_Etincelle, 0,1)
		GFX_FlagSet(i_GFX_Destruction_Etincelle, 2, 1)
		GFX_MaterialSet(i_GFX_Destruction_Etincelle, get_SFX_light_and_smoke, 5)
		GFX_Seti(i_GFX_Destruction_Etincelle, 9101, 0x40448DAB)											// Couleur des particules
		GFX_Setv(i_GFX_Destruction_Etincelle, 9201, cvector(0.0, 0.0, 1.0) )								// Axe principal de génération
		GFX_Setv(i_GFX_Destruction_Etincelle, 9202, cvector(0, 0, 0.0))										// Gravité
		GFX_Seti(i_GFX_Destruction_Etincelle, 9100, 5)															// Nombre de particules max
		GFX_Seti (i_GFX_Destruction_Etincelle, 9102, 10)															// Flags
		GFX_Setf(i_GFX_Destruction_Etincelle, 9000, 3.0 )															// Angle du cône, en radians
		GFX_Setf(i_GFX_Destruction_Etincelle, 9001, 5)															// Vitesse min
		GFX_Setf(i_GFX_Destruction_Etincelle, 9002, 6)															// Vitesse max
		GFX_Setf(i_GFX_Destruction_Etincelle, 9003, 0.8)															// Friction
		GFX_Setf(i_GFX_Destruction_Etincelle, 9004, MATH_RandFloat(0.05,0.1))						// Epaisseur des étincelles
		GFX_Setf(i_GFX_Destruction_Etincelle, 9005, 0.5)															// Temps de vie minimum
		GFX_Setf(i_GFX_Destruction_Etincelle, 9006, 1.0)															// Temps de vie max
		GFX_Setf(i_GFX_Destruction_Etincelle, 9007, 1.0)															// Multiplicateur de longueur
		GFX_Setf(i_GFX_Destruction_Etincelle, 9008, 0.0)															// Temps entre la génération de 2 étincelles
		GFX_Setf(i_GFX_Destruction_Etincelle, 9009, 0.2)															// Temps de mort minimum
		GFX_Setf(i_GFX_Destruction_Etincelle, 9010, 0.2)															// Temps de mort maximum
	}
	GFX_Setv(i_GFX_Destruction_Etincelle, 9200, tv_pos)						// Position
}




//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
// 					SMOKE 01
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
procedure void Lapin_GFX_Smoke(vector tv_pos)
{
	int		ti_GFX_Smoke	
	int		ti_terrain
	
	float		tf_speed

	vector	tv_wind
	vector	tv_pos_dir

	tv_pos_dir = DYN_SpeedGetVector()
	tf_speed = MATH_VecNorm(tv_pos_dir)
	if (tf_speed > 1.0)
	{
		tv_pos_dir /= tf_speed
		tf_speed = MATH_FloatMin(tf_speed, 10.0)
	}
	else
	{
		tf_speed = 2.0
		tv_pos_dir = OBJ_SightGet()
	}
	
	tv_pos_dir *= 5.0
	ti_GFX_Smoke = GFX_Add(13)																// Create the boum
	
	GFX_MaterialSet(ti_GFX_Smoke, get_SFX_light_and_smoke, -1)						// met le materiau
	GFX_Seti(ti_GFX_Smoke, 13101, 8)															// Materiau 0

	GFX_Seti(ti_GFX_Smoke, 13100, 5)															// *Buffer number of sprite
	GFX_Seti(ti_GFX_Smoke, 13106, 5)												// *number of sprite to generate

	GFX_Setf(ti_GFX_Smoke, 13003, 0.5)															// Time fase 1
	GFX_Setf(ti_GFX_Smoke, 13004, 4.0)															// Time fase 2

	GFX_Seti(ti_GFX_Smoke, 13107, 0)															// Sprites non triés

	GFX_FlagSet(ti_GFX_Smoke, 0 , 1)
	GFX_FlagSet(ti_GFX_Smoke, 2 , 1)
	
	GFX_Setf(ti_GFX_Smoke, 13012, 0.0)														// Time random

	GFX_Setf(ti_GFX_Smoke, 13005, 1.0)														// Creation size min
	GFX_Setf(ti_GFX_Smoke, 13006, 2.0)														// Creation size max
	
	GFX_Setv(ti_GFX_Smoke, 13201, tv_pos_dir + cvector(-1.0, -1.0, -1.0))							// Speed min
	GFX_Setv(ti_GFX_Smoke, 13202, tv_pos_dir + cvector(1.0, 1.0, 1.0))								// Speed max
	GFX_Setf(ti_GFX_Smoke, 13009, tf_speed * 0.75)							// Norm speed min
	GFX_Setf(ti_GFX_Smoke, 13010, tf_speed * 1.25)									// Norm speed max
	GFX_Setv(ti_GFX_Smoke, 13203, cvector(0.008, 0.008, 0.05))					// friction speed
	GFX_Setf(ti_GFX_Smoke, 13000, 0.5)														// Growing speed min
	GFX_Setf(ti_GFX_Smoke, 13001, 1.0)														// Growing speed max
	GFX_Setf(ti_GFX_Smoke, 13002, 0.0001)													// Friction Grow

	GFX_Setf(ti_GFX_Smoke, 13007, 0.0)														// Gravity

	GFX_Seti(ti_GFX_Smoke, 13103, COLOR_Blend(0x204FB9BD, 0x60000000 | (WOR_AmbiantColGet(0) & 0x00FFFFFF), 0.5))	// Color fase 0
	GFX_Seti(ti_GFX_Smoke, 13104, COLOR_Blend(0x104FB9BD, 0x20000000 | (WOR_AmbiantColGet(0) & 0x00FFFFFF), 0.5))	// Color fase 1
	GFX_Seti(ti_GFX_Smoke, 13105, COLOR_Blend(0x00879E8B, WOR_AmbiantColGet(0) & 0x00FFFFFF, 0.5))	// Color fase 2
	
	GFX_Setf(ti_GFX_Smoke, 13008, 0.001)														// generation rate
	
	GFX_Setv(ti_GFX_Smoke, 13205, Cv_NullVector)										// Mainposspeed
	GFX_Setv(ti_GFX_Smoke, 13206, Cv_NullVector)										// Mainpossfriction
	
	GFX_Setv(ti_GFX_Smoke, 13204, tv_wind)												// wind
	
	tv_wind = Cv_NullVector
	tv_pos -= tv_wind * TIME_GetDt()
	GFX_Setv(ti_GFX_Smoke, 13200, tv_pos) 								// Creation Pos
	GFX_Setv(ti_GFX_Smoke, 13207, cvector(0.5, 0.0, 0.0))	// CreaPosAxe X
	GFX_Setv(ti_GFX_Smoke, 13208, cvector(0.0, 0.5, 0.0))	// CreaPosAxe Y
	GFX_Setv(ti_GFX_Smoke, 13209, cvector(0.0, 0.0, 0.25))	// CreaPosAxe Z
}


procedure_local void Lapin_GFX_Fuite_Halo()
{
	int		ti_i	
	vector	tv_banking
	
	if (MATH_VecSquareNorm(OBJ_PosGet() - v_fuite_halo_last_pos) > 4.0)
	{
		i_fuite_halo_index = MATH_Modulo(i_fuite_halo_index + 1, 100)

		if ( ai_fuite_halo[i_fuite_halo_index] <= 0 )
		{
			ai_fuite_halo[i_fuite_halo_index] = @o_main_actor GFX_Add(21)                                 	 //création du halo
			GFX_MaterialSet(ai_fuite_halo[i_fuite_halo_index], get_SFX_light_and_smoke, 61) 	// affectation du matériau
			GFX_Setf(ai_fuite_halo[i_fuite_halo_index], 21000, 0.5)             // taille du halo
			GFX_Setf(ai_fuite_halo[i_fuite_halo_index], 21004, 10.0)                       // taille du halo
			GFX_Seti(ai_fuite_halo[i_fuite_halo_index], 21101, 0xFFFFFFFF)          // couleur du halo
			GFX_Seti(ai_fuite_halo[i_fuite_halo_index], 21100, 4)
		}
		
		af_fuite_halo_duration[i_fuite_halo_index] = 5.0
		v_fuite_halo_last_pos = OBJ_PosGet()
		
		GFX_Setv(ai_fuite_halo[i_fuite_halo_index], 21200, OBJ_PosGet())
		if( o_RideMount_Actor )
			tv_banking = @o_RideMount_Actor OBJ_BankingGet()
		else
			tv_banking = OBJ_BankingGet()
		GFX_Setv(ai_fuite_halo[i_fuite_halo_index], 21201, tv_banking)
	}
	
	for (ti_i = 0; ti_i < 100; ti_i++)
	{
		if ( ai_fuite_halo[i_fuite_halo_index] <= 0 )
			continue
		
		af_fuite_halo_duration[ti_i] -= TIME_GetDt()
		if (af_fuite_halo_duration[ti_i] <= 0.0)
		{
			GFX_Del(ai_fuite_halo[ti_i])
			ai_fuite_halo[ti_i] = -1
		}
		else
		{
			GFX_Setf(ai_fuite_halo[ti_i], 21004, 10.0 * (af_fuite_halo_duration[ti_i] / 5.0))                       // taille du halo
			GFX_Seti(ai_fuite_halo[ti_i], 21101, COLOR_Blend(0, 0xFFFFFFFF, af_fuite_halo_duration[ti_i]))          // couleur du halo
		}
	}
}
