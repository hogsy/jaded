#include "PNJ_Lapin_defines.var"

vector	tv_speed
vector	tv_sigmaF
vector	tv_delta_speed
vector	tv_new_banking_axis
vector	tv_temp
vector	tv_pos
vector	tv_sens
vector	tv_offset
vector	tv_sight
vector	tv_banking

object	to_bassin
object	to_bone
object	to_head
object	to_target
object	tao_zde_zde_list[20]
object	to_main
object	to_col_add

float		tf_bassin_angle
float		tf_dmg
float		tf_speed
float		tf_size

int			ti_collision_nb
int			ti_ind
int			ti_i
int			ti_paf_type
int			ti_snd
int			ti_dont_paf_buddies
int			ti_dont_paf_rayman


// BASCULE -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RM_Bascule_Refresh(OBJ_ZoomGet(), v_dyn_speed_before_rec, DYN_SpeedGetVector(), o_bascule)


// WATER ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if( i_is_in_water && MATH_VecNullEpsilon( DYN_GravityVectorGet()) )
{
	f_water_blend += TIME_GetDt() * 2.0
	tv_pos = OBJ_PosGet()
	tv_pos.z = MATH_FloatBlend( tv_pos.z, f_water_Z - f_water_offset_position + ( MATH_Cos( f_water_blend * 3.0) * 0.05),f_water_blend)
	OBJ_PosSet( tv_pos)
}


// MES COUILLES DE MOTEUR QUI NIQUE LA VITESSE EN Z ET QUI FAIT DECROCHER DU SOL ============================
// Sale bidouille honteuse pas si fausse. - FROM STEF
tv_speed = v_speedgetvector
if( i_ground_flag 
	&& ! MATH_FloatNullToler(DYN_SpeedGet(), 1.0)
	&& i_etat_courant != ETAT_Lapin_JUMP
	&& ! i_is_in_water
	&&  tv_speed.z <= 0.0 )
{
	// vitesse = (Somme froce/friction) - ( (Somme froce/friction) - vitesse)exp(-frict*tdt)
	tv_sigmaF = DYN_TractionVectorGet()  + DYN_StreamVectorGet() + DYN_GravityVectorGet()
	tf_speed = tv_sigmaF.z * TIME_GetDt() + v_speed_before_rec.z
	tv_speed = v_speedgetvector
//	DBG_RenderVector( OBJ_PosGet(),tv_speed , color_bleu)
	tv_speed.z = -5.0 //tf_speed
//	DBG_RenderVector( OBJ_PosGet(),tv_speed , color_rouge)
	DYN_SpeedSetVector(tv_speed)
}


// ORIENTATION LATERALE EN FONCTION DE LA VITESSE PRECEDENTE ============================================
to_bassin = ANI_CanalObjectGet(Anim_Canal_Bassin)

tv_delta_speed = (v_speedgetvector - v_last_speed) / TIME_GetDt()
tf_bassin_angle = MATH_VecDotProduct(tv_delta_speed, OBJ_HorizonGet()) * 0.01
	
f_bassin_angle = MATH_FloatBlend(f_bassin_angle, -tf_bassin_angle, 3.0 * TIME_GetDt())

tv_new_banking_axis = MATH_VecRotate(OBJ_BankingGet(), OBJ_SightGet(), f_bassin_angle)

@to_bassin OBJ_Rotate_FromTo(@to_bassin MATH_VecGlobalToLocal(OBJ_BankingGet()), @to_bassin MATH_VecGlobalToLocal(tv_new_banking_axis))

v_last_speed = v_speedgetvector
// Orientation lateral fct de ta vitesse precedante ==================================================================


// DYNA
v_dyn_speed = v_speedgetvector


// ZDE CORPS =========================================================================================
switch( ACT_ActionGet() )
{
	case Action_Paf_Combo_Finish :
	case Action_Paf_fort_face :
	case Action_Paf_fort_crete :
	case Action_Paf_fort_face_get_up :
	case Action_Paf_fort_reception :
//		COL_ZoneSizeSet(C_zde_corps, cvector(1,1,1))
		COL_ZoneSizeSet(C_zde_corps, cvector(0.75,0.75,0.75))
//		COL_ZonePosSet(C_zde_corps, cvector(0,0,0.75))
		break
	default:
		COL_ZoneSizeSet(C_zde_corps, cvector(0.45,0.45,0.45))
//		COL_ZonePosSet(C_zde_corps, Cv_NullVector)
		break
}

// ZDE FIGHT ==========================================================================================
to_col_add = nobody
ti_dont_paf_buddies = vrai
ti_dont_paf_rayman = faux
tv_offset = Cv_NullVector
if( i_Mort_Destruction_flag )
{
	tf_size = 6.0		// 8.0
	if( COL_CollideType(COL_C_Wall) )
		to_col_add = COL_ObjectGet(COL_C_Wall)
}
else if( i_etat_courant == ETAT_Lapin_GOGO || i_paf_combo_fort_finish_en_cours || i_Atk_Activate_Explosive_Box_flag || i_flag_jump_to_attack )
{
	tf_size = 2.0
	if( COL_CollideType(COL_C_Wall) )
		to_col_add = COL_ObjectGet(COL_C_Wall)
}
else if( i_taupe_in_back_attack_flag || i_flag_jump_in_back )
{
	tf_size = 1.5
}
else if( i_taupe_attack_flag )
{
	tf_size = 1.0
}
else
{
	if( i_etat_courant == ETAT_Lapin_BULLRUSH )
		tf_size = 1.0
	else if( i_Counter_attack_flag )
		tf_size = 1.5
	else if( i_Rided_attack_flag )
		tf_size = 1.0
	else if( i_anti_mashing_attack_flag )
		tf_size = 1.5
	else
		tf_size = 0.35		// defaut
	to_bone = ANI_CanalObjectGet(Anim_Canal_MainDroite)
	tv_temp = @to_bone OBJ_PosGet() - OBJ_PosGet()
	tv_temp = MATH_VecGlobalToLocal(tv_temp)
	tv_offset = tv_temp
}
COL_ZoneSizeSet(C_zde_fight, cvector(tf_size,tf_size,tf_size))
COL_ZonePosSet(C_zde_fight, tv_offset / OBJ_ZoomGet())

if( i_flag_zde_fight_enable || OBJ_CapaTest(Capa_ZDE_Fight_ON) )
{
	// utiliser le gourdin !!!!
	if( Lapin_ITEM_Has_Gourdin() )
	{
		@o_item OBJ_CapaSet(RM_WEAPON_CAPA_USE, none)
	}
	else
	{
		i_test_zdf_zdc_done = vrai
		COL_ColSetActivationSet(C_bit_zde_fight, none)
		
		// type & dmg
		if( i_etat_courant == ETAT_Lapin_GOGO || i_paf_combo_fort_finish_en_cours )
		{
			ti_snd = Ci_SND_FIGHT_GOGO_Hit
			ti_paf_type = C_PAF_RM_Fort
			tf_dmg = 10.0
		}
		else if( i_Counter_attack_flag || i_anti_mashing_attack_flag )
		{
			ti_snd = Ci_SND_FIGHT_Counter_Hit
			ti_paf_type = C_PAF_RM_Fort
			tf_dmg = 20.0
		}
		else if( i_etat_courant == ETAT_Lapin_BULLRUSH || i_Mort_Destruction_flag )
		{
			ti_snd = Ci_SND_FIGHT_BullRush_Hit
			ti_paf_type = C_PAF_RM_Fort
			tf_dmg = 30.0
		}
		else
		{
			// rided ou normal
			ti_snd = Ci_SND_FIGHT_Melee_Hit
			switch( Type )
			{
				case Lapin_Type_Petit :
					ti_paf_type = C_PAF_RM_Moyen
					tf_dmg = 5.0
					break
				case Lapin_Type_Moyen :
					ti_paf_type = C_PAF_RM_Moyen
					tf_dmg = 10.0
					break
				case Lapin_Type_Geant :
					ti_paf_type = C_PAF_RM_Fort
					tf_dmg = 15.0
					break
				default:
					DBG_Error("?????")
			}
			// override
			if( Config_Lapin == Config_Lapin_Terminator )
				ti_paf_type = C_PAF_RM_Fort
			if( i_Grappin_Control_attack_flag )
				ti_paf_type = C_PAF_RM_Fort		// pour que rayman coupe le grappin
			if( i_taupe_attack_flag )
				ti_paf_type = C_PAF_RM_Fort		// pour que rayman soit éjecté
			if( i_flag_jump_to_attack )
				ti_paf_type = C_PAF_RM_Fort + C_PAF_RM_Cancel_Grappin		// pour que rayman coupe le grappin
		}
		
		// collisions ZDE
		ti_collision_nb = COL_ZDE_ZDEListGet(&tao_zde_zde_list[0], C_zde_fight, C_zde_corps, all, none, Ci_Filter_IdentityFlag)
		if( to_col_add )
		{
			tao_zde_zde_list[ti_collision_nb] = to_col_add
			ti_collision_nb++
		}
		
		// CHECK ACTORS
		for( ti_i = 0; ti_i < ti_collision_nb; ti_i++ )
		{
			to_target = tao_zde_zde_list[ti_i]
			tv_sens = Cv_NullVector
			
			// restrictions
			if( i_Mort_Destruction_flag )
			{
				ti_dont_paf_buddies = faux
				tv_sens = @to_target OBJ_PosGet() - OBJ_PosGet()
			}
			else if( i_etat_courant == ETAT_Lapin_GOGO )
			{
				ti_dont_paf_rayman = vrai
				ti_dont_paf_buddies = faux
			}
			else if( i_paf_combo_fort_finish_en_cours )
			{
				ti_dont_paf_rayman = vrai
				tv_sens = @to_target OBJ_PosGet() - OBJ_PosGet()
			}
			else if( i_Counter_attack_flag )
			{
				ti_dont_paf_buddies = faux
				if( to_target != o_Counter_actor )
					continue		// je ne veux paffer que mon counter_actor
			}
			else if( i_Rided_attack_flag )
			{
				ti_dont_paf_buddies = faux
				if( to_target == o_Rided_Actor )
					continue		// je ne veux PAS paffer mon rided_actor
			}
			else if( i_etat_courant == ETAT_Lapin_BULLRUSH )
				ti_dont_paf_buddies = faux
			
			// FILTRES
			if( to_target == OBJ_Me() )
				continue
			if( ti_dont_paf_rayman )
			{
				if( to_target == o_main_actor )
					continue
				if( to_target == @o_main_actor PROC_RM_MontureGet() )
					continue
			}
			if( ti_dont_paf_buddies )
			{
				if( @to_target AI_IsModel(get_PNJ_Lapin_path) && @o_main_actor PROC_RM_MontureGet() != to_target )
					continue		// je ne veux PAS frapper mes potes :)
			}
			
			// TRY TO SEND PAF
			ti_ind = ARR_ObjSearch(&ao_frappe_target[0], i_frappe_target_nb, to_target)
			if( ti_ind == -1 )
			{
				ao_frappe_target[i_frappe_target_nb] = to_target
				i_frappe_target_nb++
				SND_RequestPlayOnObjCanal(ti_snd, Anim_Canal_Tete)
				if( MATH_VecNullToler(tv_sens, 0.01) )
					tv_sens = OBJ_SightGet()
				EVENT_AddEventPaf(C_EVENT_FILTER_All, ti_paf_type, OBJ_Me(), Cf_EVENT_Duree_1Trame, to_target, tf_dmg, tv_sens)
				if( i_etat_courant == ETAT_Lapin_BULLRUSH )
					i_BullRush_paf_flag = vrai
				if( i_taupe_attack_flag && to_target == o_taupe_target )
					i_taupe_paf_done = vrai
			}
		}
	}
}
COL_ColSetActivationSet(none, C_bit_zde_fight)



// INVISIBLE ? ====================================================================================
OBJ_FlagInvisibleSet(i_invisible_flag)
if( o_item )
	@o_item OBJ_FlagInvisibleSet(i_invisible_flag)
if( o_key )
	@o_key OBJ_FlagInvisibleSet(i_invisible_flag)
if( o_shield )
{
	@o_shield OBJ_FlagInvisibleSet(i_invisible_flag)
	to_main = ANI_CanalObjectGet(Anim_Canal_MainGauche)
	tv_pos = @to_main OBJ_PosGet()
	tv_pos -= 0.35 * @to_main OBJ_SightGet() * OBJ_ZoomGet()
	@o_shield OBJ_PosSet(tv_pos)
	@o_shield OBJ_BankingGeneralSet(- @to_main OBJ_SightGet(), Cv_VerticalVector)
}



// MONTURE SPLINTER ROPE ====================================================================
if( i_RideMount_ID && o_RideMount_Callback_Actor )
{
	f_RideMount_coef += MATH_FloatMin(1.0 - f_RideMount_coef, 5.0 * TIME_GetDt())
	if( i_RideMount_ID == C_ID_Monture_Rope )
	{
		tv_pos = Proc_PNJ_RidedPosGet(o_RideMount_Callback_Actor)
		tv_sight = Proc_PNJ_RidedSightGet(o_RideMount_Callback_Actor)
		tv_banking = Proc_PNJ_RidedBankingGet(o_RideMount_Callback_Actor)
		OBJ_PosSet(MATH_VecBlend(OBJ_PosGet(), tv_pos, f_RideMount_coef))
		OBJ_BankingGeneralSet(
			MATH_VecBlendRotate(OBJ_SightGet(), tv_sight, f_RideMount_coef),
			MATH_VecBlendRotate(OBJ_BankingGet(), tv_banking, f_RideMount_coef))
	}
}



