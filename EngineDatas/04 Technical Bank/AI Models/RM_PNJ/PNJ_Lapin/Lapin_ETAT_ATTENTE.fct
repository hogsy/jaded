#include "PNJ_Lapin_defines.var"

//#define		PUNCHING_BALL

int			ti_index
int			ti_ok
int			ti_att_gfx_on
int			ti_att_anim_need_jump
int			ti_att_anim_en_place
float		tf_att_anim_en_place_delai
vector	tv_offset
vector	tv_new_pos
vector	tv_temp
vector	tv_start_pos
vector	tv_pos


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	if( i_GFX_Zzzz != -1 )
	{
		GFX_Del(i_GFX_Zzzz)
		i_GFX_Zzzz = -1
	}
	if( i_GFX_Pipi != -1 )
	{
		GFX_Del(i_GFX_Pipi)
		i_GFX_Pipi = -1
	}
	switch( i_etat_courant )
	{
		case ETAT_Lapin_PAF :
		case ETAT_Lapin_PAF_STUN :
		case ETAT_Lapin_GOGO :
			// ne pas revenir en attente mais en fight
			fct_main_etat = "Lapin_ETAT_FIGHT"
			break
	}
	if( i_etat_courant != ETAT_Lapin_JUMP )
		i_flag_jump_to_att_wp_anim_done = faux
	i_sort_etat = faux
	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_Lapin_ATTENTE) 
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Lapin_ATTENTE
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	Lapin_DBG_Trace_String(DBG_Trace_Etat, "ATTENTE")
	fct_previous_etat = fct_last_etat
	fct_last_etat = AI_TrackCurGet()
	fct_main_etat = AI_TrackCurGet()		// MAIN ETAT !!!!
	f_time_start_etat = 0.0
	f_time_sous_mode = 0.0
	f_Att_anim_WP_duree = 0.0
	f_Att_anim_WP_duree_anim = 0.0
	
	// Get Att Mode
	if( Att_WAY ) // && ! o_RideMount_Actor )
		Att_Mode = Att_Mode_Ronde_Network
	else if( Att_BV )
		Att_Mode = Att_Mode_RandomBVPos
	else if( Att_anim_WP )
		Att_Mode = Att_Mode_AnimWP
	else
		Att_Mode = Att_Mode_Sur_Place
	
	// Init params attente
	switch( Att_Mode )
	{
		case Att_Mode_Ronde_Network :
			f_Att_BV_duree = 3.0
			break
		default:
			f_Att_BV_duree = 0.0
			break
	}
	
	// si je ne viens pas d'un jump, raz next wp (-> nearest)
	switch( i_dernier_etat )
	{
		case ETAT_Lapin_JUMP :
		case ETAT_Lapin_CHUTE :
			break
		default:
			o_Att_ronde_next_wp = nobody
			break
	}
	
	// effacer l'intérêt pour repasser en attente (sauf si je viens d'un paf auquel cas ensuite je veux passer en fight)
	if( i_dernier_etat != ETAT_Lapin_PAF )
		Lapin_Del_Interest()
	
	i_path_way_force_recompute_flag = vrai
}
else
{
	f_time_start_etat += TIME_GetDt()
	f_time_sous_mode += TIME_GetDt()
}


// STIMULI ===========================================================================
o_Grabbed_Actor = LNK_ServeurGet(Ci_LNK_GRAB_EAGLE, mid_Grabbed_LNK_ID, vrai, nofunc, nofunc)
if( o_Grabbed_Actor )
	macro_change_etat("Lapin_ETAT_GRABBED")

o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
if( o_Rided_Actor )
	macro_change_etat("Lapin_ETAT_RIDED")

MACRO_CHECK_PAFS

if( Lapin_ROPE_Gogo_Mode() )
	macro_change_etat("Lapin_ETAT_GOGO")

MACRO_CHECK_CHUTE

if( i_ventilo_flag )
	macro_change_etat("Lapin_ETAT_ASPIRE")

if( o_piege )
	macro_change_etat("Lapin_ETAT_PIEGE")

if( Att_Delai_Disparition > 0.0 && f_time_start_etat > Att_Delai_Disparition )
{
	DBG_TraceString("***** ")
	DBG_TraceObject(OBJ_Me())
	DBG_TraceString(" s'enterre et se détuit / reinit car son délai d'attente est dépassé !!!!\n")
	DBG_TraceEOL()
	if( o_RideMount_Actor )
		Lapin_RIDEMOUNT_Cancel()
	i_Att_Delai_Disparition_flag = vrai
	macro_change_etat("Lapin_ETAT_TAUPE")
}

if( i_Beat_flag_danse )
	macro_change_etat("Lapin_ETAT_DANSE")

if( i_Beat_flag_alert )
	macro_change_etat("Lapin_ETAT_BEAT_ALERT")

#ifndef	PUNCHING_BALL
if( ! o_Commander_cur )
{
	// anti_mashing ?
	AI_Execute("Lapin_exec_check_anti_mashing")
	if( i_anti_mashing_flag )
	{
		i_anti_mashing_flag = faux
		MACRO_FORCE_VALID_INTERET
		i_anti_mashing_flag = vrai
		MACRO_GO_IDLE(0)
	}
	
	// FIND A MOUNT (EXCEPT A FLYING SAUCER)
	o_RideMount_Nearest = nobody
	if( ! o_RideMount_Actor )
	{
		AI_Execute("Lapin_exec_check_mount")
		if( o_RideMount_Nearest && ! @o_RideMount_Nearest AI_IsModel(get_PNJ_Bunny_Saucer_path) )
		{
			MACRO_FORCE_VALID_INTERET
			macro_change_etat("Lapin_ETAT_GET_MOUNT")
		}
	}
	
	// FIND A KEY
	if( ! Lapin_ITEM_Has_Key() )		// je n'ai pas de clef
	{
		i_find_item_type = Ci_FIND_ITEM_KEY
		AI_Execute("Lapin_exec_check_item")
		if( o_item_nearest )
		{
			MACRO_FORCE_VALID_INTERET
			macro_change_etat("Lapin_ETAT_GET_ITEM")
		}
	}
	else
	{
		// FUIR AVEC LA CLEF
		if( Fuite_Si_Clef )
		{
			MACRO_FORCE_VALID_INTERET
			MACRO_GO_IDLE(0)
		}
	}
	
	// FIND A LUMS CAGE
	if( ! Lapin_LUMS_Cage_Has() )
	{
		AI_Execute("Lapin_exec_check_lums_cage")
		if( o_item_nearest )
		{
			MACRO_FORCE_VALID_INTERET
			macro_change_etat("Lapin_ETAT_GET_ITEM")
		}
	}
	else
	{
		// FUIR AVEC LA LUMS CAGE
		if( Fuite_Si_Clef )
		{
			MACRO_FORCE_VALID_INTERET
			MACRO_GO_IDLE(0)
		}
	}
	
	// FIND A CAROTTE
	if( ! Lapin_ITEM_Has_Carotte() )		// je n'ai pas de carotte
	{
		i_find_item_type = Ci_FIND_ITEM_CAROTTE
		AI_Execute("Lapin_exec_check_item")
		if( o_item_nearest )		
		{
			MACRO_FORCE_VALID_INTERET
			macro_change_etat("Lapin_ETAT_GET_ITEM")
		}
	
		// FIND A WEAPON
		if( ! Lapin_ITEM_Has_Weapon() )		// je n'ai ni arme ni carotte
		{
			i_find_item_type = Ci_FIND_ITEM_WEAPON
			AI_Execute("Lapin_exec_check_item")
			if( o_item_nearest )		
			{
				MACRO_FORCE_VALID_INTERET
				macro_change_etat("Lapin_ETAT_GET_ITEM")
			}
		}
	}
	
	// GET THE FLYING SAUCER
	if( o_RideMount_Nearest && @o_RideMount_Nearest AI_IsModel(get_PNJ_Bunny_Saucer_path) )
	{
		MACRO_FORCE_VALID_INTERET
		macro_change_etat("Lapin_ETAT_GET_MOUNT")
	}
}


AI_Execute("Lapin_exec_check_vision")	

AI_Execute("Lapin_exec_update_best_interest")

if ( MSG_GlobalIsValid(mid_best_interet) && EVENT_InteretTargetGet(mid_best_interet) )		// VINCE : ne pas passer en search si je n'ai pas de target valide...
	macro_change_etat("Lapin_ETAT_FIGHT")
#endif


// COMPORTEMENT ===========================================================================

// Regard --------------------------


// COMMANDER ===============================================================
if( o_Commander_cur )
{
	tv_temp = OBJ_PosGet() - @o_Commander_cur OBJ_PosGet()
	if( ! MATH_VecNullToler(tv_temp, 0.01) )
		MATH_VecSetNorm(tv_temp, 2.0 * OBJ_ZoomGet())
	else
		tv_temp = - OBJ_SightGet()
	v_way_destpos = @o_Commander_cur OBJ_PosGet() + tv_temp
	v_look_pos = @o_Commander_cur OBJ_PosGet()
	v_force_sight = @o_Commander_cur OBJ_PosGet() - OBJ_PosGet()
}
// SOLO ===============================================================
else
{
	switch( Att_Mode )
	{
		case Att_Mode_Sur_Place :
			v_way_destpos = Cv_NullVector
			if( Lapin_LUMS_Cage_Has() )
			{
				ACT_ActionSet(Action_Attente_Torture_Lums)
				i_disable_select_action = vrai
			}
			break
		
		case Att_Mode_Ronde_Network :
			tv_start_pos = OBJ_PosGet()
			if( o_RideMount_Actor && @o_RideMount_Actor COL_CollideType(COL_C_Ground) )
			{
				tv_temp = @o_RideMount_Actor COL_CollidedPointGet(COL_C_Ground)
				DBG_RenderVector(OBJ_PosGet(), tv_temp - OBJ_PosGet(),color_blanc)
				tv_pos = tv_start_pos
	//			tv_temp = @o_RideMount_Actor OBJ_PosGet()
				tv_pos.z = tv_temp.z
				OBJ_PosSet(tv_pos)
			}
			
			if( ! o_Att_ronde_next_wp )
			{
				o_Att_ronde_next_wp = WAY_WPNearestOfPos(OBJ_PosGet(), Att_WAY, all, none, Ci_Filter_IdentityFlag)
				if( o_Att_ronde_next_wp && @o_Att_ronde_next_wp OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_DesignStruct) )
					f_Att_BV_duree = o_Att_ronde_next_wp.des_float1
			}
			
			// dest pos
			v_way_destpos = @o_Att_ronde_next_wp OBJ_PosGet()
			if( ! o_RideMount_Actor && @o_Att_ronde_next_wp OBJ_CustomBitsTest(Cbit_ACTION_Jump) )
			{
				// next wp is jump -> offset derrière le wp pour forcer à courir
	//			tv_offset = @o_Att_ronde_next_wp OBJ_PosGet() - OBJ_PosGet()
	//			MATH_VecSetNorm(tv_offset, 2.0)
	//			v_way_destpos += tv_offset
				i_action_traction_force_faster = vrai		// apparition = runs !!!
			}
			
			if( COL_Pivot_BVCollide(o_Att_ronde_next_wp) )
			{
				if( ! o_RideMount_Actor && @o_Att_ronde_next_wp OBJ_CustomBitsTest(Cbit_ACTION_Jump) )
				{
					// jump
					o_Att_ronde_next_wp = WAY_NetNextWP(Att_WAY, o_Att_ronde_next_wp, NetNextWP_Mode_aleatoire, none)
					i_flag_jump_precis = vrai
					v_jump_dest_pos = @o_Att_ronde_next_wp OBJ_PosGet()
					OBJ_PosSet(tv_start_pos)		// je me repositionne sur la monture
					macro_change_etat("Lapin_ETAT_JUMP")
				}
				else if( ! o_RideMount_Actor && @o_Att_ronde_next_wp OBJ_CustomBitsTest(Cbit_ACTION_Rentrer_dans_Sol) )
				{
					// sous terre !!!
					OBJ_PosSet(tv_start_pos)		// je me repositionne sur la monture
					macro_change_etat("Lapin_ETAT_TAUPE")	
				}
				else
				{
					if( f_Att_BV_duree )
					{
						// wait a little
						v_way_destpos = Cv_NullVector
						f_Att_BV_duree -= MATH_FloatMin(f_Att_BV_duree, TIME_GetDt())
						v_force_sight = @o_Att_ronde_next_wp OBJ_SightGet()
						f_orient_speed = 2.0
					}
					else
					{
						// move !
						o_Att_ronde_next_wp = WAY_NetNextWP(Att_WAY, o_Att_ronde_next_wp, NetNextWP_Mode_aleatoire, none)
						if( o_Att_ronde_next_wp && @o_Att_ronde_next_wp OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_DesignStruct) )
							f_Att_BV_duree = o_Att_ronde_next_wp.des_float1
						
						if( ! f_Att_BV_duree )
							f_Att_BV_duree = MATH_RandFloat(3.0, 6.0)
					}
				}
			}
			
			OBJ_PosSet(tv_start_pos)		// je me repositionne sur la monture
			break
			
		case Att_Mode_RandomBVPos :
			f_Att_BV_duree -= MATH_FloatMin(f_Att_BV_duree, TIME_GetDt())
			if( ! f_Att_BV_duree )
			{
				ti_ok = faux
				while( ! ti_ok )
				{
					tv_new_pos = @Att_BV BV_RandomPosGet(0)
					tv_temp = tv_new_pos - v_way_destpos
					tv_temp.z = 0.0
					if( MATH_VecDotProduct(tv_temp, tv_temp) > 9.0 )
						ti_ok = vrai
				}
				v_way_destpos = tv_new_pos
				f_Att_BV_duree = MATH_RandFloat(5.0, 10.0)
			}
			break
			
		case Att_Mode_AnimWP :
			ti_att_gfx_on = faux
			v_way_destpos = @Att_anim_WP OBJ_PosGet()

			if( Att_anim_WP == OBJ_Me() )		// sur place ????
			{
//				v_way_destpos += 0.1 * OBJ_SightGet()
				tf_att_anim_en_place_delai = 1.5
				ti_att_anim_need_jump = faux
			}
			else
			{
				switch( Att_anim )
				{
					case Action_Attente_Ordi :
					case Action_Attente_Dodo :
						tf_att_anim_en_place_delai = 0.0
						ti_att_anim_need_jump = vrai
						break
					case Action_Attente_Pipi :
					case Action_Attente_Blabla1 :
					case Action_Attente_Blabla2 :
						tf_att_anim_en_place_delai = 2.0
						ti_att_anim_need_jump = faux
						break
					default:
						tf_att_anim_en_place_delai = 0.0
						ti_att_anim_need_jump = faux
						break
				}
			}
			
			tv_temp = v_way_destpos - OBJ_PosGet()
			ti_att_anim_en_place = faux
			if( ti_att_anim_need_jump )
			{
				// anims qui nécessitent de sauter d'abord
				if( ! i_flag_jump_to_att_wp_anim_done )
				{
					// test assez proche pour sauter
					if( OBJ_SqrDist(Att_anim_WP) < 9.0 )
					{
						i_flag_jump = vrai
						i_flag_jump_precis = vrai
						i_flag_jump_to_att_wp_anim = vrai
						i_flag_jump_to_att_wp_anim_done = vrai
						v_jump_dest_pos = v_way_destpos
						macro_change_etat("Lapin_ETAT_JUMP")
					}
				}
				else
				{
					// j'ai sauté maintenant c bon
					ti_att_anim_en_place = vrai
				}
			}
			else
			{
				// anims qui ne nécessitent qu'un déplacement
				if( MATH_VecDotProduct(tv_temp, tv_temp) < (0.5 * OBJ_ZoomGet()) )		// je suis à mon wp d'anim d'att...
					ti_att_anim_en_place = vrai
			}
			
			// c'est bon je peux jouer mon anim
			if( ti_att_anim_en_place )
			{
				if( Att_anim_orientation )		// orientation
					v_force_sight = @Att_anim_WP OBJ_SightGet()
				
				// anim
				f_Att_anim_WP_duree += TIME_GetDt()
				v_way_destpos = Cv_NullVector
				i_disable_select_action = vrai
				switch( Att_anim )
				{
					case Action_Attente_Dodo :
						if( f_Att_anim_WP_duree < tf_att_anim_en_place_delai )
							Lapin_ACTION_Set(Lapin_ACTION_Attente_Get())
						else
						{
							Lapin_ACTION_Set(Att_anim)
							ti_att_gfx_on = vrai
							PROC_SFX_ZZZ(i_GFX_Zzzz, @o_canal_tete OBJ_PosGet(), 1.0 * OBJ_ZoomGet())
							if( f_Att_anim_WP_duree_anim > 4.0 && f_Att_anim_WP_duree_anim < 5.0 )
								Lapin_EXPRESSION(Cf_Expr_Mouth_Full)
							else
							{
								if( f_Att_anim_WP_duree_anim >= 5.0 )
									f_Att_anim_WP_duree_anim = 0.0
								Lapin_EXPRESSION(Cf_Expr_Mouth_Closed)
							}
							@o_canal_tete OBJ_MorphProgSet(1, 2.0)
						}
						break
						
					case Action_Attente_Pipi :
						if( f_Att_anim_WP_duree < tf_att_anim_en_place_delai )
							Lapin_ACTION_Set(Lapin_ACTION_Attente_Get())
						else
						{
							if( f_Att_anim_WP_duree_anim > 6.0 && f_Att_anim_WP_duree_anim < 10.0 )
							{
								ti_att_gfx_on = vrai
//								PROC_SFX_PIPI(i_GFX_Pipi, @o_canal_bassin OBJ_PosGet(), OBJ_SightGet(), 1.0 * OBJ_ZoomGet())
								Lapin_ACTION_Set(Att_anim)
								Lapin_EXPRESSION(Cf_Expr_Mouth_Middle)
							}
							else
							{
								if( f_Att_anim_WP_duree_anim >= 10.0 )
									f_Att_anim_WP_duree_anim  = 0.0
								Lapin_ACTION_Set(Lapin_ACTION_Attente_Get())
								Lapin_EXPRESSION(Cf_Expr_Mouth_Closed)
							}
						}
						break
						
					case Action_Attente_Blabla1 :
					case Action_Attente_Blabla2 :
						if( f_Att_anim_WP_duree < tf_att_anim_en_place_delai )
							Lapin_ACTION_Set(Lapin_ACTION_Attente_Get())
						else
						{
							if( f_Att_anim_WP_duree_anim > 4.0 && f_Att_anim_WP_duree_anim < 6.0 )
							{
								Lapin_ACTION_Set(Att_anim)
								Lapin_EXPRESSION(Cf_Expr_Mouth_Full)
							}
							else
							{
								if( f_Att_anim_WP_duree_anim >= 6.0 )
									f_Att_anim_WP_duree_anim = 0.0
								Lapin_ACTION_Set(Lapin_ACTION_Attente_Get())
								Lapin_EXPRESSION(Cf_Expr_Mouth_Closed)
							}
						}
						break
						
					case Action_Attente_Ordi :
					default:
						Lapin_ACTION_Set(Att_anim)
						break
				}
				f_Att_anim_WP_duree_anim += TIME_GetDt()
			}
			else
			{
				// j'ai bougé ? je dois recommencer
				f_Att_anim_WP_duree = 0.0
				f_Att_anim_WP_duree_anim = 0.0
			}
			
			// GFX ?
			if( ! ti_att_gfx_on )
			{
				if( i_GFX_Zzzz != -1 )
				{
					GFX_Del(i_GFX_Zzzz)
					i_GFX_Zzzz = -1
				}
				if( i_GFX_Pipi != -1 )
				{
					GFX_Del(i_GFX_Pipi)
					i_GFX_Pipi = -1
				}
			}
			break
	}
	
	// Regard ----------------------------------------------------------
	if( ! MATH_VecNullToler(v_way_destpos, 0.01) )
	{
		tv_temp = v_way_destpos - OBJ_PosGet()
		if( MATH_VecDotProduct(tv_temp,tv_temp) > 4.0 )
		{
			i_flag_look = vrai
			v_look_pos = v_way_destpos
		}
	}
}

i_target_territory_ID = Lapin_PROC_POS_GET_TERRITORY_ID(v_way_destpos)
AI_Execute("Lapin_exec_way_find")
AI_Execute("Lapin_exec_way_move")
AI_Execute("Lapin_exec_way_orientation")
AI_Execute("Lapin_exec_way_select_action")

