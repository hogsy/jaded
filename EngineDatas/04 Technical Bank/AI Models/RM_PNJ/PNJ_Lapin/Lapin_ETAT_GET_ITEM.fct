#include "PNJ_Lapin_defines.var"

object	to_weapon
object	to_key
object	to_carotte
float		tf_dist
vector	tv_temp


// SORTIE ETAT ===================================================================
if (i_sort_etat)
{
	Lapin_EXPRESSION(Cf_Expr_Mouth_Closed)
	i_sort_etat = faux
	return
}

// INITIALISATION ETAT ==============================================================
if (i_etat_courant != ETAT_Lapin_GET_ITEM) 
{
	i_dernier_etat = i_etat_courant
	i_etat_courant = ETAT_Lapin_GET_ITEM
	if (fct_last_etat)
	{
		i_sort_etat = vrai
		AI_Execute(fct_last_etat)
	}
	Lapin_DBG_Trace_String_et_Gao(DBG_Trace_Etat, "GET ITEM", o_item_nearest)
	fct_previous_etat = fct_last_etat
	fct_last_etat = AI_TrackCurGet()
	f_time_start_etat = 0.0
	
	if( @o_item_nearest AI_IsModel(get_RM_Lums_Cage_path) )
		SND_RequestPlay(Ci_SND_ITEM_RunTowards_LumsCage)
	else
	{
		switch( i_item_to_get_ID )
		{
			case RM_WEAPON_TYPE_GUN :
				SND_RequestPlay(Ci_SND_ITEM_RunTowards_Gun)
				break
			case RM_WEAPON_TYPE_GRENADE :
				SND_RequestPlay(Ci_SND_ITEM_RunTowards_Grenade)
				break
			case RM_WEAPON_TYPE_CLE :
				SND_RequestPlay(Ci_SND_ITEM_RunTowards_Clef)
				break
			case RM_WEAPON_TYPE_CAROTTE :
				SND_RequestPlay(Ci_SND_ITEM_RunTowards_Carotte)
				break
			case RM_WEAPON_TYPE_GOURDIN :
				SND_RequestPlay(Ci_SND_ITEM_RunTowards_Gourdin)
				break
			default:
				DBG_Error("????")
		}
	}
	i_path_way_force_recompute_flag = vrai
}
else
{
	f_time_start_etat += TIME_GetDt()
}


// STIMULI ===========================================================================
o_Grabbed_Actor = LNK_ServeurGet(Ci_LNK_GRAB_EAGLE, mid_Grabbed_LNK_ID, vrai, nofunc, nofunc)
if( o_Grabbed_Actor )
	macro_change_etat("Lapin_ETAT_GRABBED")

o_Rided_Actor = LNK_ServeurGet(Ci_LNK_RIDE_ON_NMI, mid_Rided_LNK_ID, vrai, nofunc, nofunc)
if( o_Rided_Actor )
	macro_change_etat("Lapin_ETAT_RIDED")

AI_Execute("Lapin_exec_check_vision")

MACRO_CHECK_PAFS

if( Lapin_ROPE_Gogo_Mode() )
	macro_change_etat("Lapin_ETAT_GOGO")

MACRO_CHECK_CHUTE

if( i_ventilo_flag )
	macro_change_etat("Lapin_ETAT_ASPIRE")

if( o_piege )
	macro_change_etat("Lapin_ETAT_PIEGE")

if( i_Beat_flag_danse )
	macro_change_etat("Lapin_ETAT_DANSE")

if( i_Beat_flag_alert )
	macro_change_etat("Lapin_ETAT_BEAT_ALERT")

AI_Execute("Lapin_exec_update_best_interest")

// FIND ITEM
to_weapon = nobody
to_key = nobody
to_carotte = nobody

f_item_weapon_find_delai = 0.0
f_item_key_find_delai = 0.0
f_item_carotte_find_delai = 0.0
f_lums_cage_find_delai = 0.0

if( @o_item_nearest AI_IsModel(get_RM_Lums_Cage_path) )
{
	// FIND A LUMS CAGE
	o_item_to_get = o_item_nearest
	AI_Execute("Lapin_exec_check_lums_cage")
	to_key = o_item_nearest
	if( ! to_key )
		MACRO_GO_IDLE(0)
}
else
{
	switch( i_item_to_get_ID )
	{
		case RM_WEAPON_TYPE_GRENADE :
		case RM_WEAPON_TYPE_GUN :
		case RM_WEAPON_TYPE_GOURDIN :
			// FIND A WEAPON
			i_find_item_type = Ci_FIND_ITEM_WEAPON
			o_item_to_get = o_item_nearest
			AI_Execute("Lapin_exec_check_item")
			to_weapon = o_item_nearest
			if( ! to_weapon )
				MACRO_GO_IDLE(0)
			break
			
		case RM_WEAPON_TYPE_CLE :
			// FIND A KEY
			i_find_item_type = Ci_FIND_ITEM_KEY
			o_item_to_get = o_item_nearest
			AI_Execute("Lapin_exec_check_item")
			to_key = o_item_nearest
			if( ! to_key )
				MACRO_GO_IDLE(0)
			break
		
		case RM_WEAPON_TYPE_CAROTTE :
			// FIND A CAROTTE
			i_find_item_type = Ci_FIND_ITEM_CAROTTE
			o_item_to_get = o_item_nearest
			AI_Execute("Lapin_exec_check_item")
			to_carotte = o_item_nearest
			if( ! to_carotte )
				MACRO_GO_IDLE(0)
			break
	}
}


AI_Execute("Lapin_exec_fight_melee")

// anti_mashing ?
AI_Execute("Lapin_exec_check_anti_mashing")
if( i_anti_mashing_flag )
	MACRO_GO_IDLE(0)

AI_Execute("Lapin_exec_check_grappin")

AI_Execute("Lapin_exec_check_shoot")


// je suis assez proche de l'item à ramasser
if( o_RideMount_Actor )
	tf_dist = OBJ_SqrDistHorz(o_item_nearest)
else
	tf_dist = OBJ_SqrDist(o_item_nearest)
	
// descendre de ma monture pour ramasser l'item
if( o_RideMount_Actor && tf_dist < 25.0 )
{
	i_flag_jump = vrai
	tv_temp = @o_item_nearest OBJ_PosGet() - OBJ_PosGet()
	tv_temp.z = 0.0
	MATH_VecSetNormalize(tv_temp)
	v_jump_dest_pos = @o_item_nearest OBJ_PosGet() - (1.0 * tv_temp )
	f_RideMount_Jump_to_Get_Item = 3.0
	DBG_RenderVector(@o_item_nearest OBJ_PosGet() + Cv_VerticalVector, v_jump_dest_pos - @o_item_nearest OBJ_PosGet(), color_bleu)
	macro_change_etat("Lapin_ETAT_JUMP")
}

// ramasser l'item
if( tf_dist < (16.0 * OBJ_ZoomGet()) )
	Lapin_EXPRESSION(Cf_Expr_Mouth_Middle)
if( tf_dist < (1.0 * OBJ_ZoomGet()) )
{
	// je veux changer d'item (ex j'ai une arme mais je veux ramasser la clé)
//	if( o_item && o_item != o_item_nearest )
//	{
//		Lapin_ITEM_Lose()
//	}
	
	// Ramasser l'item voulu
	if( @o_item_nearest AI_IsModel(get_RM_Lums_Cage_path) )
	{
		o_lums_cage = LNK_ThisClientGet(o_item_nearest, Ci_LNK_GRAB_OBJECT, mid_lums_cage_LNK_ID, vrai, "Lapin_exec_grab_item_param", nofunc, nofunc)
	}
	else
	{
		switch( i_item_to_get_ID )
		{
			case RM_WEAPON_TYPE_CLE :
				o_key = LNK_ThisClientGet(o_item_nearest, Ci_LNK_GRAB_OBJECT, mid_key_LNK_ID, vrai, "Lapin_exec_grab_item_param", nofunc, nofunc)
				break
			default:
				o_item = LNK_ThisClientGet(o_item_nearest, Ci_LNK_GRAB_OBJECT, mid_item_LNK_ID, vrai, "Lapin_exec_grab_item_param", nofunc, nofunc)
				break
		}
	}
}

// j'ai ramassé mon nouvel item
if( o_item == o_item_nearest )
{
	Lapin_ITEM_Init_Values()
	o_item_nearest = nobody
	f_RideMount_Jump_to_Get_Item = 0.0
	MACRO_GO_IDLE(0)
}

// j'ai ramassé ma clef
if( o_key == o_item_nearest )
{
	Lapin_ITEM_Key_Init_Values()
	o_item_nearest = nobody
	f_RideMount_Jump_to_Get_Item = 0.0
	MACRO_GO_IDLE(0)
}

// j'ai ramassé une cage à lums
if( o_lums_cage == o_item_nearest )
{
	Lapin_LUMS_Cage_Init_Values()
	o_item_nearest = nobody
	f_RideMount_Jump_to_Get_Item = 0.0
	MACRO_GO_IDLE(0)
}
	
// COMPORTEMENT ===================================================================
v_way_destpos = @o_item_nearest OBJ_PosGet()
i_target_territory_ID = Lapin_PROC_POS_GET_TERRITORY_ID(v_way_destpos)

// Regard ----------------------------------------------------------
i_flag_look = vrai
v_look_pos = v_way_destpos

if( Item_Distance_de_Filature > 0.0 
	&& @o_item_nearest AI_IsModel(get_RM_Weapon_path)
	&& @o_item_nearest OBJ_CapaTest(RM_WEAPON_CAPA_GRABBED) 
	&& OBJ_SqrDist(o_item_nearest) < (Item_Distance_de_Filature * Item_Distance_de_Filature)  )
	v_way_destpos = Cv_NullVector		// attendre que l'arme soit libre avant d'aller + loin

AI_Execute("Lapin_exec_way_find")
AI_Execute("Lapin_exec_way_move")
AI_Execute("Lapin_exec_way_orientation")
AI_Execute("Lapin_exec_way_select_action")


if( @o_item_nearest AI_IsModel(get_RM_Lums_Cage_path) )
	if( i_item_to_get_ID != RM_WEAPON_TYPE_CLE )
		OBJ_CapaSet(Obj_Capa_Fight, none)
