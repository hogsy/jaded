#include "PNJ_Lapin_defines.var"

// PARAMS D'ENTREE ===================================================
//	v_traction_joy
//

int		ti_i
int 	ti_freq
int		ti_action
int		ti_family
int		ti_min

float	tf_speed_asked
float	tf_speed_used
float	tf_min
float	tf_speed[10]

//if( ! MATH_VecNullToler(v_traction_stream, 0.01) )
//{
//	ACT_ActionSet(Action_Ventilo)
//	return
//}

if( i_disable_select_action )			// OFF !!!!
	return

ti_family = Lapin_ACTION_Family_Get()

if( ti_family == Action_Family_Ventilo )
	Lapin_GFX_GoutteSueur_Creation()

ti_action = Lapin_ACTION_Attente_Get()

tf_min = 1.0
ti_min = 0
if( ! MATH_VecNullToler(v_traction_joy, 0.01) )
{
//	if( i_action_traction_force_faster )
//		tf_speed_asked = 20.0
//	else
		tf_speed_asked = MATH_VecNorm(v_traction_joy)
	
	if( MATH_AbsFloat(tf_speed_asked - f_speed_horiz) > 1.0 )
		tf_speed_used = tf_speed_asked
	else
		tf_speed_used = f_speed_horiz
	
	// Choix de l'anim avec la meilleure Vitesse
	tf_min = 100.0
	for ( ti_i = 1; ti_i < i_action_nb_each_family && ! MATH_FloatNullEpsilon(af_action_speed[ti_i][ti_family]); ti_i++)
	{
		if( MATH_FloatNullEpsilon(af_action_speed[ti_i][ti_family]) )
			tf_speed[ti_i] = MATH_AbsFloat(1 - tf_speed_used)
		else
			tf_speed[ti_i] = tf_speed_used / af_action_speed[ti_i][ti_family]
		
		if( MATH_AbsFloat(tf_speed[ti_i] - 1.0) < tf_min )	// prendre la + speed des anims de la famille
		{
			tf_min = tf_speed[ti_i]
			ti_min = ti_i
		}
	}
	ti_action = ai_action_index[ti_min][ti_family]
}

Lapin_ACTION_Set(ti_action)
ti_freq = MATH_FloatLimit(ACT_FrequencyGet(ACT_ActionGet(), ACT_ActionItemGet()) * tf_min, 1.0, 255.0)
ANI_FrequencySet(0, ti_freq)

