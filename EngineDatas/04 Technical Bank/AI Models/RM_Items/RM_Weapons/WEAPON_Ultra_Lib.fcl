Include_UltraProcedure_Header
#include "weapon_defines.var"

procedure_ultra int PROC_WEAPON_TypeGet()
{
	return i_type
}

procedure_ultra int PROC_KEY_TypeGet()
{
	return i_key_type
}

procedure_ultra int PROC_KEY_SouffrantGet()
{
	return OBJ_CapaTest(Obj_Capa_Switch)
}

procedure_ultra int PROC_KEY_Objectif_IDGet()
{
	return i_Objectif_ID
}

procedure_ultra void PROC_KEY_Objectif_ID_Display(int ti_on)
{
	i_GFX_Obj_can_i_display = ti_on
}

procedure_ultra float PROC_WEAPON_RangeGet()
{
	return f_portee
}

procedure_ultra void PROC_WEAPON_Drop( )
{
	OBJ_CapaSet(RM_WEAPON_CAPA_DROP, none)
}

procedure_ultra void PROC_WEAPON_Projectile( float pf_distance, vector pv_target)
{
	float	tf_time
	pv_target *= pf_distance 
//	v_proj_sens =  DYN_LIB_ImpulsionGet(OBJ_PosGet(), OBJ_PosGet() + pv_target, cvector( 0.0, 0.0, -30.0), 50.0, 50.0, tf_time)
	v_proj_sens = MATH_VecBlendRotate( pv_target, Cv_VerticalVector, 0.15) * pf_distance
	DYN_FrictionVectorSet(cvector( 2.0, 2.0, 0.0))	
	OBJ_CapaSet(RM_WEAPON_CAPA_PROJ, none)
}


procedure_ultra int PROC_WEAPON_Use(vector pv_sens, object po_target)
{
	vector	tv_temp
	object	to_bone
	if( i_nb_munitions )
		OBJ_CapaSet(RM_WEAPON_CAPA_USE, none)
	if( po_target )
	{
		o_used_target = po_target
		if( @po_target OBJ_FlagsIdentityTest(OBJ_C_IdentityFlag_AI) && @po_target AI_IsModel(get_RM_Interrupteur_path) )
		{
			// specifique tire sur interrupteur
			if( @po_target COL_ZoneTypeGet(C_zde_corps) )
				tv_temp = @po_target COL_ZonePosGet(C_zde_corps)
			else
				tv_temp = @po_target OBJ_PosGet()
			pv_sens = tv_temp - OBJ_PosGet()
		}
		else
		{
			// tire sur un perso ?
			if ( ! MATH_VecNullEpsilon( pv_sens) )		// on m'a donné un offset local au perso
				pv_sens = @po_target OBJ_PosGet() + @po_target MATH_VecLocalToGlobal( pv_sens)
			else if ( @po_target OBJ_FlagsIdentityGet() & OBJ_C_IdentityFlag_Anims)
			{
				to_bone = @po_target ANI_CanalObjectGet(Anim_Canal_Tete)
				if( ! to_bone )
					to_bone = po_target
				pv_sens = @to_bone OBJ_PosGet()
			}
			else
				pv_sens = @po_target OBJ_PosGet() 
			pv_sens -= OBJ_PosGet()
		}
		v_used_sens = pv_sens
	}
	else
	{
		// pas de target
		switch( i_type )
		{
			case RM_WEAPON_TYPE_GRENADE :
				v_used_sens = pv_sens * 5.0
				break
			default:
				v_used_sens = pv_sens * f_portee
				break
		}
	}
	DBG_RenderVector(OBJ_PosGet(), v_used_sens, color_rouge)
//	if( ! i_must_miss )
//		i_nb_munitions--
	return i_nb_munitions
}


procedure_ultra vector PROC_WEAPON_HotSpot_PosGet()
{
	return( COL_ZonePosGet(C_zdm_pied))
}

procedure_ultra int PROC_WEAPON_Grenade_Type_Timer_Activee()
{
	if( i_type == RM_WEAPON_TYPE_GRENADE
		&& i_explose_type == Ci_Grenade_Explose_Type_Timer		// timer
		&& i_grenade_active )
		return vrai
	return faux
}

procedure_ultra void PROC_WEAPON_Miss()
{
	i_must_miss = vrai
}
