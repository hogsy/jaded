#include "RM_lm_defines.var"

object	to_canal

if ( i_SFX_Halo == -1)
{
	i_SFX_Halo = GFX_Add(21)
	GFX_FlagSet(i_SFX_Halo, 4, 1)
	GFX_MaterialSet(i_SFX_Halo, get_SFX_light_and_smoke, 0)	
	GFX_Setf(i_SFX_Halo, 21002, 0.1)							// extraction par rapport au point de génération (vers la cam)
	GFX_Seti(i_SFX_Halo, 21103, 1)		
	GFX_Seti(i_SFX_Halo, 21101, i_color_halo)
}


// Deplacement a la con pour archiver un truc qui compile
if (( i_recup || OBJ_SqrDist(get_rayman) < 16.0) && f_time_life > 0.75)
{
	i_recup = vrai
	COL_ColSetActivationSet(none, all)
	DYN_Off()
	to_canal = @get_rayman ANI_CanalObjectGet(Anim_Canal_Torse)
	if ( MATH_VecNullEpsilon(v_sens))
	{
		v_sens = OBJ_PosGet() - @to_canal OBJ_PosGet()
		v_axe_rotation = Proc_Vec_HorzNormalise(v_sens, Cv_VerticalVector)
		if ( ! MATH_VecNullEpsilon( v_axe_rotation - Cv_VerticalVector))
			v_axe_rotation = MATH_VecCrossProduct( MATH_VecCrossProduct( v_sens, Cv_VerticalVector), v_sens)
	}
	else
		v_sens = MATH_VecRotate(v_sens , v_axe_rotation, f_blend_rotation * TIME_GetDt())
	f_blend_distance -= MATH_FloatMin( f_blend_distance, TIME_GetDt())
}

// RECUPERE
if ( f_blend_distance == 0.0)
{
	SND_RequestPlay(C_SND_RECUP)
	Proc_RM_LifeManaAdd( f_bonus_life, f_bonus_mana)
	f_fin_delai = Cf_fin_delai
	AI_TrackCurStop()
	return
}

// FIN DE VIE
if( f_time_life > 7.0 && ! i_recup)
{
	f_fin_delai = Cf_fin_delai
	AI_TrackCurStop()
}


// TOUCHE LE SOL
if ( ! i_recup && COL_CollideType( COL_C_Ground))
{
	DYN_SpeedSetVector(Cv_NullVector)
	DYN_FrictionVectorSet(cvector( 5.0, 5.0, 2.0))
}

f_time_life += TIME_GetDt()
if( f_time_life > 0.2 )
	COL_ColSetActivationSet(all, none)
