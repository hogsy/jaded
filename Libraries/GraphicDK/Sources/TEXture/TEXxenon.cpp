// ------------------------------------------------------------------------------------------------
// File   : TEXxenon.cpp
// Date   : 2005-08-03
// Author : Sebastien Comte
// Descr. : 
//
// UBISOFT Inc.
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// HEADERS
// ------------------------------------------------------------------------------------------------
#include "Precomp.h"
#include "BASe/MEMory/MEM.h"
#include "BASe/CLIbrary/CLIstr.h"
#include "INOut/INOfile.h"
#include "TEXture/TEXstruct.h"
#include "TEXture/TEXprocedural.h"
#include "TEXture/TEXanimated.h"
#include "TEXture/TEXfile.h"
#include "TEXture/TEXxenon.h"
#include "BIGfiles/BIGread.h"
#include "BIGfiles/LOAding/LOAread.h"
#include "../../Dlls/JPEGLIB/INTERFCE.H"


#ifdef ACTIVE_EDITORS
#include "BIGfiles/IMPort/IMPbase.h"
#include "BIGfiles/BIGmdfy_file.h"
#include "BIGfiles/BIGmdfy_dir.h"
#include "BIGfiles/SAVing/SAVdefs.h"
#include "BASe/CLIbrary/CLIerrid.h"
#include "EDIpaths.h"
#endif
#include "GDInterface/GDInterface.h"
#include "MATerial/MATSprite.h"
#include "STRing/STRstruct.h"

#if defined(_XENON_RENDER)

#include "XenonGraphics/XeGDInterface.h"
#include "XenonGraphics/XeRenderer.h"

#include "../Tools/XenonTexture/Sources/XenonTexture.h"

// ------------------------------------------------------------------------------------------------
// EXTERNS
// ------------------------------------------------------------------------------------------------
extern BOOL TEX_b_File_Import(char *_psz_BigPathName, char *_psz_BigFileName, char *_psz_ExternName);

#if defined(ACTIVE_EDITORS)
extern BOOL EDI_gb_ComputeMap;
#endif

// ------------------------------------------------------------------------------------------------
// DLL Helper
// ------------------------------------------------------------------------------------------------
#if !defined(_XENON)

class XeTexturePacker
{
public:

    XeTexturePacker(void)
    {
        m_hDLL = LoadLibrary("XenonTexture.DLL");

        if (m_hDLL != NULL)
        {
            m_pfnGetTextureFormat  = (XeTexture_GetTextureFormat)GetProcAddress(m_hDLL, "XeTexture_GetTextureFormat");
            m_pfnCompressTexture   = (XeTexture_CompressTexture)GetProcAddress(m_hDLL, "XeTexture_CompressTexture");
            m_pfnUncompressTexture = (XeTexture_UncompressTexture)GetProcAddress(m_hDLL, "XeTexture_UncompressTexture");

            if (!m_pfnGetTextureFormat ||
                !m_pfnCompressTexture  ||
                !m_pfnUncompressTexture)
            {
                Close();
            }
        }
    }

    ~XeTexturePacker(void)
    {
        Close();
    }

    bool IsValid(void)
    {
        return (m_hDLL != NULL);
    }

    void PrepareDescriptor(XeTexture_Descriptor* _pDescriptor, DWORD _dwResWidth, DWORD _dwResHeight, DWORD _dwNbLevels, DWORD _dwFormat)
    {
        DWORD dwTextureFormat = XETF_A8R8G8B8;
        switch (_dwFormat)
        {
            case TEX_XTF_A8R8G8B8: dwTextureFormat = XETF_A8R8G8B8; break;
            case TEX_XTF_A8:       dwTextureFormat = XETF_A8;       break;
            case TEX_XTF_DXT1:     dwTextureFormat = XETF_DXT1;     break;
            case TEX_XTF_DXT5:     dwTextureFormat = XETF_DXT5;     break;
            case TEX_XTF_DXN:      dwTextureFormat = XETF_DXN;      break;
            case TEX_XTF_CTX1:     dwTextureFormat = XETF_CTX1;     break;
        }

        _pDescriptor->dwWidth    = _dwResWidth;
        _pDescriptor->dwHeight   = _dwResHeight;
        _pDescriptor->dwNbLevels = _dwNbLevels;
        _pDescriptor->dwFormat   = dwTextureFormat;
    }

    bool CompressTexture(DWORD _dwSrcWidth, DWORD _dwSrcHeight, void* _pSrcImage, XeTexture_Descriptor* _pDescriptor)
    {
        if (!IsValid())
        {
            ERR_OutputDebugString("[Error] XeTexturePacker::CompressTexture() - DLL not loaded\n");
            return false;
        }

        BOOL bSuccess = m_pfnCompressTexture(_dwSrcWidth, _dwSrcHeight, _pSrcImage, _pDescriptor);

        return (bSuccess != FALSE);
    }

    bool UncompressTexture(const LPVOID _pFileBuffer, DWORD _dwBufferSize, XeTexture_Descriptor* _pDescriptor)
    {
        if (!IsValid())
        {
            ERR_OutputDebugString("[Error] XeTexturePacker::UncompressTexture() - DLL not loaded\n");
            return false;
        }

        BOOL bSuccess = m_pfnUncompressTexture(_pFileBuffer, _dwBufferSize, _pDescriptor);

        return (bSuccess != FALSE);
    }

private:

    void Close(void)
    {
        m_pfnGetTextureFormat  = NULL;
        m_pfnCompressTexture   = NULL;
        m_pfnUncompressTexture = NULL;

        if (m_hDLL)
        {
            FreeLibrary(m_hDLL);
            m_hDLL = NULL;
        }
    }

private:

    XeTexture_GetTextureFormat  m_pfnGetTextureFormat;
    XeTexture_CompressTexture   m_pfnCompressTexture;
    XeTexture_UncompressTexture m_pfnUncompressTexture;

    HMODULE m_hDLL;
};

static XeTexturePacker s_oXeTexturePacker;

#endif

// ------------------------------------------------------------------------------------------------
// PRIVATE FUNCTIONS
// ------------------------------------------------------------------------------------------------
D3DFORMAT TEX_XeConvertJadeXTFToD3DFORMAT(ULONG _ul_JadeXTF);
BOOL TEX_XeGetDDSFileInformation(void* _p_FileBuffer, ULONG _ul_FileLength, TEX_tdst_File_Desc* _pst_TexDesc);

BOOL TEX_XeIsXenonNative(void* _p_FileBuffer);
void TEX_XeGetNativeFileInformation(void* _p_FileBuffer, ULONG* _pul_Width, ULONG* _pul_Height);

BOOL TEX_XeGenerateDDS_PC(TEX_tdst_XenonFileTex* _p_SrcTex, CHAR* _pSrcBuffer, ULONG _ulSrcBufferSize, CHAR* _sz_DirName, CHAR* _sz_Name);
BOOL TEX_XeGenerateDDS_Xenon(TEX_tdst_XenonFileTex* _p_SrcTex, CHAR* _pSrcBuffer, ULONG _ulSrcBufferSize, CHAR* _sz_DirName, CHAR* _sz_Name);

// ------------------------------------------------------------------------------------------------
// IMPLEMENTATION
// ------------------------------------------------------------------------------------------------

D3DFORMAT TEX_XeConvertJadeXTFToD3DFORMAT(ULONG _ul_JadeXTF)
{
    switch (_ul_JadeXTF)
    {
        case TEX_XTF_AUTO:     return D3DFMT_A8R8G8B8;
        case TEX_XTF_A8R8G8B8: return D3DFMT_A8R8G8B8;
        case TEX_XTF_DXT1:     return D3DFMT_DXT1;
        case TEX_XTF_DXT5:     return D3DFMT_DXT5;
        case TEX_XTF_A8:       return D3DFMT_A8;
        case TEX_XTF_DXN:      return D3DFMT_A8R8G8B8;
        case TEX_XTF_CTX1:     return D3DFMT_A8R8G8B8;
    }

    XeValidateRet(FALSE, D3DFMT_A8R8G8B8, "Unknown texture format");
}

// ------------------------------------------------------------------------------------------------
// Name   : TEX_ul_XeGetValidSize
// Params : _ul_Size : Actual texture size
// RetVal : Valid texture size
// Descr. : Get the closest valid texture size
// ------------------------------------------------------------------------------------------------
ULONG TEX_ul_XeGetValidSize(ULONG _ul_Size)
{
#define XE_CHECK_SIZE(_size) if (_ul_Size >= _size) return _size

    XE_CHECK_SIZE(2048);
    XE_CHECK_SIZE(1024);
    XE_CHECK_SIZE(512);
    XE_CHECK_SIZE(256);
    XE_CHECK_SIZE(128);
    XE_CHECK_SIZE(64);
    XE_CHECK_SIZE(32);
    XE_CHECK_SIZE(16);

    return 8;

#undef XE_CHECK_SIZE
}

// ------------------------------------------------------------------------------------------------
// Name   : TEX_ul_XeGetMaxMipMaps
// Params : _ul_Size : Size
// RetVal : Maximum number of mip maps
// Descr. : Get the maximum number of mip maps for a given size
// ------------------------------------------------------------------------------------------------
ULONG TEX_ul_XeGetMaxMipMaps(ULONG _ul_Size)
{
#define XE_MIP_CHECK(_size, _count) if (_ul_Size >= _size) return _count

    XE_MIP_CHECK(2048, 12);
    XE_MIP_CHECK(1024, 11);
    XE_MIP_CHECK(512,  10);
    XE_MIP_CHECK(256,  9);
    XE_MIP_CHECK(128,  8);
    XE_MIP_CHECK(64,   7);
    XE_MIP_CHECK(32,   6);
    XE_MIP_CHECK(16,   5);
    XE_MIP_CHECK(8,    4);
    XE_MIP_CHECK(4,    3);
    XE_MIP_CHECK(2,    2);

    return 1;

#undef XE_MIP_CHECK
}

// ------------------------------------------------------------------------------------------------
// Name   : TEX_ul_XeGetMaxMipMapsCount
// Params : _ul_Width, _ul_Height : Texture size
// RetVal : Maximum number of mip maps
// Descr. : Get the maximum number of mip maps
// ------------------------------------------------------------------------------------------------
ULONG TEX_ul_XeGetMaxMipMapsCount(ULONG _ul_Width, ULONG _ul_Height)
{
    ULONG ul_MaxSize = _ul_Width;

    if (_ul_Height > ul_MaxSize)
    {
        ul_MaxSize = _ul_Height;
    }

    return TEX_ul_XeGetMaxMipMaps(ul_MaxSize);
}

// ------------------------------------------------------------------------------------------------
// Name   : TEX_XeValidateProperties
// Params : _pst_Properties : Xenon .TEX file properties
// RetVal : None
// Descr. : Validate the Xenon .TEX file properties
// ------------------------------------------------------------------------------------------------
void TEX_XeValidateProperties(TEX_tdst_XenonFileTex* _pst_Properties)
{
    ERR_X_Assert(_pst_Properties != NULL);

    ULONG ul_MaxMipMaps;

    // Original texture
    if (_pst_Properties->ul_OriginalTexture == 0)
    {
        _pst_Properties->ul_OriginalTexture = BIG_C_InvalidKey;
    }

    // Native texture
    if (_pst_Properties->ul_NativeTexture == 0)
    {
        _pst_Properties->ul_NativeTexture = BIG_C_InvalidKey;
    }

    // Texture size
    _pst_Properties->ul_OutputWidth  = TEX_ul_XeGetValidSize(_pst_Properties->ul_OutputWidth);
    _pst_Properties->ul_OutputHeight = TEX_ul_XeGetValidSize(_pst_Properties->ul_OutputHeight);

    // Number of mip maps
    ul_MaxMipMaps = TEX_ul_XeGetMaxMipMapsCount(_pst_Properties->ul_OutputWidth,
        _pst_Properties->ul_OutputHeight);
    if (_pst_Properties->ul_NbLevels > ul_MaxMipMaps)
    {
        _pst_Properties->ul_NbLevels = ul_MaxMipMaps;
    }

    // Output format
    if (_pst_Properties->ul_OutputFormat >= TEX_XTF_COUNT)
    {
        _pst_Properties->ul_OutputFormat = TEX_XTF_AUTO;
    }
}

// ------------------------------------------------------------------------------------------------
// Name   : TEX_XeResetProperties
// Params : _pst_Properties : Xenon .TEX properties
// RetVal : None
// Descr. : Reset the Xenon .TEX properties
// ------------------------------------------------------------------------------------------------
void TEX_XeResetProperties(TEX_tdst_XenonFileTex* _pst_Properties)
{
    ERR_X_Assert(_pst_Properties != NULL);

    _pst_Properties->ul_Flags           = 0;
    _pst_Properties->ul_OriginalTexture = BIG_C_InvalidKey;
    _pst_Properties->ul_NativeTexture   = BIG_C_InvalidKey;
    _pst_Properties->ul_OutputWidth     = 8;
    _pst_Properties->ul_OutputHeight    = 8;
    _pst_Properties->ul_OutputFormat    = TEX_XTF_AUTO;
    _pst_Properties->ul_NbLevels        = 1;
}

// ------------------------------------------------------------------------------------------------
// Name   : TEX_XeLoadProperties
// Params : _pst_Properties : Xenon .TEX properties
//          _ppc_Buffer     : Source buffer
// RetVal : None
// Descr. : Load some Xenon .TEX properties
// ------------------------------------------------------------------------------------------------
void TEX_XeLoadProperties(TEX_tdst_XenonFileTex* _pst_Properties, char** _ppc_Buffer)
{
    ERR_X_Assert(_pst_Properties != NULL);

    ULONG ul_Version;

    ul_Version = LOA_ReadULong(_ppc_Buffer);
    if (ul_Version >= 1)
    {
        _pst_Properties->ul_Flags           = LOA_ReadULong(_ppc_Buffer);
        _pst_Properties->ul_OriginalTexture = LOA_ReadULong(_ppc_Buffer);
        _pst_Properties->ul_NativeTexture   = LOA_ReadULong(_ppc_Buffer);
        _pst_Properties->ul_OutputWidth     = LOA_ReadULong(_ppc_Buffer);
        _pst_Properties->ul_OutputHeight    = LOA_ReadULong(_ppc_Buffer);
        _pst_Properties->ul_OutputFormat    = LOA_ReadULong(_ppc_Buffer);
        _pst_Properties->ul_NbLevels        = LOA_ReadULong(_ppc_Buffer);
    }

    // Validate the properties
    TEX_XeValidateProperties(_pst_Properties);
}

// ------------------------------------------------------------------------------------------------
// Name   : TEX_XeSaveProperties
// Params : _pst_Properties : Xenon .TEX properties
// RetVal : None
// Descr. : Save some Xenon .TEX properties
// ------------------------------------------------------------------------------------------------
void TEX_XeSaveProperties(TEX_tdst_XenonFileTex* _pst_Properties)
{
#if defined(ACTIVE_EDITORS)
    ERR_X_Assert(_pst_Properties != NULL);

    ULONG ul_Version = 1;

    SAV_Buffer(&ul_Version,                          sizeof(ULONG));
    SAV_Buffer(&_pst_Properties->ul_Flags,           sizeof(ULONG));
    SAV_Buffer(&_pst_Properties->ul_OriginalTexture, sizeof(ULONG));
    SAV_Buffer(&_pst_Properties->ul_NativeTexture,   sizeof(ULONG));
    SAV_Buffer(&_pst_Properties->ul_OutputWidth,     sizeof(ULONG));
    SAV_Buffer(&_pst_Properties->ul_OutputHeight,    sizeof(ULONG));
    SAV_Buffer(&_pst_Properties->ul_OutputFormat,    sizeof(ULONG));
    SAV_Buffer(&_pst_Properties->ul_NbLevels,        sizeof(ULONG));
#endif
}

// ------------------------------------------------------------------------------------------------
// Name   : TEX_l_File_LoadDDS
// Params : _pc_Buf        : Buffer
//          _pst_Desc      : Texture description
//          _ul_FileLength : File length
// RetVal : Success
// Descr. : Load a texture from a DDS file
// ------------------------------------------------------------------------------------------------
LONG TEX_l_File_LoadDDS(char* _pc_Buf, TEX_tdst_File_Desc* _pst_Desc, ULONG _ul_FileLength)
{
    if(_pst_Desc->uw_DescFlags & TEX_Cuw_DF_Info)
    {
        if (!TEX_XeGetDDSFileInformation(_pc_Buf, _ul_FileLength, _pst_Desc))
            return 0;
    }

    if (!(_pst_Desc->uw_DescFlags & TEX_Cuw_DF_Content))
        return 1;

#if defined(ACTIVE_EDITORS)
    // Load a 32 BPP version for the editor to display
    if (_pst_Desc->uw_DescFlags & TEX_Cuw_DF_ConvertTo32BPP)
    {
        USHORT uwAllocWidth  = _pst_Desc->uw_Width;
        USHORT uwAllocHeight = _pst_Desc->uw_Height;

        if (_pst_Desc->uw_DescFlags & TEX_Cuw_DF_EditorUseXenonFile)
        {
            if (_pst_Desc->st_Tex.st_XeProperties.ul_NativeTexture == BIG_C_InvalidKey)
            {
                uwAllocWidth  = (USHORT)_pst_Desc->st_Tex.st_XeProperties.ul_OutputWidth;
                uwAllocHeight = (USHORT)_pst_Desc->st_Tex.st_XeProperties.ul_OutputHeight;
            }
        }

        TEX_M_File_Alloc(_pst_Desc->p_Bitmap, (uwAllocWidth * uwAllocHeight * sizeof(ULONG)), void);
        if (!TEX_XeConvertDDSFileToARGB32(_pc_Buf, _ul_FileLength, _pst_Desc))
        {
            TEX_M_File_Free(_pst_Desc->p_Bitmap);
            return 0;
        }
        return 1;
    }
#endif

    // Copy the file onto the bitmap so that the texture manager will be able to load the DDS from memory
    TEX_M_File_Alloc(_pst_Desc->p_Bitmap, _ul_FileLength, void);
    L_memcpy(_pst_Desc->p_Bitmap, _pc_Buf, _ul_FileLength);

    // SC: Load the content of the image so it will be written to the binarization buffer
    LOA_ReadCharArray(&_pc_Buf, NULL, _ul_FileLength);

    _pst_Desc->st_Tex.st_XeProperties.ul_FileSize = _ul_FileLength;

    return 1;
}

BOOL TEX_XeGetDDSFileInformation(void* _p_FileBuffer, ULONG _ul_FileLength, TEX_tdst_File_Desc* _pst_TexDesc)
{
    D3DXIMAGE_INFO stImageInfo;
    HRESULT hr;

    // We need a D3D device to load DDS files
    if (!GDI_b_IsXenonGraphics())
        return FALSE;

    // Xenon native texture?
    if (TEX_XeIsXenonNative(_p_FileBuffer))
    {
        ULONG ul_Width;
        ULONG ul_Height;

        TEX_XeGetNativeFileInformation(_p_FileBuffer, &ul_Width, &ul_Height);
        stImageInfo.Width  = ul_Width;
        stImageInfo.Height = ul_Height;
    }
    else
    {
        // Get DDS information
        hr = D3DXGetImageInfoFromFileInMemory(_p_FileBuffer, _ul_FileLength, &stImageInfo);
        XeValidateRet(SUCCEEDED(hr), FALSE, "Failed to get file information from a .DDS file");
    }

    // Fill the texture information
    _pst_TexDesc->uc_PaletteBPC    = 0;
    _pst_TexDesc->uw_PaletteLength = 0;
    _pst_TexDesc->uw_Width         = stImageInfo.Width;
    _pst_TexDesc->uw_Height        = stImageInfo.Height;
    _pst_TexDesc->uc_BPP           = 0x80;
    _pst_TexDesc->uc_FinalBPP      = 0x80;
    _pst_TexDesc->ul_RMask         = 0x000000ff;
    _pst_TexDesc->ul_GMask         = 0x0000ff00;
    _pst_TexDesc->ul_BMask         = 0x00ff0000;
    _pst_TexDesc->ul_AMask         = 0xff000000;

    return TRUE;
}

#if !defined(_XENON)
BOOL TEX_XeConvertXenonDDSFileToARGB32(void* _p_FileBuffer, ULONG _ul_FileLength, TEX_tdst_File_Desc* _pst_TexDesc)
{
    XeTexture_Descriptor* pDescriptor;
    BOOL bSuccess = FALSE;

    pDescriptor = new XeTexture_Descriptor();

    s_oXeTexturePacker.PrepareDescriptor(pDescriptor, _pst_TexDesc->uw_Width, _pst_TexDesc->uw_Height, 1, TEX_XTF_A8R8G8B8);

    if (s_oXeTexturePacker.UncompressTexture(_p_FileBuffer, _ul_FileLength, pDescriptor))
    {
        L_memcpy(_pst_TexDesc->p_Bitmap, pDescriptor->pRawContent->GetBuffer(), pDescriptor->pRawContent->GetBufferSize());

        bSuccess = TRUE;
    }

    delete pDescriptor;

    return bSuccess;
}
#endif

#if defined(ACTIVE_EDITORS)

typedef ULONG (*TEX_XeFilterFunc)(ULONG _ul_Color);

void TEX_XeFilterTexture(IDirect3DTexture9* _p_Tex, TEX_XeFilterFunc _pfn_Filter)
{
    D3DSURFACE_DESC stDesc;
    D3DLOCKED_RECT  stLock;
    HRESULT hr;
    ULONG ulMaxLevels = _p_Tex->GetLevelCount();
    ULONG ulLevel;
    ULONG ulOffset;

    for (ulLevel = 0; ulLevel < ulMaxLevels; ++ulLevel)
    {
        hr = _p_Tex->GetLevelDesc(ulLevel, &stDesc);
        XeValidate(SUCCEEDED(hr), "Unable to access a surface's description");

        hr = _p_Tex->LockRect(ulLevel, &stLock, NULL, 0);
        XeValidate(SUCCEEDED(hr), "Unable to lock a texture");
        if (SUCCEEDED(hr))
        {
            ULONG* pTexels = (ULONG*)stLock.pBits;
            stLock.Pitch >>= 2;

            for (ULONG y = 0; y < stDesc.Height; ++y)
            {
                for (ULONG x = 0; x < stDesc.Width; ++x)
                {
                    ulOffset          = (y * stLock.Pitch) + x;
                    pTexels[ulOffset] = _pfn_Filter(pTexels[ulOffset]);
                }
            }

            _p_Tex->UnlockRect(ulLevel);
        }
    }
}

ULONG TEX_XeNormalizeColor(ULONG _ul_Color)
{
    FLOAT fR, fG, fB;

    fR = (((FLOAT)(UCHAR)(_ul_Color >> 16)) / 127.5f) - 1.0f;
    fG = (((FLOAT)(UCHAR)(_ul_Color >> 8) ) / 127.5f) - 1.0f;
    fB = (((FLOAT)(UCHAR)(_ul_Color)      ) / 127.5f) - 1.0f;

    FLOAT fInvLength = fSqrt((fR * fR) + (fG * fG) + (fB * fB));
    if (fInvLength <= 0.0005f)
        return _ul_Color;

    fInvLength = 1.0f / fInvLength;
    fR *= fInvLength;
    fG *= fInvLength;
    fB *= fInvLength;

    fR = MATH_f_FloatLimit(fR, -1.0f, 1.0f);
    fG = MATH_f_FloatLimit(fG, -1.0f, 1.0f);
    fB = MATH_f_FloatLimit(fB, -1.0f, 1.0f);

    return (_ul_Color & 0xff000000)                             |
           (((ULONG)((fR + 1.0f) * 127.5f) << 16) & 0x00ff0000) |
           (((ULONG)((fG + 1.0f) * 127.5f) <<  8) & 0x0000ff00) |
           (((ULONG)((fB + 1.0f) * 127.5f)      ) & 0x000000ff);
}

// -> Size of one scanline for texture flipping (large enough for one line of 2048x2048 DXT5)
#define FLIP_SCRATCH_BUFFER_SIZE (32 * 1024)

static UCHAR s_aucFlipScratchBuffer[FLIP_SCRATCH_BUFFER_SIZE];

// ------------------------------------------------------------------------------------------------
// Name   : TEX_XeFlipSurfaceInPlace_Generic
// Params : ..
// RetVal : ..
// Descr. : In-place flip a generic surface
// ------------------------------------------------------------------------------------------------
void TEX_XeFlipSurfaceInPlace_Generic(void* _pBuffer, DWORD _dwWidth, DWORD _dwHeight, DWORD _dwPitch, DWORD _dwBPP)
{
    ERR_X_Assert(((_dwWidth * _dwBPP) <= FLIP_SCRATCH_BUFFER_SIZE) && "Flip scratch buffer is too small");

    UCHAR* pulPixels = (UCHAR*)_pBuffer;
  
    for (ULONG j = 0; j < _dwHeight / 2; ++j)
    {
        L_memcpy(s_aucFlipScratchBuffer,                     &pulPixels[j * _dwPitch],                   _dwWidth * _dwBPP);
        L_memcpy(&pulPixels[j * _dwPitch],                   &pulPixels[(_dwHeight - j - 1) * _dwPitch], _dwWidth * _dwBPP);
        L_memcpy(&pulPixels[(_dwHeight - j - 1) * _dwPitch], s_aucFlipScratchBuffer,                     _dwWidth * _dwBPP);
    }
}

void TEX_XeFlipTexture(IDirect3DTexture9* _p_Tex)
{
    D3DSURFACE_DESC stDesc;
    D3DLOCKED_RECT  stLock;
    HRESULT hr;
    ULONG ulMaxLevels = _p_Tex->GetLevelCount();
    ULONG ulLevel;
 
    for (ulLevel = 0; ulLevel < ulMaxLevels; ++ulLevel)
    {
        hr = _p_Tex->GetLevelDesc(ulLevel, &stDesc);
        XeValidate(SUCCEEDED(hr), "Unable to access a surface's description");

        hr = _p_Tex->LockRect(ulLevel, &stLock, NULL, 0);
        XeValidate(SUCCEEDED(hr), "Unable to lock a texture");
        if (SUCCEEDED(hr))
        {
            TEX_XeFlipSurfaceInPlace_Generic(stLock.pBits, stDesc.Width, stDesc.Height, stLock.Pitch, 4);

            _p_Tex->UnlockRect(ulLevel);
        }
    }
}
BOOL TEX_XeGenerateDDS(TEX_tdst_XenonFileTex* _p_SrcTex, CHAR* _sz_DirName, CHAR* _sz_Name)
{
    ERR_X_Assert(_p_SrcTex != NULL);

    HRESULT hr;
    ULONG ulFilePos;
    ULONG ulSrcFileSize;
    char* pSrcFileBuffer;
    char* pSrcBuffer;

    if (!GDI_b_IsXenonGraphics())
        return FALSE;

    if (_p_SrcTex->ul_OriginalTexture == BIG_C_InvalidKey)
        return FALSE;

    ulFilePos = BIG_ul_SearchKeyToPos(_p_SrcTex->ul_OriginalTexture);
    if (ulFilePos == BIG_C_InvalidIndex)
        return FALSE;

    pSrcFileBuffer = BIG_pc_ReadFileTmpMustFree(ulFilePos, &ulSrcFileSize);
    ulSrcFileSize -= sizeof(TEX_tdst_File_Params);
    pSrcBuffer     = pSrcFileBuffer;
    if (LOA_IsBinaryData())
        pSrcBuffer += sizeof(TEX_tdst_File_Params);

    if (!(_p_SrcTex->ul_Flags & TEX_Xe_IsNormalMap) && (_p_SrcTex->ul_OutputFormat == TEX_XTF_AUTO))
    {
        D3DXIMAGE_INFO oImageInfo;
        hr = D3DXGetImageInfoFromFileInMemory(pSrcBuffer, ulSrcFileSize, &oImageInfo);

        if (oImageInfo.Format == D3DFMT_R8G8B8)
        {
            _p_SrcTex->ul_OutputFormat = TEX_XTF_DXT1;
            ERR_OutputDebugString("[TEX] Forcing texture '%s' to DXT1\n", _sz_Name);
        }
        else
        {
            _p_SrcTex->ul_OutputFormat = TEX_XTF_DXT5;
            ERR_OutputDebugString("[TEX] Forcing texture '%s' to DXT5\n", _sz_Name);
        }
    }

    // Automatically convert normal maps to the DXN format
    if ((_p_SrcTex->ul_Flags & TEX_Xe_IsNormalMap) && (_p_SrcTex->ul_OutputFormat == TEX_XTF_AUTO))
    {
        _p_SrcTex->ul_OutputFormat = TEX_XTF_DXN;
        ERR_OutputDebugString("[TEX] Forcing texture '%s' to DXN\n", _sz_Name);
    }

    BOOL bSuccess;

    if (s_oXeTexturePacker.IsValid())
    {
        bSuccess = TEX_XeGenerateDDS_Xenon(_p_SrcTex, pSrcBuffer, ulSrcFileSize, _sz_DirName, _sz_Name);
    }
    else
    {
        bSuccess = TEX_XeGenerateDDS_PC(_p_SrcTex, pSrcBuffer, ulSrcFileSize, _sz_DirName, _sz_Name);
    }

    L_free(pSrcFileBuffer);

    return bSuccess;
}

BOOL TEX_XeGenerateDDS_Xenon(TEX_tdst_XenonFileTex* _p_SrcTex, CHAR* _pSrcBuffer, ULONG _ulSrcBufferSize, CHAR* _sz_DirName, CHAR* _sz_Name)
{
    IDirect3DTexture9*    pTexture = NULL;
    IDirect3DSurface9*    pSurface = NULL;
    XeTexture_Descriptor* pDescriptor;
    HRESULT hr;

    // Read to a scratch texture
    hr = D3DXCreateTexture(g_oXeRenderer.GetDevice(), _p_SrcTex->ul_OutputWidth, _p_SrcTex->ul_OutputHeight, 
                           1, 0, D3DFMT_A8R8G8B8, D3DPOOL_SCRATCH, &pTexture);
    if (FAILED(hr))
    {
        return FALSE;
    }

    hr = pTexture->GetSurfaceLevel(0, &pSurface);
    XeValidate(SUCCEEDED(hr), "Unable to access a surface");

    // Load the first level from memory
    hr = D3DXLoadSurfaceFromFileInMemory(pSurface, NULL, NULL, _pSrcBuffer, _ulSrcBufferSize, NULL, 
                                         D3DX_FILTER_TRIANGLE, 0, NULL);
    if (FAILED(hr))
    {
        SAFE_RELEASE(pSurface);
        SAFE_RELEASE(pTexture);
        return FALSE;
    }

    D3DLOCKED_RECT st_Rect;
    pSurface->LockRect(&st_Rect, NULL, 0);

    pDescriptor = new XeTexture_Descriptor();

    s_oXeTexturePacker.PrepareDescriptor(pDescriptor, _p_SrcTex->ul_OutputWidth, _p_SrcTex->ul_OutputHeight,
                                         _p_SrcTex->ul_NbLevels, _p_SrcTex->ul_OutputFormat);

    s_oXeTexturePacker.CompressTexture(_p_SrcTex->ul_OutputWidth, _p_SrcTex->ul_OutputHeight,
                                       st_Rect.pBits, pDescriptor);

    pSurface->UnlockRect();
    pSurface->Release();
    pTexture->Release();

    // Generate a temporary file name to save the texture on disk
    CHAR szTempPath[MAX_PATH];
    CHAR szTempFileName[512];
    GetTempPath(MAX_PATH, szTempPath);
    GetTempFileName(szTempPath, "XTF", 0, szTempFileName);

    // Save the texture to a .DDS file
    FILE* pFile = fopen(szTempFileName, "wb");
    fwrite(pDescriptor->pRawContent->GetBuffer(), 1, pDescriptor->pRawContent->GetBufferSize(), pFile);
    fclose(pFile);

    delete pDescriptor;

    // Fetch information about the native texture so we can extract useful flags
    TEX_tdst_File_Params stOriginalFileParams;
    TEX_File_GetParams(&stOriginalFileParams, BIG_ul_SearchKeyToFat(_p_SrcTex->ul_OriginalTexture));

    // Import the file into the BF
    if (EDI_gb_ComputeMap)
    {
        // SC: We are binarizing so we have to save the file manually

        ULONG ulFileSize;
        FILE* pFile;

        pFile = fopen(szTempFileName, "rb");
        if (pFile != NULL)
        {
            fseek(pFile, 0, SEEK_END);
            ulFileSize = ftell(pFile);
            fseek(pFile, 0, SEEK_SET);

            void* pFileBuffer = MEM_p_Alloc(ulFileSize);

            fread(pFileBuffer, ulFileSize, 1, pFile);
            fclose(pFile);

            TEX_tdst_File_Params stTexParams;
            L_memset(&stTexParams, 0, sizeof(TEX_tdst_File_Params));
            stTexParams.ul_Mark      = 0xffffffff;
            stTexParams.uc_Type      = TEX_FP_XeDDSFile;
            stTexParams.uc_Format    = TEX_FP_32bpp;
            stTexParams.uw_Width     = (USHORT)_p_SrcTex->ul_OutputWidth;
            stTexParams.uw_Height    = (USHORT)_p_SrcTex->ul_OutputHeight;
            stTexParams.ul_Color     = 32;
            stTexParams.uw_Flags     = (stOriginalFileParams.uw_Flags & TEX_FP_ThisIsAFont);
            stTexParams.ul_Params[3] = 0xC0DEC0DE;
            stTexParams.ul_Params[2] = 0x00FF00FF;
            stTexParams.ul_Params[1] = 0xCAD01234;
            stTexParams.ul_Params[0] = stOriginalFileParams.ul_Params[0];

            SAV_Begin(_sz_DirName, _sz_Name);
            SAV_Buffer(pFileBuffer, ulFileSize);
            SAV_Buffer(&stTexParams, sizeof(TEX_tdst_File_Params));
            SAV_ul_End();

            MEM_Free(pFileBuffer);
        }
    }
    else
    {
        TEX_b_File_Import(_sz_DirName, _sz_Name, szTempFileName);
    }

    ULONG ulDirIndex = BIG_ul_SearchDir(_sz_DirName);
    if (ulDirIndex != BIG_C_InvalidIndex)
    {
        ULONG ulFileIndex = BIG_ul_SearchFile(ulDirIndex, _sz_Name);

        if (ulFileIndex != BIG_C_InvalidIndex)
        {
            _p_SrcTex->ul_NativeTexture = BIG_FileKey(ulFileIndex);

            // Add the font descriptor if any
            if (!EDI_gb_ComputeMap && (stOriginalFileParams.uw_Flags & TEX_FP_ThisIsAFont))
            {
                TEX_tdst_File_Params stNewParams;
                TEX_File_GetParams(&stNewParams, ulFileIndex);
                stNewParams.uw_Flags    |= TEX_FP_ThisIsAFont;
                stNewParams.ul_Params[0] = stOriginalFileParams.ul_Params[0];
                TEX_File_SetParams(&stNewParams, ulFileIndex, FALSE);
            }
        }
    }

    // Clean up
    DeleteFile(szTempFileName);

    return TRUE;
}

BOOL TEX_XeGenerateDDS_PC(TEX_tdst_XenonFileTex* _p_SrcTex, CHAR* _pSrcBuffer, ULONG _ulSrcBufferSize, CHAR* _sz_DirName, CHAR* _sz_Name)
{
    IDirect3DTexture9* pTexture       = NULL;
    IDirect3DSurface9* pSurface       = NULL;
    IDirect3DTexture9* pNativeTexture = NULL;
    ID3DXBuffer*       pTempBuffer    = NULL;
    CHAR szTempFileName[512];
    HRESULT hr;

    // Read to a scratch texture
    hr = D3DXCreateTexture(g_oXeRenderer.GetDevice(), _p_SrcTex->ul_OutputWidth, _p_SrcTex->ul_OutputHeight, 
                           _p_SrcTex->ul_NbLevels, 0, D3DFMT_A8R8G8B8, D3DPOOL_SCRATCH, &pTexture);
    if (FAILED(hr))
    {
        return FALSE;
    }

    hr = pTexture->GetSurfaceLevel(0, &pSurface);
    XeValidate(SUCCEEDED(hr), "Unable to access a surface");

    // Load the first level from memory
    hr = D3DXLoadSurfaceFromFileInMemory(pSurface, NULL, NULL, _pSrcBuffer, _ulSrcBufferSize, NULL, 
                                         D3DX_FILTER_TRIANGLE, 0, NULL);
    if (FAILED(hr))
    {
        SAFE_RELEASE(pSurface);
        SAFE_RELEASE(pTexture);
        return FALSE;
    }
    SAFE_RELEASE(pSurface);

    // Filter the texture to generate the sub levels
    if (_p_SrcTex->ul_NbLevels != 1)
    {
        hr = D3DXFilterTexture(pTexture, NULL, 0, D3DX_FILTER_TRIANGLE);
        if (FAILED(hr))
        {
            SAFE_RELEASE(pTexture);
            return FALSE;
        }
    }

    // Flip the texture so that it will be right for Jade
    TEX_XeFlipTexture(pTexture);

    // Normalize all levels if necessary
    if (_p_SrcTex->ul_Flags & TEX_Xe_IsNormalMap)
    {
        TEX_XeFilterTexture(pTexture, TEX_XeNormalizeColor);
    }

    hr = D3DXSaveTextureToFileInMemory(&pTempBuffer, D3DXIFF_DDS, pTexture, NULL);
    XeValidate(SUCCEEDED(hr), "Failed to save the file in memory");

    SAFE_RELEASE(pTexture);

    // Create a texture in the wanted format so we can save it
    hr = D3DXCreateTextureFromFileInMemoryEx(g_oXeRenderer.GetDevice(), pTempBuffer->GetBufferPointer(), 
                                             pTempBuffer->GetBufferSize(), _p_SrcTex->ul_OutputWidth,
                                             _p_SrcTex->ul_OutputHeight, _p_SrcTex->ul_NbLevels,
                                             0, TEX_XeConvertJadeXTFToD3DFORMAT(_p_SrcTex->ul_OutputFormat),
                                             D3DPOOL_SCRATCH, D3DX_FILTER_NONE, D3DX_FILTER_NONE,
                                             0, NULL, NULL, &pNativeTexture);
    XeValidate(SUCCEEDED(hr), "Failed to create the texture in the native format");

    SAFE_RELEASE(pTempBuffer);

    // Generate a temporary file name to save the texture on disk
    CHAR szTempPath[MAX_PATH];
    GetTempPath(MAX_PATH, szTempPath);
    GetTempFileName(szTempPath, "XTF", 0, szTempFileName);

    // Save the texture to a .DDS file
    hr = D3DXSaveTextureToFile(szTempFileName, D3DXIFF_DDS, pNativeTexture, NULL);
    XeValidate(SUCCEEDED(hr), "Failed to save the texture");

    SAFE_RELEASE(pNativeTexture);

    // Fetch information about the native texture so we can extract useful flags
    TEX_tdst_File_Params stOriginalFileParams;
    TEX_File_GetParams(&stOriginalFileParams, BIG_ul_SearchKeyToFat(_p_SrcTex->ul_OriginalTexture));

    // Import the file into the BF
    if (EDI_gb_ComputeMap)
    {
        // SC: We are binarizing so we have to save the file manually

        ULONG ulFileSize;
        FILE* pFile;

        pFile = fopen(szTempFileName, "rb");
        if (pFile != NULL)
        {
            fseek(pFile, 0, SEEK_END);
            ulFileSize = ftell(pFile);
            fseek(pFile, 0, SEEK_SET);

            void* pFileBuffer = MEM_p_Alloc(ulFileSize);

            fread(pFileBuffer, ulFileSize, 1, pFile);
            fclose(pFile);

            TEX_tdst_File_Params stTexParams;
            L_memset(&stTexParams, 0, sizeof(TEX_tdst_File_Params));
            stTexParams.ul_Mark      = 0xffffffff;
            stTexParams.uc_Type      = TEX_FP_XeDDSFile;
            stTexParams.uc_Format    = TEX_FP_32bpp;
            stTexParams.uw_Width     = (USHORT)_p_SrcTex->ul_OutputWidth;
            stTexParams.uw_Height    = (USHORT)_p_SrcTex->ul_OutputHeight;
            stTexParams.ul_Color     = 32;
            stTexParams.uw_Flags     = (stOriginalFileParams.uw_Flags & TEX_FP_ThisIsAFont);
            stTexParams.ul_Params[3] = 0xC0DEC0DE;
            stTexParams.ul_Params[2] = 0x00FF00FF;
            stTexParams.ul_Params[1] = 0xCAD01234;
            stTexParams.ul_Params[0] = stOriginalFileParams.ul_Params[0];

            SAV_Begin(_sz_DirName, _sz_Name);
            SAV_Buffer(pFileBuffer, ulFileSize);
            SAV_Buffer(&stTexParams, sizeof(TEX_tdst_File_Params));
            SAV_ul_End();

            MEM_Free(pFileBuffer);
        }
    }
    else
    {
        TEX_b_File_Import(_sz_DirName, _sz_Name, szTempFileName);
    }

    ULONG ulDirIndex = BIG_ul_SearchDir(_sz_DirName);
    if (ulDirIndex != BIG_C_InvalidIndex)
    {
        ULONG ulFileIndex = BIG_ul_SearchFile(ulDirIndex, _sz_Name);

        if (ulFileIndex != BIG_C_InvalidIndex)
        {
            _p_SrcTex->ul_NativeTexture = BIG_FileKey(ulFileIndex);

            // Add the font descriptor if any
            if (!EDI_gb_ComputeMap && (stOriginalFileParams.uw_Flags & TEX_FP_ThisIsAFont))
            {
                TEX_tdst_File_Params stNewParams;
                TEX_File_GetParams(&stNewParams, ulFileIndex);
                stNewParams.uw_Flags    |= TEX_FP_ThisIsAFont;
                stNewParams.ul_Params[0] = stOriginalFileParams.ul_Params[0];
                TEX_File_SetParams(&stNewParams, ulFileIndex, FALSE);
            }
        }
    }

    // Clean up
    DeleteFile(szTempFileName);

    return TRUE;
}

void TEX_XeFlipCubeTexture(IDirect3DCubeTexture9* _p_Tex)
{
	D3DSURFACE_DESC stDesc;
	D3DLOCKED_RECT  stLock;
	HRESULT hr;
	ULONG ulMaxLevels = _p_Tex->GetLevelCount();
	ULONG ulLevel;

	for(int nFace = 0; nFace < CUBEMAP_FACE_NUM; ++nFace)
	{
		for (ulLevel = 0; ulLevel < ulMaxLevels; ++ulLevel)
		{
			hr = _p_Tex->GetLevelDesc(ulLevel, &stDesc);
			XeValidate(SUCCEEDED(hr), "Unable to access a surface's description");

			hr = _p_Tex->LockRect((D3DCUBEMAP_FACES) nFace, ulLevel, &stLock, NULL, 0);
			XeValidate(SUCCEEDED(hr), "Unable to lock a texture");
			if (SUCCEEDED(hr))
			{
				TEX_XeFlipSurfaceInPlace_Generic(stLock.pBits, stDesc.Width, stDesc.Height, stLock.Pitch, 4);

				_p_Tex->UnlockRect((D3DCUBEMAP_FACES) nFace, ulLevel);
			}
		}
	}
}

BOOL TEX_XeGenerateCBM(TEX_tdst_XenonCubeMapFileTex* _p_SrcTex, CHAR* _sz_DirName, CHAR* _sz_Name, BOOL _b_Export)
{
	ERR_X_Assert(_p_SrcTex != NULL);
	ERR_X_Assert(_p_SrcTex->ul_Flags & TEX_Xe_IsCubeMap);

	IDirect3DCubeTexture9*	pTexture       = NULL;
	IDirect3DSurface9*		pSurface       = NULL;
	IDirect3DCubeTexture9*	pNativeTexture = NULL;
	ID3DXBuffer*			pTempBuffer    = NULL;
	HRESULT					hr;
	ULONG					ulFilePos;
	ULONG					ulSrcFileSize;
	char*					pSrcFileBuffer;
	char*					pSrcBuffer;
	char					szFileName[256];

	if (!GDI_b_IsXenonGraphics())
		return FALSE;


	// Read to a scratch texture
	hr = D3DXCreateCubeTexture(g_oXeRenderer.GetDevice(), _p_SrcTex->ul_OutputSize,
		_p_SrcTex->ul_NbLevels, 0, D3DFMT_A8R8G8B8, D3DPOOL_SCRATCH, &pTexture);
	
	if (FAILED(hr))
		return FALSE;

	//loop for each faces
	for(int nFace = 0; nFace < CUBEMAP_FACE_NUM; ++nFace)
	{
		if (_p_SrcTex->ul_OriginalTextures[nFace] == BIG_C_InvalidKey)
			return FALSE;

		ulFilePos = BIG_ul_SearchKeyToPos(_p_SrcTex->ul_OriginalTextures[nFace]);
		if (ulFilePos == BIG_C_InvalidIndex)
			return FALSE;

		pSrcFileBuffer = BIG_pc_ReadFileTmpMustFree(ulFilePos, &ulSrcFileSize);
		ulSrcFileSize -= sizeof(TEX_tdst_File_Params);
		pSrcBuffer     = pSrcFileBuffer;
		if (LOA_IsBinaryData())
			pSrcBuffer += sizeof(TEX_tdst_File_Params);

		//retrieves CubeMap Surface
		hr = pTexture->GetCubeMapSurface((D3DCUBEMAP_FACES)nFace, 0, &pSurface);

		XeValidate(SUCCEEDED(hr), "Unable to access a surface");

		// Load the first level from memory into CubeMap face
		hr = D3DXLoadSurfaceFromFileInMemory(pSurface, NULL, NULL, pSrcBuffer, ulSrcFileSize, NULL, 
			D3DX_FILTER_TRIANGLE, 0, NULL);
		if (FAILED(hr))
		{
			SAFE_RELEASE(pSurface);
			SAFE_RELEASE(pTexture);
			L_free(pSrcFileBuffer);
			return FALSE;
		}
		SAFE_RELEASE(pSurface);

		L_free(pSrcFileBuffer);
	}

	// Filter the texture to generate the sub levels
	if (_p_SrcTex->ul_NbLevels != 1)
	{
		hr = D3DXFilterTexture(pTexture, NULL, 0, D3DX_FILTER_TRIANGLE);
		if (FAILED(hr))
		{
			SAFE_RELEASE(pTexture);
			return FALSE;
		}
	}

	// Flip the texture so that it will be right for Jade
	TEX_XeFlipCubeTexture(pTexture);

	hr = D3DXSaveTextureToFileInMemory(&pTempBuffer, D3DXIFF_DDS, pTexture, NULL);
	XeValidate(SUCCEEDED(hr), "Failed to save the file in memory");

	// Create a texture in the wanted format so we can save it
	hr = D3DXCreateCubeTextureFromFileInMemoryEx(g_oXeRenderer.GetDevice(), pTempBuffer->GetBufferPointer(), 
		pTempBuffer->GetBufferSize(), _p_SrcTex->ul_OutputSize,_p_SrcTex->ul_NbLevels,
		0, TEX_XeConvertJadeXTFToD3DFORMAT(_p_SrcTex->ul_OutputFormat),
		D3DPOOL_SCRATCH, D3DX_FILTER_NONE, D3DX_FILTER_NONE,
		0, NULL, NULL, &pNativeTexture);
	XeValidate(SUCCEEDED(hr), "Failed to create the texture in the native format");

	SAFE_RELEASE(pTempBuffer);


	CHAR szPath[MAX_PATH];

	if(_b_Export)
	{
		//concatenate dir path and file name to obtain the full path
		strcpy(szFileName, _sz_DirName);
		strcat(szFileName, "/");
		strcat(szFileName, _sz_Name);
	}
	else
	{
		// Generate a temporary file name to save the texture on disk
		GetTempPath(MAX_PATH, szPath);
		GetTempFileName(szPath, "XTF", 0, szFileName);
	}

	// Save the texture to a .DDS file
	hr = D3DXSaveTextureToFile(szFileName, D3DXIFF_DDS, pNativeTexture, NULL);
	XeValidate(SUCCEEDED(hr), "Failed to save the texture");

	SAFE_RELEASE(pNativeTexture);

	if(!_b_Export)
	{
		// Import the file into the BF
		TEX_b_File_Import(_sz_DirName, _sz_Name, szFileName);

		ULONG ulDirIndex = BIG_ul_SearchDir(_sz_DirName);
		if (ulDirIndex != BIG_C_InvalidIndex)
		{
			ULONG ulFileIndex = BIG_ul_SearchFile(ulDirIndex, _sz_Name);

			if (ulFileIndex != BIG_C_InvalidIndex)
			{
				_p_SrcTex->ul_NativeTexture = BIG_FileKey(ulFileIndex);
			}
		}

		// Clean up
		DeleteFile(szFileName);
	}

	return	TRUE;
}

BOOL TEX_XeConvertDDSFileToARGB32(void* _p_FileBuffer, ULONG _ul_FileLength, TEX_tdst_File_Desc* _pst_TexDesc)
{
    ERR_X_Assert(_pst_TexDesc->p_Bitmap != NULL);

    // We need a D3D device to load DDS files
    if (!GDI_b_IsXenonGraphics())
        return FALSE;

    // Handle Xenon Native Textures
    if (TEX_XeIsXenonNative(_p_FileBuffer))
        return TEX_XeConvertXenonDDSFileToARGB32(_p_FileBuffer, _ul_FileLength, _pst_TexDesc);

    IDirect3DDevice9*  pDevice     = g_oXeRenderer.GetDevice();
    IDirect3DSurface9* pSurface    = NULL;
    D3DFORMAT          eSrcFormat  = D3DFMT_A8R8G8B8;
    D3DLOCKED_RECT stLockedRect;
    HRESULT hr;

    if ((_pst_TexDesc->uw_DescFlags & TEX_Cuw_DF_EditorUseXenonFile) && 
        ((_pst_TexDesc->st_Tex.st_XeProperties.ul_NativeTexture == BIG_C_InvalidKey) ||
         (_pst_TexDesc->st_Tex.st_XeProperties.ul_NativeTexture == 0)))
    {
        // Convert the surface to the output format
        eSrcFormat = TEX_XeConvertJadeXTFToD3DFORMAT(_pst_TexDesc->st_Tex.st_XeProperties.ul_OutputFormat);

        IDirect3DSurface9* pTempSurface = NULL;

        _pst_TexDesc->uw_Width  = (USHORT)_pst_TexDesc->st_Tex.st_XeProperties.ul_OutputWidth;
        _pst_TexDesc->uw_Height = (USHORT)_pst_TexDesc->st_Tex.st_XeProperties.ul_OutputHeight;

        // Create a scratch surface to load the texture to
        hr = pDevice->CreateOffscreenPlainSurface(_pst_TexDesc->uw_Width, _pst_TexDesc->uw_Height, 
                                                  eSrcFormat, D3DPOOL_SCRATCH, &pTempSurface, NULL);
        XeValidateRet((SUCCEEDED(hr) && (pTempSurface != NULL)), FALSE, "Unable to create a scratch buffer");

        hr = pDevice->CreateOffscreenPlainSurface(_pst_TexDesc->uw_Width, _pst_TexDesc->uw_Height, 
            D3DFMT_A8R8G8B8, D3DPOOL_SCRATCH, &pSurface, NULL);
        if (FAILED(hr))
        {
            SAFE_RELEASE(pTempSurface);
            XeValidateRet((SUCCEEDED(hr) && (pSurface != NULL)), FALSE, "Unable to create a scratch buffer");
        }

        // Load and convert the surface
        hr = D3DXLoadSurfaceFromFileInMemory(pTempSurface, NULL, NULL, _p_FileBuffer, _ul_FileLength, 
            NULL, D3DX_FILTER_BOX, 0, NULL);
        if (FAILED(hr))
        {
            SAFE_RELEASE(pTempSurface);
            SAFE_RELEASE(pSurface);
            XeValidateRet(SUCCEEDED(hr), FALSE, "Failed to load the surface");
        }

        // Convert to a A8R8G8B8 surface
        hr = D3DXLoadSurfaceFromSurface(pSurface, NULL, NULL, pTempSurface, NULL, NULL, D3DX_FILTER_BOX, 0);
        if (FAILED(hr))
        {
            SAFE_RELEASE(pTempSurface);
            SAFE_RELEASE(pSurface);
            XeValidateRet(SUCCEEDED(hr), FALSE, "Failed to convert the surface");
        }

        SAFE_RELEASE(pTempSurface);
    }

    if (pSurface == NULL)
    {
        // Create a scratch surface to load the texture to
        hr = pDevice->CreateOffscreenPlainSurface(_pst_TexDesc->uw_Width, _pst_TexDesc->uw_Height,
                                                  D3DFMT_A8R8G8B8, D3DPOOL_SCRATCH, &pSurface, NULL);
        XeValidateRet((SUCCEEDED(hr) && (pSurface != NULL)), FALSE, "Unable to create a scratch buffer");

        // Load the surface as-is
        hr = D3DXLoadSurfaceFromFileInMemory(pSurface, NULL, NULL, _p_FileBuffer, _ul_FileLength, 
                                             NULL, D3DX_FILTER_NONE, 0, NULL);
        if (FAILED(hr))
        {
            SAFE_RELEASE(pSurface);
            XeValidateRet(SUCCEEDED(hr), FALSE, "Failed to load the surface");
        }
    }

    // Copy the surface onto the bitmap buffer
    hr = pSurface->LockRect(&stLockedRect, NULL, D3DLOCK_READONLY);
    ERR_X_Assert(SUCCEEDED(hr) && (stLockedRect.pBits != NULL));
    {
        ULONG* pSrc  = (ULONG*)stLockedRect.pBits;
        ULONG* pDest = (ULONG*)_pst_TexDesc->p_Bitmap;
        ULONG i, j;

        for (j = 0; j < _pst_TexDesc->uw_Height; ++j)
        {
            for (i = 0; i < _pst_TexDesc->uw_Width; ++i)
            {
                pDest[((_pst_TexDesc->uw_Height - j - 1) * _pst_TexDesc->uw_Width) + i] = *pSrc;
                ++pSrc;
            }
        }
    }
    hr = pSurface->UnlockRect();
    ERR_X_Assert(SUCCEEDED(hr));

    // Clean up
    SAFE_RELEASE(pSurface);

    return TRUE;
}

#endif

BOOL TEX_XeIsXenonNative(void* _p_FileBuffer)
{
    ERR_X_Assert(_p_FileBuffer != NULL);

    ULONG ul_Magic = *(ULONG*)_p_FileBuffer;
    SwapDWord(&ul_Magic);

    return (ul_Magic == XE_TEXTURE_2D);
}

void TEX_XeGetNativeFileInformation(void* _p_FileBuffer, ULONG* _pul_Width, ULONG* _pul_Height)
{
    ERR_X_Assert(_p_FileBuffer != NULL);

    ULONG* pul_Buffer = (ULONG*)_p_FileBuffer;
    ULONG  ul_Magic   = *pul_Buffer++;
    SwapDWord(&ul_Magic);
    ERR_X_Assert(ul_Magic == XE_TEXTURE_2D);

    *_pul_Width  = *pul_Buffer++; SwapDWord(_pul_Width);
    *_pul_Height = *pul_Buffer++; SwapDWord(_pul_Height);
}

#if defined(ACTIVE_EDITORS)

static UCHAR TEX_BAD_TGA[] = 
{
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x20, 0x08, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 
    0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 
    0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 
    0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 
    0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 
    0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0xff, 0x80, 
    0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 
    0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 
    0x40, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 
    0x40, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x52, 0x55, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x2d, 0x58, 0x46, 0x49, 0x4c, 0x45, 0x2e, 0x00, 
};

static UCHAR TEX_BAD_DDS[] =
{
    0x44, 0x32, 0x4b, 0x4b, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x18, 0x28, 0x01, 0x86, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 0xff, 0xa0, 0x80, 0xa0, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 0xff, 0x40, 0x80, 0xff, 0xff, 0xff, 0x80, 0x40, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

void TEX_ReplaceAllTGAs(void)
{
    TEX_tdst_File_Params stParams;
    CHAR  szFileName[512];
    CHAR  szFilePath[1024];
    ULONG i;
    ULONG ulNewIndex;
    ULONG ulFileSize;
    CHAR* pcBuffer;

    for (i = 0; i < BIG_gst.st_ToSave.ul_MaxFile; ++i)
    {
        if (BIG_FileKey(i) != BIG_C_InvalidKey)
        {
            strcpy(szFileName, BIG_NameFile(i));
            strlwr(szFileName);

            if (strstr(szFileName, ".tga") != NULL)
            {
                pcBuffer = BIG_pc_ReadFileTmp(BIG_PosFile(i), &ulFileSize);
                if ((pcBuffer != NULL) && (ulFileSize > sizeof(TEX_tdst_File_Params)))
                {
                    L_memcpy(&stParams, pcBuffer + (ulFileSize - sizeof(TEX_tdst_File_Params)), sizeof(TEX_tdst_File_Params));

                    stParams.uw_Width  = 8;
                    stParams.uw_Height = 8;

                    BIG_ComputeFullName(BIG_ParentFile(i), szFilePath);

                    SAV_Begin(szFilePath, szFileName);
                    SAV_Buffer(TEX_BAD_TGA, sizeof(TEX_BAD_TGA));
                    SAV_Buffer(&stParams, sizeof(TEX_tdst_File_Params));
                    ulNewIndex = SAV_ul_End();
                }
            }
        }
    }
}

void TEX_ReplaceAllDDSs(void)
{
    TEX_tdst_File_Params stParams;
    CHAR  szFileName[512];
    CHAR  szFilePath[1024];
    ULONG i;
    ULONG ulNewIndex;
    ULONG ulFileSize;
    CHAR* pcBuffer;

    for (i = 0; i < BIG_gst.st_ToSave.ul_MaxFile; ++i)
    {
        if (BIG_FileKey(i) != BIG_C_InvalidKey)
        {
            strcpy(szFileName, BIG_NameFile(i));
            strlwr(szFileName);

            if (strstr(szFileName, ".dds") != NULL)
            {
                pcBuffer = BIG_pc_ReadFileTmp(BIG_PosFile(i), &ulFileSize);
                if ((pcBuffer != NULL) && (ulFileSize > sizeof(TEX_tdst_File_Params)))
                {
                    L_memcpy(&stParams, pcBuffer + (ulFileSize - sizeof(TEX_tdst_File_Params)), sizeof(TEX_tdst_File_Params));

                    stParams.uw_Width  = 8;
                    stParams.uw_Height = 8;

                    BIG_ComputeFullName(BIG_ParentFile(i), szFilePath);

                    SAV_Begin(szFilePath, szFileName);
                    SAV_Buffer(TEX_BAD_DDS, sizeof(TEX_BAD_DDS));
                    SAV_Buffer(&stParams, sizeof(TEX_tdst_File_Params));
                    ulNewIndex = SAV_ul_End();
                }
            }
        }
    }
}

#endif

#endif
